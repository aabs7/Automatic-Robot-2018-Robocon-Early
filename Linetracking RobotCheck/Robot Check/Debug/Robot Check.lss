
Robot Check.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800200  000017f8  0000188c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800274  00800274  00001900  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000381f  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014e6  00000000  00000000  0000542f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001468  00000000  00000000  00006915  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000884  00000000  00000000  00007d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001479  00000000  00000000  00008604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016bd  00000000  00000000  00009a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000b13a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__vector_1>
       6:	00 00       	nop
       8:	d9 c0       	rjmp	.+434    	; 0x1bc <__vector_2>
       a:	00 00       	nop
       c:	fe c0       	rjmp	.+508    	; 0x20a <__vector_3>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__vector_4>
      12:	00 00       	nop
      14:	48 c1       	rjmp	.+656    	; 0x2a6 <__vector_5>
      16:	00 00       	nop
      18:	6d c1       	rjmp	.+730    	; 0x2f4 <__vector_6>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	72 c1       	rjmp	.+740    	; 0x342 <__vector_23>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__vector_25>
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_36>
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__vector_51>
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_54>
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	7b 07       	cpc	r23, r27

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e8 ef       	ldi	r30, 0xF8	; 248
      fe:	f7 e1       	ldi	r31, 0x17	; 23
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a4 37       	cpi	r26, 0x74	; 116
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	23 e0       	ldi	r18, 0x03	; 3
     112:	a4 e7       	ldi	r26, 0x74	; 116
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a0 32       	cpi	r26, 0x20	; 32
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 bf 0b 	call	0x177e	; 0x177e <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	e5 d5       	rcall	.+3018   	; 0xd0c <main>
     142:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_ZN7encoder22Init_encoder_interruptEv>:
}
float encoder::getdistance()
{
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
	return distance;
}
     148:	78 94       	sei
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	80 93 69 00 	sts	0x0069, r24
     150:	8f e0       	ldi	r24, 0x0F	; 15
     152:	80 93 6a 00 	sts	0x006A, r24
     156:	8d b3       	in	r24, 0x1d	; 29
     158:	8f 63       	ori	r24, 0x3F	; 63
     15a:	8d bb       	out	0x1d, r24	; 29
     15c:	08 95       	ret

0000015e <_ZN7encoder10Init_timerEv>:
     15e:	78 94       	sei
     160:	85 b5       	in	r24, 0x25	; 37
     162:	85 60       	ori	r24, 0x05	; 5
     164:	85 bd       	out	0x25, r24	; 37
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 6e 00 	sts	0x006E, r24
     16c:	08 95       	ret

0000016e <__vector_1>:

ISR(INT0_vect)	//for x -axis
{
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	0b b6       	in	r0, 0x3b	; 59
     17a:	0f 92       	push	r0
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     184:	00 9b       	sbis	0x00, 0	; 0
     186:	08 c0       	rjmp	.+16     	; 0x198 <__vector_1+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     188:	e0 ea       	ldi	r30, 0xA0	; 160
     18a:	f2 e0       	ldi	r31, 0x02	; 2
     18c:	80 81       	ld	r24, Z
     18e:	91 81       	ldd	r25, Z+1	; 0x01
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	91 83       	std	Z+1, r25	; 0x01
     194:	80 83       	st	Z, r24
     196:	07 c0       	rjmp	.+14     	; 0x1a6 <__vector_1+0x38>
		inline void dcr_count(){count_encoder--;};
     198:	e0 ea       	ldi	r30, 0xA0	; 160
     19a:	f2 e0       	ldi	r31, 0x02	; 2
     19c:	80 81       	ld	r24, Z
     19e:	91 81       	ldd	r25, Z+1	; 0x01
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	91 83       	std	Z+1, r25	; 0x01
     1a4:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}	 
     1a6:	ff 91       	pop	r31
     1a8:	ef 91       	pop	r30
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	0f 90       	pop	r0
     1b0:	0b be       	out	0x3b, r0	; 59
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <__vector_2>:
ISR(INT1_vect)
{
     1bc:	1f 92       	push	r1
     1be:	0f 92       	push	r0
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	0f 92       	push	r0
     1c4:	11 24       	eor	r1, r1
     1c6:	0b b6       	in	r0, 0x3b	; 59
     1c8:	0f 92       	push	r0
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31
	if((bit_is_set(PINA,PA1)))
     1d2:	01 9b       	sbis	0x00, 1	; 0
     1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <__vector_2+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1d6:	e8 e9       	ldi	r30, 0x98	; 152
     1d8:	f2 e0       	ldi	r31, 0x02	; 2
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	91 83       	std	Z+1, r25	; 0x01
     1e2:	80 83       	st	Z, r24
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__vector_2+0x38>
		inline void dcr_count(){count_encoder--;};
     1e6:	e8 e9       	ldi	r30, 0x98	; 152
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	80 81       	ld	r24, Z
     1ec:	91 81       	ldd	r25, Z+1	; 0x01
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	91 83       	std	Z+1, r25	; 0x01
     1f2:	80 83       	st	Z, r24
		e1.inc_count();
	}
	else
	e1.dcr_count();

}
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	9f 91       	pop	r25
     1fa:	8f 91       	pop	r24
     1fc:	0f 90       	pop	r0
     1fe:	0b be       	out	0x3b, r0	; 59
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <__vector_3>:
ISR(INT2_vect)
{
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	0b b6       	in	r0, 0x3b	; 59
     216:	0f 92       	push	r0
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
	if((bit_is_set(PINA,PA2)))
     220:	02 9b       	sbis	0x00, 2	; 0
     222:	08 c0       	rjmp	.+16     	; 0x234 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     224:	e0 e9       	ldi	r30, 0x90	; 144
     226:	f2 e0       	ldi	r31, 0x02	; 2
     228:	80 81       	ld	r24, Z
     22a:	91 81       	ldd	r25, Z+1	; 0x01
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	91 83       	std	Z+1, r25	; 0x01
     230:	80 83       	st	Z, r24
     232:	07 c0       	rjmp	.+14     	; 0x242 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     234:	e0 e9       	ldi	r30, 0x90	; 144
     236:	f2 e0       	ldi	r31, 0x02	; 2
     238:	80 81       	ld	r24, Z
     23a:	91 81       	ldd	r25, Z+1	; 0x01
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	91 83       	std	Z+1, r25	; 0x01
     240:	80 83       	st	Z, r24
	{
		e2.inc_count();
	}
	else
	e2.dcr_count();
}
     242:	ff 91       	pop	r31
     244:	ef 91       	pop	r30
     246:	9f 91       	pop	r25
     248:	8f 91       	pop	r24
     24a:	0f 90       	pop	r0
     24c:	0b be       	out	0x3b, r0	; 59
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <__vector_4>:
ISR(INT3_vect)
{
     258:	1f 92       	push	r1
     25a:	0f 92       	push	r0
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	0f 92       	push	r0
     260:	11 24       	eor	r1, r1
     262:	0b b6       	in	r0, 0x3b	; 59
     264:	0f 92       	push	r0
     266:	8f 93       	push	r24
     268:	9f 93       	push	r25
     26a:	ef 93       	push	r30
     26c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA3)))
     26e:	03 9b       	sbis	0x00, 3	; 0
     270:	08 c0       	rjmp	.+16     	; 0x282 <__vector_4+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     272:	e8 e8       	ldi	r30, 0x88	; 136
     274:	f2 e0       	ldi	r31, 0x02	; 2
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	91 83       	std	Z+1, r25	; 0x01
     27e:	80 83       	st	Z, r24
     280:	07 c0       	rjmp	.+14     	; 0x290 <__vector_4+0x38>
		inline void dcr_count(){count_encoder--;};
     282:	e8 e8       	ldi	r30, 0x88	; 136
     284:	f2 e0       	ldi	r31, 0x02	; 2
     286:	80 81       	ld	r24, Z
     288:	91 81       	ldd	r25, Z+1	; 0x01
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	80 83       	st	Z, r24
	{
		e3.inc_count();
	}
	else
		e3.dcr_count();
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	0f 90       	pop	r0
     29a:	0b be       	out	0x3b, r0	; 59
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <__vector_5>:
ISR(INT4_vect)
{
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	0f 92       	push	r0
     2ae:	11 24       	eor	r1, r1
     2b0:	0b b6       	in	r0, 0x3b	; 59
     2b2:	0f 92       	push	r0
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
     2b8:	ef 93       	push	r30
     2ba:	ff 93       	push	r31
	if((bit_is_set(PINA,PA4)))
     2bc:	04 9b       	sbis	0x00, 4	; 0
     2be:	08 c0       	rjmp	.+16     	; 0x2d0 <__vector_5+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     2c0:	e0 e8       	ldi	r30, 0x80	; 128
     2c2:	f2 e0       	ldi	r31, 0x02	; 2
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	91 83       	std	Z+1, r25	; 0x01
     2cc:	80 83       	st	Z, r24
     2ce:	07 c0       	rjmp	.+14     	; 0x2de <__vector_5+0x38>
		inline void dcr_count(){count_encoder--;};
     2d0:	e0 e8       	ldi	r30, 0x80	; 128
     2d2:	f2 e0       	ldi	r31, 0x02	; 2
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	91 83       	std	Z+1, r25	; 0x01
     2dc:	80 83       	st	Z, r24
	{
		e4.inc_count();
	}
	else
	e4.dcr_count();
}
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	0f 90       	pop	r0
     2e8:	0b be       	out	0x3b, r0	; 59
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <__vector_6>:
ISR(INT5_vect)	//for y-axis
{
     2f4:	1f 92       	push	r1
     2f6:	0f 92       	push	r0
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	0f 92       	push	r0
     2fc:	11 24       	eor	r1, r1
     2fe:	0b b6       	in	r0, 0x3b	; 59
     300:	0f 92       	push	r0
     302:	8f 93       	push	r24
     304:	9f 93       	push	r25
     306:	ef 93       	push	r30
     308:	ff 93       	push	r31
	if((bit_is_set(PINA,PA6)))
     30a:	06 9b       	sbis	0x00, 6	; 0
     30c:	08 c0       	rjmp	.+16     	; 0x31e <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     30e:	e8 ea       	ldi	r30, 0xA8	; 168
     310:	f2 e0       	ldi	r31, 0x02	; 2
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
     31c:	07 c0       	rjmp	.+14     	; 0x32c <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     31e:	e8 ea       	ldi	r30, 0xA8	; 168
     320:	f2 e0       	ldi	r31, 0x02	; 2
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0b be       	out	0x3b, r0	; 59
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     342:	1f 92       	push	r1
     344:	0f 92       	push	r0
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	0f 92       	push	r0
     34a:	11 24       	eor	r1, r1
     34c:	0b b6       	in	r0, 0x3b	; 59
     34e:	0f 92       	push	r0
     350:	8f 93       	push	r24
     352:	9f 93       	push	r25
     354:	ef 93       	push	r30
     356:	ff 93       	push	r31
	PidUpdateFlagMotor = true;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 e8 02 	sts	0x02E8, r24
	PidUpdateFlagLinetracker = true;
     35e:	80 93 45 02 	sts	0x0245, r24
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     362:	e8 e9       	ldi	r30, 0x98	; 152
     364:	f2 e0       	ldi	r31, 0x02	; 2
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	93 83       	std	Z+3, r25	; 0x03
     36c:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     36e:	11 82       	std	Z+1, r1	; 0x01
     370:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     372:	e0 e9       	ldi	r30, 0x90	; 144
     374:	f2 e0       	ldi	r31, 0x02	; 2
     376:	80 81       	ld	r24, Z
     378:	91 81       	ldd	r25, Z+1	; 0x01
     37a:	93 83       	std	Z+3, r25	; 0x03
     37c:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     37e:	11 82       	std	Z+1, r1	; 0x01
     380:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     382:	e8 e8       	ldi	r30, 0x88	; 136
     384:	f2 e0       	ldi	r31, 0x02	; 2
     386:	80 81       	ld	r24, Z
     388:	91 81       	ldd	r25, Z+1	; 0x01
     38a:	93 83       	std	Z+3, r25	; 0x03
     38c:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     38e:	11 82       	std	Z+1, r1	; 0x01
     390:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     392:	e0 e8       	ldi	r30, 0x80	; 128
     394:	f2 e0       	ldi	r31, 0x02	; 2
     396:	80 81       	ld	r24, Z
     398:	91 81       	ldd	r25, Z+1	; 0x01
     39a:	93 83       	std	Z+3, r25	; 0x03
     39c:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     39e:	11 82       	std	Z+1, r1	; 0x01
     3a0:	10 82       	st	Z, r1
	e1.setspeed();
	e2.setspeed();
	e3.setspeed();
	e4.setspeed();
	
     3a2:	ff 91       	pop	r31
     3a4:	ef 91       	pop	r30
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	0f 90       	pop	r0
     3ac:	0b be       	out	0x3b, r0	; 59
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <_ZN11LinetrackerC1Ei>:
int Linetracker::Get_Junc_pincount()		//count from avr using junction pulse  //using polling
{
	if(junction_detect && !(READ(JUNCTION_PIN)))
	{
		junction_count++;
		junction_detect = false;
     3b8:	fc 01       	movw	r30, r24
     3ba:	60 83       	st	Z, r22
     3bc:	16 82       	std	Z+6, r1	; 0x06
     3be:	13 82       	std	Z+3, r1	; 0x03
     3c0:	12 82       	std	Z+2, r1	; 0x02
     3c2:	08 95       	ret

000003c4 <_ZN11Linetracker10initialiseEv>:
     3c4:	78 94       	sei
     3c6:	58 d7       	rcall	.+3760   	; 0x1278 <_Z9initUART3v>
     3c8:	6b 98       	cbi	0x0d, 3	; 13
     3ca:	73 98       	cbi	0x0e, 3	; 14
     3cc:	e4 e0       	ldi	r30, 0x04	; 4
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	80 81       	ld	r24, Z
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	80 83       	st	Z, r24
     3d6:	e5 e0       	ldi	r30, 0x05	; 5
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	80 81       	ld	r24, Z
     3dc:	8d 7f       	andi	r24, 0xFD	; 253
     3de:	80 83       	st	Z, r24
     3e0:	08 95       	ret

000003e2 <_ZN11Linetracker16Get_Sensors_DataEv>:
	}
	return junction_count;	
}

int Linetracker::Get_Sensors_Data()
{
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
	rcvdat = UART3Receive();
     3e8:	60 d7       	rcall	.+3776   	; 0x12aa <_Z12UART3Receivev>
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	9d 83       	std	Y+5, r25	; 0x05
     3ee:	8c 83       	std	Y+4, r24	; 0x04
	return rcvdat;
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <_ZN5MotorC1Eh>:
		Flag_Proportional_Gain_Increase = true;
		Flag_Proportional_Gain_Decrease = true;
		Flag_Differential_Gain_Increase = true;
		Flag_Differential_Gain_Decrease = true;
		Flag_Integral_Gain_Increase = true;
		Flag_Integral_Gain_Decrease = true;
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	ec 01       	movw	r28, r24
     3fc:	68 83       	st	Y, r22
     3fe:	cd d5       	rcall	.+2970   	; 0xf9a <_ZN5Motor7InitPWMEv>
     400:	ce 01       	movw	r24, r28
     402:	af d6       	rcall	.+3422   	; 0x1162 <_ZN5Motor9StopMotorEv>
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	ce 01       	movw	r24, r28
     40a:	ec d6       	rcall	.+3544   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <_Z12calculatevelv>:
     412:	2f 92       	push	r2
     414:	3f 92       	push	r3
     416:	4f 92       	push	r4
     418:	5f 92       	push	r5
     41a:	6f 92       	push	r6
     41c:	7f 92       	push	r7
     41e:	8f 92       	push	r8
     420:	9f 92       	push	r9
     422:	af 92       	push	r10
     424:	bf 92       	push	r11
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	00 d0       	rcall	.+0      	; 0x438 <_Z12calculatevelv+0x26>
     438:	1f 92       	push	r1
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	0f 2e       	mov	r0, r31
     440:	f3 e0       	ldi	r31, 0x03	; 3
     442:	8f 2e       	mov	r8, r31
     444:	f3 e0       	ldi	r31, 0x03	; 3
     446:	9f 2e       	mov	r9, r31
     448:	f0 2d       	mov	r31, r0
     44a:	0f 2e       	mov	r0, r31
     44c:	f5 e1       	ldi	r31, 0x15	; 21
     44e:	ef 2e       	mov	r14, r31
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	ff 2e       	mov	r15, r31
     454:	f0 2d       	mov	r31, r0
     456:	0f 2e       	mov	r0, r31
     458:	f3 e0       	ldi	r31, 0x03	; 3
     45a:	2f 2e       	mov	r2, r31
     45c:	f3 e0       	ldi	r31, 0x03	; 3
     45e:	3f 2e       	mov	r3, r31
     460:	f0 2d       	mov	r31, r0
     462:	34 01       	movw	r6, r8
     464:	27 01       	movw	r4, r14
     466:	7a 82       	std	Y+2, r7	; 0x02
     468:	69 82       	std	Y+1, r6	; 0x01
     46a:	0f 2e       	mov	r0, r31
     46c:	fd ef       	ldi	r31, 0xFD	; 253
     46e:	af 2e       	mov	r10, r31
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	bf 2e       	mov	r11, r31
     474:	f0 2d       	mov	r31, r0
     476:	82 01       	movw	r16, r4
     478:	c1 2c       	mov	r12, r1
     47a:	d1 2c       	mov	r13, r1
     47c:	e1 2c       	mov	r14, r1
     47e:	f1 2c       	mov	r15, r1
     480:	bc 82       	std	Y+4, r11	; 0x04
     482:	ab 82       	std	Y+3, r10	; 0x03
     484:	eb 81       	ldd	r30, Y+3	; 0x03
     486:	fc 81       	ldd	r31, Y+4	; 0x04
     488:	61 91       	ld	r22, Z+
     48a:	71 91       	ld	r23, Z+
     48c:	fc 83       	std	Y+4, r31	; 0x04
     48e:	eb 83       	std	Y+3, r30	; 0x03
     490:	f8 01       	movw	r30, r16
     492:	81 90       	ld	r8, Z+
     494:	91 90       	ld	r9, Z+
     496:	a1 90       	ld	r10, Z+
     498:	b1 90       	ld	r11, Z+
     49a:	8f 01       	movw	r16, r30
     49c:	07 2e       	mov	r0, r23
     49e:	00 0c       	add	r0, r0
     4a0:	88 0b       	sbc	r24, r24
     4a2:	99 0b       	sbc	r25, r25
     4a4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__floatsisf>
     4a8:	a5 01       	movw	r20, r10
     4aa:	94 01       	movw	r18, r8
     4ac:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3>
     4b0:	9b 01       	movw	r18, r22
     4b2:	ac 01       	movw	r20, r24
     4b4:	6c 2d       	mov	r22, r12
     4b6:	7d 2d       	mov	r23, r13
     4b8:	8e 2d       	mov	r24, r14
     4ba:	9f 2d       	mov	r25, r15
     4bc:	72 d7       	rcall	.+3812   	; 0x13a2 <__addsf3>
     4be:	c6 2e       	mov	r12, r22
     4c0:	d7 2e       	mov	r13, r23
     4c2:	e8 2e       	mov	r14, r24
     4c4:	f9 2e       	mov	r15, r25
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ca:	82 15       	cp	r24, r2
     4cc:	93 05       	cpc	r25, r3
     4ce:	d1 f6       	brne	.-76     	; 0x484 <_Z12calculatevelv+0x72>
     4d0:	8c 2d       	mov	r24, r12
     4d2:	9d 2d       	mov	r25, r13
     4d4:	ae 2d       	mov	r26, r14
     4d6:	bf 2d       	mov	r27, r15
     4d8:	e9 81       	ldd	r30, Y+1	; 0x01
     4da:	fa 81       	ldd	r31, Y+2	; 0x02
     4dc:	80 83       	st	Z, r24
     4de:	91 83       	std	Z+1, r25	; 0x01
     4e0:	a2 83       	std	Z+2, r26	; 0x02
     4e2:	b3 83       	std	Z+3, r27	; 0x03
     4e4:	f4 e0       	ldi	r31, 0x04	; 4
     4e6:	6f 0e       	add	r6, r31
     4e8:	71 1c       	adc	r7, r1
     4ea:	8c e0       	ldi	r24, 0x0C	; 12
     4ec:	48 0e       	add	r4, r24
     4ee:	51 1c       	adc	r5, r1
     4f0:	93 e1       	ldi	r25, 0x13	; 19
     4f2:	69 16       	cp	r6, r25
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	79 06       	cpc	r7, r25
     4f8:	09 f0       	breq	.+2      	; 0x4fc <_Z12calculatevelv+0xea>
     4fa:	b5 cf       	rjmp	.-150    	; 0x466 <_Z12calculatevelv+0x54>
     4fc:	03 e0       	ldi	r16, 0x03	; 3
     4fe:	13 e0       	ldi	r17, 0x03	; 3
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	48 eb       	ldi	r20, 0xB8	; 184
     506:	51 e4       	ldi	r21, 0x41	; 65
     508:	f8 01       	movw	r30, r16
     50a:	60 81       	ld	r22, Z
     50c:	71 81       	ldd	r23, Z+1	; 0x01
     50e:	82 81       	ldd	r24, Z+2	; 0x02
     510:	93 81       	ldd	r25, Z+3	; 0x03
     512:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3>
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	49 e7       	ldi	r20, 0x79	; 121
     51c:	53 e4       	ldi	r21, 0x43	; 67
     51e:	a5 d7       	rcall	.+3914   	; 0x146a <__divsf3>
     520:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     524:	70 93 1a 03 	sts	0x031A, r23
     528:	60 93 19 03 	sts	0x0319, r22
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	48 eb       	ldi	r20, 0xB8	; 184
     532:	51 e4       	ldi	r21, 0x41	; 65
     534:	f8 01       	movw	r30, r16
     536:	64 81       	ldd	r22, Z+4	; 0x04
     538:	75 81       	ldd	r23, Z+5	; 0x05
     53a:	86 81       	ldd	r24, Z+6	; 0x06
     53c:	97 81       	ldd	r25, Z+7	; 0x07
     53e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	49 e7       	ldi	r20, 0x79	; 121
     548:	53 e4       	ldi	r21, 0x43	; 67
     54a:	8f d7       	rcall	.+3870   	; 0x146a <__divsf3>
     54c:	f6 d7       	rcall	.+4076   	; 0x153a <__fixsfsi>
     54e:	70 93 18 03 	sts	0x0318, r23
     552:	60 93 17 03 	sts	0x0317, r22
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	48 eb       	ldi	r20, 0xB8	; 184
     55c:	51 e4       	ldi	r21, 0x41	; 65
     55e:	f8 01       	movw	r30, r16
     560:	60 85       	ldd	r22, Z+8	; 0x08
     562:	71 85       	ldd	r23, Z+9	; 0x09
     564:	82 85       	ldd	r24, Z+10	; 0x0a
     566:	93 85       	ldd	r25, Z+11	; 0x0b
     568:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	49 e7       	ldi	r20, 0x79	; 121
     572:	53 e4       	ldi	r21, 0x43	; 67
     574:	7a d7       	rcall	.+3828   	; 0x146a <__divsf3>
     576:	e1 d7       	rcall	.+4034   	; 0x153a <__fixsfsi>
     578:	70 93 16 03 	sts	0x0316, r23
     57c:	60 93 15 03 	sts	0x0315, r22
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	48 eb       	ldi	r20, 0xB8	; 184
     586:	51 e4       	ldi	r21, 0x41	; 65
     588:	f8 01       	movw	r30, r16
     58a:	64 85       	ldd	r22, Z+12	; 0x0c
     58c:	75 85       	ldd	r23, Z+13	; 0x0d
     58e:	86 85       	ldd	r24, Z+14	; 0x0e
     590:	97 85       	ldd	r25, Z+15	; 0x0f
     592:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	49 e7       	ldi	r20, 0x79	; 121
     59c:	53 e4       	ldi	r21, 0x43	; 67
     59e:	65 d7       	rcall	.+3786   	; 0x146a <__divsf3>
     5a0:	cc d7       	rcall	.+3992   	; 0x153a <__fixsfsi>
     5a2:	70 93 14 03 	sts	0x0314, r23
     5a6:	60 93 13 03 	sts	0x0313, r22
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	bf 90       	pop	r11
     5c4:	af 90       	pop	r10
     5c6:	9f 90       	pop	r9
     5c8:	8f 90       	pop	r8
     5ca:	7f 90       	pop	r7
     5cc:	6f 90       	pop	r6
     5ce:	5f 90       	pop	r5
     5d0:	4f 90       	pop	r4
     5d2:	3f 90       	pop	r3
     5d4:	2f 90       	pop	r2
     5d6:	08 95       	ret

000005d8 <_Z4movxii>:
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	90 93 fc 02 	sts	0x02FC, r25
     5f4:	80 93 fb 02 	sts	0x02FB, r24
     5f8:	80 91 46 02 	lds	r24, 0x0246
     5fc:	88 23       	and	r24, r24
     5fe:	09 f4       	brne	.+2      	; 0x602 <_Z4movxii+0x2a>
     600:	6c c0       	rjmp	.+216    	; 0x6da <_Z4movxii+0x102>
     602:	80 91 45 02 	lds	r24, 0x0245
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <_Z4movxii+0x34>
     60a:	6b c0       	rjmp	.+214    	; 0x6e2 <_Z4movxii+0x10a>
     60c:	cd ee       	ldi	r28, 0xED	; 237
     60e:	d2 e0       	ldi	r29, 0x02	; 2
     610:	83 e2       	ldi	r24, 0x23	; 35
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9d 87       	std	Y+13, r25	; 0x0d
     616:	8c 87       	std	Y+12, r24	; 0x0c
     618:	85 e7       	ldi	r24, 0x75	; 117
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	e2 de       	rcall	.-572    	; 0x3e2 <_ZN11Linetracker16Get_Sensors_DataEv>
     61e:	8c 01       	movw	r16, r24
     620:	99 83       	std	Y+1, r25	; 0x01
     622:	88 83       	st	Y, r24
     624:	6c 85       	ldd	r22, Y+12	; 0x0c
     626:	7d 85       	ldd	r23, Y+13	; 0x0d
     628:	68 1b       	sub	r22, r24
     62a:	79 0b       	sbc	r23, r25
     62c:	7b 83       	std	Y+3, r23	; 0x03
     62e:	6a 83       	std	Y+2, r22	; 0x02
     630:	07 2e       	mov	r0, r23
     632:	00 0c       	add	r0, r0
     634:	88 0b       	sbc	r24, r24
     636:	99 0b       	sbc	r25, r25
     638:	b3 d7       	rcall	.+3942   	; 0x15a0 <__floatsisf>
     63a:	4b 01       	movw	r8, r22
     63c:	5c 01       	movw	r10, r24
     63e:	20 91 0d 02 	lds	r18, 0x020D
     642:	30 91 0e 02 	lds	r19, 0x020E
     646:	40 91 0f 02 	lds	r20, 0x020F
     64a:	50 91 10 02 	lds	r21, 0x0210
     64e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3>
     652:	28 85       	ldd	r18, Y+8	; 0x08
     654:	39 85       	ldd	r19, Y+9	; 0x09
     656:	4a 85       	ldd	r20, Y+10	; 0x0a
     658:	5b 85       	ldd	r21, Y+11	; 0x0b
     65a:	a3 d6       	rcall	.+3398   	; 0x13a2 <__addsf3>
     65c:	6b 01       	movw	r12, r22
     65e:	7c 01       	movw	r14, r24
     660:	68 87       	std	Y+8, r22	; 0x08
     662:	79 87       	std	Y+9, r23	; 0x09
     664:	8a 87       	std	Y+10, r24	; 0x0a
     666:	9b 87       	std	Y+11, r25	; 0x0b
     668:	20 91 11 02 	lds	r18, 0x0211
     66c:	30 91 12 02 	lds	r19, 0x0212
     670:	40 91 13 02 	lds	r20, 0x0213
     674:	50 91 14 02 	lds	r21, 0x0214
     678:	c5 01       	movw	r24, r10
     67a:	b4 01       	movw	r22, r8
     67c:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3>
     680:	9b 01       	movw	r18, r22
     682:	ac 01       	movw	r20, r24
     684:	c7 01       	movw	r24, r14
     686:	b6 01       	movw	r22, r12
     688:	8c d6       	rcall	.+3352   	; 0x13a2 <__addsf3>
     68a:	6b 01       	movw	r12, r22
     68c:	7c 01       	movw	r14, r24
     68e:	8c 81       	ldd	r24, Y+4	; 0x04
     690:	9d 81       	ldd	r25, Y+5	; 0x05
     692:	98 01       	movw	r18, r16
     694:	28 1b       	sub	r18, r24
     696:	39 0b       	sbc	r19, r25
     698:	b9 01       	movw	r22, r18
     69a:	33 0f       	add	r19, r19
     69c:	88 0b       	sbc	r24, r24
     69e:	99 0b       	sbc	r25, r25
     6a0:	7f d7       	rcall	.+3838   	; 0x15a0 <__floatsisf>
     6a2:	20 91 09 02 	lds	r18, 0x0209
     6a6:	30 91 0a 02 	lds	r19, 0x020A
     6aa:	40 91 0b 02 	lds	r20, 0x020B
     6ae:	50 91 0c 02 	lds	r21, 0x020C
     6b2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__mulsf3>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	c7 01       	movw	r24, r14
     6bc:	b6 01       	movw	r22, r12
     6be:	70 d6       	rcall	.+3296   	; 0x13a0 <__subsf3>
     6c0:	3c d7       	rcall	.+3704   	; 0x153a <__fixsfsi>
     6c2:	7f 83       	std	Y+7, r23	; 0x07
     6c4:	6e 83       	std	Y+6, r22	; 0x06
     6c6:	70 93 00 03 	sts	0x0300, r23
     6ca:	60 93 ff 02 	sts	0x02FF, r22
     6ce:	10 92 45 02 	sts	0x0245, r1
     6d2:	80 91 46 02 	lds	r24, 0x0246
     6d6:	81 11       	cpse	r24, r1
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <_Z4movxii+0x10a>
     6da:	10 92 00 03 	sts	0x0300, r1
     6de:	10 92 ff 02 	sts	0x02FF, r1
     6e2:	ed ef       	ldi	r30, 0xFD	; 253
     6e4:	f2 e0       	ldi	r31, 0x02	; 2
     6e6:	80 e5       	ldi	r24, 0x50	; 80
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	91 83       	std	Z+1, r25	; 0x01
     6ec:	80 83       	st	Z, r24
     6ee:	15 82       	std	Z+5, r1	; 0x05
     6f0:	14 82       	std	Z+4, r1	; 0x04
     6f2:	8f de       	rcall	.-738    	; 0x412 <_Z12calculatevelv>
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	9f 90       	pop	r9
     70a:	8f 90       	pop	r8
     70c:	08 95       	ret

0000070e <_Z12setTuningsM1v>:
     70e:	8f 92       	push	r8
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	00 91 9a 02 	lds	r16, 0x029A
     72a:	10 91 9b 02 	lds	r17, 0x029B
     72e:	ca ed       	ldi	r28, 0xDA	; 218
     730:	d2 e0       	ldi	r29, 0x02	; 2
     732:	19 83       	std	Y+1, r17	; 0x01
     734:	08 83       	st	Y, r16
     736:	60 91 19 03 	lds	r22, 0x0319
     73a:	70 91 1a 03 	lds	r23, 0x031A
     73e:	60 1b       	sub	r22, r16
     740:	71 0b       	sbc	r23, r17
     742:	7d 83       	std	Y+5, r23	; 0x05
     744:	6c 83       	std	Y+4, r22	; 0x04
     746:	07 2e       	mov	r0, r23
     748:	00 0c       	add	r0, r0
     74a:	88 0b       	sbc	r24, r24
     74c:	99 0b       	sbc	r25, r25
     74e:	28 d7       	rcall	.+3664   	; 0x15a0 <__floatsisf>
     750:	4b 01       	movw	r8, r22
     752:	5c 01       	movw	r10, r24
     754:	20 91 e9 02 	lds	r18, 0x02E9
     758:	30 91 ea 02 	lds	r19, 0x02EA
     75c:	40 91 eb 02 	lds	r20, 0x02EB
     760:	50 91 ec 02 	lds	r21, 0x02EC
     764:	a9 d7       	rcall	.+3922   	; 0x16b8 <__mulsf3>
     766:	2e 81       	ldd	r18, Y+6	; 0x06
     768:	3f 81       	ldd	r19, Y+7	; 0x07
     76a:	48 85       	ldd	r20, Y+8	; 0x08
     76c:	59 85       	ldd	r21, Y+9	; 0x09
     76e:	19 d6       	rcall	.+3122   	; 0x13a2 <__addsf3>
     770:	6b 01       	movw	r12, r22
     772:	7c 01       	movw	r14, r24
     774:	6e 83       	std	Y+6, r22	; 0x06
     776:	7f 83       	std	Y+7, r23	; 0x07
     778:	88 87       	std	Y+8, r24	; 0x08
     77a:	99 87       	std	Y+9, r25	; 0x09
     77c:	20 91 05 02 	lds	r18, 0x0205
     780:	30 91 06 02 	lds	r19, 0x0206
     784:	40 91 07 02 	lds	r20, 0x0207
     788:	50 91 08 02 	lds	r21, 0x0208
     78c:	c5 01       	movw	r24, r10
     78e:	b4 01       	movw	r22, r8
     790:	93 d7       	rcall	.+3878   	; 0x16b8 <__mulsf3>
     792:	9b 01       	movw	r18, r22
     794:	ac 01       	movw	r20, r24
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	03 d6       	rcall	.+3078   	; 0x13a2 <__addsf3>
     79c:	6b 01       	movw	r12, r22
     79e:	7c 01       	movw	r14, r24
     7a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     7a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     7a4:	98 01       	movw	r18, r16
     7a6:	28 1b       	sub	r18, r24
     7a8:	39 0b       	sbc	r19, r25
     7aa:	b9 01       	movw	r22, r18
     7ac:	33 0f       	add	r19, r19
     7ae:	88 0b       	sbc	r24, r24
     7b0:	99 0b       	sbc	r25, r25
     7b2:	f6 d6       	rcall	.+3564   	; 0x15a0 <__floatsisf>
     7b4:	20 91 01 02 	lds	r18, 0x0201
     7b8:	30 91 02 02 	lds	r19, 0x0202
     7bc:	40 91 03 02 	lds	r20, 0x0203
     7c0:	50 91 04 02 	lds	r21, 0x0204
     7c4:	79 d7       	rcall	.+3826   	; 0x16b8 <__mulsf3>
     7c6:	9b 01       	movw	r18, r22
     7c8:	ac 01       	movw	r20, r24
     7ca:	c7 01       	movw	r24, r14
     7cc:	b6 01       	movw	r22, r12
     7ce:	e8 d5       	rcall	.+3024   	; 0x13a0 <__subsf3>
     7d0:	b4 d6       	rcall	.+3432   	; 0x153a <__fixsfsi>
     7d2:	7b 83       	std	Y+3, r23	; 0x03
     7d4:	6a 83       	std	Y+2, r22	; 0x02
     7d6:	1b 87       	std	Y+11, r17	; 0x0b
     7d8:	0a 87       	std	Y+10, r16	; 0x0a
     7da:	2c 85       	ldd	r18, Y+12	; 0x0c
     7dc:	3d 85       	ldd	r19, Y+13	; 0x0d
     7de:	62 0f       	add	r22, r18
     7e0:	73 1f       	adc	r23, r19
     7e2:	cb 01       	movw	r24, r22
     7e4:	77 23       	and	r23, r23
     7e6:	24 f4       	brge	.+8      	; 0x7f0 <_Z12setTuningsM1v+0xe2>
     7e8:	88 27       	eor	r24, r24
     7ea:	99 27       	eor	r25, r25
     7ec:	86 1b       	sub	r24, r22
     7ee:	97 0b       	sbc	r25, r23
     7f0:	8a 3f       	cpi	r24, 0xFA	; 250
     7f2:	91 05       	cpc	r25, r1
     7f4:	2c f4       	brge	.+10     	; 0x800 <_Z12setTuningsM1v+0xf2>
     7f6:	70 93 e7 02 	sts	0x02E7, r23
     7fa:	60 93 e6 02 	sts	0x02E6, r22
     7fe:	10 c0       	rjmp	.+32     	; 0x820 <_Z12setTuningsM1v+0x112>
     800:	16 16       	cp	r1, r22
     802:	17 06       	cpc	r1, r23
     804:	3c f4       	brge	.+14     	; 0x814 <_Z12setTuningsM1v+0x106>
     806:	89 ef       	ldi	r24, 0xF9	; 249
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	90 93 e7 02 	sts	0x02E7, r25
     80e:	80 93 e6 02 	sts	0x02E6, r24
     812:	06 c0       	rjmp	.+12     	; 0x820 <_Z12setTuningsM1v+0x112>
     814:	87 e0       	ldi	r24, 0x07	; 7
     816:	9f ef       	ldi	r25, 0xFF	; 255
     818:	90 93 e7 02 	sts	0x02E7, r25
     81c:	80 93 e6 02 	sts	0x02E6, r24
     820:	60 91 e6 02 	lds	r22, 0x02E6
     824:	70 91 e7 02 	lds	r23, 0x02E7
     828:	8f e7       	ldi	r24, 0x7F	; 127
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	db d4       	rcall	.+2486   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	df 90       	pop	r13
     83c:	cf 90       	pop	r12
     83e:	bf 90       	pop	r11
     840:	af 90       	pop	r10
     842:	9f 90       	pop	r9
     844:	8f 90       	pop	r8
     846:	08 95       	ret

00000848 <_Z12setTuningsM2v>:
     848:	8f 92       	push	r8
     84a:	9f 92       	push	r9
     84c:	af 92       	push	r10
     84e:	bf 92       	push	r11
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	00 91 92 02 	lds	r16, 0x0292
     864:	10 91 93 02 	lds	r17, 0x0293
     868:	cc ec       	ldi	r28, 0xCC	; 204
     86a:	d2 e0       	ldi	r29, 0x02	; 2
     86c:	19 83       	std	Y+1, r17	; 0x01
     86e:	08 83       	st	Y, r16
     870:	60 91 17 03 	lds	r22, 0x0317
     874:	70 91 18 03 	lds	r23, 0x0318
     878:	60 1b       	sub	r22, r16
     87a:	71 0b       	sbc	r23, r17
     87c:	7d 83       	std	Y+5, r23	; 0x05
     87e:	6c 83       	std	Y+4, r22	; 0x04
     880:	07 2e       	mov	r0, r23
     882:	00 0c       	add	r0, r0
     884:	88 0b       	sbc	r24, r24
     886:	99 0b       	sbc	r25, r25
     888:	8b d6       	rcall	.+3350   	; 0x15a0 <__floatsisf>
     88a:	4b 01       	movw	r8, r22
     88c:	5c 01       	movw	r10, r24
     88e:	20 91 e9 02 	lds	r18, 0x02E9
     892:	30 91 ea 02 	lds	r19, 0x02EA
     896:	40 91 eb 02 	lds	r20, 0x02EB
     89a:	50 91 ec 02 	lds	r21, 0x02EC
     89e:	0c d7       	rcall	.+3608   	; 0x16b8 <__mulsf3>
     8a0:	2e 81       	ldd	r18, Y+6	; 0x06
     8a2:	3f 81       	ldd	r19, Y+7	; 0x07
     8a4:	48 85       	ldd	r20, Y+8	; 0x08
     8a6:	59 85       	ldd	r21, Y+9	; 0x09
     8a8:	7c d5       	rcall	.+2808   	; 0x13a2 <__addsf3>
     8aa:	6b 01       	movw	r12, r22
     8ac:	7c 01       	movw	r14, r24
     8ae:	6e 83       	std	Y+6, r22	; 0x06
     8b0:	7f 83       	std	Y+7, r23	; 0x07
     8b2:	88 87       	std	Y+8, r24	; 0x08
     8b4:	99 87       	std	Y+9, r25	; 0x09
     8b6:	20 91 05 02 	lds	r18, 0x0205
     8ba:	30 91 06 02 	lds	r19, 0x0206
     8be:	40 91 07 02 	lds	r20, 0x0207
     8c2:	50 91 08 02 	lds	r21, 0x0208
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	f6 d6       	rcall	.+3564   	; 0x16b8 <__mulsf3>
     8cc:	9b 01       	movw	r18, r22
     8ce:	ac 01       	movw	r20, r24
     8d0:	c7 01       	movw	r24, r14
     8d2:	b6 01       	movw	r22, r12
     8d4:	66 d5       	rcall	.+2764   	; 0x13a2 <__addsf3>
     8d6:	6b 01       	movw	r12, r22
     8d8:	7c 01       	movw	r14, r24
     8da:	8a 85       	ldd	r24, Y+10	; 0x0a
     8dc:	9b 85       	ldd	r25, Y+11	; 0x0b
     8de:	98 01       	movw	r18, r16
     8e0:	28 1b       	sub	r18, r24
     8e2:	39 0b       	sbc	r19, r25
     8e4:	b9 01       	movw	r22, r18
     8e6:	33 0f       	add	r19, r19
     8e8:	88 0b       	sbc	r24, r24
     8ea:	99 0b       	sbc	r25, r25
     8ec:	59 d6       	rcall	.+3250   	; 0x15a0 <__floatsisf>
     8ee:	20 91 01 02 	lds	r18, 0x0201
     8f2:	30 91 02 02 	lds	r19, 0x0202
     8f6:	40 91 03 02 	lds	r20, 0x0203
     8fa:	50 91 04 02 	lds	r21, 0x0204
     8fe:	dc d6       	rcall	.+3512   	; 0x16b8 <__mulsf3>
     900:	9b 01       	movw	r18, r22
     902:	ac 01       	movw	r20, r24
     904:	c7 01       	movw	r24, r14
     906:	b6 01       	movw	r22, r12
     908:	4b d5       	rcall	.+2710   	; 0x13a0 <__subsf3>
     90a:	17 d6       	rcall	.+3118   	; 0x153a <__fixsfsi>
     90c:	7b 83       	std	Y+3, r23	; 0x03
     90e:	6a 83       	std	Y+2, r22	; 0x02
     910:	1b 87       	std	Y+11, r17	; 0x0b
     912:	0a 87       	std	Y+10, r16	; 0x0a
     914:	2c 85       	ldd	r18, Y+12	; 0x0c
     916:	3d 85       	ldd	r19, Y+13	; 0x0d
     918:	62 0f       	add	r22, r18
     91a:	73 1f       	adc	r23, r19
     91c:	cb 01       	movw	r24, r22
     91e:	77 23       	and	r23, r23
     920:	24 f4       	brge	.+8      	; 0x92a <_Z12setTuningsM2v+0xe2>
     922:	88 27       	eor	r24, r24
     924:	99 27       	eor	r25, r25
     926:	86 1b       	sub	r24, r22
     928:	97 0b       	sbc	r25, r23
     92a:	8a 3f       	cpi	r24, 0xFA	; 250
     92c:	91 05       	cpc	r25, r1
     92e:	2c f4       	brge	.+10     	; 0x93a <_Z12setTuningsM2v+0xf2>
     930:	70 93 d9 02 	sts	0x02D9, r23
     934:	60 93 d8 02 	sts	0x02D8, r22
     938:	10 c0       	rjmp	.+32     	; 0x95a <_Z12setTuningsM2v+0x112>
     93a:	16 16       	cp	r1, r22
     93c:	17 06       	cpc	r1, r23
     93e:	3c f4       	brge	.+14     	; 0x94e <_Z12setTuningsM2v+0x106>
     940:	89 ef       	ldi	r24, 0xF9	; 249
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	90 93 d9 02 	sts	0x02D9, r25
     948:	80 93 d8 02 	sts	0x02D8, r24
     94c:	06 c0       	rjmp	.+12     	; 0x95a <_Z12setTuningsM2v+0x112>
     94e:	87 e0       	ldi	r24, 0x07	; 7
     950:	9f ef       	ldi	r25, 0xFF	; 255
     952:	90 93 d9 02 	sts	0x02D9, r25
     956:	80 93 d8 02 	sts	0x02D8, r24
     95a:	60 91 d8 02 	lds	r22, 0x02D8
     95e:	70 91 d9 02 	lds	r23, 0x02D9
     962:	8e e7       	ldi	r24, 0x7E	; 126
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	3e d4       	rcall	.+2172   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	08 95       	ret

00000982 <_Z12setTuningsM3v>:
     982:	8f 92       	push	r8
     984:	9f 92       	push	r9
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 91 8a 02 	lds	r16, 0x028A
     99e:	10 91 8b 02 	lds	r17, 0x028B
     9a2:	ce eb       	ldi	r28, 0xBE	; 190
     9a4:	d2 e0       	ldi	r29, 0x02	; 2
     9a6:	19 83       	std	Y+1, r17	; 0x01
     9a8:	08 83       	st	Y, r16
     9aa:	60 91 15 03 	lds	r22, 0x0315
     9ae:	70 91 16 03 	lds	r23, 0x0316
     9b2:	60 1b       	sub	r22, r16
     9b4:	71 0b       	sbc	r23, r17
     9b6:	7d 83       	std	Y+5, r23	; 0x05
     9b8:	6c 83       	std	Y+4, r22	; 0x04
     9ba:	07 2e       	mov	r0, r23
     9bc:	00 0c       	add	r0, r0
     9be:	88 0b       	sbc	r24, r24
     9c0:	99 0b       	sbc	r25, r25
     9c2:	ee d5       	rcall	.+3036   	; 0x15a0 <__floatsisf>
     9c4:	4b 01       	movw	r8, r22
     9c6:	5c 01       	movw	r10, r24
     9c8:	20 91 e9 02 	lds	r18, 0x02E9
     9cc:	30 91 ea 02 	lds	r19, 0x02EA
     9d0:	40 91 eb 02 	lds	r20, 0x02EB
     9d4:	50 91 ec 02 	lds	r21, 0x02EC
     9d8:	6f d6       	rcall	.+3294   	; 0x16b8 <__mulsf3>
     9da:	2e 81       	ldd	r18, Y+6	; 0x06
     9dc:	3f 81       	ldd	r19, Y+7	; 0x07
     9de:	48 85       	ldd	r20, Y+8	; 0x08
     9e0:	59 85       	ldd	r21, Y+9	; 0x09
     9e2:	df d4       	rcall	.+2494   	; 0x13a2 <__addsf3>
     9e4:	6b 01       	movw	r12, r22
     9e6:	7c 01       	movw	r14, r24
     9e8:	6e 83       	std	Y+6, r22	; 0x06
     9ea:	7f 83       	std	Y+7, r23	; 0x07
     9ec:	88 87       	std	Y+8, r24	; 0x08
     9ee:	99 87       	std	Y+9, r25	; 0x09
     9f0:	20 91 05 02 	lds	r18, 0x0205
     9f4:	30 91 06 02 	lds	r19, 0x0206
     9f8:	40 91 07 02 	lds	r20, 0x0207
     9fc:	50 91 08 02 	lds	r21, 0x0208
     a00:	c5 01       	movw	r24, r10
     a02:	b4 01       	movw	r22, r8
     a04:	59 d6       	rcall	.+3250   	; 0x16b8 <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	c9 d4       	rcall	.+2450   	; 0x13a2 <__addsf3>
     a10:	6b 01       	movw	r12, r22
     a12:	7c 01       	movw	r14, r24
     a14:	8a 85       	ldd	r24, Y+10	; 0x0a
     a16:	9b 85       	ldd	r25, Y+11	; 0x0b
     a18:	98 01       	movw	r18, r16
     a1a:	28 1b       	sub	r18, r24
     a1c:	39 0b       	sbc	r19, r25
     a1e:	b9 01       	movw	r22, r18
     a20:	33 0f       	add	r19, r19
     a22:	88 0b       	sbc	r24, r24
     a24:	99 0b       	sbc	r25, r25
     a26:	bc d5       	rcall	.+2936   	; 0x15a0 <__floatsisf>
     a28:	20 91 01 02 	lds	r18, 0x0201
     a2c:	30 91 02 02 	lds	r19, 0x0202
     a30:	40 91 03 02 	lds	r20, 0x0203
     a34:	50 91 04 02 	lds	r21, 0x0204
     a38:	3f d6       	rcall	.+3198   	; 0x16b8 <__mulsf3>
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	ae d4       	rcall	.+2396   	; 0x13a0 <__subsf3>
     a44:	7a d5       	rcall	.+2804   	; 0x153a <__fixsfsi>
     a46:	7b 83       	std	Y+3, r23	; 0x03
     a48:	6a 83       	std	Y+2, r22	; 0x02
     a4a:	1b 87       	std	Y+11, r17	; 0x0b
     a4c:	0a 87       	std	Y+10, r16	; 0x0a
     a4e:	2c 85       	ldd	r18, Y+12	; 0x0c
     a50:	3d 85       	ldd	r19, Y+13	; 0x0d
     a52:	62 0f       	add	r22, r18
     a54:	73 1f       	adc	r23, r19
     a56:	cb 01       	movw	r24, r22
     a58:	77 23       	and	r23, r23
     a5a:	24 f4       	brge	.+8      	; 0xa64 <_Z12setTuningsM3v+0xe2>
     a5c:	88 27       	eor	r24, r24
     a5e:	99 27       	eor	r25, r25
     a60:	86 1b       	sub	r24, r22
     a62:	97 0b       	sbc	r25, r23
     a64:	8a 3f       	cpi	r24, 0xFA	; 250
     a66:	91 05       	cpc	r25, r1
     a68:	2c f4       	brge	.+10     	; 0xa74 <_Z12setTuningsM3v+0xf2>
     a6a:	70 93 cb 02 	sts	0x02CB, r23
     a6e:	60 93 ca 02 	sts	0x02CA, r22
     a72:	10 c0       	rjmp	.+32     	; 0xa94 <_Z12setTuningsM3v+0x112>
     a74:	16 16       	cp	r1, r22
     a76:	17 06       	cpc	r1, r23
     a78:	3c f4       	brge	.+14     	; 0xa88 <_Z12setTuningsM3v+0x106>
     a7a:	89 ef       	ldi	r24, 0xF9	; 249
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	90 93 cb 02 	sts	0x02CB, r25
     a82:	80 93 ca 02 	sts	0x02CA, r24
     a86:	06 c0       	rjmp	.+12     	; 0xa94 <_Z12setTuningsM3v+0x112>
     a88:	87 e0       	ldi	r24, 0x07	; 7
     a8a:	9f ef       	ldi	r25, 0xFF	; 255
     a8c:	90 93 cb 02 	sts	0x02CB, r25
     a90:	80 93 ca 02 	sts	0x02CA, r24
     a94:	60 91 ca 02 	lds	r22, 0x02CA
     a98:	70 91 cb 02 	lds	r23, 0x02CB
     a9c:	8d e7       	ldi	r24, 0x7D	; 125
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	a1 d3       	rcall	.+1858   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	08 95       	ret

00000abc <_Z12setTuningsM4v>:
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	00 91 82 02 	lds	r16, 0x0282
     ad8:	10 91 83 02 	lds	r17, 0x0283
     adc:	c0 eb       	ldi	r28, 0xB0	; 176
     ade:	d2 e0       	ldi	r29, 0x02	; 2
     ae0:	19 83       	std	Y+1, r17	; 0x01
     ae2:	08 83       	st	Y, r16
     ae4:	60 91 13 03 	lds	r22, 0x0313
     ae8:	70 91 14 03 	lds	r23, 0x0314
     aec:	60 1b       	sub	r22, r16
     aee:	71 0b       	sbc	r23, r17
     af0:	7d 83       	std	Y+5, r23	; 0x05
     af2:	6c 83       	std	Y+4, r22	; 0x04
     af4:	07 2e       	mov	r0, r23
     af6:	00 0c       	add	r0, r0
     af8:	88 0b       	sbc	r24, r24
     afa:	99 0b       	sbc	r25, r25
     afc:	51 d5       	rcall	.+2722   	; 0x15a0 <__floatsisf>
     afe:	4b 01       	movw	r8, r22
     b00:	5c 01       	movw	r10, r24
     b02:	20 91 e9 02 	lds	r18, 0x02E9
     b06:	30 91 ea 02 	lds	r19, 0x02EA
     b0a:	40 91 eb 02 	lds	r20, 0x02EB
     b0e:	50 91 ec 02 	lds	r21, 0x02EC
     b12:	d2 d5       	rcall	.+2980   	; 0x16b8 <__mulsf3>
     b14:	2e 81       	ldd	r18, Y+6	; 0x06
     b16:	3f 81       	ldd	r19, Y+7	; 0x07
     b18:	48 85       	ldd	r20, Y+8	; 0x08
     b1a:	59 85       	ldd	r21, Y+9	; 0x09
     b1c:	42 d4       	rcall	.+2180   	; 0x13a2 <__addsf3>
     b1e:	6b 01       	movw	r12, r22
     b20:	7c 01       	movw	r14, r24
     b22:	6e 83       	std	Y+6, r22	; 0x06
     b24:	7f 83       	std	Y+7, r23	; 0x07
     b26:	88 87       	std	Y+8, r24	; 0x08
     b28:	99 87       	std	Y+9, r25	; 0x09
     b2a:	20 91 05 02 	lds	r18, 0x0205
     b2e:	30 91 06 02 	lds	r19, 0x0206
     b32:	40 91 07 02 	lds	r20, 0x0207
     b36:	50 91 08 02 	lds	r21, 0x0208
     b3a:	c5 01       	movw	r24, r10
     b3c:	b4 01       	movw	r22, r8
     b3e:	bc d5       	rcall	.+2936   	; 0x16b8 <__mulsf3>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	c7 01       	movw	r24, r14
     b46:	b6 01       	movw	r22, r12
     b48:	2c d4       	rcall	.+2136   	; 0x13a2 <__addsf3>
     b4a:	6b 01       	movw	r12, r22
     b4c:	7c 01       	movw	r14, r24
     b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b50:	9b 85       	ldd	r25, Y+11	; 0x0b
     b52:	98 01       	movw	r18, r16
     b54:	28 1b       	sub	r18, r24
     b56:	39 0b       	sbc	r19, r25
     b58:	b9 01       	movw	r22, r18
     b5a:	33 0f       	add	r19, r19
     b5c:	88 0b       	sbc	r24, r24
     b5e:	99 0b       	sbc	r25, r25
     b60:	1f d5       	rcall	.+2622   	; 0x15a0 <__floatsisf>
     b62:	20 91 01 02 	lds	r18, 0x0201
     b66:	30 91 02 02 	lds	r19, 0x0202
     b6a:	40 91 03 02 	lds	r20, 0x0203
     b6e:	50 91 04 02 	lds	r21, 0x0204
     b72:	a2 d5       	rcall	.+2884   	; 0x16b8 <__mulsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c7 01       	movw	r24, r14
     b7a:	b6 01       	movw	r22, r12
     b7c:	11 d4       	rcall	.+2082   	; 0x13a0 <__subsf3>
     b7e:	dd d4       	rcall	.+2490   	; 0x153a <__fixsfsi>
     b80:	7b 83       	std	Y+3, r23	; 0x03
     b82:	6a 83       	std	Y+2, r22	; 0x02
     b84:	1b 87       	std	Y+11, r17	; 0x0b
     b86:	0a 87       	std	Y+10, r16	; 0x0a
     b88:	2c 85       	ldd	r18, Y+12	; 0x0c
     b8a:	3d 85       	ldd	r19, Y+13	; 0x0d
     b8c:	62 0f       	add	r22, r18
     b8e:	73 1f       	adc	r23, r19
     b90:	cb 01       	movw	r24, r22
     b92:	77 23       	and	r23, r23
     b94:	24 f4       	brge	.+8      	; 0xb9e <_Z12setTuningsM4v+0xe2>
     b96:	88 27       	eor	r24, r24
     b98:	99 27       	eor	r25, r25
     b9a:	86 1b       	sub	r24, r22
     b9c:	97 0b       	sbc	r25, r23
     b9e:	8a 3f       	cpi	r24, 0xFA	; 250
     ba0:	91 05       	cpc	r25, r1
     ba2:	2c f4       	brge	.+10     	; 0xbae <_Z12setTuningsM4v+0xf2>
     ba4:	70 93 bd 02 	sts	0x02BD, r23
     ba8:	60 93 bc 02 	sts	0x02BC, r22
     bac:	10 c0       	rjmp	.+32     	; 0xbce <_Z12setTuningsM4v+0x112>
     bae:	16 16       	cp	r1, r22
     bb0:	17 06       	cpc	r1, r23
     bb2:	3c f4       	brge	.+14     	; 0xbc2 <_Z12setTuningsM4v+0x106>
     bb4:	89 ef       	ldi	r24, 0xF9	; 249
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 bd 02 	sts	0x02BD, r25
     bbc:	80 93 bc 02 	sts	0x02BC, r24
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <_Z12setTuningsM4v+0x112>
     bc2:	87 e0       	ldi	r24, 0x07	; 7
     bc4:	9f ef       	ldi	r25, 0xFF	; 255
     bc6:	90 93 bd 02 	sts	0x02BD, r25
     bca:	80 93 bc 02 	sts	0x02BC, r24
     bce:	60 91 bc 02 	lds	r22, 0x02BC
     bd2:	70 91 bd 02 	lds	r23, 0x02BD
     bd6:	8c e7       	ldi	r24, 0x7C	; 124
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	04 d3       	rcall	.+1544   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	08 95       	ret

00000bf6 <_Z10computePidv>:
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	80 91 47 02 	lds	r24, 0x0247
     bfe:	88 23       	and	r24, r24
     c00:	59 f0       	breq	.+22     	; 0xc18 <_Z10computePidv+0x22>
     c02:	80 91 e8 02 	lds	r24, 0x02E8
     c06:	88 23       	and	r24, r24
     c08:	39 f0       	breq	.+14     	; 0xc18 <_Z10computePidv+0x22>
     c0a:	81 dd       	rcall	.-1278   	; 0x70e <_Z12setTuningsM1v>
     c0c:	1d de       	rcall	.-966    	; 0x848 <_Z12setTuningsM2v>
     c0e:	b9 de       	rcall	.-654    	; 0x982 <_Z12setTuningsM3v>
     c10:	55 df       	rcall	.-342    	; 0xabc <_Z12setTuningsM4v>
     c12:	10 92 e8 02 	sts	0x02E8, r1
     c16:	22 c0       	rjmp	.+68     	; 0xc5c <_Z10computePidv+0x66>
     c18:	c3 e0       	ldi	r28, 0x03	; 3
     c1a:	d3 e0       	ldi	r29, 0x03	; 3
     c1c:	68 81       	ld	r22, Y
     c1e:	79 81       	ldd	r23, Y+1	; 0x01
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	9b 81       	ldd	r25, Y+3	; 0x03
     c24:	8a d4       	rcall	.+2324   	; 0x153a <__fixsfsi>
     c26:	8f e7       	ldi	r24, 0x7F	; 127
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	dc d2       	rcall	.+1464   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     c2c:	6c 81       	ldd	r22, Y+4	; 0x04
     c2e:	7d 81       	ldd	r23, Y+5	; 0x05
     c30:	8e 81       	ldd	r24, Y+6	; 0x06
     c32:	9f 81       	ldd	r25, Y+7	; 0x07
     c34:	82 d4       	rcall	.+2308   	; 0x153a <__fixsfsi>
     c36:	8e e7       	ldi	r24, 0x7E	; 126
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	d4 d2       	rcall	.+1448   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     c3c:	68 85       	ldd	r22, Y+8	; 0x08
     c3e:	79 85       	ldd	r23, Y+9	; 0x09
     c40:	8a 85       	ldd	r24, Y+10	; 0x0a
     c42:	9b 85       	ldd	r25, Y+11	; 0x0b
     c44:	7a d4       	rcall	.+2292   	; 0x153a <__fixsfsi>
     c46:	8d e7       	ldi	r24, 0x7D	; 125
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	cc d2       	rcall	.+1432   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     c4c:	6c 85       	ldd	r22, Y+12	; 0x0c
     c4e:	7d 85       	ldd	r23, Y+13	; 0x0d
     c50:	8e 85       	ldd	r24, Y+14	; 0x0e
     c52:	9f 85       	ldd	r25, Y+15	; 0x0f
     c54:	72 d4       	rcall	.+2276   	; 0x153a <__fixsfsi>
     c56:	8c e7       	ldi	r24, 0x7C	; 124
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	c4 d2       	rcall	.+1416   	; 0x11e4 <_ZN5Motor11SetOcrValueEi>
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <_Z9stopDrivev>:
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	8f e7       	ldi	r24, 0x7F	; 127
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	7b d2       	rcall	.+1270   	; 0x1162 <_ZN5Motor9StopMotorEv>
     c6c:	8e e7       	ldi	r24, 0x7E	; 126
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	78 d2       	rcall	.+1264   	; 0x1162 <_ZN5Motor9StopMotorEv>
     c72:	8d e7       	ldi	r24, 0x7D	; 125
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	75 d2       	rcall	.+1258   	; 0x1162 <_ZN5Motor9StopMotorEv>
     c78:	8c e7       	ldi	r24, 0x7C	; 124
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	72 d2       	rcall	.+1252   	; 0x1162 <_ZN5Motor9StopMotorEv>
     c7e:	10 92 14 03 	sts	0x0314, r1
     c82:	10 92 13 03 	sts	0x0313, r1
     c86:	10 92 16 03 	sts	0x0316, r1
     c8a:	10 92 15 03 	sts	0x0315, r1
     c8e:	10 92 18 03 	sts	0x0318, r1
     c92:	10 92 17 03 	sts	0x0317, r1
     c96:	10 92 1a 03 	sts	0x031A, r1
     c9a:	10 92 19 03 	sts	0x0319, r1
     c9e:	8a ed       	ldi	r24, 0xDA	; 218
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	fc 01       	movw	r30, r24
     ca4:	15 86       	std	Z+13, r1	; 0x0d
     ca6:	14 86       	std	Z+12, r1	; 0x0c
     ca8:	cc ec       	ldi	r28, 0xCC	; 204
     caa:	d2 e0       	ldi	r29, 0x02	; 2
     cac:	1d 86       	std	Y+13, r1	; 0x0d
     cae:	1c 86       	std	Y+12, r1	; 0x0c
     cb0:	ae eb       	ldi	r26, 0xBE	; 190
     cb2:	b2 e0       	ldi	r27, 0x02	; 2
     cb4:	1d 96       	adiw	r26, 0x0d	; 13
     cb6:	1c 92       	st	X, r1
     cb8:	1e 92       	st	-X, r1
     cba:	1c 97       	sbiw	r26, 0x0c	; 12
     cbc:	20 eb       	ldi	r18, 0xB0	; 176
     cbe:	32 e0       	ldi	r19, 0x02	; 2
     cc0:	f9 01       	movw	r30, r18
     cc2:	15 86       	std	Z+13, r1	; 0x0d
     cc4:	14 86       	std	Z+12, r1	; 0x0c
     cc6:	fc 01       	movw	r30, r24
     cc8:	16 82       	std	Z+6, r1	; 0x06
     cca:	17 82       	std	Z+7, r1	; 0x07
     ccc:	10 86       	std	Z+8, r1	; 0x08
     cce:	11 86       	std	Z+9, r1	; 0x09
     cd0:	1e 82       	std	Y+6, r1	; 0x06
     cd2:	1f 82       	std	Y+7, r1	; 0x07
     cd4:	18 86       	std	Y+8, r1	; 0x08
     cd6:	19 86       	std	Y+9, r1	; 0x09
     cd8:	16 96       	adiw	r26, 0x06	; 6
     cda:	1d 92       	st	X+, r1
     cdc:	1d 92       	st	X+, r1
     cde:	1d 92       	st	X+, r1
     ce0:	1c 92       	st	X, r1
     ce2:	19 97       	sbiw	r26, 0x09	; 9
     ce4:	f9 01       	movw	r30, r18
     ce6:	16 82       	std	Z+6, r1	; 0x06
     ce8:	17 82       	std	Z+7, r1	; 0x07
     cea:	10 86       	std	Z+8, r1	; 0x08
     cec:	11 86       	std	Z+9, r1	; 0x09
     cee:	fc 01       	movw	r30, r24
     cf0:	13 86       	std	Z+11, r1	; 0x0b
     cf2:	12 86       	std	Z+10, r1	; 0x0a
     cf4:	1b 86       	std	Y+11, r1	; 0x0b
     cf6:	1a 86       	std	Y+10, r1	; 0x0a
     cf8:	1b 96       	adiw	r26, 0x0b	; 11
     cfa:	1c 92       	st	X, r1
     cfc:	1e 92       	st	-X, r1
     cfe:	1a 97       	sbiw	r26, 0x0a	; 10
     d00:	f9 01       	movw	r30, r18
     d02:	13 86       	std	Z+11, r1	; 0x0b
     d04:	12 86       	std	Z+10, r1	; 0x0a
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <main>:
	//INPUT(SW2);
	//INPUT(SW3);
	//INPUT(SW4);
	//INPUT(SW5);
	//INPUT(SW6);
	sei();
     d0c:	78 94       	sei
	initUART2();
     d0e:	a6 d2       	rcall	.+1356   	; 0x125c <_Z9initUART2v>
	UART2TransmitString("Initializing all robot... \r\n");
     d10:	88 e4       	ldi	r24, 0x48	; 72
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	f7 d2       	rcall	.+1518   	; 0x1304 <_Z19UART2TransmitStringPKc>
	l1.initialise();
     d16:	85 e7       	ldi	r24, 0x75	; 117
     d18:	92 e0       	ldi	r25, 0x02	; 2
     d1a:	54 db       	rcall	.-2392   	; 0x3c4 <_ZN11Linetracker10initialiseEv>
    while (1) 
    {	
		
		//UART0TransmitData(l1.Get_Sensors_Data());
		//UART0TransmitString("\n");
		rcvdata = UART2Receive();
     d1c:	c1 d2       	rcall	.+1410   	; 0x12a0 <_Z12UART2Receivev>
     d1e:	80 93 74 02 	sts	0x0274, r24
		if(newdatacome)
     d22:	80 91 00 02 	lds	r24, 0x0200
     d26:	88 23       	and	r24, r24
     d28:	31 f0       	breq	.+12     	; 0xd36 <main+0x2a>
		{
			movx(10000,Front);
     d2a:	62 e0       	ldi	r22, 0x02	; 2
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e1       	ldi	r24, 0x10	; 16
     d30:	97 e2       	ldi	r25, 0x27	; 39
     d32:	52 dc       	rcall	.-1884   	; 0x5d8 <_Z4movxii>
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <main+0x34>
		}
		else if(!newdatacome)
		{
			movx(10000,Back);
     d36:	63 e0       	ldi	r22, 0x03	; 3
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	80 e1       	ldi	r24, 0x10	; 16
     d3c:	97 e2       	ldi	r25, 0x27	; 39
     d3e:	4c dc       	rcall	.-1896   	; 0x5d8 <_Z4movxii>
		}
		if(rcvdata == 'p')	{incrkpp();}
     d40:	80 91 74 02 	lds	r24, 0x0274
     d44:	80 37       	cpi	r24, 0x70	; 112
     d46:	b1 f4       	brne	.+44     	; 0xd74 <main+0x68>
		//velocity_robot[2] = 0;
		//calculatevel();
		//
//}

inline void incrkpp(){kpp += 0.01;}
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	37 ed       	ldi	r19, 0xD7	; 215
     d4c:	43 e2       	ldi	r20, 0x23	; 35
     d4e:	5c e3       	ldi	r21, 0x3C	; 60
     d50:	60 91 11 02 	lds	r22, 0x0211
     d54:	70 91 12 02 	lds	r23, 0x0212
     d58:	80 91 13 02 	lds	r24, 0x0213
     d5c:	90 91 14 02 	lds	r25, 0x0214
     d60:	20 d3       	rcall	.+1600   	; 0x13a2 <__addsf3>
     d62:	60 93 11 02 	sts	0x0211, r22
     d66:	70 93 12 02 	sts	0x0212, r23
     d6a:	80 93 13 02 	sts	0x0213, r24
     d6e:	90 93 14 02 	sts	0x0214, r25
     d72:	7c c0       	rjmp	.+248    	; 0xe6c <main+0x160>
		else if(rcvdata == 'o')	{dcrkpp();}
     d74:	8f 36       	cpi	r24, 0x6F	; 111
     d76:	b1 f4       	brne	.+44     	; 0xda4 <main+0x98>
inline void dcrkpp(){kpp -= 0.01;}
     d78:	2a e0       	ldi	r18, 0x0A	; 10
     d7a:	37 ed       	ldi	r19, 0xD7	; 215
     d7c:	43 e2       	ldi	r20, 0x23	; 35
     d7e:	5c e3       	ldi	r21, 0x3C	; 60
     d80:	60 91 11 02 	lds	r22, 0x0211
     d84:	70 91 12 02 	lds	r23, 0x0212
     d88:	80 91 13 02 	lds	r24, 0x0213
     d8c:	90 91 14 02 	lds	r25, 0x0214
     d90:	07 d3       	rcall	.+1550   	; 0x13a0 <__subsf3>
     d92:	60 93 11 02 	sts	0x0211, r22
     d96:	70 93 12 02 	sts	0x0212, r23
     d9a:	80 93 13 02 	sts	0x0213, r24
     d9e:	90 93 14 02 	sts	0x0214, r25
     da2:	64 c0       	rjmp	.+200    	; 0xe6c <main+0x160>
		else if(rcvdata == 'i')	{incrkii();}
     da4:	89 36       	cpi	r24, 0x69	; 105
     da6:	b1 f4       	brne	.+44     	; 0xdd4 <main+0xc8>
inline void incrkii(){kii += 0.00001;}
     da8:	2c ea       	ldi	r18, 0xAC	; 172
     daa:	35 ec       	ldi	r19, 0xC5	; 197
     dac:	47 e2       	ldi	r20, 0x27	; 39
     dae:	57 e3       	ldi	r21, 0x37	; 55
     db0:	60 91 0d 02 	lds	r22, 0x020D
     db4:	70 91 0e 02 	lds	r23, 0x020E
     db8:	80 91 0f 02 	lds	r24, 0x020F
     dbc:	90 91 10 02 	lds	r25, 0x0210
     dc0:	f0 d2       	rcall	.+1504   	; 0x13a2 <__addsf3>
     dc2:	60 93 0d 02 	sts	0x020D, r22
     dc6:	70 93 0e 02 	sts	0x020E, r23
     dca:	80 93 0f 02 	sts	0x020F, r24
     dce:	90 93 10 02 	sts	0x0210, r25
     dd2:	4c c0       	rjmp	.+152    	; 0xe6c <main+0x160>
		else if(rcvdata == 'd')	{incrkdd();}
     dd4:	84 36       	cpi	r24, 0x64	; 100
     dd6:	b1 f4       	brne	.+44     	; 0xe04 <main+0xf8>
inline void dcrkii(){kii -= 0.00001;}
inline void incrkdd(){kdd += 0.0005;}
     dd8:	2f e6       	ldi	r18, 0x6F	; 111
     dda:	32 e1       	ldi	r19, 0x12	; 18
     ddc:	43 e0       	ldi	r20, 0x03	; 3
     dde:	5a e3       	ldi	r21, 0x3A	; 58
     de0:	60 91 09 02 	lds	r22, 0x0209
     de4:	70 91 0a 02 	lds	r23, 0x020A
     de8:	80 91 0b 02 	lds	r24, 0x020B
     dec:	90 91 0c 02 	lds	r25, 0x020C
     df0:	d8 d2       	rcall	.+1456   	; 0x13a2 <__addsf3>
     df2:	60 93 09 02 	sts	0x0209, r22
     df6:	70 93 0a 02 	sts	0x020A, r23
     dfa:	80 93 0b 02 	sts	0x020B, r24
     dfe:	90 93 0c 02 	sts	0x020C, r25
     e02:	34 c0       	rjmp	.+104    	; 0xe6c <main+0x160>
		else if(rcvdata == 'u')	{dcrkii();}
     e04:	85 37       	cpi	r24, 0x75	; 117
     e06:	b1 f4       	brne	.+44     	; 0xe34 <main+0x128>
//}

inline void incrkpp(){kpp += 0.01;}
inline void dcrkpp(){kpp -= 0.01;}
inline void incrkii(){kii += 0.00001;}
inline void dcrkii(){kii -= 0.00001;}
     e08:	2c ea       	ldi	r18, 0xAC	; 172
     e0a:	35 ec       	ldi	r19, 0xC5	; 197
     e0c:	47 e2       	ldi	r20, 0x27	; 39
     e0e:	57 e3       	ldi	r21, 0x37	; 55
     e10:	60 91 0d 02 	lds	r22, 0x020D
     e14:	70 91 0e 02 	lds	r23, 0x020E
     e18:	80 91 0f 02 	lds	r24, 0x020F
     e1c:	90 91 10 02 	lds	r25, 0x0210
     e20:	bf d2       	rcall	.+1406   	; 0x13a0 <__subsf3>
     e22:	60 93 0d 02 	sts	0x020D, r22
     e26:	70 93 0e 02 	sts	0x020E, r23
     e2a:	80 93 0f 02 	sts	0x020F, r24
     e2e:	90 93 10 02 	sts	0x0210, r25
     e32:	1c c0       	rjmp	.+56     	; 0xe6c <main+0x160>
		else if(rcvdata == 's')	{dcrkdd();}
     e34:	83 37       	cpi	r24, 0x73	; 115
     e36:	b1 f4       	brne	.+44     	; 0xe64 <main+0x158>
inline void incrkdd(){kdd += 0.0005;}
inline void dcrkdd(){kdd -= 0.0005;}
     e38:	2f e6       	ldi	r18, 0x6F	; 111
     e3a:	32 e1       	ldi	r19, 0x12	; 18
     e3c:	43 e0       	ldi	r20, 0x03	; 3
     e3e:	5a e3       	ldi	r21, 0x3A	; 58
     e40:	60 91 09 02 	lds	r22, 0x0209
     e44:	70 91 0a 02 	lds	r23, 0x020A
     e48:	80 91 0b 02 	lds	r24, 0x020B
     e4c:	90 91 0c 02 	lds	r25, 0x020C
     e50:	a7 d2       	rcall	.+1358   	; 0x13a0 <__subsf3>
     e52:	60 93 09 02 	sts	0x0209, r22
     e56:	70 93 0a 02 	sts	0x020A, r23
     e5a:	80 93 0b 02 	sts	0x020B, r24
     e5e:	90 93 0c 02 	sts	0x020C, r25
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <main+0x160>
		else if(rcvdata == 'r'){newdatacome = false;}
     e64:	82 37       	cpi	r24, 0x72	; 114
     e66:	11 f4       	brne	.+4      	; 0xe6c <main+0x160>
     e68:	10 92 00 02 	sts	0x0200, r1
		computePid();
     e6c:	c4 de       	rcall	.-632    	; 0xbf6 <_Z10computePidv>
		if(l1.Get_Sensors_Data() == 255){
     e6e:	85 e7       	ldi	r24, 0x75	; 117
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	b7 da       	rcall	.-2706   	; 0x3e2 <_ZN11Linetracker16Get_Sensors_DataEv>
     e74:	8f 3f       	cpi	r24, 0xFF	; 255
     e76:	91 05       	cpc	r25, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <main+0x170>
			stopDrive();
     e7a:	f3 de       	rcall	.-538    	; 0xc62 <_Z9stopDrivev>
		
		//UART2TransmitData(encoderX.getdistance());
		//UART2TransmitString("\t");
		//UART2TransmitData(encoderx.SETPOINT);
		//UART2TransmitString("\t");
		UART2TransmitData(kpp*100);
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	48 ec       	ldi	r20, 0xC8	; 200
     e82:	52 e4       	ldi	r21, 0x42	; 66
     e84:	60 91 11 02 	lds	r22, 0x0211
     e88:	70 91 12 02 	lds	r23, 0x0212
     e8c:	80 91 13 02 	lds	r24, 0x0213
     e90:	90 91 14 02 	lds	r25, 0x0214
     e94:	11 d4       	rcall	.+2082   	; 0x16b8 <__mulsf3>
     e96:	51 d3       	rcall	.+1698   	; 0x153a <__fixsfsi>
     e98:	cb 01       	movw	r24, r22
     e9a:	0c d2       	rcall	.+1048   	; 0x12b4 <_Z17UART2TransmitDatai>
		UART2TransmitString(" e-2\t\t");
     e9c:	85 e6       	ldi	r24, 0x65	; 101
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	31 d2       	rcall	.+1122   	; 0x1304 <_Z19UART2TransmitStringPKc>
		UART2TransmitData(kii * 100000);
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e5       	ldi	r19, 0x50	; 80
     ea6:	43 ec       	ldi	r20, 0xC3	; 195
     ea8:	57 e4       	ldi	r21, 0x47	; 71
     eaa:	60 91 0d 02 	lds	r22, 0x020D
     eae:	70 91 0e 02 	lds	r23, 0x020E
     eb2:	80 91 0f 02 	lds	r24, 0x020F
     eb6:	90 91 10 02 	lds	r25, 0x0210
     eba:	fe d3       	rcall	.+2044   	; 0x16b8 <__mulsf3>
     ebc:	3e d3       	rcall	.+1660   	; 0x153a <__fixsfsi>
     ebe:	cb 01       	movw	r24, r22
     ec0:	f9 d1       	rcall	.+1010   	; 0x12b4 <_Z17UART2TransmitDatai>
		UART2TransmitString(" e-5\t\t");
     ec2:	8c e6       	ldi	r24, 0x6C	; 108
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	1e d2       	rcall	.+1084   	; 0x1304 <_Z19UART2TransmitStringPKc>
		UART2TransmitData(kdd * 1000);
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	54 e4       	ldi	r21, 0x44	; 68
     ed0:	60 91 09 02 	lds	r22, 0x0209
     ed4:	70 91 0a 02 	lds	r23, 0x020A
     ed8:	80 91 0b 02 	lds	r24, 0x020B
     edc:	90 91 0c 02 	lds	r25, 0x020C
     ee0:	eb d3       	rcall	.+2006   	; 0x16b8 <__mulsf3>
     ee2:	2b d3       	rcall	.+1622   	; 0x153a <__fixsfsi>
     ee4:	cb 01       	movw	r24, r22
     ee6:	e6 d1       	rcall	.+972    	; 0x12b4 <_Z17UART2TransmitDatai>
		//UART0TransmitData();
		UART2TransmitString(" e-2\t\t");
     ee8:	85 e6       	ldi	r24, 0x65	; 101
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	0b d2       	rcall	.+1046   	; 0x1304 <_Z19UART2TransmitStringPKc>
		//UART0TransmitData(velocity_motor[3]);
		//UART0TransmitString("\t");
		UART2TransmitString("\r\n");
     eee:	82 e6       	ldi	r24, 0x62	; 98
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	08 d2       	rcall	.+1040   	; 0x1304 <_Z19UART2TransmitStringPKc>
/////////////////////////////////////////
char rcvdata;
char detData = 'f';
bool newdatacome = true;

int main(void)
     ef4:	13 cf       	rjmp	.-474    	; 0xd1c <main+0x10>

00000ef6 <_GLOBAL__sub_I_MotorPidFlag>:
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
     ef6:	10 92 a9 02 	sts	0x02A9, r1
     efa:	10 92 a8 02 	sts	0x02A8, r1
			Init_encoder_interrupt();
     efe:	88 ea       	ldi	r24, 0xA8	; 168
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	22 d9       	rcall	.-3516   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     f04:	88 ea       	ldi	r24, 0xA8	; 168
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	2a d9       	rcall	.-3500   	; 0x15e <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
     f0a:	10 92 a1 02 	sts	0x02A1, r1
     f0e:	10 92 a0 02 	sts	0x02A0, r1
			Init_encoder_interrupt();
     f12:	80 ea       	ldi	r24, 0xA0	; 160
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	18 d9       	rcall	.-3536   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     f18:	80 ea       	ldi	r24, 0xA0	; 160
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	20 d9       	rcall	.-3520   	; 0x15e <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
     f1e:	10 92 99 02 	sts	0x0299, r1
     f22:	10 92 98 02 	sts	0x0298, r1
			Init_encoder_interrupt();
     f26:	88 e9       	ldi	r24, 0x98	; 152
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	0e d9       	rcall	.-3556   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     f2c:	88 e9       	ldi	r24, 0x98	; 152
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	16 d9       	rcall	.-3540   	; 0x15e <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
     f32:	10 92 91 02 	sts	0x0291, r1
     f36:	10 92 90 02 	sts	0x0290, r1
			Init_encoder_interrupt();
     f3a:	80 e9       	ldi	r24, 0x90	; 144
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	04 d9       	rcall	.-3576   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     f40:	80 e9       	ldi	r24, 0x90	; 144
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0c d9       	rcall	.-3560   	; 0x15e <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
     f46:	10 92 89 02 	sts	0x0289, r1
     f4a:	10 92 88 02 	sts	0x0288, r1
			Init_encoder_interrupt();
     f4e:	88 e8       	ldi	r24, 0x88	; 136
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	fa d8       	rcall	.-3596   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     f54:	88 e8       	ldi	r24, 0x88	; 136
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	02 d9       	rcall	.-3580   	; 0x15e <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
     f5a:	10 92 81 02 	sts	0x0281, r1
     f5e:	10 92 80 02 	sts	0x0280, r1
			Init_encoder_interrupt();
     f62:	80 e8       	ldi	r24, 0x80	; 128
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	f0 d8       	rcall	.-3616   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     f68:	80 e8       	ldi	r24, 0x80	; 128
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	f8 d8       	rcall	.-3600   	; 0x15e <_ZN7encoder10Init_timerEv>
#include "pid.h"
#include "Linetracker.h"
#include "Switch.h"
/////////////	Objects //////////////////
encoder encoderX,encoderY,e1,e2,e3,e4;
Motor m1(1) , m2(2) , m3(3) , m4(4);
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	8f e7       	ldi	r24, 0x7F	; 127
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	40 da       	rcall	.-2944   	; 0x3f6 <_ZN5MotorC1Eh>
     f76:	62 e0       	ldi	r22, 0x02	; 2
     f78:	8e e7       	ldi	r24, 0x7E	; 126
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	3c da       	rcall	.-2952   	; 0x3f6 <_ZN5MotorC1Eh>
     f7e:	63 e0       	ldi	r22, 0x03	; 3
     f80:	8d e7       	ldi	r24, 0x7D	; 125
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	38 da       	rcall	.-2960   	; 0x3f6 <_ZN5MotorC1Eh>
     f86:	64 e0       	ldi	r22, 0x04	; 4
     f88:	8c e7       	ldi	r24, 0x7C	; 124
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	34 da       	rcall	.-2968   	; 0x3f6 <_ZN5MotorC1Eh>
Linetracker l1(0);
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	85 e7       	ldi	r24, 0x75	; 117
     f94:	92 e0       	ldi	r25, 0x02	; 2
     f96:	10 ca       	rjmp	.-3040   	; 0x3b8 <_ZN11LinetrackerC1Ei>
     f98:	08 95       	ret

00000f9a <_ZN5Motor7InitPWMEv>:
#include "uart.h"


void Motor::InitPWM()
{
	if (num==1)
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	f1 f4       	brne	.+60     	; 0xfde <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     fa2:	e7 e0       	ldi	r30, 0x07	; 7
     fa4:	f1 e0       	ldi	r31, 0x01	; 1
     fa6:	80 81       	ld	r24, Z
     fa8:	80 64       	ori	r24, 0x40	; 64
     faa:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     fb2:	ea e0       	ldi	r30, 0x0A	; 10
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	80 81       	ld	r24, Z
     fb8:	80 62       	ori	r24, 0x20	; 32
     fba:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     fbc:	e0 e2       	ldi	r30, 0x20	; 32
     fbe:	f1 e0       	ldi	r31, 0x01	; 1
     fc0:	80 81       	ld	r24, Z
     fc2:	8a 60       	ori	r24, 0x0A	; 10
     fc4:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     fc6:	e1 e2       	ldi	r30, 0x21	; 33
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	80 81       	ld	r24, Z
     fcc:	8a 61       	ori	r24, 0x1A	; 26
     fce:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     fd0:	89 ef       	ldi	r24, 0xF9	; 249
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 27 01 	sts	0x0127, r25
     fd8:	80 93 26 01 	sts	0x0126, r24
     fdc:	08 95       	ret
	}
	else if(num==2)
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	f1 f4       	brne	.+60     	; 0x101e <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     fe2:	e7 e0       	ldi	r30, 0x07	; 7
     fe4:	f1 e0       	ldi	r31, 0x01	; 1
     fe6:	80 81       	ld	r24, Z
     fe8:	84 60       	ori	r24, 0x04	; 4
     fea:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     fec:	80 81       	ld	r24, Z
     fee:	88 60       	ori	r24, 0x08	; 8
     ff0:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     ff2:	ea e0       	ldi	r30, 0x0A	; 10
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
     ff6:	80 81       	ld	r24, Z
     ff8:	88 60       	ori	r24, 0x08	; 8
     ffa:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     ffc:	e0 e2       	ldi	r30, 0x20	; 32
     ffe:	f1 e0       	ldi	r31, 0x01	; 1
    1000:	80 81       	ld	r24, Z
    1002:	82 68       	ori	r24, 0x82	; 130
    1004:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
    1006:	e1 e2       	ldi	r30, 0x21	; 33
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	80 81       	ld	r24, Z
    100c:	8a 61       	ori	r24, 0x1A	; 26
    100e:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
    1010:	89 ef       	ldi	r24, 0xF9	; 249
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	90 93 27 01 	sts	0x0127, r25
    1018:	80 93 26 01 	sts	0x0126, r24
    101c:	08 95       	ret
	}
	else if(num==3)
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	f1 f4       	brne	.+60     	; 0x105e <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
    1022:	e7 e0       	ldi	r30, 0x07	; 7
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	80 81       	ld	r24, Z
    1028:	80 61       	ori	r24, 0x10	; 16
    102a:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
    102c:	80 81       	ld	r24, Z
    102e:	80 62       	ori	r24, 0x20	; 32
    1030:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
    1032:	ea e0       	ldi	r30, 0x0A	; 10
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	80 81       	ld	r24, Z
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
    103c:	e0 e2       	ldi	r30, 0x20	; 32
    103e:	f1 e0       	ldi	r31, 0x01	; 1
    1040:	80 81       	ld	r24, Z
    1042:	82 62       	ori	r24, 0x22	; 34
    1044:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
    1046:	e1 e2       	ldi	r30, 0x21	; 33
    1048:	f1 e0       	ldi	r31, 0x01	; 1
    104a:	80 81       	ld	r24, Z
    104c:	8a 61       	ori	r24, 0x1A	; 26
    104e:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
    1050:	89 ef       	ldi	r24, 0xF9	; 249
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	90 93 27 01 	sts	0x0127, r25
    1058:	80 93 26 01 	sts	0x0126, r24
    105c:	08 95       	ret
	} 
	else if(num==4)
    105e:	84 30       	cpi	r24, 0x04	; 4
    1060:	e9 f4       	brne	.+58     	; 0x109c <_ZN5Motor7InitPWMEv+0x102>
	{
		OUTPUT(DD_F4);
    1062:	e7 e0       	ldi	r30, 0x07	; 7
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	80 81       	ld	r24, Z
    1068:	81 60       	ori	r24, 0x01	; 1
    106a:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
    106c:	80 81       	ld	r24, Z
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
    1072:	e1 e0       	ldi	r30, 0x01	; 1
    1074:	f1 e0       	ldi	r31, 0x01	; 1
    1076:	80 81       	ld	r24, Z
    1078:	88 60       	ori	r24, 0x08	; 8
    107a:	80 83       	st	Z, r24

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
    107c:	e0 ea       	ldi	r30, 0xA0	; 160
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	82 68       	ori	r24, 0x82	; 130
    1084:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
    1086:	e1 ea       	ldi	r30, 0xA1	; 161
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8a 61       	ori	r24, 0x1A	; 26
    108e:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
    1090:	89 ef       	ldi	r24, 0xF9	; 249
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	90 93 a7 00 	sts	0x00A7, r25
    1098:	80 93 a6 00 	sts	0x00A6, r24
    109c:	08 95       	ret

0000109e <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
    109e:	fc 01       	movw	r30, r24
    10a0:	80 81       	ld	r24, Z
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	91 f0       	breq	.+36     	; 0x10ca <_ZN5Motor19SetForwardDirectionEv+0x2c>
    10a6:	18 f4       	brcc	.+6      	; 0x10ae <_ZN5Motor19SetForwardDirectionEv+0x10>
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <_ZN5Motor19SetForwardDirectionEv+0x1a>
    10ac:	08 95       	ret
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	a9 f0       	breq	.+42     	; 0x10dc <_ZN5Motor19SetForwardDirectionEv+0x3e>
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	e1 f0       	breq	.+56     	; 0x10ee <_ZN5Motor19SetForwardDirectionEv+0x50>
    10b6:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
    10b8:	e8 e0       	ldi	r30, 0x08	; 8
    10ba:	f1 e0       	ldi	r31, 0x01	; 1
    10bc:	80 81       	ld	r24, Z
    10be:	80 64       	ori	r24, 0x40	; 64
    10c0:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
    10c2:	80 81       	ld	r24, Z
    10c4:	8f 77       	andi	r24, 0x7F	; 127
    10c6:	80 83       	st	Z, r24
			break;
    10c8:	08 95       	ret
		case 2:
			SET		(DD_F2);
    10ca:	e8 e0       	ldi	r30, 0x08	; 8
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	80 81       	ld	r24, Z
    10d0:	84 60       	ori	r24, 0x04	; 4
    10d2:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
    10d4:	80 81       	ld	r24, Z
    10d6:	87 7f       	andi	r24, 0xF7	; 247
    10d8:	80 83       	st	Z, r24
			break;
    10da:	08 95       	ret
		case 3:
			SET		(DD_F3);
    10dc:	e8 e0       	ldi	r30, 0x08	; 8
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	80 81       	ld	r24, Z
    10e2:	80 61       	ori	r24, 0x10	; 16
    10e4:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 7d       	andi	r24, 0xDF	; 223
    10ea:	80 83       	st	Z, r24
			break;
    10ec:	08 95       	ret
		case 4:
			SET		(DD_F4);
    10ee:	e8 e0       	ldi	r30, 0x08	; 8
    10f0:	f1 e0       	ldi	r31, 0x01	; 1
    10f2:	80 81       	ld	r24, Z
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
    10f8:	80 81       	ld	r24, Z
    10fa:	8d 7f       	andi	r24, 0xFD	; 253
    10fc:	80 83       	st	Z, r24
    10fe:	08 95       	ret

00001100 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	91 f0       	breq	.+36     	; 0x112c <_ZN5Motor19SetReverseDirectionEv+0x2c>
    1108:	18 f4       	brcc	.+6      	; 0x1110 <_ZN5Motor19SetReverseDirectionEv+0x10>
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	31 f0       	breq	.+12     	; 0x111a <_ZN5Motor19SetReverseDirectionEv+0x1a>
    110e:	08 95       	ret
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	a9 f0       	breq	.+42     	; 0x113e <_ZN5Motor19SetReverseDirectionEv+0x3e>
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	e1 f0       	breq	.+56     	; 0x1150 <_ZN5Motor19SetReverseDirectionEv+0x50>
    1118:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
    111a:	e8 e0       	ldi	r30, 0x08	; 8
    111c:	f1 e0       	ldi	r31, 0x01	; 1
    111e:	80 81       	ld	r24, Z
    1120:	8f 7b       	andi	r24, 0xBF	; 191
    1122:	80 83       	st	Z, r24
			SET		(DD_B1);
    1124:	80 81       	ld	r24, Z
    1126:	80 68       	ori	r24, 0x80	; 128
    1128:	80 83       	st	Z, r24
			break;
    112a:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
    112c:	e8 e0       	ldi	r30, 0x08	; 8
    112e:	f1 e0       	ldi	r31, 0x01	; 1
    1130:	80 81       	ld	r24, Z
    1132:	8b 7f       	andi	r24, 0xFB	; 251
    1134:	80 83       	st	Z, r24
			SET		(DD_B2);
    1136:	80 81       	ld	r24, Z
    1138:	88 60       	ori	r24, 0x08	; 8
    113a:	80 83       	st	Z, r24
			break;
    113c:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
    113e:	e8 e0       	ldi	r30, 0x08	; 8
    1140:	f1 e0       	ldi	r31, 0x01	; 1
    1142:	80 81       	ld	r24, Z
    1144:	8f 7e       	andi	r24, 0xEF	; 239
    1146:	80 83       	st	Z, r24
			SET		(DD_B3);
    1148:	80 81       	ld	r24, Z
    114a:	80 62       	ori	r24, 0x20	; 32
    114c:	80 83       	st	Z, r24
			break;
    114e:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
    1150:	e8 e0       	ldi	r30, 0x08	; 8
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	80 81       	ld	r24, Z
    1156:	8e 7f       	andi	r24, 0xFE	; 254
    1158:	80 83       	st	Z, r24
			SET		(DD_B4);
    115a:	80 81       	ld	r24, Z
    115c:	82 60       	ori	r24, 0x02	; 2
    115e:	80 83       	st	Z, r24
    1160:	08 95       	ret

00001162 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
    1162:	fc 01       	movw	r30, r24
    1164:	80 81       	ld	r24, Z
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	b1 f0       	breq	.+44     	; 0x1196 <_ZN5Motor9StopMotorEv+0x34>
    116a:	18 f4       	brcc	.+6      	; 0x1172 <_ZN5Motor9StopMotorEv+0x10>
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	31 f0       	breq	.+12     	; 0x117c <_ZN5Motor9StopMotorEv+0x1a>
    1170:	08 95       	ret
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	e9 f0       	breq	.+58     	; 0x11b0 <_ZN5Motor9StopMotorEv+0x4e>
    1176:	84 30       	cpi	r24, 0x04	; 4
    1178:	41 f1       	breq	.+80     	; 0x11ca <_ZN5Motor9StopMotorEv+0x68>
    117a:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
    117c:	e8 e0       	ldi	r30, 0x08	; 8
    117e:	f1 e0       	ldi	r31, 0x01	; 1
    1180:	80 81       	ld	r24, Z
    1182:	8f 7b       	andi	r24, 0xBF	; 191
    1184:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
    1186:	80 81       	ld	r24, Z
    1188:	8f 77       	andi	r24, 0x7F	; 127
    118a:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
    118c:	10 92 2d 01 	sts	0x012D, r1
    1190:	10 92 2c 01 	sts	0x012C, r1
			break;
    1194:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
    1196:	e8 e0       	ldi	r30, 0x08	; 8
    1198:	f1 e0       	ldi	r31, 0x01	; 1
    119a:	80 81       	ld	r24, Z
    119c:	8b 7f       	andi	r24, 0xFB	; 251
    119e:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
    11a0:	80 81       	ld	r24, Z
    11a2:	87 7f       	andi	r24, 0xF7	; 247
    11a4:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
    11a6:	10 92 29 01 	sts	0x0129, r1
    11aa:	10 92 28 01 	sts	0x0128, r1
			break;
    11ae:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
    11b0:	e8 e0       	ldi	r30, 0x08	; 8
    11b2:	f1 e0       	ldi	r31, 0x01	; 1
    11b4:	80 81       	ld	r24, Z
    11b6:	8f 7e       	andi	r24, 0xEF	; 239
    11b8:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 7d       	andi	r24, 0xDF	; 223
    11be:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
    11c0:	10 92 2b 01 	sts	0x012B, r1
    11c4:	10 92 2a 01 	sts	0x012A, r1
			break;
    11c8:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
    11ca:	e8 e0       	ldi	r30, 0x08	; 8
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
    11ce:	80 81       	ld	r24, Z
    11d0:	8e 7f       	andi	r24, 0xFE	; 254
    11d2:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
    11d4:	80 81       	ld	r24, Z
    11d6:	8d 7f       	andi	r24, 0xFD	; 253
    11d8:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
    11da:	10 92 a9 00 	sts	0x00A9, r1
    11de:	10 92 a8 00 	sts	0x00A8, r1
    11e2:	08 95       	ret

000011e4 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	8c 01       	movw	r16, r24
    11ee:	eb 01       	movw	r28, r22
    if (Ocr > 0)
    11f0:	1c 16       	cp	r1, r28
    11f2:	1d 06       	cpc	r1, r29
    11f4:	0c f4       	brge	.+2      	; 0x11f8 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
    11f6:	53 df       	rcall	.-346    	; 0x109e <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
    11f8:	c9 3f       	cpi	r28, 0xF9	; 249
    11fa:	d1 05       	cpc	r29, r1
    11fc:	44 f4       	brge	.+16     	; 0x120e <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
    11fe:	dd 23       	and	r29, r29
    1200:	44 f4       	brge	.+16     	; 0x1212 <_ZN5Motor11SetOcrValueEi+0x2e>
	{
        Ocr = -Ocr;
    1202:	d1 95       	neg	r29
    1204:	c1 95       	neg	r28
    1206:	d1 09       	sbc	r29, r1
        SetReverseDirection();
    1208:	c8 01       	movw	r24, r16
    120a:	7a df       	rcall	.-268    	; 0x1100 <_ZN5Motor19SetReverseDirectionEv>
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <_ZN5Motor11SetOcrValueEi+0x2e>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
    120e:	c9 ef       	ldi	r28, 0xF9	; 249
    1210:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
    1212:	f8 01       	movw	r30, r16
    1214:	80 81       	ld	r24, Z
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	71 f0       	breq	.+28     	; 0x1236 <_ZN5Motor11SetOcrValueEi+0x52>
    121a:	18 f4       	brcc	.+6      	; 0x1222 <_ZN5Motor11SetOcrValueEi+0x3e>
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	31 f0       	breq	.+12     	; 0x122c <_ZN5Motor11SetOcrValueEi+0x48>
    1220:	18 c0       	rjmp	.+48     	; 0x1252 <_ZN5Motor11SetOcrValueEi+0x6e>
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	69 f0       	breq	.+26     	; 0x1240 <_ZN5Motor11SetOcrValueEi+0x5c>
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	81 f0       	breq	.+32     	; 0x124a <_ZN5Motor11SetOcrValueEi+0x66>
    122a:	13 c0       	rjmp	.+38     	; 0x1252 <_ZN5Motor11SetOcrValueEi+0x6e>
	{
		case 1:
			PWM_OCR1	= Ocr;
    122c:	d0 93 2d 01 	sts	0x012D, r29
    1230:	c0 93 2c 01 	sts	0x012C, r28
			break;
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <_ZN5Motor11SetOcrValueEi+0x6e>
		case 2:
			PWM_OCR2	= Ocr;
    1236:	d0 93 29 01 	sts	0x0129, r29
    123a:	c0 93 28 01 	sts	0x0128, r28
			break;
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <_ZN5Motor11SetOcrValueEi+0x6e>
		case 3:
			PWM_OCR3	= Ocr;
    1240:	d0 93 2b 01 	sts	0x012B, r29
    1244:	c0 93 2a 01 	sts	0x012A, r28
			break;
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <_ZN5Motor11SetOcrValueEi+0x6e>
		case 4:
			PWM_OCR4	= Ocr;
    124a:	d0 93 a9 00 	sts	0x00A9, r29
    124e:	c0 93 a8 00 	sts	0x00A8, r28
			break;
	}
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <_Z9initUART2v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
    125c:	10 92 1b 03 	sts	0x031B, r1
    1260:	10 92 d5 00 	sts	0x00D5, r1
    1264:	87 e6       	ldi	r24, 0x67	; 103
    1266:	80 93 d4 00 	sts	0x00D4, r24
    126a:	88 e9       	ldi	r24, 0x98	; 152
    126c:	80 93 d1 00 	sts	0x00D1, r24
    1270:	86 e0       	ldi	r24, 0x06	; 6
    1272:	80 93 d2 00 	sts	0x00D2, r24
    1276:	08 95       	ret

00001278 <_Z9initUART3v>:
    1278:	10 92 35 01 	sts	0x0135, r1
    127c:	89 e1       	ldi	r24, 0x19	; 25
    127e:	80 93 34 01 	sts	0x0134, r24
    1282:	88 e9       	ldi	r24, 0x98	; 152
    1284:	80 93 31 01 	sts	0x0131, r24
    1288:	86 e0       	ldi	r24, 0x06	; 6
    128a:	80 93 32 01 	sts	0x0132, r24
    128e:	08 95       	ret

00001290 <_Z13UART2Transmith>:
    1290:	e0 ed       	ldi	r30, 0xD0	; 208
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	90 81       	ld	r25, Z
    1296:	95 ff       	sbrs	r25, 5
    1298:	fd cf       	rjmp	.-6      	; 0x1294 <_Z13UART2Transmith+0x4>
    129a:	80 93 d6 00 	sts	0x00D6, r24
    129e:	08 95       	ret

000012a0 <_Z12UART2Receivev>:
    12a0:	80 91 1c 03 	lds	r24, 0x031C
    12a4:	10 92 1c 03 	sts	0x031C, r1
    12a8:	08 95       	ret

000012aa <_Z12UART3Receivev>:
    12aa:	80 91 1d 03 	lds	r24, 0x031D
    12ae:	10 92 1d 03 	sts	0x031D, r1
    12b2:	08 95       	ret

000012b4 <_Z17UART2TransmitDatai>:
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	64 97       	sbiw	r28, 0x14	; 20
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	4a e0       	ldi	r20, 0x0A	; 10
    12ce:	be 01       	movw	r22, r28
    12d0:	6f 5f       	subi	r22, 0xFF	; 255
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	5c d2       	rcall	.+1208   	; 0x178e <__itoa_ncheck>
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	88 23       	and	r24, r24
    12da:	49 f0       	breq	.+18     	; 0x12ee <_Z17UART2TransmitDatai+0x3a>
    12dc:	8e 01       	movw	r16, r28
    12de:	0e 5f       	subi	r16, 0xFE	; 254
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	d6 df       	rcall	.-84     	; 0x1290 <_Z13UART2Transmith>
    12e4:	f8 01       	movw	r30, r16
    12e6:	81 91       	ld	r24, Z+
    12e8:	8f 01       	movw	r16, r30
    12ea:	81 11       	cpse	r24, r1
    12ec:	fa cf       	rjmp	.-12     	; 0x12e2 <_Z17UART2TransmitDatai+0x2e>
    12ee:	64 96       	adiw	r28, 0x14	; 20
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <_Z19UART2TransmitStringPKc>:
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	ec 01       	movw	r28, r24
    130a:	88 81       	ld	r24, Y
    130c:	88 23       	and	r24, r24
    130e:	29 f0       	breq	.+10     	; 0x131a <_Z19UART2TransmitStringPKc+0x16>
    1310:	21 96       	adiw	r28, 0x01	; 1
    1312:	be df       	rcall	.-132    	; 0x1290 <_Z13UART2Transmith>
    1314:	89 91       	ld	r24, Y+
    1316:	81 11       	cpse	r24, r1
    1318:	fc cf       	rjmp	.-8      	; 0x1312 <_Z19UART2TransmitStringPKc+0xe>
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <__vector_25>:

ISR(USART0_RX_vect)
{
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	0f 92       	push	r0
    1328:	11 24       	eor	r1, r1
    132a:	8f 93       	push	r24
	buffer=UDR0;
    132c:	80 91 c6 00 	lds	r24, 0x00C6
    1330:	80 93 1f 03 	sts	0x031F, r24
}
    1334:	8f 91       	pop	r24
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <__vector_36>:

ISR(USART1_RX_vect)
{
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	8f 93       	push	r24
	buffer1=UDR1;
    134c:	80 91 ce 00 	lds	r24, 0x00CE
    1350:	80 93 1e 03 	sts	0x031E, r24
	
}
    1354:	8f 91       	pop	r24
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <__vector_51>:

ISR(USART2_RX_vect)
{
    1360:	1f 92       	push	r1
    1362:	0f 92       	push	r0
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	0f 92       	push	r0
    1368:	11 24       	eor	r1, r1
    136a:	8f 93       	push	r24
	buffer2=UDR2;
    136c:	80 91 d6 00 	lds	r24, 0x00D6
    1370:	80 93 1c 03 	sts	0x031C, r24
	
		
}
    1374:	8f 91       	pop	r24
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <__vector_54>:
ISR(USART3_RX_vect)
{
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	8f 93       	push	r24
	buffer3=UDR3;
    138c:	80 91 36 01 	lds	r24, 0x0136
    1390:	80 93 1d 03 	sts	0x031D, r24
}
    1394:	8f 91       	pop	r24
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <__subsf3>:
    13a0:	50 58       	subi	r21, 0x80	; 128

000013a2 <__addsf3>:
    13a2:	bb 27       	eor	r27, r27
    13a4:	aa 27       	eor	r26, r26
    13a6:	0e d0       	rcall	.+28     	; 0x13c4 <__addsf3x>
    13a8:	4d c1       	rjmp	.+666    	; 0x1644 <__fp_round>
    13aa:	3e d1       	rcall	.+636    	; 0x1628 <__fp_pscA>
    13ac:	30 f0       	brcs	.+12     	; 0x13ba <__addsf3+0x18>
    13ae:	43 d1       	rcall	.+646    	; 0x1636 <__fp_pscB>
    13b0:	20 f0       	brcs	.+8      	; 0x13ba <__addsf3+0x18>
    13b2:	31 f4       	brne	.+12     	; 0x13c0 <__addsf3+0x1e>
    13b4:	9f 3f       	cpi	r25, 0xFF	; 255
    13b6:	11 f4       	brne	.+4      	; 0x13bc <__addsf3+0x1a>
    13b8:	1e f4       	brtc	.+6      	; 0x13c0 <__addsf3+0x1e>
    13ba:	33 c1       	rjmp	.+614    	; 0x1622 <__fp_nan>
    13bc:	0e f4       	brtc	.+2      	; 0x13c0 <__addsf3+0x1e>
    13be:	e0 95       	com	r30
    13c0:	e7 fb       	bst	r30, 7
    13c2:	29 c1       	rjmp	.+594    	; 0x1616 <__fp_inf>

000013c4 <__addsf3x>:
    13c4:	e9 2f       	mov	r30, r25
    13c6:	4f d1       	rcall	.+670    	; 0x1666 <__fp_split3>
    13c8:	80 f3       	brcs	.-32     	; 0x13aa <__addsf3+0x8>
    13ca:	ba 17       	cp	r27, r26
    13cc:	62 07       	cpc	r22, r18
    13ce:	73 07       	cpc	r23, r19
    13d0:	84 07       	cpc	r24, r20
    13d2:	95 07       	cpc	r25, r21
    13d4:	18 f0       	brcs	.+6      	; 0x13dc <__addsf3x+0x18>
    13d6:	71 f4       	brne	.+28     	; 0x13f4 <__addsf3x+0x30>
    13d8:	9e f5       	brtc	.+102    	; 0x1440 <__addsf3x+0x7c>
    13da:	67 c1       	rjmp	.+718    	; 0x16aa <__fp_zero>
    13dc:	0e f4       	brtc	.+2      	; 0x13e0 <__addsf3x+0x1c>
    13de:	e0 95       	com	r30
    13e0:	0b 2e       	mov	r0, r27
    13e2:	ba 2f       	mov	r27, r26
    13e4:	a0 2d       	mov	r26, r0
    13e6:	0b 01       	movw	r0, r22
    13e8:	b9 01       	movw	r22, r18
    13ea:	90 01       	movw	r18, r0
    13ec:	0c 01       	movw	r0, r24
    13ee:	ca 01       	movw	r24, r20
    13f0:	a0 01       	movw	r20, r0
    13f2:	11 24       	eor	r1, r1
    13f4:	ff 27       	eor	r31, r31
    13f6:	59 1b       	sub	r21, r25
    13f8:	99 f0       	breq	.+38     	; 0x1420 <__addsf3x+0x5c>
    13fa:	59 3f       	cpi	r21, 0xF9	; 249
    13fc:	50 f4       	brcc	.+20     	; 0x1412 <__addsf3x+0x4e>
    13fe:	50 3e       	cpi	r21, 0xE0	; 224
    1400:	68 f1       	brcs	.+90     	; 0x145c <__addsf3x+0x98>
    1402:	1a 16       	cp	r1, r26
    1404:	f0 40       	sbci	r31, 0x00	; 0
    1406:	a2 2f       	mov	r26, r18
    1408:	23 2f       	mov	r18, r19
    140a:	34 2f       	mov	r19, r20
    140c:	44 27       	eor	r20, r20
    140e:	58 5f       	subi	r21, 0xF8	; 248
    1410:	f3 cf       	rjmp	.-26     	; 0x13f8 <__addsf3x+0x34>
    1412:	46 95       	lsr	r20
    1414:	37 95       	ror	r19
    1416:	27 95       	ror	r18
    1418:	a7 95       	ror	r26
    141a:	f0 40       	sbci	r31, 0x00	; 0
    141c:	53 95       	inc	r21
    141e:	c9 f7       	brne	.-14     	; 0x1412 <__addsf3x+0x4e>
    1420:	7e f4       	brtc	.+30     	; 0x1440 <__addsf3x+0x7c>
    1422:	1f 16       	cp	r1, r31
    1424:	ba 0b       	sbc	r27, r26
    1426:	62 0b       	sbc	r22, r18
    1428:	73 0b       	sbc	r23, r19
    142a:	84 0b       	sbc	r24, r20
    142c:	ba f0       	brmi	.+46     	; 0x145c <__addsf3x+0x98>
    142e:	91 50       	subi	r25, 0x01	; 1
    1430:	a1 f0       	breq	.+40     	; 0x145a <__addsf3x+0x96>
    1432:	ff 0f       	add	r31, r31
    1434:	bb 1f       	adc	r27, r27
    1436:	66 1f       	adc	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	c2 f7       	brpl	.-16     	; 0x142e <__addsf3x+0x6a>
    143e:	0e c0       	rjmp	.+28     	; 0x145c <__addsf3x+0x98>
    1440:	ba 0f       	add	r27, r26
    1442:	62 1f       	adc	r22, r18
    1444:	73 1f       	adc	r23, r19
    1446:	84 1f       	adc	r24, r20
    1448:	48 f4       	brcc	.+18     	; 0x145c <__addsf3x+0x98>
    144a:	87 95       	ror	r24
    144c:	77 95       	ror	r23
    144e:	67 95       	ror	r22
    1450:	b7 95       	ror	r27
    1452:	f7 95       	ror	r31
    1454:	9e 3f       	cpi	r25, 0xFE	; 254
    1456:	08 f0       	brcs	.+2      	; 0x145a <__addsf3x+0x96>
    1458:	b3 cf       	rjmp	.-154    	; 0x13c0 <__addsf3+0x1e>
    145a:	93 95       	inc	r25
    145c:	88 0f       	add	r24, r24
    145e:	08 f0       	brcs	.+2      	; 0x1462 <__addsf3x+0x9e>
    1460:	99 27       	eor	r25, r25
    1462:	ee 0f       	add	r30, r30
    1464:	97 95       	ror	r25
    1466:	87 95       	ror	r24
    1468:	08 95       	ret

0000146a <__divsf3>:
    146a:	0c d0       	rcall	.+24     	; 0x1484 <__divsf3x>
    146c:	eb c0       	rjmp	.+470    	; 0x1644 <__fp_round>
    146e:	e3 d0       	rcall	.+454    	; 0x1636 <__fp_pscB>
    1470:	40 f0       	brcs	.+16     	; 0x1482 <__divsf3+0x18>
    1472:	da d0       	rcall	.+436    	; 0x1628 <__fp_pscA>
    1474:	30 f0       	brcs	.+12     	; 0x1482 <__divsf3+0x18>
    1476:	21 f4       	brne	.+8      	; 0x1480 <__divsf3+0x16>
    1478:	5f 3f       	cpi	r21, 0xFF	; 255
    147a:	19 f0       	breq	.+6      	; 0x1482 <__divsf3+0x18>
    147c:	cc c0       	rjmp	.+408    	; 0x1616 <__fp_inf>
    147e:	51 11       	cpse	r21, r1
    1480:	15 c1       	rjmp	.+554    	; 0x16ac <__fp_szero>
    1482:	cf c0       	rjmp	.+414    	; 0x1622 <__fp_nan>

00001484 <__divsf3x>:
    1484:	f0 d0       	rcall	.+480    	; 0x1666 <__fp_split3>
    1486:	98 f3       	brcs	.-26     	; 0x146e <__divsf3+0x4>

00001488 <__divsf3_pse>:
    1488:	99 23       	and	r25, r25
    148a:	c9 f3       	breq	.-14     	; 0x147e <__divsf3+0x14>
    148c:	55 23       	and	r21, r21
    148e:	b1 f3       	breq	.-20     	; 0x147c <__divsf3+0x12>
    1490:	95 1b       	sub	r25, r21
    1492:	55 0b       	sbc	r21, r21
    1494:	bb 27       	eor	r27, r27
    1496:	aa 27       	eor	r26, r26
    1498:	62 17       	cp	r22, r18
    149a:	73 07       	cpc	r23, r19
    149c:	84 07       	cpc	r24, r20
    149e:	38 f0       	brcs	.+14     	; 0x14ae <__divsf3_pse+0x26>
    14a0:	9f 5f       	subi	r25, 0xFF	; 255
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	22 0f       	add	r18, r18
    14a6:	33 1f       	adc	r19, r19
    14a8:	44 1f       	adc	r20, r20
    14aa:	aa 1f       	adc	r26, r26
    14ac:	a9 f3       	breq	.-22     	; 0x1498 <__divsf3_pse+0x10>
    14ae:	33 d0       	rcall	.+102    	; 0x1516 <__divsf3_pse+0x8e>
    14b0:	0e 2e       	mov	r0, r30
    14b2:	3a f0       	brmi	.+14     	; 0x14c2 <__divsf3_pse+0x3a>
    14b4:	e0 e8       	ldi	r30, 0x80	; 128
    14b6:	30 d0       	rcall	.+96     	; 0x1518 <__divsf3_pse+0x90>
    14b8:	91 50       	subi	r25, 0x01	; 1
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	e6 95       	lsr	r30
    14be:	00 1c       	adc	r0, r0
    14c0:	ca f7       	brpl	.-14     	; 0x14b4 <__divsf3_pse+0x2c>
    14c2:	29 d0       	rcall	.+82     	; 0x1516 <__divsf3_pse+0x8e>
    14c4:	fe 2f       	mov	r31, r30
    14c6:	27 d0       	rcall	.+78     	; 0x1516 <__divsf3_pse+0x8e>
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	bb 1f       	adc	r27, r27
    14d0:	26 17       	cp	r18, r22
    14d2:	37 07       	cpc	r19, r23
    14d4:	48 07       	cpc	r20, r24
    14d6:	ab 07       	cpc	r26, r27
    14d8:	b0 e8       	ldi	r27, 0x80	; 128
    14da:	09 f0       	breq	.+2      	; 0x14de <__divsf3_pse+0x56>
    14dc:	bb 0b       	sbc	r27, r27
    14de:	80 2d       	mov	r24, r0
    14e0:	bf 01       	movw	r22, r30
    14e2:	ff 27       	eor	r31, r31
    14e4:	93 58       	subi	r25, 0x83	; 131
    14e6:	5f 4f       	sbci	r21, 0xFF	; 255
    14e8:	2a f0       	brmi	.+10     	; 0x14f4 <__divsf3_pse+0x6c>
    14ea:	9e 3f       	cpi	r25, 0xFE	; 254
    14ec:	51 05       	cpc	r21, r1
    14ee:	68 f0       	brcs	.+26     	; 0x150a <__divsf3_pse+0x82>
    14f0:	92 c0       	rjmp	.+292    	; 0x1616 <__fp_inf>
    14f2:	dc c0       	rjmp	.+440    	; 0x16ac <__fp_szero>
    14f4:	5f 3f       	cpi	r21, 0xFF	; 255
    14f6:	ec f3       	brlt	.-6      	; 0x14f2 <__divsf3_pse+0x6a>
    14f8:	98 3e       	cpi	r25, 0xE8	; 232
    14fa:	dc f3       	brlt	.-10     	; 0x14f2 <__divsf3_pse+0x6a>
    14fc:	86 95       	lsr	r24
    14fe:	77 95       	ror	r23
    1500:	67 95       	ror	r22
    1502:	b7 95       	ror	r27
    1504:	f7 95       	ror	r31
    1506:	9f 5f       	subi	r25, 0xFF	; 255
    1508:	c9 f7       	brne	.-14     	; 0x14fc <__divsf3_pse+0x74>
    150a:	88 0f       	add	r24, r24
    150c:	91 1d       	adc	r25, r1
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret
    1516:	e1 e0       	ldi	r30, 0x01	; 1
    1518:	66 0f       	add	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	88 1f       	adc	r24, r24
    151e:	bb 1f       	adc	r27, r27
    1520:	62 17       	cp	r22, r18
    1522:	73 07       	cpc	r23, r19
    1524:	84 07       	cpc	r24, r20
    1526:	ba 07       	cpc	r27, r26
    1528:	20 f0       	brcs	.+8      	; 0x1532 <__divsf3_pse+0xaa>
    152a:	62 1b       	sub	r22, r18
    152c:	73 0b       	sbc	r23, r19
    152e:	84 0b       	sbc	r24, r20
    1530:	ba 0b       	sbc	r27, r26
    1532:	ee 1f       	adc	r30, r30
    1534:	88 f7       	brcc	.-30     	; 0x1518 <__divsf3_pse+0x90>
    1536:	e0 95       	com	r30
    1538:	08 95       	ret

0000153a <__fixsfsi>:
    153a:	04 d0       	rcall	.+8      	; 0x1544 <__fixunssfsi>
    153c:	68 94       	set
    153e:	b1 11       	cpse	r27, r1
    1540:	b5 c0       	rjmp	.+362    	; 0x16ac <__fp_szero>
    1542:	08 95       	ret

00001544 <__fixunssfsi>:
    1544:	98 d0       	rcall	.+304    	; 0x1676 <__fp_splitA>
    1546:	88 f0       	brcs	.+34     	; 0x156a <__fixunssfsi+0x26>
    1548:	9f 57       	subi	r25, 0x7F	; 127
    154a:	90 f0       	brcs	.+36     	; 0x1570 <__fixunssfsi+0x2c>
    154c:	b9 2f       	mov	r27, r25
    154e:	99 27       	eor	r25, r25
    1550:	b7 51       	subi	r27, 0x17	; 23
    1552:	a0 f0       	brcs	.+40     	; 0x157c <__fixunssfsi+0x38>
    1554:	d1 f0       	breq	.+52     	; 0x158a <__fixunssfsi+0x46>
    1556:	66 0f       	add	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	88 1f       	adc	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	1a f0       	brmi	.+6      	; 0x1566 <__fixunssfsi+0x22>
    1560:	ba 95       	dec	r27
    1562:	c9 f7       	brne	.-14     	; 0x1556 <__fixunssfsi+0x12>
    1564:	12 c0       	rjmp	.+36     	; 0x158a <__fixunssfsi+0x46>
    1566:	b1 30       	cpi	r27, 0x01	; 1
    1568:	81 f0       	breq	.+32     	; 0x158a <__fixunssfsi+0x46>
    156a:	9f d0       	rcall	.+318    	; 0x16aa <__fp_zero>
    156c:	b1 e0       	ldi	r27, 0x01	; 1
    156e:	08 95       	ret
    1570:	9c c0       	rjmp	.+312    	; 0x16aa <__fp_zero>
    1572:	67 2f       	mov	r22, r23
    1574:	78 2f       	mov	r23, r24
    1576:	88 27       	eor	r24, r24
    1578:	b8 5f       	subi	r27, 0xF8	; 248
    157a:	39 f0       	breq	.+14     	; 0x158a <__fixunssfsi+0x46>
    157c:	b9 3f       	cpi	r27, 0xF9	; 249
    157e:	cc f3       	brlt	.-14     	; 0x1572 <__fixunssfsi+0x2e>
    1580:	86 95       	lsr	r24
    1582:	77 95       	ror	r23
    1584:	67 95       	ror	r22
    1586:	b3 95       	inc	r27
    1588:	d9 f7       	brne	.-10     	; 0x1580 <__fixunssfsi+0x3c>
    158a:	3e f4       	brtc	.+14     	; 0x159a <__fixunssfsi+0x56>
    158c:	90 95       	com	r25
    158e:	80 95       	com	r24
    1590:	70 95       	com	r23
    1592:	61 95       	neg	r22
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	8f 4f       	sbci	r24, 0xFF	; 255
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	08 95       	ret

0000159c <__floatunsisf>:
    159c:	e8 94       	clt
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <__floatsisf+0x12>

000015a0 <__floatsisf>:
    15a0:	97 fb       	bst	r25, 7
    15a2:	3e f4       	brtc	.+14     	; 0x15b2 <__floatsisf+0x12>
    15a4:	90 95       	com	r25
    15a6:	80 95       	com	r24
    15a8:	70 95       	com	r23
    15aa:	61 95       	neg	r22
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	99 23       	and	r25, r25
    15b4:	a9 f0       	breq	.+42     	; 0x15e0 <__floatsisf+0x40>
    15b6:	f9 2f       	mov	r31, r25
    15b8:	96 e9       	ldi	r25, 0x96	; 150
    15ba:	bb 27       	eor	r27, r27
    15bc:	93 95       	inc	r25
    15be:	f6 95       	lsr	r31
    15c0:	87 95       	ror	r24
    15c2:	77 95       	ror	r23
    15c4:	67 95       	ror	r22
    15c6:	b7 95       	ror	r27
    15c8:	f1 11       	cpse	r31, r1
    15ca:	f8 cf       	rjmp	.-16     	; 0x15bc <__floatsisf+0x1c>
    15cc:	fa f4       	brpl	.+62     	; 0x160c <__floatsisf+0x6c>
    15ce:	bb 0f       	add	r27, r27
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <__floatsisf+0x36>
    15d2:	60 ff       	sbrs	r22, 0
    15d4:	1b c0       	rjmp	.+54     	; 0x160c <__floatsisf+0x6c>
    15d6:	6f 5f       	subi	r22, 0xFF	; 255
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	16 c0       	rjmp	.+44     	; 0x160c <__floatsisf+0x6c>
    15e0:	88 23       	and	r24, r24
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <__floatsisf+0x48>
    15e4:	96 e9       	ldi	r25, 0x96	; 150
    15e6:	11 c0       	rjmp	.+34     	; 0x160a <__floatsisf+0x6a>
    15e8:	77 23       	and	r23, r23
    15ea:	21 f0       	breq	.+8      	; 0x15f4 <__floatsisf+0x54>
    15ec:	9e e8       	ldi	r25, 0x8E	; 142
    15ee:	87 2f       	mov	r24, r23
    15f0:	76 2f       	mov	r23, r22
    15f2:	05 c0       	rjmp	.+10     	; 0x15fe <__floatsisf+0x5e>
    15f4:	66 23       	and	r22, r22
    15f6:	71 f0       	breq	.+28     	; 0x1614 <__floatsisf+0x74>
    15f8:	96 e8       	ldi	r25, 0x86	; 134
    15fa:	86 2f       	mov	r24, r22
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	2a f0       	brmi	.+10     	; 0x160c <__floatsisf+0x6c>
    1602:	9a 95       	dec	r25
    1604:	66 0f       	add	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	da f7       	brpl	.-10     	; 0x1602 <__floatsisf+0x62>
    160c:	88 0f       	add	r24, r24
    160e:	96 95       	lsr	r25
    1610:	87 95       	ror	r24
    1612:	97 f9       	bld	r25, 7
    1614:	08 95       	ret

00001616 <__fp_inf>:
    1616:	97 f9       	bld	r25, 7
    1618:	9f 67       	ori	r25, 0x7F	; 127
    161a:	80 e8       	ldi	r24, 0x80	; 128
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	08 95       	ret

00001622 <__fp_nan>:
    1622:	9f ef       	ldi	r25, 0xFF	; 255
    1624:	80 ec       	ldi	r24, 0xC0	; 192
    1626:	08 95       	ret

00001628 <__fp_pscA>:
    1628:	00 24       	eor	r0, r0
    162a:	0a 94       	dec	r0
    162c:	16 16       	cp	r1, r22
    162e:	17 06       	cpc	r1, r23
    1630:	18 06       	cpc	r1, r24
    1632:	09 06       	cpc	r0, r25
    1634:	08 95       	ret

00001636 <__fp_pscB>:
    1636:	00 24       	eor	r0, r0
    1638:	0a 94       	dec	r0
    163a:	12 16       	cp	r1, r18
    163c:	13 06       	cpc	r1, r19
    163e:	14 06       	cpc	r1, r20
    1640:	05 06       	cpc	r0, r21
    1642:	08 95       	ret

00001644 <__fp_round>:
    1644:	09 2e       	mov	r0, r25
    1646:	03 94       	inc	r0
    1648:	00 0c       	add	r0, r0
    164a:	11 f4       	brne	.+4      	; 0x1650 <__fp_round+0xc>
    164c:	88 23       	and	r24, r24
    164e:	52 f0       	brmi	.+20     	; 0x1664 <__fp_round+0x20>
    1650:	bb 0f       	add	r27, r27
    1652:	40 f4       	brcc	.+16     	; 0x1664 <__fp_round+0x20>
    1654:	bf 2b       	or	r27, r31
    1656:	11 f4       	brne	.+4      	; 0x165c <__fp_round+0x18>
    1658:	60 ff       	sbrs	r22, 0
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <__fp_round+0x20>
    165c:	6f 5f       	subi	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	8f 4f       	sbci	r24, 0xFF	; 255
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	08 95       	ret

00001666 <__fp_split3>:
    1666:	57 fd       	sbrc	r21, 7
    1668:	90 58       	subi	r25, 0x80	; 128
    166a:	44 0f       	add	r20, r20
    166c:	55 1f       	adc	r21, r21
    166e:	59 f0       	breq	.+22     	; 0x1686 <__fp_splitA+0x10>
    1670:	5f 3f       	cpi	r21, 0xFF	; 255
    1672:	71 f0       	breq	.+28     	; 0x1690 <__fp_splitA+0x1a>
    1674:	47 95       	ror	r20

00001676 <__fp_splitA>:
    1676:	88 0f       	add	r24, r24
    1678:	97 fb       	bst	r25, 7
    167a:	99 1f       	adc	r25, r25
    167c:	61 f0       	breq	.+24     	; 0x1696 <__fp_splitA+0x20>
    167e:	9f 3f       	cpi	r25, 0xFF	; 255
    1680:	79 f0       	breq	.+30     	; 0x16a0 <__fp_splitA+0x2a>
    1682:	87 95       	ror	r24
    1684:	08 95       	ret
    1686:	12 16       	cp	r1, r18
    1688:	13 06       	cpc	r1, r19
    168a:	14 06       	cpc	r1, r20
    168c:	55 1f       	adc	r21, r21
    168e:	f2 cf       	rjmp	.-28     	; 0x1674 <__fp_split3+0xe>
    1690:	46 95       	lsr	r20
    1692:	f1 df       	rcall	.-30     	; 0x1676 <__fp_splitA>
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <__fp_splitA+0x30>
    1696:	16 16       	cp	r1, r22
    1698:	17 06       	cpc	r1, r23
    169a:	18 06       	cpc	r1, r24
    169c:	99 1f       	adc	r25, r25
    169e:	f1 cf       	rjmp	.-30     	; 0x1682 <__fp_splitA+0xc>
    16a0:	86 95       	lsr	r24
    16a2:	71 05       	cpc	r23, r1
    16a4:	61 05       	cpc	r22, r1
    16a6:	08 94       	sec
    16a8:	08 95       	ret

000016aa <__fp_zero>:
    16aa:	e8 94       	clt

000016ac <__fp_szero>:
    16ac:	bb 27       	eor	r27, r27
    16ae:	66 27       	eor	r22, r22
    16b0:	77 27       	eor	r23, r23
    16b2:	cb 01       	movw	r24, r22
    16b4:	97 f9       	bld	r25, 7
    16b6:	08 95       	ret

000016b8 <__mulsf3>:
    16b8:	0b d0       	rcall	.+22     	; 0x16d0 <__mulsf3x>
    16ba:	c4 cf       	rjmp	.-120    	; 0x1644 <__fp_round>
    16bc:	b5 df       	rcall	.-150    	; 0x1628 <__fp_pscA>
    16be:	28 f0       	brcs	.+10     	; 0x16ca <__mulsf3+0x12>
    16c0:	ba df       	rcall	.-140    	; 0x1636 <__fp_pscB>
    16c2:	18 f0       	brcs	.+6      	; 0x16ca <__mulsf3+0x12>
    16c4:	95 23       	and	r25, r21
    16c6:	09 f0       	breq	.+2      	; 0x16ca <__mulsf3+0x12>
    16c8:	a6 cf       	rjmp	.-180    	; 0x1616 <__fp_inf>
    16ca:	ab cf       	rjmp	.-170    	; 0x1622 <__fp_nan>
    16cc:	11 24       	eor	r1, r1
    16ce:	ee cf       	rjmp	.-36     	; 0x16ac <__fp_szero>

000016d0 <__mulsf3x>:
    16d0:	ca df       	rcall	.-108    	; 0x1666 <__fp_split3>
    16d2:	a0 f3       	brcs	.-24     	; 0x16bc <__mulsf3+0x4>

000016d4 <__mulsf3_pse>:
    16d4:	95 9f       	mul	r25, r21
    16d6:	d1 f3       	breq	.-12     	; 0x16cc <__mulsf3+0x14>
    16d8:	95 0f       	add	r25, r21
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	55 1f       	adc	r21, r21
    16de:	62 9f       	mul	r22, r18
    16e0:	f0 01       	movw	r30, r0
    16e2:	72 9f       	mul	r23, r18
    16e4:	bb 27       	eor	r27, r27
    16e6:	f0 0d       	add	r31, r0
    16e8:	b1 1d       	adc	r27, r1
    16ea:	63 9f       	mul	r22, r19
    16ec:	aa 27       	eor	r26, r26
    16ee:	f0 0d       	add	r31, r0
    16f0:	b1 1d       	adc	r27, r1
    16f2:	aa 1f       	adc	r26, r26
    16f4:	64 9f       	mul	r22, r20
    16f6:	66 27       	eor	r22, r22
    16f8:	b0 0d       	add	r27, r0
    16fa:	a1 1d       	adc	r26, r1
    16fc:	66 1f       	adc	r22, r22
    16fe:	82 9f       	mul	r24, r18
    1700:	22 27       	eor	r18, r18
    1702:	b0 0d       	add	r27, r0
    1704:	a1 1d       	adc	r26, r1
    1706:	62 1f       	adc	r22, r18
    1708:	73 9f       	mul	r23, r19
    170a:	b0 0d       	add	r27, r0
    170c:	a1 1d       	adc	r26, r1
    170e:	62 1f       	adc	r22, r18
    1710:	83 9f       	mul	r24, r19
    1712:	a0 0d       	add	r26, r0
    1714:	61 1d       	adc	r22, r1
    1716:	22 1f       	adc	r18, r18
    1718:	74 9f       	mul	r23, r20
    171a:	33 27       	eor	r19, r19
    171c:	a0 0d       	add	r26, r0
    171e:	61 1d       	adc	r22, r1
    1720:	23 1f       	adc	r18, r19
    1722:	84 9f       	mul	r24, r20
    1724:	60 0d       	add	r22, r0
    1726:	21 1d       	adc	r18, r1
    1728:	82 2f       	mov	r24, r18
    172a:	76 2f       	mov	r23, r22
    172c:	6a 2f       	mov	r22, r26
    172e:	11 24       	eor	r1, r1
    1730:	9f 57       	subi	r25, 0x7F	; 127
    1732:	50 40       	sbci	r21, 0x00	; 0
    1734:	8a f0       	brmi	.+34     	; 0x1758 <__mulsf3_pse+0x84>
    1736:	e1 f0       	breq	.+56     	; 0x1770 <__mulsf3_pse+0x9c>
    1738:	88 23       	and	r24, r24
    173a:	4a f0       	brmi	.+18     	; 0x174e <__mulsf3_pse+0x7a>
    173c:	ee 0f       	add	r30, r30
    173e:	ff 1f       	adc	r31, r31
    1740:	bb 1f       	adc	r27, r27
    1742:	66 1f       	adc	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	91 50       	subi	r25, 0x01	; 1
    174a:	50 40       	sbci	r21, 0x00	; 0
    174c:	a9 f7       	brne	.-22     	; 0x1738 <__mulsf3_pse+0x64>
    174e:	9e 3f       	cpi	r25, 0xFE	; 254
    1750:	51 05       	cpc	r21, r1
    1752:	70 f0       	brcs	.+28     	; 0x1770 <__mulsf3_pse+0x9c>
    1754:	60 cf       	rjmp	.-320    	; 0x1616 <__fp_inf>
    1756:	aa cf       	rjmp	.-172    	; 0x16ac <__fp_szero>
    1758:	5f 3f       	cpi	r21, 0xFF	; 255
    175a:	ec f3       	brlt	.-6      	; 0x1756 <__mulsf3_pse+0x82>
    175c:	98 3e       	cpi	r25, 0xE8	; 232
    175e:	dc f3       	brlt	.-10     	; 0x1756 <__mulsf3_pse+0x82>
    1760:	86 95       	lsr	r24
    1762:	77 95       	ror	r23
    1764:	67 95       	ror	r22
    1766:	b7 95       	ror	r27
    1768:	f7 95       	ror	r31
    176a:	e7 95       	ror	r30
    176c:	9f 5f       	subi	r25, 0xFF	; 255
    176e:	c1 f7       	brne	.-16     	; 0x1760 <__mulsf3_pse+0x8c>
    1770:	fe 2b       	or	r31, r30
    1772:	88 0f       	add	r24, r24
    1774:	91 1d       	adc	r25, r1
    1776:	96 95       	lsr	r25
    1778:	87 95       	ror	r24
    177a:	97 f9       	bld	r25, 7
    177c:	08 95       	ret

0000177e <__tablejump2__>:
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	88 1f       	adc	r24, r24
    1784:	8b bf       	out	0x3b, r24	; 59
    1786:	07 90       	elpm	r0, Z+
    1788:	f6 91       	elpm	r31, Z
    178a:	e0 2d       	mov	r30, r0
    178c:	19 94       	eijmp

0000178e <__itoa_ncheck>:
    178e:	bb 27       	eor	r27, r27
    1790:	4a 30       	cpi	r20, 0x0A	; 10
    1792:	31 f4       	brne	.+12     	; 0x17a0 <__itoa_ncheck+0x12>
    1794:	99 23       	and	r25, r25
    1796:	22 f4       	brpl	.+8      	; 0x17a0 <__itoa_ncheck+0x12>
    1798:	bd e2       	ldi	r27, 0x2D	; 45
    179a:	90 95       	com	r25
    179c:	81 95       	neg	r24
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <__utoa_common>

000017a2 <__utoa_ncheck>:
    17a2:	bb 27       	eor	r27, r27

000017a4 <__utoa_common>:
    17a4:	fb 01       	movw	r30, r22
    17a6:	55 27       	eor	r21, r21
    17a8:	aa 27       	eor	r26, r26
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	aa 1f       	adc	r26, r26
    17b0:	a4 17       	cp	r26, r20
    17b2:	10 f0       	brcs	.+4      	; 0x17b8 <__utoa_common+0x14>
    17b4:	a4 1b       	sub	r26, r20
    17b6:	83 95       	inc	r24
    17b8:	50 51       	subi	r21, 0x10	; 16
    17ba:	b9 f7       	brne	.-18     	; 0x17aa <__utoa_common+0x6>
    17bc:	a0 5d       	subi	r26, 0xD0	; 208
    17be:	aa 33       	cpi	r26, 0x3A	; 58
    17c0:	08 f0       	brcs	.+2      	; 0x17c4 <__utoa_common+0x20>
    17c2:	a9 5d       	subi	r26, 0xD9	; 217
    17c4:	a1 93       	st	Z+, r26
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	79 f7       	brne	.-34     	; 0x17a8 <__utoa_common+0x4>
    17ca:	b1 11       	cpse	r27, r1
    17cc:	b1 93       	st	Z+, r27
    17ce:	11 92       	st	Z+, r1
    17d0:	cb 01       	movw	r24, r22
    17d2:	00 c0       	rjmp	.+0      	; 0x17d4 <strrev>

000017d4 <strrev>:
    17d4:	dc 01       	movw	r26, r24
    17d6:	fc 01       	movw	r30, r24
    17d8:	67 2f       	mov	r22, r23
    17da:	71 91       	ld	r23, Z+
    17dc:	77 23       	and	r23, r23
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <strrev+0x4>
    17e0:	32 97       	sbiw	r30, 0x02	; 2
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <strrev+0x18>
    17e4:	7c 91       	ld	r23, X
    17e6:	6d 93       	st	X+, r22
    17e8:	70 83       	st	Z, r23
    17ea:	62 91       	ld	r22, -Z
    17ec:	ae 17       	cp	r26, r30
    17ee:	bf 07       	cpc	r27, r31
    17f0:	c8 f3       	brcs	.-14     	; 0x17e4 <strrev+0x10>
    17f2:	08 95       	ret

000017f4 <_exit>:
    17f4:	f8 94       	cli

000017f6 <__stop_program>:
    17f6:	ff cf       	rjmp	.-2      	; 0x17f6 <__stop_program>
