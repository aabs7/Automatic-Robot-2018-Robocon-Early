
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800200  000045f8  0000468c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000045f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f6  00800282  00800282  0000470e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000470e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004740  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00004780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d33  00000000  00000000  00004ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ba  00000000  00000000  0000a8db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003374  00000000  00000000  0000c195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001124  00000000  00000000  0000f50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000229a  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041cd  00000000  00000000  000128ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
       6:	00 00       	nop
       8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c0       	rjmp	.+490    	; 0x1f8 <__vector_3>
       e:	00 00       	nop
      10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
      12:	00 00       	nop
      14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__vector_6>
      1a:	00 00       	nop
      1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__vector_9>
      28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__vector_11>
      30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
      36:	00 00       	nop
      38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__vector_15>
      3e:	00 00       	nop
      40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
      52:	00 00       	nop
      54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
      56:	00 00       	nop
      58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1b c1       	rjmp	.+566    	; 0x294 <__vector_23>
      5e:	00 00       	nop
      60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__vector_25>
      68:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__vector_26>
      6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
      6e:	00 00       	nop
      70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
      72:	00 00       	nop
      74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
      76:	00 00       	nop
      78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
      7e:	00 00       	nop
      80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
      82:	00 00       	nop
      84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
      86:	00 00       	nop
      88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <__vector_36>
      94:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__vector_37>
      98:	7d c0       	rjmp	.+250    	; 0x194 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7b c0       	rjmp	.+246    	; 0x194 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	79 c0       	rjmp	.+242    	; 0x194 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	77 c0       	rjmp	.+238    	; 0x194 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	75 c0       	rjmp	.+234    	; 0x194 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	73 c0       	rjmp	.+230    	; 0x194 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	71 c0       	rjmp	.+226    	; 0x194 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6f c0       	rjmp	.+222    	; 0x194 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6d c0       	rjmp	.+218    	; 0x194 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6b c0       	rjmp	.+214    	; 0x194 <__bad_interrupt>
      be:	00 00       	nop
      c0:	69 c0       	rjmp	.+210    	; 0x194 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	67 c0       	rjmp	.+206    	; 0x194 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	65 c0       	rjmp	.+202    	; 0x194 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__vector_51>
      d0:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <__vector_52>
      d4:	5f c0       	rjmp	.+190    	; 0x194 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__vector_54>
      dc:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__vector_55>
      e0:	59 c0       	rjmp	.+178    	; 0x194 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__ctors_start>:
     130:	6d 18       	sub	r6, r13

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d1 e2       	ldi	r29, 0x21	; 33
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61
     13e:	00 e0       	ldi	r16, 0x00	; 0
     140:	0c bf       	out	0x3c, r16	; 60

00000142 <__do_copy_data>:
     142:	12 e0       	ldi	r17, 0x02	; 2
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	e8 ef       	ldi	r30, 0xF8	; 248
     14a:	f5 e4       	ldi	r31, 0x45	; 69
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a2 38       	cpi	r26, 0x82	; 130
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	25 e0       	ldi	r18, 0x05	; 5
     15e:	a2 e8       	ldi	r26, 0x82	; 130
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a8 37       	cpi	r26, 0x78	; 120
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	c9 e9       	ldi	r28, 0x99	; 153
     170:	d0 e0       	ldi	r29, 0x00	; 0
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	06 c0       	rjmp	.+12     	; 0x182 <__do_global_ctors+0x16>
     176:	21 97       	sbiw	r28, 0x01	; 1
     178:	01 09       	sbc	r16, r1
     17a:	80 2f       	mov	r24, r16
     17c:	fe 01       	movw	r30, r28
     17e:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <__tablejump2__>
     182:	c8 39       	cpi	r28, 0x98	; 152
     184:	d1 07       	cpc	r29, r17
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 07       	cpc	r16, r24
     18a:	a9 f7       	brne	.-22     	; 0x176 <__do_global_ctors+0xa>
     18c:	0e 94 31 18 	call	0x3062	; 0x3062 <main>
     190:	0c 94 fa 22 	jmp	0x45f4	; 0x45f4 <_exit>

00000194 <__bad_interrupt>:
     194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <_ZN7encoder22Init_encoder_interruptEv>:
volatile bool PidUpdateFlagDriveY = true;


void encoder::Init_encoder_interrupt()
{
	sei();
     196:	78 94       	sei
	EICRA = 0b00110000;
     198:	80 e3       	ldi	r24, 0x30	; 48
     19a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EICRB = 0b00001100;
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	EIMSK |=  (1<<INT2) |(1<<INT5);
     1a4:	8d b3       	in	r24, 0x1d	; 29
     1a6:	84 62       	ori	r24, 0x24	; 36
     1a8:	8d bb       	out	0x1d, r24	; 29
     1aa:	08 95       	ret

000001ac <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     1ac:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     1ae:	85 b5       	in	r24, 0x25	; 37
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     1ba:	08 95       	ret

000001bc <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
	{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     1c2:	68 81       	ld	r22, Y
     1c4:	79 81       	ldd	r23, Y+1	; 0x01
     1c6:	07 2e       	mov	r0, r23
     1c8:	00 0c       	add	r0, r0
     1ca:	88 0b       	sbc	r24, r24
     1cc:	99 0b       	sbc	r25, r25
     1ce:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     1d2:	2e ef       	ldi	r18, 0xFE	; 254
     1d4:	34 e3       	ldi	r19, 0x34	; 52
     1d6:	46 e3       	ldi	r20, 0x36	; 54
     1d8:	53 e4       	ldi	r21, 0x43	; 67
     1da:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	48 e4       	ldi	r20, 0x48	; 72
     1e4:	53 e4       	ldi	r21, 0x43	; 67
     1e6:	0e 94 43 20 	call	0x4086	; 0x4086 <__divsf3>
     1ea:	6c 83       	std	Y+4, r22	; 0x04
     1ec:	7d 83       	std	Y+5, r23	; 0x05
     1ee:	8e 83       	std	Y+6, r24	; 0x06
     1f0:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     20e:	00 9b       	sbis	0x00, 0	; 0
     210:	08 c0       	rjmp	.+16     	; 0x222 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     212:	ea e8       	ldi	r30, 0x8A	; 138
     214:	f2 e0       	ldi	r31, 0x02	; 2
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	91 83       	std	Z+1, r25	; 0x01
     21e:	80 83       	st	Z, r24
     220:	07 c0       	rjmp	.+14     	; 0x230 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     222:	ea e8       	ldi	r30, 0x8A	; 138
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     25c:	05 9b       	sbis	0x00, 5	; 0
     25e:	08 c0       	rjmp	.+16     	; 0x270 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     260:	e2 e8       	ldi	r30, 0x82	; 130
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
     26e:	07 c0       	rjmp	.+14     	; 0x27e <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     270:	e2 e8       	ldi	r30, 0x82	; 130
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <PidUpdateFlagCompass>
	PidUpdateFlagLinetrackerBack = true;
     2a6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <PidUpdateFlagLinetrackerBack>
	PidUpdateFlagLinetrackerFront = true;
     2aa:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <PidUpdateFlagLinetrackerFront>
 
	PidUpdateFlagDriveX = true;
     2ae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <PidUpdateFlagDriveX>
	PidUpdateFlagDriveY = true;
     2b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <PidUpdateFlagDriveY>
	
     2b6:	8f 91       	pop	r24
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <_Z13init_HMC5883Lv>:
	}
	else
	{
		Calculate_Motor_Differential_Velocity_With_Center_Pivot(speed);
	}
}
     2c2:	0e 94 ce 1c 	call	0x399c	; 0x399c <_Z8i2c_initv>
     2c6:	8c e3       	ldi	r24, 0x3C	; 60
     2c8:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z9i2c_starth>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_Z9i2c_writeh>
     2d2:	80 e7       	ldi	r24, 0x70	; 112
     2d4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_Z9i2c_writeh>
     2d8:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <_Z8i2c_stopv>
     2dc:	8c e3       	ldi	r24, 0x3C	; 60
     2de:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z9i2c_starth>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_Z9i2c_writeh>
     2e8:	80 ea       	ldi	r24, 0xA0	; 160
     2ea:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_Z9i2c_writeh>
     2ee:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <_Z8i2c_stopv>
     2f2:	8c e3       	ldi	r24, 0x3C	; 60
     2f4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z9i2c_starth>
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_Z9i2c_writeh>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_Z9i2c_writeh>
     304:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <_Z8i2c_stopv>
     308:	08 95       	ret

0000030a <_Z12read_Compassv>:
     30a:	8c e3       	ldi	r24, 0x3C	; 60
     30c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <_Z9i2c_starth>
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_Z9i2c_writeh>
     316:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <_Z8i2c_stopv>
     31a:	8d e3       	ldi	r24, 0x3D	; 61
     31c:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <_Z13i2c_rep_starth>
     320:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z11i2c_readAckv>
     324:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <raw_x>
     328:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <raw_x+0x1>
     32c:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z11i2c_readAckv>
     330:	20 91 7b 04 	lds	r18, 0x047B	; 0x80047b <raw_x>
     334:	30 91 7c 04 	lds	r19, 0x047C	; 0x80047c <raw_x+0x1>
     338:	28 2b       	or	r18, r24
     33a:	30 93 7c 04 	sts	0x047C, r19	; 0x80047c <raw_x+0x1>
     33e:	20 93 7b 04 	sts	0x047B, r18	; 0x80047b <raw_x>
     342:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z11i2c_readAckv>
     346:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <raw_z>
     34a:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <raw_z+0x1>
     34e:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z11i2c_readAckv>
     352:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <raw_z>
     356:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <raw_z+0x1>
     35a:	28 2b       	or	r18, r24
     35c:	30 93 78 04 	sts	0x0478, r19	; 0x800478 <raw_z+0x1>
     360:	20 93 77 04 	sts	0x0477, r18	; 0x800477 <raw_z>
     364:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_Z11i2c_readAckv>
     368:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <raw_y>
     36c:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <raw_y+0x1>
     370:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <_Z11i2c_readNakv>
     374:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <raw_y>
     378:	30 91 7a 04 	lds	r19, 0x047A	; 0x80047a <raw_y+0x1>
     37c:	28 2b       	or	r18, r24
     37e:	30 93 7a 04 	sts	0x047A, r19	; 0x80047a <raw_y+0x1>
     382:	20 93 79 04 	sts	0x0479, r18	; 0x800479 <raw_y>
     386:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <_Z8i2c_stopv>
     38a:	08 95       	ret

0000038c <_Z6millisv>:
     38c:	2f b7       	in	r18, 0x3f	; 63
     38e:	f8 94       	cli
     390:	60 91 73 04 	lds	r22, 0x0473	; 0x800473 <timer2_millis>
     394:	70 91 74 04 	lds	r23, 0x0474	; 0x800474 <timer2_millis+0x1>
     398:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <timer2_millis+0x2>
     39c:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <timer2_millis+0x3>
     3a0:	2f bf       	out	0x3f, r18	; 63
     3a2:	08 95       	ret

000003a4 <_Z21initialise_timeperiodv>:
     3a4:	e1 eb       	ldi	r30, 0xB1	; 177
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	84 60       	ori	r24, 0x04	; 4
     3ac:	80 83       	st	Z, r24
     3ae:	e0 e7       	ldi	r30, 0x70	; 112
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 83       	st	Z, r24
     3b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     3bc:	08 95       	ret

000003be <__vector_15>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	9f 93       	push	r25
     3cc:	af 93       	push	r26
     3ce:	bf 93       	push	r27
     3d0:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <timer2_millis>
     3d4:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <timer2_millis+0x1>
     3d8:	a0 91 75 04 	lds	r26, 0x0475	; 0x800475 <timer2_millis+0x2>
     3dc:	b0 91 76 04 	lds	r27, 0x0476	; 0x800476 <timer2_millis+0x3>
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	a1 1d       	adc	r26, r1
     3e4:	b1 1d       	adc	r27, r1
     3e6:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <timer2_millis>
     3ea:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <timer2_millis+0x1>
     3ee:	a0 93 75 04 	sts	0x0475, r26	; 0x800475 <timer2_millis+0x2>
     3f2:	b0 93 76 04 	sts	0x0476, r27	; 0x800476 <timer2_millis+0x3>
     3f6:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <timer2_fract>
     3fa:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <timer2_fract+0x1>
     3fe:	a0 91 71 04 	lds	r26, 0x0471	; 0x800471 <timer2_fract+0x2>
     402:	b0 91 72 04 	lds	r27, 0x0472	; 0x800472 <timer2_fract+0x3>
     406:	03 96       	adiw	r24, 0x03	; 3
     408:	a1 1d       	adc	r26, r1
     40a:	b1 1d       	adc	r27, r1
     40c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <timer2_fract>
     410:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <timer2_fract+0x1>
     414:	a0 93 71 04 	sts	0x0471, r26	; 0x800471 <timer2_fract+0x2>
     418:	b0 93 72 04 	sts	0x0472, r27	; 0x800472 <timer2_fract+0x3>
     41c:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <timer2_fract>
     420:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <timer2_fract+0x1>
     424:	a0 91 71 04 	lds	r26, 0x0471	; 0x800471 <timer2_fract+0x2>
     428:	b0 91 72 04 	lds	r27, 0x0472	; 0x800472 <timer2_fract+0x3>
     42c:	8d 37       	cpi	r24, 0x7D	; 125
     42e:	91 05       	cpc	r25, r1
     430:	a1 05       	cpc	r26, r1
     432:	b1 05       	cpc	r27, r1
     434:	38 f1       	brcs	.+78     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     436:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <timer2_fract>
     43a:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <timer2_fract+0x1>
     43e:	a0 91 71 04 	lds	r26, 0x0471	; 0x800471 <timer2_fract+0x2>
     442:	b0 91 72 04 	lds	r27, 0x0472	; 0x800472 <timer2_fract+0x3>
     446:	8d 57       	subi	r24, 0x7D	; 125
     448:	91 09       	sbc	r25, r1
     44a:	a1 09       	sbc	r26, r1
     44c:	b1 09       	sbc	r27, r1
     44e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <timer2_fract>
     452:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <timer2_fract+0x1>
     456:	a0 93 71 04 	sts	0x0471, r26	; 0x800471 <timer2_fract+0x2>
     45a:	b0 93 72 04 	sts	0x0472, r27	; 0x800472 <timer2_fract+0x3>
     45e:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <timer2_millis>
     462:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <timer2_millis+0x1>
     466:	a0 91 75 04 	lds	r26, 0x0475	; 0x800475 <timer2_millis+0x2>
     46a:	b0 91 76 04 	lds	r27, 0x0476	; 0x800476 <timer2_millis+0x3>
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	a1 1d       	adc	r26, r1
     472:	b1 1d       	adc	r27, r1
     474:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <timer2_millis>
     478:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <timer2_millis+0x1>
     47c:	a0 93 75 04 	sts	0x0475, r26	; 0x800475 <timer2_millis+0x2>
     480:	b0 93 76 04 	sts	0x0476, r27	; 0x800476 <timer2_millis+0x3>
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <_Z8initGY88v>:
     496:	15 df       	rcall	.-470    	; 0x2c2 <_Z13init_HMC5883Lv>
     498:	86 ef       	ldi	r24, 0xF6	; 246
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN7MPU60504InitEv>
     4a0:	62 e3       	ldi	r22, 0x32	; 50
     4a2:	86 ef       	ldi	r24, 0xF6	; 246
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	0e 94 ae 1a 	call	0x355c	; 0x355c <_ZN7MPU605013calibrateGyroEh>
     4aa:	7c df       	rcall	.-264    	; 0x3a4 <_Z21initialise_timeperiodv>
     4ac:	6f df       	rcall	.-290    	; 0x38c <_Z6millisv>
     4ae:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <previousTime>
     4b2:	70 93 db 03 	sts	0x03DB, r23	; 0x8003db <previousTime+0x1>
     4b6:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <previousTime+0x2>
     4ba:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <previousTime+0x3>
     4be:	08 95       	ret

000004c0 <_Z25compass_tilt_compensationfffff>:
     4c0:	4f 92       	push	r4
     4c2:	5f 92       	push	r5
     4c4:	6f 92       	push	r6
     4c6:	7f 92       	push	r7
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	64 97       	sbiw	r28, 0x14	; 20
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	69 83       	std	Y+1, r22	; 0x01
     4f2:	7a 83       	std	Y+2, r23	; 0x02
     4f4:	8b 83       	std	Y+3, r24	; 0x03
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	29 01       	movw	r4, r18
     4fa:	3a 01       	movw	r6, r20
     4fc:	e9 8a       	std	Y+17, r14	; 0x11
     4fe:	fa 8a       	std	Y+18, r15	; 0x12
     500:	0b 8b       	std	Y+19, r16	; 0x13
     502:	1c 8b       	std	Y+20, r17	; 0x14
     504:	0e 94 40 20 	call	0x4080	; 0x4080 <cos>
     508:	6d 87       	std	Y+13, r22	; 0x0d
     50a:	7e 87       	std	Y+14, r23	; 0x0e
     50c:	8f 87       	std	Y+15, r24	; 0x0f
     50e:	98 8b       	std	Y+16, r25	; 0x10
     510:	69 81       	ldd	r22, Y+1	; 0x01
     512:	7a 81       	ldd	r23, Y+2	; 0x02
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <sin>
     51c:	69 83       	std	Y+1, r22	; 0x01
     51e:	7a 83       	std	Y+2, r23	; 0x02
     520:	8b 83       	std	Y+3, r24	; 0x03
     522:	9c 83       	std	Y+4, r25	; 0x04
     524:	c3 01       	movw	r24, r6
     526:	b2 01       	movw	r22, r4
     528:	0e 94 40 20 	call	0x4080	; 0x4080 <cos>
     52c:	6d 83       	std	Y+5, r22	; 0x05
     52e:	7e 83       	std	Y+6, r23	; 0x06
     530:	8f 83       	std	Y+7, r24	; 0x07
     532:	98 87       	std	Y+8, r25	; 0x08
     534:	c3 01       	movw	r24, r6
     536:	b2 01       	movw	r22, r4
     538:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <sin>
     53c:	69 87       	std	Y+9, r22	; 0x09
     53e:	7a 87       	std	Y+10, r23	; 0x0a
     540:	8b 87       	std	Y+11, r24	; 0x0b
     542:	9c 87       	std	Y+12, r25	; 0x0c
     544:	a6 01       	movw	r20, r12
     546:	95 01       	movw	r18, r10
     548:	6d 81       	ldd	r22, Y+5	; 0x05
     54a:	7e 81       	ldd	r23, Y+6	; 0x06
     54c:	8f 81       	ldd	r24, Y+7	; 0x07
     54e:	98 85       	ldd	r25, Y+8	; 0x08
     550:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     554:	2b 01       	movw	r4, r22
     556:	3c 01       	movw	r6, r24
     558:	28 a5       	ldd	r18, Y+40	; 0x28
     55a:	39 a5       	ldd	r19, Y+41	; 0x29
     55c:	4a a5       	ldd	r20, Y+42	; 0x2a
     55e:	5b a5       	ldd	r21, Y+43	; 0x2b
     560:	69 85       	ldd	r22, Y+9	; 0x09
     562:	7a 85       	ldd	r23, Y+10	; 0x0a
     564:	8b 85       	ldd	r24, Y+11	; 0x0b
     566:	9c 85       	ldd	r25, Y+12	; 0x0c
     568:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	c3 01       	movw	r24, r6
     572:	b2 01       	movw	r22, r4
     574:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     578:	2b 01       	movw	r4, r22
     57a:	3c 01       	movw	r6, r24
     57c:	a6 01       	movw	r20, r12
     57e:	95 01       	movw	r18, r10
     580:	69 81       	ldd	r22, Y+1	; 0x01
     582:	7a 81       	ldd	r23, Y+2	; 0x02
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     58c:	29 85       	ldd	r18, Y+9	; 0x09
     58e:	3a 85       	ldd	r19, Y+10	; 0x0a
     590:	4b 85       	ldd	r20, Y+11	; 0x0b
     592:	5c 85       	ldd	r21, Y+12	; 0x0c
     594:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
     59c:	a8 01       	movw	r20, r16
     59e:	97 01       	movw	r18, r14
     5a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a6:	98 89       	ldd	r25, Y+16	; 0x10
     5a8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	c5 01       	movw	r24, r10
     5b2:	b4 01       	movw	r22, r8
     5b4:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     5b8:	4b 01       	movw	r8, r22
     5ba:	5c 01       	movw	r10, r24
     5bc:	28 a5       	ldd	r18, Y+40	; 0x28
     5be:	39 a5       	ldd	r19, Y+41	; 0x29
     5c0:	4a a5       	ldd	r20, Y+42	; 0x2a
     5c2:	5b a5       	ldd	r21, Y+43	; 0x2b
     5c4:	69 81       	ldd	r22, Y+1	; 0x01
     5c6:	7a 81       	ldd	r23, Y+2	; 0x02
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     5d0:	2d 81       	ldd	r18, Y+5	; 0x05
     5d2:	3e 81       	ldd	r19, Y+6	; 0x06
     5d4:	4f 81       	ldd	r20, Y+7	; 0x07
     5d6:	58 85       	ldd	r21, Y+8	; 0x08
     5d8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     5dc:	9b 01       	movw	r18, r22
     5de:	ac 01       	movw	r20, r24
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     5e8:	90 58       	subi	r25, 0x80	; 128
     5ea:	a3 01       	movw	r20, r6
     5ec:	92 01       	movw	r18, r4
     5ee:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <atan2>
     5f2:	21 ee       	ldi	r18, 0xE1	; 225
     5f4:	3e e2       	ldi	r19, 0x2E	; 46
     5f6:	45 e6       	ldi	r20, 0x65	; 101
     5f8:	52 e4       	ldi	r21, 0x42	; 66
     5fa:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     5fe:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
     602:	9b 01       	movw	r18, r22
     604:	77 23       	and	r23, r23
     606:	14 f4       	brge	.+4      	; 0x60c <_Z25compass_tilt_compensationfffff+0x14c>
     608:	28 59       	subi	r18, 0x98	; 152
     60a:	3e 4f       	sbci	r19, 0xFE	; 254
     60c:	c9 01       	movw	r24, r18
     60e:	64 96       	adiw	r28, 0x14	; 20
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

0000063c <_Z24getAverageCompensatedYawv>:
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	28 97       	sbiw	r28, 0x08	; 8
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	60 91 79 04 	lds	r22, 0x0479	; 0x800479 <raw_y>
     66c:	70 91 7a 04 	lds	r23, 0x047A	; 0x80047a <raw_y+0x1>
     670:	07 2e       	mov	r0, r23
     672:	00 0c       	add	r0, r0
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     67c:	5b 01       	movw	r10, r22
     67e:	6c 01       	movw	r12, r24
     680:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <raw_x>
     684:	70 91 7c 04 	lds	r23, 0x047C	; 0x80047c <raw_x+0x1>
     688:	07 2e       	mov	r0, r23
     68a:	00 0c       	add	r0, r0
     68c:	88 0b       	sbc	r24, r24
     68e:	99 0b       	sbc	r25, r25
     690:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     694:	69 83       	std	Y+1, r22	; 0x01
     696:	7a 83       	std	Y+2, r23	; 0x02
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	25 e3       	ldi	r18, 0x35	; 53
     69e:	3a ef       	ldi	r19, 0xFA	; 250
     6a0:	4e e8       	ldi	r20, 0x8E	; 142
     6a2:	5c e3       	ldi	r21, 0x3C	; 60
     6a4:	60 91 e2 03 	lds	r22, 0x03E2	; 0x8003e2 <_ZL14filtered_pitch>
     6a8:	70 91 e3 03 	lds	r23, 0x03E3	; 0x8003e3 <_ZL14filtered_pitch+0x1>
     6ac:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZL14filtered_pitch+0x2>
     6b0:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <_ZL14filtered_pitch+0x3>
     6b4:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     6b8:	6d 83       	std	Y+5, r22	; 0x05
     6ba:	7e 83       	std	Y+6, r23	; 0x06
     6bc:	8f 83       	std	Y+7, r24	; 0x07
     6be:	98 87       	std	Y+8, r25	; 0x08
     6c0:	25 e3       	ldi	r18, 0x35	; 53
     6c2:	3a ef       	ldi	r19, 0xFA	; 250
     6c4:	4e e8       	ldi	r20, 0x8E	; 142
     6c6:	5c e3       	ldi	r21, 0x3C	; 60
     6c8:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <_ZL13filtered_roll>
     6cc:	70 91 e7 03 	lds	r23, 0x03E7	; 0x8003e7 <_ZL13filtered_roll+0x1>
     6d0:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <_ZL13filtered_roll+0x2>
     6d4:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <_ZL13filtered_roll+0x3>
     6d8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
     6e0:	60 91 77 04 	lds	r22, 0x0477	; 0x800477 <raw_z>
     6e4:	70 91 78 04 	lds	r23, 0x0478	; 0x800478 <raw_z+0x1>
     6e8:	07 2e       	mov	r0, r23
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	7f 93       	push	r23
     6fa:	6f 93       	push	r22
     6fc:	e9 80       	ldd	r14, Y+1	; 0x01
     6fe:	fa 80       	ldd	r15, Y+2	; 0x02
     700:	0b 81       	ldd	r16, Y+3	; 0x03
     702:	1c 81       	ldd	r17, Y+4	; 0x04
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	3e 81       	ldd	r19, Y+6	; 0x06
     708:	4f 81       	ldd	r20, Y+7	; 0x07
     70a:	58 85       	ldd	r21, Y+8	; 0x08
     70c:	c3 01       	movw	r24, r6
     70e:	b2 01       	movw	r22, r4
     710:	d7 de       	rcall	.-594    	; 0x4c0 <_Z25compass_tilt_compensationfffff>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	bc 01       	movw	r22, r24
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__floatunsisf>
     724:	2b 01       	movw	r4, r22
     726:	3c 01       	movw	r6, r24
     728:	2a e0       	ldi	r18, 0x0A	; 10
     72a:	29 83       	std	Y+1, r18	; 0x01
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	cb 01       	movw	r24, r22
     732:	a3 01       	movw	r20, r6
     734:	92 01       	movw	r18, r4
     736:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     73a:	29 81       	ldd	r18, Y+1	; 0x01
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	29 83       	std	Y+1, r18	; 0x01
     740:	21 11       	cpse	r18, r1
     742:	f7 cf       	rjmp	.-18     	; 0x732 <_Z24getAverageCompensatedYawv+0xf6>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e2       	ldi	r20, 0x20	; 32
     74a:	51 e4       	ldi	r21, 0x41	; 65
     74c:	0e 94 43 20 	call	0x4086	; 0x4086 <__divsf3>
     750:	28 96       	adiw	r28, 0x08	; 8
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	7f 90       	pop	r7
     772:	6f 90       	pop	r6
     774:	5f 90       	pop	r5
     776:	4f 90       	pop	r4
     778:	08 95       	ret

0000077a <_Z10getYawGY88v>:
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	2c 97       	sbiw	r28, 0x0c	; 12
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	66 ef       	ldi	r22, 0xF6	; 246
     79c:	73 e0       	ldi	r23, 0x03	; 3
     79e:	ce 01       	movw	r24, r28
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN7MPU605018readNormalizeAccelEv>
     7a6:	8c e0       	ldi	r24, 0x0C	; 12
     7a8:	fe 01       	movw	r30, r28
     7aa:	31 96       	adiw	r30, 0x01	; 1
     7ac:	ae ec       	ldi	r26, 0xCE	; 206
     7ae:	b3 e0       	ldi	r27, 0x03	; 3
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <_Z10getYawGY88v+0x36>
     7b8:	86 ef       	ldi	r24, 0xF6	; 246
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	0e 94 39 1c 	call	0x3872	; 0x3872 <_ZN7MPU60508rateGyroEv>
     7c0:	0e ec       	ldi	r16, 0xCE	; 206
     7c2:	13 e0       	ldi	r17, 0x03	; 3
     7c4:	f8 01       	movw	r30, r16
     7c6:	c0 84       	ldd	r12, Z+8	; 0x08
     7c8:	d1 84       	ldd	r13, Z+9	; 0x09
     7ca:	e2 84       	ldd	r14, Z+10	; 0x0a
     7cc:	f3 84       	ldd	r15, Z+11	; 0x0b
     7ce:	60 81       	ld	r22, Z
     7d0:	71 81       	ldd	r23, Z+1	; 0x01
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	a7 01       	movw	r20, r14
     7d8:	96 01       	movw	r18, r12
     7da:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <atan2>
     7de:	21 ee       	ldi	r18, 0xE1	; 225
     7e0:	3e e2       	ldi	r19, 0x2E	; 46
     7e2:	45 e6       	ldi	r20, 0x65	; 101
     7e4:	52 e4       	ldi	r21, 0x42	; 66
     7e6:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     7ea:	60 93 f2 03 	sts	0x03F2, r22	; 0x8003f2 <_ZL15unfiltered_roll>
     7ee:	70 93 f3 03 	sts	0x03F3, r23	; 0x8003f3 <_ZL15unfiltered_roll+0x1>
     7f2:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <_ZL15unfiltered_roll+0x2>
     7f6:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <_ZL15unfiltered_roll+0x3>
     7fa:	f8 01       	movw	r30, r16
     7fc:	64 81       	ldd	r22, Z+4	; 0x04
     7fe:	75 81       	ldd	r23, Z+5	; 0x05
     800:	86 81       	ldd	r24, Z+6	; 0x06
     802:	97 81       	ldd	r25, Z+7	; 0x07
     804:	a7 01       	movw	r20, r14
     806:	96 01       	movw	r18, r12
     808:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <atan2>
     80c:	21 ee       	ldi	r18, 0xE1	; 225
     80e:	3e e2       	ldi	r19, 0x2E	; 46
     810:	45 e6       	ldi	r20, 0x65	; 101
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     818:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <_ZL16unfiltered_pitch>
     81c:	70 93 ef 03 	sts	0x03EF, r23	; 0x8003ef <_ZL16unfiltered_pitch+0x1>
     820:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <_ZL16unfiltered_pitch+0x2>
     824:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <_ZL16unfiltered_pitch+0x3>
     828:	70 dd       	rcall	.-1312   	; 0x30a <_Z12read_Compassv>
     82a:	b0 dd       	rcall	.-1184   	; 0x38c <_Z6millisv>
     82c:	00 91 da 03 	lds	r16, 0x03DA	; 0x8003da <previousTime>
     830:	10 91 db 03 	lds	r17, 0x03DB	; 0x8003db <previousTime+0x1>
     834:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <previousTime+0x2>
     838:	30 91 dd 03 	lds	r19, 0x03DD	; 0x8003dd <previousTime+0x3>
     83c:	60 17       	cp	r22, r16
     83e:	71 07       	cpc	r23, r17
     840:	82 07       	cpc	r24, r18
     842:	93 07       	cpc	r25, r19
     844:	09 f4       	brne	.+2      	; 0x848 <_Z10getYawGY88v+0xce>
     846:	f0 c0       	rjmp	.+480    	; 0xa28 <_Z10getYawGY88v+0x2ae>
     848:	a1 dd       	rcall	.-1214   	; 0x38c <_Z6millisv>
     84a:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <previousTime>
     84e:	70 93 db 03 	sts	0x03DB, r23	; 0x8003db <previousTime+0x1>
     852:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <previousTime+0x2>
     856:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <previousTime+0x3>
     85a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <readFirstData>
     85e:	88 23       	and	r24, r24
     860:	91 f1       	breq	.+100    	; 0x8c6 <_Z10getYawGY88v+0x14c>
     862:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <_ZL15unfiltered_roll>
     866:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <_ZL15unfiltered_roll+0x1>
     86a:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <_ZL15unfiltered_roll+0x2>
     86e:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <_ZL15unfiltered_roll+0x3>
     872:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <_ZL13filtered_roll>
     876:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <_ZL13filtered_roll+0x1>
     87a:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <_ZL13filtered_roll+0x2>
     87e:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <_ZL13filtered_roll+0x3>
     882:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <_ZL16unfiltered_pitch>
     886:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <_ZL16unfiltered_pitch+0x1>
     88a:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <_ZL16unfiltered_pitch+0x2>
     88e:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <_ZL16unfiltered_pitch+0x3>
     892:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <_ZL14filtered_pitch>
     896:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <_ZL14filtered_pitch+0x1>
     89a:	a0 93 e4 03 	sts	0x03E4, r26	; 0x8003e4 <_ZL14filtered_pitch+0x2>
     89e:	b0 93 e5 03 	sts	0x03E5, r27	; 0x8003e5 <_ZL14filtered_pitch+0x3>
     8a2:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <_ZL14unfiltered_yaw>
     8a6:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <_ZL14unfiltered_yaw+0x1>
     8aa:	a0 91 ec 03 	lds	r26, 0x03EC	; 0x8003ec <_ZL14unfiltered_yaw+0x2>
     8ae:	b0 91 ed 03 	lds	r27, 0x03ED	; 0x8003ed <_ZL14unfiltered_yaw+0x3>
     8b2:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <_ZL12filtered_yaw>
     8b6:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <_ZL12filtered_yaw+0x1>
     8ba:	a0 93 e0 03 	sts	0x03E0, r26	; 0x8003e0 <_ZL12filtered_yaw+0x2>
     8be:	b0 93 e1 03 	sts	0x03E1, r27	; 0x8003e1 <_ZL12filtered_yaw+0x3>
     8c2:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <readFirstData>
     8c6:	86 ef       	ldi	r24, 0xF6	; 246
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 92 1c 	call	0x3924	; 0x3924 <_ZN7MPU605012getGyroRateXEv>
     8ce:	2f e6       	ldi	r18, 0x6F	; 111
     8d0:	32 e1       	ldi	r19, 0x12	; 18
     8d2:	43 e8       	ldi	r20, 0x83	; 131
     8d4:	5a e3       	ldi	r21, 0x3A	; 58
     8d6:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     8da:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <_ZL13filtered_roll>
     8de:	30 91 e7 03 	lds	r19, 0x03E7	; 0x8003e7 <_ZL13filtered_roll+0x1>
     8e2:	40 91 e8 03 	lds	r20, 0x03E8	; 0x8003e8 <_ZL13filtered_roll+0x2>
     8e6:	50 91 e9 03 	lds	r21, 0x03E9	; 0x8003e9 <_ZL13filtered_roll+0x3>
     8ea:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     8ee:	2b e7       	ldi	r18, 0x7B	; 123
     8f0:	34 e1       	ldi	r19, 0x14	; 20
     8f2:	4e e6       	ldi	r20, 0x6E	; 110
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	29 e2       	ldi	r18, 0x29	; 41
     900:	3c e5       	ldi	r19, 0x5C	; 92
     902:	4f e8       	ldi	r20, 0x8F	; 143
     904:	5d e3       	ldi	r21, 0x3D	; 61
     906:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <_ZL15unfiltered_roll>
     90a:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <_ZL15unfiltered_roll+0x1>
     90e:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <_ZL15unfiltered_roll+0x2>
     912:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <_ZL15unfiltered_roll+0x3>
     916:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     926:	60 93 e6 03 	sts	0x03E6, r22	; 0x8003e6 <_ZL13filtered_roll>
     92a:	70 93 e7 03 	sts	0x03E7, r23	; 0x8003e7 <_ZL13filtered_roll+0x1>
     92e:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <_ZL13filtered_roll+0x2>
     932:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <_ZL13filtered_roll+0x3>
     936:	86 ef       	ldi	r24, 0xF6	; 246
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <_ZN7MPU605012getGyroRateYEv>
     93e:	2f e6       	ldi	r18, 0x6F	; 111
     940:	32 e1       	ldi	r19, 0x12	; 18
     942:	43 e8       	ldi	r20, 0x83	; 131
     944:	5a e3       	ldi	r21, 0x3A	; 58
     946:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     94a:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <_ZL14filtered_pitch>
     94e:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <_ZL14filtered_pitch+0x1>
     952:	40 91 e4 03 	lds	r20, 0x03E4	; 0x8003e4 <_ZL14filtered_pitch+0x2>
     956:	50 91 e5 03 	lds	r21, 0x03E5	; 0x8003e5 <_ZL14filtered_pitch+0x3>
     95a:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     95e:	2b e7       	ldi	r18, 0x7B	; 123
     960:	34 e1       	ldi	r19, 0x14	; 20
     962:	4e e6       	ldi	r20, 0x6E	; 110
     964:	5f e3       	ldi	r21, 0x3F	; 63
     966:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	29 e2       	ldi	r18, 0x29	; 41
     970:	3c e5       	ldi	r19, 0x5C	; 92
     972:	4f e8       	ldi	r20, 0x8F	; 143
     974:	5d e3       	ldi	r21, 0x3D	; 61
     976:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <_ZL16unfiltered_pitch>
     97a:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <_ZL16unfiltered_pitch+0x1>
     97e:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <_ZL16unfiltered_pitch+0x2>
     982:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <_ZL16unfiltered_pitch+0x3>
     986:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     996:	60 93 e2 03 	sts	0x03E2, r22	; 0x8003e2 <_ZL14filtered_pitch>
     99a:	70 93 e3 03 	sts	0x03E3, r23	; 0x8003e3 <_ZL14filtered_pitch+0x1>
     99e:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <_ZL14filtered_pitch+0x2>
     9a2:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <_ZL14filtered_pitch+0x3>
     9a6:	4a de       	rcall	.-876    	; 0x63c <_Z24getAverageCompensatedYawv>
     9a8:	60 93 ea 03 	sts	0x03EA, r22	; 0x8003ea <_ZL14unfiltered_yaw>
     9ac:	70 93 eb 03 	sts	0x03EB, r23	; 0x8003eb <_ZL14unfiltered_yaw+0x1>
     9b0:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <_ZL14unfiltered_yaw+0x2>
     9b4:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <_ZL14unfiltered_yaw+0x3>
     9b8:	86 ef       	ldi	r24, 0xF6	; 246
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	0e 94 a2 1c 	call	0x3944	; 0x3944 <_ZN7MPU605012getGyroRateZEv>
     9c0:	2f e6       	ldi	r18, 0x6F	; 111
     9c2:	32 e1       	ldi	r19, 0x12	; 18
     9c4:	43 e8       	ldi	r20, 0x83	; 131
     9c6:	5a e3       	ldi	r21, 0x3A	; 58
     9c8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     9cc:	20 91 de 03 	lds	r18, 0x03DE	; 0x8003de <_ZL12filtered_yaw>
     9d0:	30 91 df 03 	lds	r19, 0x03DF	; 0x8003df <_ZL12filtered_yaw+0x1>
     9d4:	40 91 e0 03 	lds	r20, 0x03E0	; 0x8003e0 <_ZL12filtered_yaw+0x2>
     9d8:	50 91 e1 03 	lds	r21, 0x03E1	; 0x8003e1 <_ZL12filtered_yaw+0x3>
     9dc:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     9e0:	2d ec       	ldi	r18, 0xCD	; 205
     9e2:	3c ec       	ldi	r19, 0xCC	; 204
     9e4:	4c ec       	ldi	r20, 0xCC	; 204
     9e6:	5d e3       	ldi	r21, 0x3D	; 61
     9e8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	26 e6       	ldi	r18, 0x66	; 102
     9f2:	36 e6       	ldi	r19, 0x66	; 102
     9f4:	46 e6       	ldi	r20, 0x66	; 102
     9f6:	5f e3       	ldi	r21, 0x3F	; 63
     9f8:	60 91 ea 03 	lds	r22, 0x03EA	; 0x8003ea <_ZL14unfiltered_yaw>
     9fc:	70 91 eb 03 	lds	r23, 0x03EB	; 0x8003eb <_ZL14unfiltered_yaw+0x1>
     a00:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <_ZL14unfiltered_yaw+0x2>
     a04:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <_ZL14unfiltered_yaw+0x3>
     a08:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     a18:	60 93 de 03 	sts	0x03DE, r22	; 0x8003de <_ZL12filtered_yaw>
     a1c:	70 93 df 03 	sts	0x03DF, r23	; 0x8003df <_ZL12filtered_yaw+0x1>
     a20:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <_ZL12filtered_yaw+0x2>
     a24:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <_ZL12filtered_yaw+0x3>
     a28:	60 91 de 03 	lds	r22, 0x03DE	; 0x8003de <_ZL12filtered_yaw>
     a2c:	70 91 df 03 	lds	r23, 0x03DF	; 0x8003df <_ZL12filtered_yaw+0x1>
     a30:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <_ZL12filtered_yaw+0x2>
     a34:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <_ZL12filtered_yaw+0x3>
     a38:	0e 94 b0 20 	call	0x4160	; 0x4160 <__fixunssfsi>
     a3c:	cb 01       	movw	r24, r22
     a3e:	2c 96       	adiw	r28, 0x0c	; 12
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	08 95       	ret

00000a5c <_Z13initializeAllv>:
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ed e2       	ldi	r30, 0x2D	; 45
     a66:	f3 e0       	ldi	r31, 0x03	; 3
     a68:	88 e2       	ldi	r24, 0x28	; 40
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	92 8b       	std	Z+18, r25	; 0x12
     a6e:	81 8b       	std	Z+17, r24	; 0x11
     a70:	14 8a       	std	Z+20, r1	; 0x14
     a72:	13 8a       	std	Z+19, r1	; 0x13
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 eb       	ldi	r26, 0xB0	; 176
     a7a:	b0 e4       	ldi	r27, 0x40	; 64
     a7c:	85 8b       	std	Z+21, r24	; 0x15
     a7e:	96 8b       	std	Z+22, r25	; 0x16
     a80:	a7 8b       	std	Z+23, r26	; 0x17
     a82:	b0 8f       	std	Z+24, r27	; 0x18
     a84:	11 8e       	std	Z+25, r1	; 0x19
     a86:	12 8e       	std	Z+26, r1	; 0x1a
     a88:	13 8e       	std	Z+27, r1	; 0x1b
     a8a:	14 8e       	std	Z+28, r1	; 0x1c
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	aa ef       	ldi	r26, 0xFA	; 250
     a92:	b3 e4       	ldi	r27, 0x43	; 67
     a94:	85 8f       	std	Z+29, r24	; 0x1d
     a96:	96 8f       	std	Z+30, r25	; 0x1e
     a98:	a7 8f       	std	Z+31, r26	; 0x1f
     a9a:	b0 a3       	std	Z+32, r27	; 0x20
     a9c:	ec e0       	ldi	r30, 0x0C	; 12
     a9e:	f3 e0       	ldi	r31, 0x03	; 3
     aa0:	8a e9       	ldi	r24, 0x9A	; 154
     aa2:	99 e9       	ldi	r25, 0x99	; 153
     aa4:	a9 e1       	ldi	r26, 0x19	; 25
     aa6:	be e3       	ldi	r27, 0x3E	; 62
     aa8:	85 8b       	std	Z+21, r24	; 0x15
     aaa:	96 8b       	std	Z+22, r25	; 0x16
     aac:	a7 8b       	std	Z+23, r26	; 0x17
     aae:	b0 8f       	std	Z+24, r27	; 0x18
     ab0:	11 8e       	std	Z+25, r1	; 0x19
     ab2:	12 8e       	std	Z+26, r1	; 0x1a
     ab4:	13 8e       	std	Z+27, r1	; 0x1b
     ab6:	14 8e       	std	Z+28, r1	; 0x1c
     ab8:	46 e6       	ldi	r20, 0x66	; 102
     aba:	56 e6       	ldi	r21, 0x66	; 102
     abc:	66 e6       	ldi	r22, 0x66	; 102
     abe:	7f e3       	ldi	r23, 0x3F	; 63
     ac0:	45 8f       	std	Z+29, r20	; 0x1d
     ac2:	56 8f       	std	Z+30, r21	; 0x1e
     ac4:	67 8f       	std	Z+31, r22	; 0x1f
     ac6:	70 a3       	std	Z+32, r23	; 0x20
     ac8:	eb ee       	ldi	r30, 0xEB	; 235
     aca:	f2 e0       	ldi	r31, 0x02	; 2
     acc:	85 8b       	std	Z+21, r24	; 0x15
     ace:	96 8b       	std	Z+22, r25	; 0x16
     ad0:	a7 8b       	std	Z+23, r26	; 0x17
     ad2:	b0 8f       	std	Z+24, r27	; 0x18
     ad4:	11 8e       	std	Z+25, r1	; 0x19
     ad6:	12 8e       	std	Z+26, r1	; 0x1a
     ad8:	13 8e       	std	Z+27, r1	; 0x1b
     ada:	14 8e       	std	Z+28, r1	; 0x1c
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e8       	ldi	r26, 0x80	; 128
     ae2:	bf e3       	ldi	r27, 0x3F	; 63
     ae4:	85 8f       	std	Z+29, r24	; 0x1d
     ae6:	96 8f       	std	Z+30, r25	; 0x1e
     ae8:	a7 8f       	std	Z+31, r26	; 0x1f
     aea:	b0 a3       	std	Z+32, r27	; 0x20
     aec:	aa ec       	ldi	r26, 0xCA	; 202
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	8d e2       	ldi	r24, 0x2D	; 45
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	1f 96       	adiw	r26, 0x0f	; 15
     af6:	9c 93       	st	X, r25
     af8:	8e 93       	st	-X, r24
     afa:	1e 97       	sbiw	r26, 0x0e	; 14
     afc:	e9 ea       	ldi	r30, 0xA9	; 169
     afe:	f2 e0       	ldi	r31, 0x02	; 2
     b00:	97 87       	std	Z+15, r25	; 0x0f
     b02:	86 87       	std	Z+14, r24	; 0x0e
     b04:	0a e9       	ldi	r16, 0x9A	; 154
     b06:	19 e9       	ldi	r17, 0x99	; 153
     b08:	29 e9       	ldi	r18, 0x99	; 153
     b0a:	3f e3       	ldi	r19, 0x3F	; 63
     b0c:	55 96       	adiw	r26, 0x15	; 21
     b0e:	0d 93       	st	X+, r16
     b10:	1d 93       	st	X+, r17
     b12:	2d 93       	st	X+, r18
     b14:	3c 93       	st	X, r19
     b16:	58 97       	sbiw	r26, 0x18	; 24
     b18:	59 96       	adiw	r26, 0x19	; 25
     b1a:	1d 92       	st	X+, r1
     b1c:	1d 92       	st	X+, r1
     b1e:	1d 92       	st	X+, r1
     b20:	1c 92       	st	X, r1
     b22:	5c 97       	sbiw	r26, 0x1c	; 28
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	60 e8       	ldi	r22, 0x80	; 128
     b2a:	71 e4       	ldi	r23, 0x41	; 65
     b2c:	5d 96       	adiw	r26, 0x1d	; 29
     b2e:	4d 93       	st	X+, r20
     b30:	5d 93       	st	X+, r21
     b32:	6d 93       	st	X+, r22
     b34:	7c 93       	st	X, r23
     b36:	90 97       	sbiw	r26, 0x20	; 32
     b38:	05 8b       	std	Z+21, r16	; 0x15
     b3a:	16 8b       	std	Z+22, r17	; 0x16
     b3c:	27 8b       	std	Z+23, r18	; 0x17
     b3e:	30 8f       	std	Z+24, r19	; 0x18
     b40:	11 8e       	std	Z+25, r1	; 0x19
     b42:	12 8e       	std	Z+26, r1	; 0x1a
     b44:	13 8e       	std	Z+27, r1	; 0x1b
     b46:	14 8e       	std	Z+28, r1	; 0x1c
     b48:	45 8f       	std	Z+29, r20	; 0x1d
     b4a:	56 8f       	std	Z+30, r21	; 0x1e
     b4c:	67 8f       	std	Z+31, r22	; 0x1f
     b4e:	70 a3       	std	Z+32, r23	; 0x20
     b50:	a2 dc       	rcall	.-1724   	; 0x496 <_Z8initGY88v>
     b52:	1c dc       	rcall	.-1992   	; 0x38c <_Z6millisv>
     b54:	60 93 ca 03 	sts	0x03CA, r22	; 0x8003ca <startTime>
     b58:	70 93 cb 03 	sts	0x03CB, r23	; 0x8003cb <startTime+0x1>
     b5c:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <startTime+0x2>
     b60:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <startTime+0x3>
     b64:	cd e2       	ldi	r28, 0x2D	; 45
     b66:	d3 e0       	ldi	r29, 0x03	; 3
     b68:	11 dc       	rcall	.-2014   	; 0x38c <_Z6millisv>
     b6a:	00 91 ca 03 	lds	r16, 0x03CA	; 0x8003ca <startTime>
     b6e:	10 91 cb 03 	lds	r17, 0x03CB	; 0x8003cb <startTime+0x1>
     b72:	20 91 cc 03 	lds	r18, 0x03CC	; 0x8003cc <startTime+0x2>
     b76:	30 91 cd 03 	lds	r19, 0x03CD	; 0x8003cd <startTime+0x3>
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	80 1b       	sub	r24, r16
     b80:	91 0b       	sbc	r25, r17
     b82:	a2 0b       	sbc	r26, r18
     b84:	b3 0b       	sbc	r27, r19
     b86:	84 3f       	cpi	r24, 0xF4	; 244
     b88:	91 40       	sbci	r25, 0x01	; 1
     b8a:	a1 05       	cpc	r26, r1
     b8c:	b1 05       	cpc	r27, r1
     b8e:	48 f4       	brcc	.+18     	; 0xba2 <_Z13initializeAllv+0x146>
     b90:	f4 dd       	rcall	.-1048   	; 0x77a <_Z10getYawGY88v>
     b92:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <initialCompassAngle+0x1>
     b96:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <initialCompassAngle>
     b9a:	18 8a       	std	Y+16, r1	; 0x10
     b9c:	9f 87       	std	Y+15, r25	; 0x0f
     b9e:	8e 87       	std	Y+14, r24	; 0x0e
     ba0:	e3 cf       	rjmp	.-58     	; 0xb68 <_Z13initializeAllv+0x10c>
     ba2:	0e 94 aa 1c 	call	0x3954	; 0x3954 <_Z16checkRobotMotionv>
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	08 95       	ret

00000bb0 <_Z10BrakeMotorv>:
     bb0:	e8 e0       	ldi	r30, 0x08	; 8
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	90 81       	ld	r25, Z
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	89 27       	eor	r24, r25
     bba:	80 83       	st	Z, r24
     bbc:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <movingxfront>
     bc0:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <movingxback>
     bc4:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <movingyfront>
     bc8:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <movingyback>
     bcc:	08 95       	ret

00000bce <_Z15sendDataToSlavev>:
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	8f e7       	ldi	r24, 0x7F	; 127
     bd4:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <_Z10uart2_putch>
     bd8:	c2 ec       	ldi	r28, 0xC2	; 194
     bda:	d3 e0       	ldi	r29, 0x03	; 3
     bdc:	88 81       	ld	r24, Y
     bde:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <_Z10uart2_putch>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <_Z10uart2_putch>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <_Z10uart2_putch>
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <_Z10uart2_putch>
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <_Z21Goto_Fence_And_Detectv>:
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <movingyfront>
     c02:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c06:	83 ff       	sbrs	r24, 3
     c08:	39 c0       	rjmp	.+114    	; 0xc7c <_Z21Goto_Fence_And_Detectv+0x82>
     c0a:	63 9b       	sbis	0x0c, 3	; 12
     c0c:	3a c0       	rjmp	.+116    	; 0xc82 <_Z21Goto_Fence_And_Detectv+0x88>
     c0e:	36 c0       	rjmp	.+108    	; 0xc7c <_Z21Goto_Fence_And_Detectv+0x82>
     c10:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c14:	83 ff       	sbrs	r24, 3
     c16:	51 c0       	rjmp	.+162    	; 0xcba <_Z21Goto_Fence_And_Detectv+0xc0>
     c18:	6c c0       	rjmp	.+216    	; 0xcf2 <_Z21Goto_Fence_And_Detectv+0xf8>
     c1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c1e:	83 fd       	sbrc	r24, 3
     c20:	6b c0       	rjmp	.+214    	; 0xcf8 <_Z21Goto_Fence_And_Detectv+0xfe>
     c22:	63 99       	sbic	0x0c, 3	; 12
     c24:	29 c0       	rjmp	.+82     	; 0xc78 <_Z21Goto_Fence_And_Detectv+0x7e>
     c26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c2a:	83 ff       	sbrs	r24, 3
     c2c:	7d c0       	rjmp	.+250    	; 0xd28 <_Z21Goto_Fence_And_Detectv+0x12e>
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	91 c0       	rjmp	.+290    	; 0xd54 <_Z21Goto_Fence_And_Detectv+0x15a>
     c32:	ac db       	rcall	.-2216   	; 0x38c <_Z6millisv>
     c34:	60 93 c6 03 	sts	0x03C6, r22	; 0x8003c6 <time_of_limit_switches_pressed>
     c38:	70 93 c7 03 	sts	0x03C7, r23	; 0x8003c7 <time_of_limit_switches_pressed+0x1>
     c3c:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <time_of_limit_switches_pressed+0x2>
     c40:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <time_of_limit_switches_pressed+0x3>
     c44:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <first_data_time_of_limit_switches_pressed>
     c48:	a1 db       	rcall	.-2238   	; 0x38c <_Z6millisv>
     c4a:	00 91 c6 03 	lds	r16, 0x03C6	; 0x8003c6 <time_of_limit_switches_pressed>
     c4e:	10 91 c7 03 	lds	r17, 0x03C7	; 0x8003c7 <time_of_limit_switches_pressed+0x1>
     c52:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <time_of_limit_switches_pressed+0x2>
     c56:	30 91 c9 03 	lds	r19, 0x03C9	; 0x8003c9 <time_of_limit_switches_pressed+0x3>
     c5a:	ab 01       	movw	r20, r22
     c5c:	bc 01       	movw	r22, r24
     c5e:	40 1b       	sub	r20, r16
     c60:	51 0b       	sbc	r21, r17
     c62:	62 0b       	sbc	r22, r18
     c64:	73 0b       	sbc	r23, r19
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	42 30       	cpi	r20, 0x02	; 2
     c6a:	51 05       	cpc	r21, r1
     c6c:	61 05       	cpc	r22, r1
     c6e:	71 05       	cpc	r23, r1
     c70:	08 f0       	brcs	.+2      	; 0xc74 <_Z21Goto_Fence_And_Detectv+0x7a>
     c72:	70 c0       	rjmp	.+224    	; 0xd54 <_Z21Goto_Fence_And_Detectv+0x15a>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	6e c0       	rjmp	.+220    	; 0xd54 <_Z21Goto_Fence_And_Detectv+0x15a>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	6c c0       	rjmp	.+216    	; 0xd54 <_Z21Goto_Fence_And_Detectv+0x15a>
     c7c:	63 99       	sbic	0x0c, 3	; 12
     c7e:	c8 cf       	rjmp	.-112    	; 0xc10 <_Z21Goto_Fence_And_Detectv+0x16>
     c80:	38 c0       	rjmp	.+112    	; 0xcf2 <_Z21Goto_Fence_And_Detectv+0xf8>
     c82:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     c86:	ea eb       	ldi	r30, 0xBA	; 186
     c88:	f3 e0       	ldi	r31, 0x03	; 3
     c8a:	8e e1       	ldi	r24, 0x1E	; 30
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	80 83       	st	Z, r24
     c92:	13 82       	std	Z+3, r1	; 0x03
     c94:	12 82       	std	Z+2, r1	; 0x02
     c96:	15 82       	std	Z+5, r1	; 0x05
     c98:	14 82       	std	Z+4, r1	; 0x04
     c9a:	8c ee       	ldi	r24, 0xEC	; 236
     c9c:	9f ef       	ldi	r25, 0xFF	; 255
     c9e:	97 83       	std	Z+7, r25	; 0x07
     ca0:	86 83       	std	Z+6, r24	; 0x06
     ca2:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <time_of_limit_switches_pressed>
     ca6:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <time_of_limit_switches_pressed+0x1>
     caa:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <time_of_limit_switches_pressed+0x2>
     cae:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <time_of_limit_switches_pressed+0x3>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     cb8:	b4 cf       	rjmp	.-152    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     cba:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     cbe:	ea eb       	ldi	r30, 0xBA	; 186
     cc0:	f3 e0       	ldi	r31, 0x03	; 3
     cc2:	84 e1       	ldi	r24, 0x14	; 20
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	80 83       	st	Z, r24
     cca:	13 82       	std	Z+3, r1	; 0x03
     ccc:	12 82       	std	Z+2, r1	; 0x02
     cce:	15 82       	std	Z+5, r1	; 0x05
     cd0:	14 82       	std	Z+4, r1	; 0x04
     cd2:	82 ee       	ldi	r24, 0xE2	; 226
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
     cd6:	97 83       	std	Z+7, r25	; 0x07
     cd8:	86 83       	std	Z+6, r24	; 0x06
     cda:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <time_of_limit_switches_pressed>
     cde:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <time_of_limit_switches_pressed+0x1>
     ce2:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <time_of_limit_switches_pressed+0x2>
     ce6:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <time_of_limit_switches_pressed+0x3>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     cf0:	98 cf       	rjmp	.-208    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     cf2:	63 99       	sbic	0x0c, 3	; 12
     cf4:	92 cf       	rjmp	.-220    	; 0xc1a <_Z21Goto_Fence_And_Detectv+0x20>
     cf6:	95 cf       	rjmp	.-214    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
     cfe:	e4 eb       	ldi	r30, 0xB4	; 180
     d00:	f3 e0       	ldi	r31, 0x03	; 3
     d02:	28 ed       	ldi	r18, 0xD8	; 216
     d04:	3f ef       	ldi	r19, 0xFF	; 255
     d06:	31 83       	std	Z+1, r19	; 0x01
     d08:	20 83       	st	Z, r18
     d0a:	13 82       	std	Z+3, r1	; 0x03
     d0c:	12 82       	std	Z+2, r1	; 0x02
     d0e:	15 82       	std	Z+5, r1	; 0x05
     d10:	14 82       	std	Z+4, r1	; 0x04
     d12:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <time_of_limit_switches_pressed>
     d16:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <time_of_limit_switches_pressed+0x1>
     d1a:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <time_of_limit_switches_pressed+0x2>
     d1e:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <time_of_limit_switches_pressed+0x3>
     d22:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     d26:	7d cf       	rjmp	.-262    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     d28:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     d2c:	ea eb       	ldi	r30, 0xBA	; 186
     d2e:	f3 e0       	ldi	r31, 0x03	; 3
     d30:	8a e0       	ldi	r24, 0x0A	; 10
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
     d38:	13 82       	std	Z+3, r1	; 0x03
     d3a:	12 82       	std	Z+2, r1	; 0x02
     d3c:	15 82       	std	Z+5, r1	; 0x05
     d3e:	14 82       	std	Z+4, r1	; 0x04
     d40:	86 ef       	ldi	r24, 0xF6	; 246
     d42:	9f ef       	ldi	r25, 0xFF	; 255
     d44:	97 83       	std	Z+7, r25	; 0x07
     d46:	86 83       	std	Z+6, r24	; 0x06
     d48:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <first_data_time_of_limit_switches_pressed>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_Z21Goto_Fence_And_Detectv+0x158>
     d50:	7b cf       	rjmp	.-266    	; 0xc48 <_Z21Goto_Fence_And_Detectv+0x4e>
     d52:	6f cf       	rjmp	.-290    	; 0xc32 <_Z21Goto_Fence_And_Detectv+0x38>
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <_Z19calculateCompassPIDv>:
     d5a:	2f 92       	push	r2
     d5c:	3f 92       	push	r3
     d5e:	4f 92       	push	r4
     d60:	5f 92       	push	r5
     d62:	6f 92       	push	r6
     d64:	7f 92       	push	r7
     d66:	8f 92       	push	r8
     d68:	9f 92       	push	r9
     d6a:	af 92       	push	r10
     d6c:	bf 92       	push	r11
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <_Z19calculateCompassPIDv+0x26>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <_Z19calculateCompassPIDv+0x28>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PidUpdateFlagCompass>
     d8a:	88 23       	and	r24, r24
     d8c:	09 f4       	brne	.+2      	; 0xd90 <_Z19calculateCompassPIDv+0x36>
     d8e:	62 c1       	rjmp	.+708    	; 0x1054 <_Z19calculateCompassPIDv+0x2fa>
     d90:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <compassPID>
     d94:	88 23       	and	r24, r24
     d96:	09 f4       	brne	.+2      	; 0xd9a <_Z19calculateCompassPIDv+0x40>
     d98:	61 c1       	rjmp	.+706    	; 0x105c <_Z19calculateCompassPIDv+0x302>
     d9a:	ef dc       	rcall	.-1570   	; 0x77a <_Z10getYawGY88v>
     d9c:	8c 01       	movw	r16, r24
     d9e:	ed e2       	ldi	r30, 0x2D	; 45
     da0:	f3 e0       	ldi	r31, 0x03	; 3
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
     da6:	86 85       	ldd	r24, Z+14	; 0x0e
     da8:	97 85       	ldd	r25, Z+15	; 0x0f
     daa:	80 1b       	sub	r24, r16
     dac:	91 0b       	sbc	r25, r17
     dae:	85 3b       	cpi	r24, 0xB5	; 181
     db0:	91 05       	cpc	r25, r1
     db2:	3c f0       	brlt	.+14     	; 0xdc2 <_Z19calculateCompassPIDv+0x68>
     db4:	88 56       	subi	r24, 0x68	; 104
     db6:	91 40       	sbci	r25, 0x01	; 1
     db8:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <compass+0x3>
     dbc:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <compass+0x2>
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <_Z19calculateCompassPIDv+0x86>
     dc2:	8c 34       	cpi	r24, 0x4C	; 76
     dc4:	2f ef       	ldi	r18, 0xFF	; 255
     dc6:	92 07       	cpc	r25, r18
     dc8:	2c f0       	brlt	.+10     	; 0xdd4 <_Z19calculateCompassPIDv+0x7a>
     dca:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <compass+0x3>
     dce:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <compass+0x2>
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <_Z19calculateCompassPIDv+0x86>
     dd4:	88 59       	subi	r24, 0x98	; 152
     dd6:	9e 4f       	sbci	r25, 0xFE	; 254
     dd8:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <compass+0x3>
     ddc:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <compass+0x2>
     de0:	20 90 2f 03 	lds	r2, 0x032F	; 0x80032f <compass+0x2>
     de4:	30 90 30 03 	lds	r3, 0x0330	; 0x800330 <compass+0x3>
     de8:	b1 01       	movw	r22, r2
     dea:	03 2c       	mov	r0, r3
     dec:	00 0c       	add	r0, r0
     dee:	88 0b       	sbc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     df6:	4b 01       	movw	r8, r22
     df8:	5c 01       	movw	r10, r24
     dfa:	20 91 46 03 	lds	r18, 0x0346	; 0x800346 <compass+0x19>
     dfe:	30 91 47 03 	lds	r19, 0x0347	; 0x800347 <compass+0x1a>
     e02:	40 91 48 03 	lds	r20, 0x0348	; 0x800348 <compass+0x1b>
     e06:	50 91 49 03 	lds	r21, 0x0349	; 0x800349 <compass+0x1c>
     e0a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     e0e:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <compass+0xa>
     e12:	30 91 38 03 	lds	r19, 0x0338	; 0x800338 <compass+0xb>
     e16:	40 91 39 03 	lds	r20, 0x0339	; 0x800339 <compass+0xc>
     e1a:	50 91 3a 03 	lds	r21, 0x033A	; 0x80033a <compass+0xd>
     e1e:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     e22:	6b 01       	movw	r12, r22
     e24:	7c 01       	movw	r14, r24
     e26:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <compass+0xa>
     e2a:	70 93 38 03 	sts	0x0338, r23	; 0x800338 <compass+0xb>
     e2e:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <compass+0xc>
     e32:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <compass+0xd>
     e36:	40 91 3e 03 	lds	r20, 0x033E	; 0x80033e <compass+0x11>
     e3a:	50 91 3f 03 	lds	r21, 0x033F	; 0x80033f <compass+0x12>
     e3e:	5e 83       	std	Y+6, r21	; 0x06
     e40:	4d 83       	std	Y+5, r20	; 0x05
     e42:	ba 01       	movw	r22, r20
     e44:	55 0f       	add	r21, r21
     e46:	88 0b       	sbc	r24, r24
     e48:	99 0b       	sbc	r25, r25
     e4a:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     e4e:	69 83       	std	Y+1, r22	; 0x01
     e50:	7a 83       	std	Y+2, r23	; 0x02
     e52:	8b 83       	std	Y+3, r24	; 0x03
     e54:	9c 83       	std	Y+4, r25	; 0x04
     e56:	2d ec       	ldi	r18, 0xCD	; 205
     e58:	3c ec       	ldi	r19, 0xCC	; 204
     e5a:	4c ec       	ldi	r20, 0xCC	; 204
     e5c:	5d e3       	ldi	r21, 0x3D	; 61
     e5e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     e62:	2b 01       	movw	r4, r22
     e64:	3c 01       	movw	r6, r24
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
     e6e:	9b 01       	movw	r18, r22
     e70:	77 23       	and	r23, r23
     e72:	24 f4       	brge	.+8      	; 0xe7c <_Z19calculateCompassPIDv+0x122>
     e74:	22 27       	eor	r18, r18
     e76:	33 27       	eor	r19, r19
     e78:	26 1b       	sub	r18, r22
     e7a:	37 0b       	sbc	r19, r23
     e7c:	b9 01       	movw	r22, r18
     e7e:	33 0f       	add	r19, r19
     e80:	88 0b       	sbc	r24, r24
     e82:	99 0b       	sbc	r25, r25
     e84:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     e88:	a3 01       	movw	r20, r6
     e8a:	92 01       	movw	r18, r4
     e8c:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__gesf2>
     e90:	18 16       	cp	r1, r24
     e92:	24 f5       	brge	.+72     	; 0xedc <_Z19calculateCompassPIDv+0x182>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	a9 01       	movw	r20, r18
     e9a:	c7 01       	movw	r24, r14
     e9c:	b6 01       	movw	r22, r12
     e9e:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__gesf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	4c f4       	brge	.+18     	; 0xeb8 <_Z19calculateCompassPIDv+0x15e>
     ea6:	40 92 37 03 	sts	0x0337, r4	; 0x800337 <compass+0xa>
     eaa:	50 92 38 03 	sts	0x0338, r5	; 0x800338 <compass+0xb>
     eae:	60 92 39 03 	sts	0x0339, r6	; 0x800339 <compass+0xc>
     eb2:	70 92 3a 03 	sts	0x033A, r7	; 0x80033a <compass+0xd>
     eb6:	12 c0       	rjmp	.+36     	; 0xedc <_Z19calculateCompassPIDv+0x182>
     eb8:	2d ec       	ldi	r18, 0xCD	; 205
     eba:	3c ec       	ldi	r19, 0xCC	; 204
     ebc:	4c ec       	ldi	r20, 0xCC	; 204
     ebe:	5d eb       	ldi	r21, 0xBD	; 189
     ec0:	69 81       	ldd	r22, Y+1	; 0x01
     ec2:	7a 81       	ldd	r23, Y+2	; 0x02
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     ecc:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <compass+0xa>
     ed0:	70 93 38 03 	sts	0x0338, r23	; 0x800338 <compass+0xb>
     ed4:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <compass+0xc>
     ed8:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <compass+0xd>
     edc:	c1 01       	movw	r24, r2
     ede:	03 96       	adiw	r24, 0x03	; 3
     ee0:	07 97       	sbiw	r24, 0x07	; 7
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <_Z19calculateCompassPIDv+0x18c>
     ee4:	41 c0       	rjmp	.+130    	; 0xf68 <_Z19calculateCompassPIDv+0x20e>
     ee6:	c1 01       	movw	r24, r2
     ee8:	33 20       	and	r3, r3
     eea:	24 f4       	brge	.+8      	; 0xef4 <_Z19calculateCompassPIDv+0x19a>
     eec:	88 27       	eor	r24, r24
     eee:	99 27       	eor	r25, r25
     ef0:	82 19       	sub	r24, r2
     ef2:	93 09       	sbc	r25, r3
     ef4:	18 16       	cp	r1, r24
     ef6:	19 06       	cpc	r1, r25
     ef8:	bc f5       	brge	.+110    	; 0xf68 <_Z19calculateCompassPIDv+0x20e>
     efa:	0f 2e       	mov	r0, r31
     efc:	fd e2       	ldi	r31, 0x2D	; 45
     efe:	ef 2e       	mov	r14, r31
     f00:	f3 e0       	ldi	r31, 0x03	; 3
     f02:	ff 2e       	mov	r15, r31
     f04:	f0 2d       	mov	r31, r0
     f06:	f7 01       	movw	r30, r14
     f08:	25 89       	ldd	r18, Z+21	; 0x15
     f0a:	36 89       	ldd	r19, Z+22	; 0x16
     f0c:	47 89       	ldd	r20, Z+23	; 0x17
     f0e:	50 8d       	ldd	r21, Z+24	; 0x18
     f10:	c5 01       	movw	r24, r10
     f12:	b4 01       	movw	r22, r8
     f14:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     f18:	4b 01       	movw	r8, r22
     f1a:	5c 01       	movw	r10, r24
     f1c:	f7 01       	movw	r30, r14
     f1e:	84 81       	ldd	r24, Z+4	; 0x04
     f20:	95 81       	ldd	r25, Z+5	; 0x05
     f22:	b8 01       	movw	r22, r16
     f24:	68 1b       	sub	r22, r24
     f26:	79 0b       	sbc	r23, r25
     f28:	07 2e       	mov	r0, r23
     f2a:	00 0c       	add	r0, r0
     f2c:	88 0b       	sbc	r24, r24
     f2e:	99 0b       	sbc	r25, r25
     f30:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     f34:	f7 01       	movw	r30, r14
     f36:	25 8d       	ldd	r18, Z+29	; 0x1d
     f38:	36 8d       	ldd	r19, Z+30	; 0x1e
     f3a:	47 8d       	ldd	r20, Z+31	; 0x1f
     f3c:	50 a1       	ldd	r21, Z+32	; 0x20
     f3e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
     f46:	c5 01       	movw	r24, r10
     f48:	b4 01       	movw	r22, r8
     f4a:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     f4e:	f7 01       	movw	r30, r14
     f50:	22 85       	ldd	r18, Z+10	; 0x0a
     f52:	33 85       	ldd	r19, Z+11	; 0x0b
     f54:	44 85       	ldd	r20, Z+12	; 0x0c
     f56:	55 85       	ldd	r21, Z+13	; 0x0d
     f58:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     f5c:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
     f60:	f7 01       	movw	r30, r14
     f62:	77 83       	std	Z+7, r23	; 0x07
     f64:	66 83       	std	Z+6, r22	; 0x06
     f66:	4c c0       	rjmp	.+152    	; 0x1000 <_Z19calculateCompassPIDv+0x2a6>
     f68:	c1 01       	movw	r24, r2
     f6a:	99 23       	and	r25, r25
     f6c:	24 f4       	brge	.+8      	; 0xf76 <_Z19calculateCompassPIDv+0x21c>
     f6e:	88 27       	eor	r24, r24
     f70:	99 27       	eor	r25, r25
     f72:	82 19       	sub	r24, r2
     f74:	93 09       	sbc	r25, r3
     f76:	04 97       	sbiw	r24, 0x04	; 4
     f78:	dc f1       	brlt	.+118    	; 0xff0 <_Z19calculateCompassPIDv+0x296>
     f7a:	0f 2e       	mov	r0, r31
     f7c:	fd e2       	ldi	r31, 0x2D	; 45
     f7e:	ef 2e       	mov	r14, r31
     f80:	f3 e0       	ldi	r31, 0x03	; 3
     f82:	ff 2e       	mov	r15, r31
     f84:	f0 2d       	mov	r31, r0
     f86:	f7 01       	movw	r30, r14
     f88:	65 89       	ldd	r22, Z+21	; 0x15
     f8a:	76 89       	ldd	r23, Z+22	; 0x16
     f8c:	87 89       	ldd	r24, Z+23	; 0x17
     f8e:	90 8d       	ldd	r25, Z+24	; 0x18
     f90:	9b 01       	movw	r18, r22
     f92:	ac 01       	movw	r20, r24
     f94:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     f98:	a5 01       	movw	r20, r10
     f9a:	94 01       	movw	r18, r8
     f9c:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     fa0:	4b 01       	movw	r8, r22
     fa2:	5c 01       	movw	r10, r24
     fa4:	f7 01       	movw	r30, r14
     fa6:	84 81       	ldd	r24, Z+4	; 0x04
     fa8:	95 81       	ldd	r25, Z+5	; 0x05
     faa:	b8 01       	movw	r22, r16
     fac:	68 1b       	sub	r22, r24
     fae:	79 0b       	sbc	r23, r25
     fb0:	07 2e       	mov	r0, r23
     fb2:	00 0c       	add	r0, r0
     fb4:	88 0b       	sbc	r24, r24
     fb6:	99 0b       	sbc	r25, r25
     fb8:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
     fbc:	f7 01       	movw	r30, r14
     fbe:	25 8d       	ldd	r18, Z+29	; 0x1d
     fc0:	36 8d       	ldd	r19, Z+30	; 0x1e
     fc2:	47 8d       	ldd	r20, Z+31	; 0x1f
     fc4:	50 a1       	ldd	r21, Z+32	; 0x20
     fc6:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
     fce:	c5 01       	movw	r24, r10
     fd0:	b4 01       	movw	r22, r8
     fd2:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     fd6:	f7 01       	movw	r30, r14
     fd8:	22 85       	ldd	r18, Z+10	; 0x0a
     fda:	33 85       	ldd	r19, Z+11	; 0x0b
     fdc:	44 85       	ldd	r20, Z+12	; 0x0c
     fde:	55 85       	ldd	r21, Z+13	; 0x0d
     fe0:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     fe4:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
     fe8:	f7 01       	movw	r30, r14
     fea:	77 83       	std	Z+7, r23	; 0x07
     fec:	66 83       	std	Z+6, r22	; 0x06
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <_Z19calculateCompassPIDv+0x2a6>
     ff0:	ed e2       	ldi	r30, 0x2D	; 45
     ff2:	f3 e0       	ldi	r31, 0x03	; 3
     ff4:	12 86       	std	Z+10, r1	; 0x0a
     ff6:	13 86       	std	Z+11, r1	; 0x0b
     ff8:	14 86       	std	Z+12, r1	; 0x0c
     ffa:	15 86       	std	Z+13, r1	; 0x0d
     ffc:	17 82       	std	Z+7, r1	; 0x07
     ffe:	16 82       	std	Z+6, r1	; 0x06
    1000:	ed e2       	ldi	r30, 0x2D	; 45
    1002:	f3 e0       	ldi	r31, 0x03	; 3
    1004:	15 83       	std	Z+5, r17	; 0x05
    1006:	04 83       	std	Z+4, r16	; 0x04
    1008:	86 81       	ldd	r24, Z+6	; 0x06
    100a:	97 81       	ldd	r25, Z+7	; 0x07
    100c:	9c 01       	movw	r18, r24
    100e:	99 23       	and	r25, r25
    1010:	24 f4       	brge	.+8      	; 0x101a <_Z19calculateCompassPIDv+0x2c0>
    1012:	22 27       	eor	r18, r18
    1014:	33 27       	eor	r19, r19
    1016:	28 1b       	sub	r18, r24
    1018:	39 0b       	sbc	r19, r25
    101a:	4d 81       	ldd	r20, Y+5	; 0x05
    101c:	5e 81       	ldd	r21, Y+6	; 0x06
    101e:	42 17       	cp	r20, r18
    1020:	53 07       	cpc	r21, r19
    1022:	74 f4       	brge	.+28     	; 0x1040 <_Z19calculateCompassPIDv+0x2e6>
    1024:	48 17       	cp	r20, r24
    1026:	59 07       	cpc	r21, r25
    1028:	2c f0       	brlt	.+10     	; 0x1034 <_Z19calculateCompassPIDv+0x2da>
    102a:	51 95       	neg	r21
    102c:	41 95       	neg	r20
    102e:	51 09       	sbc	r21, r1
    1030:	5e 83       	std	Y+6, r21	; 0x06
    1032:	4d 83       	std	Y+5, r20	; 0x05
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <compass+0x7>
    103c:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <compass+0x6>
    1040:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <compass+0x6>
    1044:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <compass+0x7>
    1048:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <velocity_robot+0x5>
    104c:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <velocity_robot+0x4>
    1050:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <PidUpdateFlagCompass>
    1054:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <compassPID>
    1058:	81 11       	cpse	r24, r1
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <_Z19calculateCompassPIDv+0x30a>
    105c:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <velocity_robot+0x5>
    1060:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <velocity_robot+0x4>
    1064:	26 96       	adiw	r28, 0x06	; 6
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	9f 90       	pop	r9
    1086:	8f 90       	pop	r8
    1088:	7f 90       	pop	r7
    108a:	6f 90       	pop	r6
    108c:	5f 90       	pop	r5
    108e:	4f 90       	pop	r4
    1090:	3f 90       	pop	r3
    1092:	2f 90       	pop	r2
    1094:	08 95       	ret

00001096 <_Z12calculatevelv>:
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <_Z12calculatevelv+0x26>
    10bc:	1f 92       	push	r1
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <inverseKinematicsTrue>
    10c6:	88 23       	and	r24, r24
    10c8:	09 f4       	brne	.+2      	; 0x10cc <_Z12calculatevelv+0x36>
    10ca:	57 c0       	rjmp	.+174    	; 0x117a <_Z12calculatevelv+0xe4>
    10cc:	0f 2e       	mov	r0, r31
    10ce:	fa eb       	ldi	r31, 0xBA	; 186
    10d0:	cf 2e       	mov	r12, r31
    10d2:	f3 e0       	ldi	r31, 0x03	; 3
    10d4:	df 2e       	mov	r13, r31
    10d6:	f0 2d       	mov	r31, r0
    10d8:	0f 2e       	mov	r0, r31
    10da:	f3 e2       	ldi	r31, 0x23	; 35
    10dc:	4f 2e       	mov	r4, r31
    10de:	f2 e0       	ldi	r31, 0x02	; 2
    10e0:	5f 2e       	mov	r5, r31
    10e2:	f0 2d       	mov	r31, r0
    10e4:	0f 2e       	mov	r0, r31
    10e6:	f2 ec       	ldi	r31, 0xC2	; 194
    10e8:	2f 2e       	mov	r2, r31
    10ea:	f3 e0       	ldi	r31, 0x03	; 3
    10ec:	3f 2e       	mov	r3, r31
    10ee:	f0 2d       	mov	r31, r0
    10f0:	0f 2e       	mov	r0, r31
    10f2:	fa eb       	ldi	r31, 0xBA	; 186
    10f4:	6f 2e       	mov	r6, r31
    10f6:	f3 e0       	ldi	r31, 0x03	; 3
    10f8:	7f 2e       	mov	r7, r31
    10fa:	f0 2d       	mov	r31, r0
    10fc:	da 82       	std	Y+2, r13	; 0x02
    10fe:	c9 82       	std	Y+1, r12	; 0x01
    1100:	04 eb       	ldi	r16, 0xB4	; 180
    1102:	13 e0       	ldi	r17, 0x03	; 3
    1104:	72 01       	movw	r14, r4
    1106:	1b 82       	std	Y+3, r1	; 0x03
    1108:	1c 82       	std	Y+4, r1	; 0x04
    110a:	d8 01       	movw	r26, r16
    110c:	6d 91       	ld	r22, X+
    110e:	7d 91       	ld	r23, X+
    1110:	8d 01       	movw	r16, r26
    1112:	f7 01       	movw	r30, r14
    1114:	81 90       	ld	r8, Z+
    1116:	91 90       	ld	r9, Z+
    1118:	a1 90       	ld	r10, Z+
    111a:	b1 90       	ld	r11, Z+
    111c:	7f 01       	movw	r14, r30
    111e:	07 2e       	mov	r0, r23
    1120:	00 0c       	add	r0, r0
    1122:	88 0b       	sbc	r24, r24
    1124:	99 0b       	sbc	r25, r25
    1126:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    112a:	a5 01       	movw	r20, r10
    112c:	94 01       	movw	r18, r8
    112e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1132:	4b 01       	movw	r8, r22
    1134:	5c 01       	movw	r10, r24
    1136:	2b 81       	ldd	r18, Y+3	; 0x03
    1138:	3c 81       	ldd	r19, Y+4	; 0x04
    113a:	b9 01       	movw	r22, r18
    113c:	33 0f       	add	r19, r19
    113e:	88 0b       	sbc	r24, r24
    1140:	99 0b       	sbc	r25, r25
    1142:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1146:	9b 01       	movw	r18, r22
    1148:	ac 01       	movw	r20, r24
    114a:	c5 01       	movw	r24, r10
    114c:	b4 01       	movw	r22, r8
    114e:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    1152:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1156:	7c 83       	std	Y+4, r23	; 0x04
    1158:	6b 83       	std	Y+3, r22	; 0x03
    115a:	06 15       	cp	r16, r6
    115c:	17 05       	cpc	r17, r7
    115e:	a9 f6       	brne	.-86     	; 0x110a <_Z12calculatevelv+0x74>
    1160:	a9 81       	ldd	r26, Y+1	; 0x01
    1162:	ba 81       	ldd	r27, Y+2	; 0x02
    1164:	6d 93       	st	X+, r22
    1166:	7c 93       	st	X, r23
    1168:	f2 e0       	ldi	r31, 0x02	; 2
    116a:	cf 0e       	add	r12, r31
    116c:	d1 1c       	adc	r13, r1
    116e:	2c e0       	ldi	r18, 0x0C	; 12
    1170:	42 0e       	add	r4, r18
    1172:	51 1c       	adc	r5, r1
    1174:	c2 14       	cp	r12, r2
    1176:	d3 04       	cpc	r13, r3
    1178:	09 f6       	brne	.-126    	; 0x10fc <_Z12calculatevelv+0x66>
    117a:	e2 ec       	ldi	r30, 0xC2	; 194
    117c:	f3 e0       	ldi	r31, 0x03	; 3
    117e:	aa eb       	ldi	r26, 0xBA	; 186
    1180:	b3 e0       	ldi	r27, 0x03	; 3
    1182:	2d 91       	ld	r18, X+
    1184:	3c 91       	ld	r19, X
    1186:	47 e1       	ldi	r20, 0x17	; 23
    1188:	42 9f       	mul	r20, r18
    118a:	c0 01       	movw	r24, r0
    118c:	43 9f       	mul	r20, r19
    118e:	90 0d       	add	r25, r0
    1190:	11 24       	eor	r1, r1
    1192:	29 ef       	ldi	r18, 0xF9	; 249
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	b9 01       	movw	r22, r18
    1198:	0e 94 cb 22 	call	0x4596	; 0x4596 <__divmodhi4>
    119c:	60 83       	st	Z, r22
    119e:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <velocity_motor+0x2>
    11a2:	70 91 bd 03 	lds	r23, 0x03BD	; 0x8003bd <velocity_motor+0x3>
    11a6:	46 9f       	mul	r20, r22
    11a8:	c0 01       	movw	r24, r0
    11aa:	47 9f       	mul	r20, r23
    11ac:	90 0d       	add	r25, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	b9 01       	movw	r22, r18
    11b2:	0e 94 cb 22 	call	0x4596	; 0x4596 <__divmodhi4>
    11b6:	61 83       	std	Z+1, r22	; 0x01
    11b8:	60 91 be 03 	lds	r22, 0x03BE	; 0x8003be <velocity_motor+0x4>
    11bc:	70 91 bf 03 	lds	r23, 0x03BF	; 0x8003bf <velocity_motor+0x5>
    11c0:	46 9f       	mul	r20, r22
    11c2:	c0 01       	movw	r24, r0
    11c4:	47 9f       	mul	r20, r23
    11c6:	90 0d       	add	r25, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	b9 01       	movw	r22, r18
    11cc:	0e 94 cb 22 	call	0x4596	; 0x4596 <__divmodhi4>
    11d0:	62 83       	std	Z+2, r22	; 0x02
    11d2:	60 91 c0 03 	lds	r22, 0x03C0	; 0x8003c0 <velocity_motor+0x6>
    11d6:	70 91 c1 03 	lds	r23, 0x03C1	; 0x8003c1 <velocity_motor+0x7>
    11da:	46 9f       	mul	r20, r22
    11dc:	c0 01       	movw	r24, r0
    11de:	47 9f       	mul	r20, r23
    11e0:	90 0d       	add	r25, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	b9 01       	movw	r22, r18
    11e6:	0e 94 cb 22 	call	0x4596	; 0x4596 <__divmodhi4>
    11ea:	63 83       	std	Z+3, r22	; 0x03
    11ec:	f0 dc       	rcall	.-1568   	; 0xbce <_Z15sendDataToSlavev>
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	7f 90       	pop	r7
    1210:	6f 90       	pop	r6
    1212:	5f 90       	pop	r5
    1214:	4f 90       	pop	r4
    1216:	3f 90       	pop	r3
    1218:	2f 90       	pop	r2
    121a:	08 95       	ret

0000121c <_Z4movxiij>:
    121c:	2f 92       	push	r2
    121e:	3f 92       	push	r3
    1220:	4f 92       	push	r4
    1222:	5f 92       	push	r5
    1224:	6f 92       	push	r6
    1226:	7f 92       	push	r7
    1228:	8f 92       	push	r8
    122a:	9f 92       	push	r9
    122c:	af 92       	push	r10
    122e:	bf 92       	push	r11
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	1c 01       	movw	r2, r24
    1242:	8b 01       	movw	r16, r22
    1244:	7a 01       	movw	r14, r20
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
    124c:	8a e8       	ldi	r24, 0x8A	; 138
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1254:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1258:	ab 01       	movw	r20, r22
    125a:	77 23       	and	r23, r23
    125c:	24 f4       	brge	.+8      	; 0x1266 <_Z4movxiij+0x4a>
    125e:	44 27       	eor	r20, r20
    1260:	55 27       	eor	r21, r21
    1262:	46 1b       	sub	r20, r22
    1264:	57 0b       	sbc	r21, r23
    1266:	ea 01       	movw	r28, r20
    1268:	50 93 b3 03 	sts	0x03B3, r21	; 0x8003b3 <distanceX+0x1>
    126c:	40 93 b2 03 	sts	0x03B2, r20	; 0x8003b2 <distanceX>
    1270:	30 92 1b 03 	sts	0x031B, r3	; 0x80031b <driveX+0xf>
    1274:	20 92 1a 03 	sts	0x031A, r2	; 0x80031a <driveX+0xe>
    1278:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <PidUpdateFlagDriveX>
    127c:	22 23       	and	r18, r18
    127e:	09 f4       	brne	.+2      	; 0x1282 <_Z4movxiij+0x66>
    1280:	55 c1       	rjmp	.+682    	; 0x152c <_Z4movxiij+0x310>
    1282:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <movingyfront>
    1286:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <movingyback>
    128a:	50 93 0d 03 	sts	0x030D, r21	; 0x80030d <driveX+0x1>
    128e:	40 93 0c 03 	sts	0x030C, r20	; 0x80030c <driveX>
    1292:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <PidUpdateFlagDriveX>
    1296:	48 3e       	cpi	r20, 0xE8	; 232
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	58 07       	cpc	r21, r24
    129c:	0c f4       	brge	.+2      	; 0x12a0 <_Z4movxiij+0x84>
    129e:	ea c0       	rjmp	.+468    	; 0x1474 <_Z4movxiij+0x258>
    12a0:	24 1a       	sub	r2, r20
    12a2:	35 0a       	sbc	r3, r21
    12a4:	0f 2e       	mov	r0, r31
    12a6:	fc e0       	ldi	r31, 0x0C	; 12
    12a8:	cf 2e       	mov	r12, r31
    12aa:	f3 e0       	ldi	r31, 0x03	; 3
    12ac:	df 2e       	mov	r13, r31
    12ae:	f0 2d       	mov	r31, r0
    12b0:	f6 01       	movw	r30, r12
    12b2:	33 82       	std	Z+3, r3	; 0x03
    12b4:	22 82       	std	Z+2, r2	; 0x02
    12b6:	b1 01       	movw	r22, r2
    12b8:	03 2c       	mov	r0, r3
    12ba:	00 0c       	add	r0, r0
    12bc:	88 0b       	sbc	r24, r24
    12be:	99 0b       	sbc	r25, r25
    12c0:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    12c4:	2b 01       	movw	r4, r22
    12c6:	3c 01       	movw	r6, r24
    12c8:	f6 01       	movw	r30, r12
    12ca:	21 8d       	ldd	r18, Z+25	; 0x19
    12cc:	32 8d       	ldd	r19, Z+26	; 0x1a
    12ce:	43 8d       	ldd	r20, Z+27	; 0x1b
    12d0:	54 8d       	ldd	r21, Z+28	; 0x1c
    12d2:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    12d6:	f6 01       	movw	r30, r12
    12d8:	22 85       	ldd	r18, Z+10	; 0x0a
    12da:	33 85       	ldd	r19, Z+11	; 0x0b
    12dc:	44 85       	ldd	r20, Z+12	; 0x0c
    12de:	55 85       	ldd	r21, Z+13	; 0x0d
    12e0:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    12e4:	4b 01       	movw	r8, r22
    12e6:	5c 01       	movw	r10, r24
    12e8:	f6 01       	movw	r30, r12
    12ea:	62 87       	std	Z+10, r22	; 0x0a
    12ec:	73 87       	std	Z+11, r23	; 0x0b
    12ee:	84 87       	std	Z+12, r24	; 0x0c
    12f0:	95 87       	std	Z+13, r25	; 0x0d
    12f2:	80 89       	ldd	r24, Z+16	; 0x10
    12f4:	88 23       	and	r24, r24
    12f6:	19 f0       	breq	.+6      	; 0x12fe <_Z4movxiij+0xe2>
    12f8:	d5 83       	std	Z+5, r29	; 0x05
    12fa:	c4 83       	std	Z+4, r28	; 0x04
    12fc:	10 8a       	std	Z+16, r1	; 0x10
    12fe:	c5 01       	movw	r24, r10
    1300:	b4 01       	movw	r22, r8
    1302:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1306:	9b 01       	movw	r18, r22
    1308:	77 23       	and	r23, r23
    130a:	24 f4       	brge	.+8      	; 0x1314 <_Z4movxiij+0xf8>
    130c:	22 27       	eor	r18, r18
    130e:	33 27       	eor	r19, r19
    1310:	26 1b       	sub	r18, r22
    1312:	37 0b       	sbc	r19, r23
    1314:	2b 30       	cpi	r18, 0x0B	; 11
    1316:	31 05       	cpc	r19, r1
    1318:	5c f1       	brlt	.+86     	; 0x1370 <_Z4movxiij+0x154>
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	a9 01       	movw	r20, r18
    1320:	c5 01       	movw	r24, r10
    1322:	b4 01       	movw	r22, r8
    1324:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__gesf2>
    1328:	18 16       	cp	r1, r24
    132a:	6c f4       	brge	.+26     	; 0x1346 <_Z4movxiij+0x12a>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 e2       	ldi	r26, 0x20	; 32
    1332:	b1 e4       	ldi	r27, 0x41	; 65
    1334:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <driveX+0xa>
    1338:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <driveX+0xb>
    133c:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <driveX+0xc>
    1340:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <driveX+0xd>
    1344:	15 c0       	rjmp	.+42     	; 0x1370 <_Z4movxiij+0x154>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	c5 01       	movw	r24, r10
    134e:	b4 01       	movw	r22, r8
    1350:	0e 94 3c 20 	call	0x4078	; 0x4078 <__cmpsf2>
    1354:	88 23       	and	r24, r24
    1356:	64 f4       	brge	.+24     	; 0x1370 <_Z4movxiij+0x154>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a0 e2       	ldi	r26, 0x20	; 32
    135e:	b1 ec       	ldi	r27, 0xC1	; 193
    1360:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <driveX+0xa>
    1364:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <driveX+0xb>
    1368:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <driveX+0xc>
    136c:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <driveX+0xd>
    1370:	12 14       	cp	r1, r2
    1372:	13 04       	cpc	r1, r3
    1374:	bc f5       	brge	.+110    	; 0x13e4 <_Z4movxiij+0x1c8>
    1376:	0f 2e       	mov	r0, r31
    1378:	fc e0       	ldi	r31, 0x0C	; 12
    137a:	cf 2e       	mov	r12, r31
    137c:	f3 e0       	ldi	r31, 0x03	; 3
    137e:	df 2e       	mov	r13, r31
    1380:	f0 2d       	mov	r31, r0
    1382:	f6 01       	movw	r30, r12
    1384:	25 89       	ldd	r18, Z+21	; 0x15
    1386:	36 89       	ldd	r19, Z+22	; 0x16
    1388:	47 89       	ldd	r20, Z+23	; 0x17
    138a:	50 8d       	ldd	r21, Z+24	; 0x18
    138c:	c3 01       	movw	r24, r6
    138e:	b2 01       	movw	r22, r4
    1390:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1394:	f6 01       	movw	r30, r12
    1396:	22 85       	ldd	r18, Z+10	; 0x0a
    1398:	33 85       	ldd	r19, Z+11	; 0x0b
    139a:	44 85       	ldd	r20, Z+12	; 0x0c
    139c:	55 85       	ldd	r21, Z+13	; 0x0d
    139e:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    13a2:	4b 01       	movw	r8, r22
    13a4:	5c 01       	movw	r10, r24
    13a6:	f6 01       	movw	r30, r12
    13a8:	84 81       	ldd	r24, Z+4	; 0x04
    13aa:	95 81       	ldd	r25, Z+5	; 0x05
    13ac:	be 01       	movw	r22, r28
    13ae:	68 1b       	sub	r22, r24
    13b0:	79 0b       	sbc	r23, r25
    13b2:	07 2e       	mov	r0, r23
    13b4:	00 0c       	add	r0, r0
    13b6:	88 0b       	sbc	r24, r24
    13b8:	99 0b       	sbc	r25, r25
    13ba:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    13be:	f6 01       	movw	r30, r12
    13c0:	25 8d       	ldd	r18, Z+29	; 0x1d
    13c2:	36 8d       	ldd	r19, Z+30	; 0x1e
    13c4:	47 8d       	ldd	r20, Z+31	; 0x1f
    13c6:	50 a1       	ldd	r21, Z+32	; 0x20
    13c8:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	c5 01       	movw	r24, r10
    13d2:	b4 01       	movw	r22, r8
    13d4:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
    13d8:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    13dc:	f6 01       	movw	r30, r12
    13de:	77 83       	std	Z+7, r23	; 0x07
    13e0:	66 83       	std	Z+6, r22	; 0x06
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <_Z4movxiij+0x1d0>
    13e4:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <driveX+0x7>
    13e8:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <driveX+0x6>
    13ec:	ec e0       	ldi	r30, 0x0C	; 12
    13ee:	f3 e0       	ldi	r31, 0x03	; 3
    13f0:	d5 83       	std	Z+5, r29	; 0x05
    13f2:	c4 83       	std	Z+4, r28	; 0x04
    13f4:	86 81       	ldd	r24, Z+6	; 0x06
    13f6:	97 81       	ldd	r25, Z+7	; 0x07
    13f8:	9c 01       	movw	r18, r24
    13fa:	99 23       	and	r25, r25
    13fc:	24 f4       	brge	.+8      	; 0x1406 <_Z4movxiij+0x1ea>
    13fe:	22 27       	eor	r18, r18
    1400:	33 27       	eor	r19, r19
    1402:	28 1b       	sub	r18, r24
    1404:	39 0b       	sbc	r19, r25
    1406:	e2 16       	cp	r14, r18
    1408:	f3 06       	cpc	r15, r19
    140a:	78 f4       	brcc	.+30     	; 0x142a <_Z4movxiij+0x20e>
    140c:	18 16       	cp	r1, r24
    140e:	19 06       	cpc	r1, r25
    1410:	2c f4       	brge	.+10     	; 0x141c <_Z4movxiij+0x200>
    1412:	f0 92 13 03 	sts	0x0313, r15	; 0x800313 <driveX+0x7>
    1416:	e0 92 12 03 	sts	0x0312, r14	; 0x800312 <driveX+0x6>
    141a:	07 c0       	rjmp	.+14     	; 0x142a <_Z4movxiij+0x20e>
    141c:	f1 94       	neg	r15
    141e:	e1 94       	neg	r14
    1420:	f1 08       	sbc	r15, r1
    1422:	f0 92 13 03 	sts	0x0313, r15	; 0x800313 <driveX+0x7>
    1426:	e0 92 12 03 	sts	0x0312, r14	; 0x800312 <driveX+0x6>
    142a:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <driveX+0x6>
    142e:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <driveX+0x7>
    1432:	43 96       	adiw	r24, 0x13	; 19
    1434:	87 97       	sbiw	r24, 0x27	; 39
    1436:	a8 f4       	brcc	.+42     	; 0x1462 <_Z4movxiij+0x246>
    1438:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <movingxfront>
    143c:	88 23       	and	r24, r24
    143e:	39 f0       	breq	.+14     	; 0x144e <_Z4movxiij+0x232>
    1440:	84 e1       	ldi	r24, 0x14	; 20
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <driveX+0x7>
    1448:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <driveX+0x6>
    144c:	0a c0       	rjmp	.+20     	; 0x1462 <_Z4movxiij+0x246>
    144e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <movingxback>
    1452:	88 23       	and	r24, r24
    1454:	31 f0       	breq	.+12     	; 0x1462 <_Z4movxiij+0x246>
    1456:	8c ee       	ldi	r24, 0xEC	; 236
    1458:	9f ef       	ldi	r25, 0xFF	; 255
    145a:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <driveX+0x7>
    145e:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <driveX+0x6>
    1462:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <driveX+0x6>
    1466:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <driveX+0x7>
    146a:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <velocity_robot+0x1>
    146e:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <velocity_robot>
    1472:	35 c0       	rjmp	.+106    	; 0x14de <_Z4movxiij+0x2c2>
    1474:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <startingAtFront>
    1478:	88 23       	and	r24, r24
    147a:	c9 f0       	breq	.+50     	; 0x14ae <_Z4movxiij+0x292>
    147c:	ba 01       	movw	r22, r20
    147e:	55 0f       	add	r21, r21
    1480:	88 0b       	sbc	r24, r24
    1482:	99 0b       	sbc	r25, r25
    1484:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1488:	2d ec       	ldi	r18, 0xCD	; 205
    148a:	3c ec       	ldi	r19, 0xCC	; 204
    148c:	4c ec       	ldi	r20, 0xCC	; 204
    148e:	5d e3       	ldi	r21, 0x3D	; 61
    1490:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e7       	ldi	r20, 0x70	; 112
    149a:	52 e4       	ldi	r21, 0x42	; 66
    149c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    14a0:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    14a4:	70 93 b5 03 	sts	0x03B5, r23	; 0x8003b5 <velocity_robot+0x1>
    14a8:	60 93 b4 03 	sts	0x03B4, r22	; 0x8003b4 <velocity_robot>
    14ac:	18 c0       	rjmp	.+48     	; 0x14de <_Z4movxiij+0x2c2>
    14ae:	ba 01       	movw	r22, r20
    14b0:	55 0f       	add	r21, r21
    14b2:	88 0b       	sbc	r24, r24
    14b4:	99 0b       	sbc	r25, r25
    14b6:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    14ba:	2a e0       	ldi	r18, 0x0A	; 10
    14bc:	37 ed       	ldi	r19, 0xD7	; 215
    14be:	43 e2       	ldi	r20, 0x23	; 35
    14c0:	5d e3       	ldi	r21, 0x3D	; 61
    14c2:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e7       	ldi	r20, 0x70	; 112
    14cc:	52 e4       	ldi	r21, 0x42	; 66
    14ce:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    14d2:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    14d6:	70 93 b5 03 	sts	0x03B5, r23	; 0x8003b5 <velocity_robot+0x1>
    14da:	60 93 b4 03 	sts	0x03B4, r22	; 0x8003b4 <velocity_robot>
    14de:	02 30       	cpi	r16, 0x02	; 2
    14e0:	11 05       	cpc	r17, r1
    14e2:	51 f4       	brne	.+20     	; 0x14f8 <_Z4movxiij+0x2dc>
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <movingxfront>
    14ea:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <movingxback>
    14ee:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <movingyback>
    14f2:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <movingyfront>
    14f6:	1a c0       	rjmp	.+52     	; 0x152c <_Z4movxiij+0x310>
    14f8:	03 30       	cpi	r16, 0x03	; 3
    14fa:	11 05       	cpc	r17, r1
    14fc:	b9 f4       	brne	.+46     	; 0x152c <_Z4movxiij+0x310>
    14fe:	e4 eb       	ldi	r30, 0xB4	; 180
    1500:	f3 e0       	ldi	r31, 0x03	; 3
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	99 23       	and	r25, r25
    1508:	1c f4       	brge	.+6      	; 0x1510 <_Z4movxiij+0x2f4>
    150a:	91 95       	neg	r25
    150c:	81 95       	neg	r24
    150e:	91 09       	sbc	r25, r1
    1510:	91 95       	neg	r25
    1512:	81 95       	neg	r24
    1514:	91 09       	sbc	r25, r1
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <movingxfront>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <movingxback>
    1524:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <movingyfront>
    1528:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <movingyback>
    152c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <startingAtFront>
    1530:	88 23       	and	r24, r24
    1532:	39 f0       	breq	.+14     	; 0x1542 <_Z4movxiij+0x326>
    1534:	8c ee       	ldi	r24, 0xEC	; 236
    1536:	9f ef       	ldi	r25, 0xFF	; 255
    1538:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <velocity_robot+0x3>
    153c:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <velocity_robot+0x2>
    1540:	04 c0       	rjmp	.+8      	; 0x154a <_Z4movxiij+0x32e>
    1542:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <velocity_robot+0x3>
    1546:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <velocity_robot+0x2>
    154a:	07 dc       	rcall	.-2034   	; 0xd5a <_Z19calculateCompassPIDv>
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	bf 90       	pop	r11
    155e:	af 90       	pop	r10
    1560:	9f 90       	pop	r9
    1562:	8f 90       	pop	r8
    1564:	7f 90       	pop	r7
    1566:	6f 90       	pop	r6
    1568:	5f 90       	pop	r5
    156a:	4f 90       	pop	r4
    156c:	3f 90       	pop	r3
    156e:	2f 90       	pop	r2
    1570:	08 95       	ret

00001572 <_Z9movDegreei>:
    1572:	8f 92       	push	r8
    1574:	9f 92       	push	r9
    1576:	af 92       	push	r10
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	8c 01       	movw	r16, r24
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
    1592:	8a e8       	ldi	r24, 0x8A	; 138
    1594:	92 e0       	ldi	r25, 0x02	; 2
    1596:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    159a:	6b 01       	movw	r12, r22
    159c:	7c 01       	movw	r14, r24
    159e:	8a e8       	ldi	r24, 0x8A	; 138
    15a0:	92 e0       	ldi	r25, 0x02	; 2
    15a2:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    15a6:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    15aa:	9b 01       	movw	r18, r22
    15ac:	77 23       	and	r23, r23
    15ae:	24 f4       	brge	.+8      	; 0x15b8 <_Z9movDegreei+0x46>
    15b0:	22 27       	eor	r18, r18
    15b2:	33 27       	eor	r19, r19
    15b4:	26 1b       	sub	r18, r22
    15b6:	37 0b       	sbc	r19, r23
    15b8:	28 3e       	cpi	r18, 0xE8	; 232
    15ba:	33 40       	sbci	r19, 0x03	; 3
    15bc:	1c f5       	brge	.+70     	; 0x1604 <_Z9movDegreei+0x92>
    15be:	8a e8       	ldi	r24, 0x8A	; 138
    15c0:	92 e0       	ldi	r25, 0x02	; 2
    15c2:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    15c6:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    15ca:	9b 01       	movw	r18, r22
    15cc:	77 23       	and	r23, r23
    15ce:	24 f4       	brge	.+8      	; 0x15d8 <_Z9movDegreei+0x66>
    15d0:	22 27       	eor	r18, r18
    15d2:	33 27       	eor	r19, r19
    15d4:	26 1b       	sub	r18, r22
    15d6:	37 0b       	sbc	r19, r23
    15d8:	b9 01       	movw	r22, r18
    15da:	33 0f       	add	r19, r19
    15dc:	88 0b       	sbc	r24, r24
    15de:	99 0b       	sbc	r25, r25
    15e0:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    15e4:	2c ee       	ldi	r18, 0xEC	; 236
    15e6:	31 e5       	ldi	r19, 0x51	; 81
    15e8:	48 eb       	ldi	r20, 0xB8	; 184
    15ea:	5d e3       	ldi	r21, 0x3D	; 61
    15ec:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e7       	ldi	r20, 0x70	; 112
    15f6:	52 e4       	ldi	r21, 0x42	; 66
    15f8:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    15fc:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1600:	eb 01       	movw	r28, r22
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <_Z9movDegreei+0x96>
    1604:	c6 e9       	ldi	r28, 0x96	; 150
    1606:	d0 e0       	ldi	r29, 0x00	; 0
    1608:	8a e8       	ldi	r24, 0x8A	; 138
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1610:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1614:	9b 01       	movw	r18, r22
    1616:	77 23       	and	r23, r23
    1618:	24 f4       	brge	.+8      	; 0x1622 <_Z9movDegreei+0xb0>
    161a:	22 27       	eor	r18, r18
    161c:	33 27       	eor	r19, r19
    161e:	26 1b       	sub	r18, r22
    1620:	37 0b       	sbc	r19, r23
    1622:	21 3a       	cpi	r18, 0xA1	; 161
    1624:	3f 40       	sbci	r19, 0x0F	; 15
    1626:	3c f1       	brlt	.+78     	; 0x1676 <_Z9movDegreei+0x104>
    1628:	c7 01       	movw	r24, r14
    162a:	b6 01       	movw	r22, r12
    162c:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1630:	9b 01       	movw	r18, r22
    1632:	77 23       	and	r23, r23
    1634:	24 f4       	brge	.+8      	; 0x163e <_Z9movDegreei+0xcc>
    1636:	22 27       	eor	r18, r18
    1638:	33 27       	eor	r19, r19
    163a:	26 1b       	sub	r18, r22
    163c:	37 0b       	sbc	r19, r23
    163e:	6c e5       	ldi	r22, 0x5C	; 92
    1640:	72 e1       	ldi	r23, 0x12	; 18
    1642:	62 1b       	sub	r22, r18
    1644:	73 0b       	sbc	r23, r19
    1646:	aa f0       	brmi	.+42     	; 0x1672 <_Z9movDegreei+0x100>
    1648:	07 2e       	mov	r0, r23
    164a:	00 0c       	add	r0, r0
    164c:	88 0b       	sbc	r24, r24
    164e:	99 0b       	sbc	r25, r25
    1650:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1654:	2d ec       	ldi	r18, 0xCD	; 205
    1656:	3c ec       	ldi	r19, 0xCC	; 204
    1658:	4c ec       	ldi	r20, 0xCC	; 204
    165a:	5d e3       	ldi	r21, 0x3D	; 61
    165c:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1660:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1664:	eb 01       	movw	r28, r22
    1666:	6e 31       	cpi	r22, 0x1E	; 30
    1668:	71 05       	cpc	r23, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <_Z9movDegreei+0x104>
    166c:	ce e1       	ldi	r28, 0x1E	; 30
    166e:	d0 e0       	ldi	r29, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <_Z9movDegreei+0x104>
    1672:	ce e1       	ldi	r28, 0x1E	; 30
    1674:	d0 e0       	ldi	r29, 0x00	; 0
    1676:	be 01       	movw	r22, r28
    1678:	dd 0f       	add	r29, r29
    167a:	88 0b       	sbc	r24, r24
    167c:	99 0b       	sbc	r25, r25
    167e:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1682:	6b 01       	movw	r12, r22
    1684:	7c 01       	movw	r14, r24
    1686:	b8 01       	movw	r22, r16
    1688:	11 0f       	add	r17, r17
    168a:	88 0b       	sbc	r24, r24
    168c:	99 0b       	sbc	r25, r25
    168e:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1692:	25 e3       	ldi	r18, 0x35	; 53
    1694:	3a ef       	ldi	r19, 0xFA	; 250
    1696:	4e e8       	ldi	r20, 0x8E	; 142
    1698:	5c e3       	ldi	r21, 0x3C	; 60
    169a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    169e:	4b 01       	movw	r8, r22
    16a0:	5c 01       	movw	r10, r24
    16a2:	0e 94 40 20 	call	0x4080	; 0x4080 <cos>
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	c4 eb       	ldi	r28, 0xB4	; 180
    16ac:	d3 e0       	ldi	r29, 0x03	; 3
    16ae:	c7 01       	movw	r24, r14
    16b0:	b6 01       	movw	r22, r12
    16b2:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    16b6:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    16ba:	79 83       	std	Y+1, r23	; 0x01
    16bc:	68 83       	st	Y, r22
    16be:	c5 01       	movw	r24, r10
    16c0:	b4 01       	movw	r22, r8
    16c2:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <sin>
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	c7 01       	movw	r24, r14
    16cc:	b6 01       	movw	r22, r12
    16ce:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    16d2:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    16d6:	7b 83       	std	Y+3, r23	; 0x03
    16d8:	6a 83       	std	Y+2, r22	; 0x02
    16da:	3f db       	rcall	.-2434   	; 0xd5a <_Z19calculateCompassPIDv>
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	bf 90       	pop	r11
    16ee:	af 90       	pop	r10
    16f0:	9f 90       	pop	r9
    16f2:	8f 90       	pop	r8
    16f4:	08 95       	ret

000016f6 <_Z27Get_Front_LinetrackerY_Datav>:
    16f6:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart2_getcv>
    16fa:	85 36       	cpi	r24, 0x65	; 101
    16fc:	38 f0       	brcs	.+14     	; 0x170c <_Z27Get_Front_LinetrackerY_Datav+0x16>
    16fe:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_previous_data_of_front_linetracker>
    1702:	80 35       	cpi	r24, 0x50	; 80
    1704:	61 f0       	breq	.+24     	; 0x171e <_Z27Get_Front_LinetrackerY_Datav+0x28>
    1706:	8a 30       	cpi	r24, 0x0A	; 10
    1708:	71 f4       	brne	.+28     	; 0x1726 <_Z27Get_Front_LinetrackerY_Datav+0x30>
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <_Z27Get_Front_LinetrackerY_Datav+0x1e>
    170c:	86 5f       	subi	r24, 0xF6	; 246
    170e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    1712:	08 95       	ret
    1714:	8a e0       	ldi	r24, 0x0A	; 10
    1716:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	08 95       	ret
    171e:	80 e5       	ldi	r24, 0x50	; 80
    1720:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    1724:	8a e5       	ldi	r24, 0x5A	; 90
    1726:	08 95       	ret

00001728 <_Z26Get_Back_LinetrackerY_Datav>:
    1728:	4f 92       	push	r4
    172a:	5f 92       	push	r5
    172c:	6f 92       	push	r6
    172e:	7f 92       	push	r7
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	0f 2e       	mov	r0, r31
    1746:	f2 e7       	ldi	r31, 0x72	; 114
    1748:	ef 2e       	mov	r14, r31
    174a:	f2 e0       	ldi	r31, 0x02	; 2
    174c:	ff 2e       	mov	r15, r31
    174e:	f0 2d       	mov	r31, r0
    1750:	00 e9       	ldi	r16, 0x90	; 144
    1752:	13 e0       	ldi	r17, 0x03	; 3
    1754:	c0 e0       	ldi	r28, 0x00	; 0
    1756:	d0 e0       	ldi	r29, 0x00	; 0
    1758:	cc 24       	eor	r12, r12
    175a:	c3 94       	inc	r12
    175c:	d1 2c       	mov	r13, r1
    175e:	86 b1       	in	r24, 0x06	; 6
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0c 2e       	mov	r0, r28
    1764:	02 c0       	rjmp	.+4      	; 0x176a <_Z26Get_Back_LinetrackerY_Datav+0x42>
    1766:	95 95       	asr	r25
    1768:	87 95       	ror	r24
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <_Z26Get_Back_LinetrackerY_Datav+0x3e>
    176e:	80 ff       	sbrs	r24, 0
    1770:	10 c0       	rjmp	.+32     	; 0x1792 <_Z26Get_Back_LinetrackerY_Datav+0x6a>
    1772:	f8 01       	movw	r30, r16
    1774:	d1 82       	std	Z+1, r13	; 0x01
    1776:	c0 82       	st	Z, r12
    1778:	20 91 a9 03 	lds	r18, 0x03A9	; 0x8003a9 <_ZL9linestate>
    177c:	c6 01       	movw	r24, r12
    177e:	0c 2e       	mov	r0, r28
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <_Z26Get_Back_LinetrackerY_Datav+0x5e>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <_Z26Get_Back_LinetrackerY_Datav+0x5a>
    178a:	82 2b       	or	r24, r18
    178c:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <_ZL9linestate>
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <_Z26Get_Back_LinetrackerY_Datav+0x70>
    1792:	f8 01       	movw	r30, r16
    1794:	11 82       	std	Z+1, r1	; 0x01
    1796:	10 82       	st	Z, r1
    1798:	f7 01       	movw	r30, r14
    179a:	81 91       	ld	r24, Z+
    179c:	91 91       	ld	r25, Z+
    179e:	7f 01       	movw	r14, r30
    17a0:	f8 01       	movw	r30, r16
    17a2:	a1 90       	ld	r10, Z+
    17a4:	b1 90       	ld	r11, Z+
    17a6:	8f 01       	movw	r16, r30
    17a8:	8a 9d       	mul	r24, r10
    17aa:	b0 01       	movw	r22, r0
    17ac:	8b 9d       	mul	r24, r11
    17ae:	70 0d       	add	r23, r0
    17b0:	9a 9d       	mul	r25, r10
    17b2:	70 0d       	add	r23, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	07 2e       	mov	r0, r23
    17b8:	00 0c       	add	r0, r0
    17ba:	88 0b       	sbc	r24, r24
    17bc:	99 0b       	sbc	r25, r25
    17be:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    17c2:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <_ZL8totalSum>
    17c6:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <_ZL8totalSum+0x1>
    17ca:	40 91 a6 03 	lds	r20, 0x03A6	; 0x8003a6 <_ZL8totalSum+0x2>
    17ce:	50 91 a7 03 	lds	r21, 0x03A7	; 0x8003a7 <_ZL8totalSum+0x3>
    17d2:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    17d6:	2b 01       	movw	r4, r22
    17d8:	3c 01       	movw	r6, r24
    17da:	60 93 a4 03 	sts	0x03A4, r22	; 0x8003a4 <_ZL8totalSum>
    17de:	70 93 a5 03 	sts	0x03A5, r23	; 0x8003a5 <_ZL8totalSum+0x1>
    17e2:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <_ZL8totalSum+0x2>
    17e6:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <_ZL8totalSum+0x3>
    17ea:	b5 01       	movw	r22, r10
    17ec:	bb 0c       	add	r11, r11
    17ee:	88 0b       	sbc	r24, r24
    17f0:	99 0b       	sbc	r25, r25
    17f2:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    17f6:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <_ZL9totalLine>
    17fa:	30 91 a1 03 	lds	r19, 0x03A1	; 0x8003a1 <_ZL9totalLine+0x1>
    17fe:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <_ZL9totalLine+0x2>
    1802:	50 91 a3 03 	lds	r21, 0x03A3	; 0x8003a3 <_ZL9totalLine+0x3>
    1806:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    180a:	60 93 a0 03 	sts	0x03A0, r22	; 0x8003a0 <_ZL9totalLine>
    180e:	70 93 a1 03 	sts	0x03A1, r23	; 0x8003a1 <_ZL9totalLine+0x1>
    1812:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <_ZL9totalLine+0x2>
    1816:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <_ZL9totalLine+0x3>
    181a:	21 96       	adiw	r28, 0x01	; 1
    181c:	c8 30       	cpi	r28, 0x08	; 8
    181e:	d1 05       	cpc	r29, r1
    1820:	09 f0       	breq	.+2      	; 0x1824 <_Z26Get_Back_LinetrackerY_Datav+0xfc>
    1822:	9d cf       	rjmp	.-198    	; 0x175e <_Z26Get_Back_LinetrackerY_Datav+0x36>
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	c3 01       	movw	r24, r6
    182a:	b2 01       	movw	r22, r4
    182c:	0e 94 43 20 	call	0x4086	; 0x4086 <__divsf3>
    1830:	0e 94 b0 20 	call	0x4160	; 0x4160 <__fixunssfsi>
    1834:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <_ZL16linetracker_data>
    1838:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <_ZL8totalSum>
    183c:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <_ZL8totalSum+0x1>
    1840:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <_ZL8totalSum+0x2>
    1844:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <_ZL8totalSum+0x3>
    1848:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZL9totalLine>
    184c:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ZL9totalLine+0x1>
    1850:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <_ZL9totalLine+0x2>
    1854:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <_ZL9totalLine+0x3>
    1858:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_previous_data_of_back_linetracker>
    185c:	8a 30       	cpi	r24, 0x0A	; 10
    185e:	39 f4       	brne	.+14     	; 0x186e <_Z26Get_Back_LinetrackerY_Datav+0x146>
    1860:	61 11       	cpse	r22, r1
    1862:	10 c0       	rjmp	.+32     	; 0x1884 <_Z26Get_Back_LinetrackerY_Datav+0x15c>
    1864:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <_ZL16linetracker_data>
    1868:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    186c:	0d c0       	rjmp	.+26     	; 0x1888 <_Z26Get_Back_LinetrackerY_Datav+0x160>
    186e:	80 35       	cpi	r24, 0x50	; 80
    1870:	49 f4       	brne	.+18     	; 0x1884 <_Z26Get_Back_LinetrackerY_Datav+0x15c>
    1872:	61 11       	cpse	r22, r1
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <_Z26Get_Back_LinetrackerY_Datav+0x15c>
    1876:	8a e5       	ldi	r24, 0x5A	; 90
    1878:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <_ZL16linetracker_data>
    187c:	80 e5       	ldi	r24, 0x50	; 80
    187e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <_Z26Get_Back_LinetrackerY_Datav+0x160>
    1884:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <_previous_data_of_back_linetracker>
    1888:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <_ZL16linetracker_data>
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	bf 90       	pop	r11
    189e:	af 90       	pop	r10
    18a0:	7f 90       	pop	r7
    18a2:	6f 90       	pop	r6
    18a4:	5f 90       	pop	r5
    18a6:	4f 90       	pop	r4
    18a8:	08 95       	ret

000018aa <_Z32Calculate_Front_LinetrackerY_Pidv>:
    18aa:	8f 92       	push	r8
    18ac:	9f 92       	push	r9
    18ae:	af 92       	push	r10
    18b0:	bf 92       	push	r11
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <FrontLinetrackerY_+0x10>
    18c6:	88 23       	and	r24, r24
    18c8:	59 f0       	breq	.+22     	; 0x18e0 <_Z32Calculate_Front_LinetrackerY_Pidv+0x36>
    18ca:	15 df       	rcall	.-470    	; 0x16f6 <_Z27Get_Front_LinetrackerY_Datav>
    18cc:	88 23       	and	r24, r24
    18ce:	41 f0       	breq	.+16     	; 0x18e0 <_Z32Calculate_Front_LinetrackerY_Pidv+0x36>
    18d0:	12 df       	rcall	.-476    	; 0x16f6 <_Z27Get_Front_LinetrackerY_Datav>
    18d2:	ea ec       	ldi	r30, 0xCA	; 202
    18d4:	f2 e0       	ldi	r31, 0x02	; 2
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	95 83       	std	Z+5, r25	; 0x05
    18da:	84 83       	std	Z+4, r24	; 0x04
    18dc:	10 8a       	std	Z+16, r1	; 0x10
    18de:	c7 c0       	rjmp	.+398    	; 0x1a6e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    18e0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    18e4:	88 23       	and	r24, r24
    18e6:	09 f4       	brne	.+2      	; 0x18ea <_Z32Calculate_Front_LinetrackerY_Pidv+0x40>
    18e8:	c2 c0       	rjmp	.+388    	; 0x1a6e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    18ea:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    18ee:	88 23       	and	r24, r24
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <_Z32Calculate_Front_LinetrackerY_Pidv+0x4a>
    18f2:	c1 c0       	rjmp	.+386    	; 0x1a76 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1cc>
    18f4:	00 df       	rcall	.-512    	; 0x16f6 <_Z27Get_Front_LinetrackerY_Datav>
    18f6:	c8 2f       	mov	r28, r24
    18f8:	d0 e0       	ldi	r29, 0x00	; 0
    18fa:	ea ec       	ldi	r30, 0xCA	; 202
    18fc:	f2 e0       	ldi	r31, 0x02	; 2
    18fe:	d1 83       	std	Z+1, r29	; 0x01
    1900:	c0 83       	st	Z, r28
    1902:	66 85       	ldd	r22, Z+14	; 0x0e
    1904:	77 85       	ldd	r23, Z+15	; 0x0f
    1906:	6c 1b       	sub	r22, r28
    1908:	7d 0b       	sbc	r23, r29
    190a:	73 83       	std	Z+3, r23	; 0x03
    190c:	62 83       	std	Z+2, r22	; 0x02
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	31 f4       	brne	.+12     	; 0x1920 <_Z32Calculate_Front_LinetrackerY_Pidv+0x76>
    1914:	12 86       	std	Z+10, r1	; 0x0a
    1916:	13 86       	std	Z+11, r1	; 0x0b
    1918:	14 86       	std	Z+12, r1	; 0x0c
    191a:	15 86       	std	Z+13, r1	; 0x0d
    191c:	d5 83       	std	Z+5, r29	; 0x05
    191e:	c4 83       	std	Z+4, r28	; 0x04
    1920:	07 2e       	mov	r0, r23
    1922:	00 0c       	add	r0, r0
    1924:	88 0b       	sbc	r24, r24
    1926:	99 0b       	sbc	r25, r25
    1928:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    192c:	4b 01       	movw	r8, r22
    192e:	5c 01       	movw	r10, r24
    1930:	0a ec       	ldi	r16, 0xCA	; 202
    1932:	12 e0       	ldi	r17, 0x02	; 2
    1934:	f8 01       	movw	r30, r16
    1936:	21 8d       	ldd	r18, Z+25	; 0x19
    1938:	32 8d       	ldd	r19, Z+26	; 0x1a
    193a:	43 8d       	ldd	r20, Z+27	; 0x1b
    193c:	54 8d       	ldd	r21, Z+28	; 0x1c
    193e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1942:	f8 01       	movw	r30, r16
    1944:	22 85       	ldd	r18, Z+10	; 0x0a
    1946:	33 85       	ldd	r19, Z+11	; 0x0b
    1948:	44 85       	ldd	r20, Z+12	; 0x0c
    194a:	55 85       	ldd	r21, Z+13	; 0x0d
    194c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    1950:	6b 01       	movw	r12, r22
    1952:	7c 01       	movw	r14, r24
    1954:	f8 01       	movw	r30, r16
    1956:	62 87       	std	Z+10, r22	; 0x0a
    1958:	73 87       	std	Z+11, r23	; 0x0b
    195a:	84 87       	std	Z+12, r24	; 0x0c
    195c:	95 87       	std	Z+13, r25	; 0x0d
    195e:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1962:	9b 01       	movw	r18, r22
    1964:	77 23       	and	r23, r23
    1966:	24 f4       	brge	.+8      	; 0x1970 <_Z32Calculate_Front_LinetrackerY_Pidv+0xc6>
    1968:	22 27       	eor	r18, r18
    196a:	33 27       	eor	r19, r19
    196c:	26 1b       	sub	r18, r22
    196e:	37 0b       	sbc	r19, r23
    1970:	26 30       	cpi	r18, 0x06	; 6
    1972:	31 05       	cpc	r19, r1
    1974:	5c f1       	brlt	.+86     	; 0x19cc <_Z32Calculate_Front_LinetrackerY_Pidv+0x122>
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	c7 01       	movw	r24, r14
    197e:	b6 01       	movw	r22, r12
    1980:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__gesf2>
    1984:	18 16       	cp	r1, r24
    1986:	6c f4       	brge	.+26     	; 0x19a2 <_Z32Calculate_Front_LinetrackerY_Pidv+0xf8>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a0 ea       	ldi	r26, 0xA0	; 160
    198e:	b0 e4       	ldi	r27, 0x40	; 64
    1990:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <FrontLinetrackerY_+0xa>
    1994:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <FrontLinetrackerY_+0xb>
    1998:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <FrontLinetrackerY_+0xc>
    199c:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <FrontLinetrackerY_+0xd>
    19a0:	15 c0       	rjmp	.+42     	; 0x19cc <_Z32Calculate_Front_LinetrackerY_Pidv+0x122>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	c7 01       	movw	r24, r14
    19aa:	b6 01       	movw	r22, r12
    19ac:	0e 94 3c 20 	call	0x4078	; 0x4078 <__cmpsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	64 f4       	brge	.+24     	; 0x19cc <_Z32Calculate_Front_LinetrackerY_Pidv+0x122>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 ea       	ldi	r26, 0xA0	; 160
    19ba:	b0 ec       	ldi	r27, 0xC0	; 192
    19bc:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <FrontLinetrackerY_+0xa>
    19c0:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <FrontLinetrackerY_+0xb>
    19c4:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <FrontLinetrackerY_+0xc>
    19c8:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <FrontLinetrackerY_+0xd>
    19cc:	0a ec       	ldi	r16, 0xCA	; 202
    19ce:	12 e0       	ldi	r17, 0x02	; 2
    19d0:	f8 01       	movw	r30, r16
    19d2:	25 89       	ldd	r18, Z+21	; 0x15
    19d4:	36 89       	ldd	r19, Z+22	; 0x16
    19d6:	47 89       	ldd	r20, Z+23	; 0x17
    19d8:	50 8d       	ldd	r21, Z+24	; 0x18
    19da:	c5 01       	movw	r24, r10
    19dc:	b4 01       	movw	r22, r8
    19de:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    19e2:	f8 01       	movw	r30, r16
    19e4:	22 85       	ldd	r18, Z+10	; 0x0a
    19e6:	33 85       	ldd	r19, Z+11	; 0x0b
    19e8:	44 85       	ldd	r20, Z+12	; 0x0c
    19ea:	55 85       	ldd	r21, Z+13	; 0x0d
    19ec:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    19f0:	6b 01       	movw	r12, r22
    19f2:	7c 01       	movw	r14, r24
    19f4:	f8 01       	movw	r30, r16
    19f6:	84 81       	ldd	r24, Z+4	; 0x04
    19f8:	95 81       	ldd	r25, Z+5	; 0x05
    19fa:	be 01       	movw	r22, r28
    19fc:	68 1b       	sub	r22, r24
    19fe:	79 0b       	sbc	r23, r25
    1a00:	07 2e       	mov	r0, r23
    1a02:	00 0c       	add	r0, r0
    1a04:	88 0b       	sbc	r24, r24
    1a06:	99 0b       	sbc	r25, r25
    1a08:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	25 8d       	ldd	r18, Z+29	; 0x1d
    1a10:	36 8d       	ldd	r19, Z+30	; 0x1e
    1a12:	47 8d       	ldd	r20, Z+31	; 0x1f
    1a14:	50 a1       	ldd	r21, Z+32	; 0x20
    1a16:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	c7 01       	movw	r24, r14
    1a20:	b6 01       	movw	r22, r12
    1a22:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
    1a26:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	77 83       	std	Z+7, r23	; 0x07
    1a30:	66 83       	std	Z+6, r22	; 0x06
    1a32:	d5 83       	std	Z+5, r29	; 0x05
    1a34:	c4 83       	std	Z+4, r28	; 0x04
    1a36:	ab 01       	movw	r20, r22
    1a38:	77 23       	and	r23, r23
    1a3a:	24 f4       	brge	.+8      	; 0x1a44 <_Z32Calculate_Front_LinetrackerY_Pidv+0x19a>
    1a3c:	44 27       	eor	r20, r20
    1a3e:	55 27       	eor	r21, r21
    1a40:	46 1b       	sub	r20, r22
    1a42:	57 0b       	sbc	r21, r23
    1a44:	41 35       	cpi	r20, 0x51	; 81
    1a46:	51 05       	cpc	r21, r1
    1a48:	84 f0       	brlt	.+32     	; 0x1a6a <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    1a4a:	12 16       	cp	r1, r18
    1a4c:	13 06       	cpc	r1, r19
    1a4e:	3c f4       	brge	.+14     	; 0x1a5e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1b4>
    1a50:	80 e5       	ldi	r24, 0x50	; 80
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <FrontLinetrackerY_+0x7>
    1a58:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <FrontLinetrackerY_+0x6>
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    1a5e:	80 eb       	ldi	r24, 0xB0	; 176
    1a60:	9f ef       	ldi	r25, 0xFF	; 255
    1a62:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <FrontLinetrackerY_+0x7>
    1a66:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <FrontLinetrackerY_+0x6>
    1a6a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <PidUpdateFlagLinetrackerFront>
    1a6e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1a72:	81 11       	cpse	r24, r1
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    1a76:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <FrontLinetrackerY_+0x7>
    1a7a:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <FrontLinetrackerY_+0x6>
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	bf 90       	pop	r11
    1a90:	af 90       	pop	r10
    1a92:	9f 90       	pop	r9
    1a94:	8f 90       	pop	r8
    1a96:	08 95       	ret

00001a98 <_Z31Calculate_Back_LinetrackerY_Pidv>:
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <BackLinetrackerY_+0x10>
    1ab4:	88 23       	and	r24, r24
    1ab6:	51 f0       	breq	.+20     	; 0x1acc <_Z31Calculate_Back_LinetrackerY_Pidv+0x34>
    1ab8:	37 de       	rcall	.-914    	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav>
    1aba:	88 23       	and	r24, r24
    1abc:	39 f0       	breq	.+14     	; 0x1acc <_Z31Calculate_Back_LinetrackerY_Pidv+0x34>
    1abe:	34 de       	rcall	.-920    	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav>
    1ac0:	e9 ea       	ldi	r30, 0xA9	; 169
    1ac2:	f2 e0       	ldi	r31, 0x02	; 2
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	95 83       	std	Z+5, r25	; 0x05
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	10 8a       	std	Z+16, r1	; 0x10
    1acc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1ad0:	88 23       	and	r24, r24
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <_Z31Calculate_Back_LinetrackerY_Pidv+0x3e>
    1ad4:	c4 c0       	rjmp	.+392    	; 0x1c5e <_Z31Calculate_Back_LinetrackerY_Pidv+0x1c6>
    1ad6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1ada:	88 23       	and	r24, r24
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <_Z31Calculate_Back_LinetrackerY_Pidv+0x48>
    1ade:	c3 c0       	rjmp	.+390    	; 0x1c66 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1ce>
    1ae0:	23 de       	rcall	.-954    	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav>
    1ae2:	c8 2f       	mov	r28, r24
    1ae4:	d0 e0       	ldi	r29, 0x00	; 0
    1ae6:	e9 ea       	ldi	r30, 0xA9	; 169
    1ae8:	f2 e0       	ldi	r31, 0x02	; 2
    1aea:	d1 83       	std	Z+1, r29	; 0x01
    1aec:	c0 83       	st	Z, r28
    1aee:	66 85       	ldd	r22, Z+14	; 0x0e
    1af0:	77 85       	ldd	r23, Z+15	; 0x0f
    1af2:	6c 1b       	sub	r22, r28
    1af4:	7d 0b       	sbc	r23, r29
    1af6:	73 83       	std	Z+3, r23	; 0x03
    1af8:	62 83       	std	Z+2, r22	; 0x02
    1afa:	61 15       	cp	r22, r1
    1afc:	71 05       	cpc	r23, r1
    1afe:	41 f4       	brne	.+16     	; 0x1b10 <_Z31Calculate_Back_LinetrackerY_Pidv+0x78>
    1b00:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <BackLinetrackerY_+0xa>
    1b04:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <BackLinetrackerY_+0xb>
    1b08:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <BackLinetrackerY_+0xc>
    1b0c:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <BackLinetrackerY_+0xd>
    1b10:	07 2e       	mov	r0, r23
    1b12:	00 0c       	add	r0, r0
    1b14:	88 0b       	sbc	r24, r24
    1b16:	99 0b       	sbc	r25, r25
    1b18:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1b1c:	4b 01       	movw	r8, r22
    1b1e:	5c 01       	movw	r10, r24
    1b20:	09 ea       	ldi	r16, 0xA9	; 169
    1b22:	12 e0       	ldi	r17, 0x02	; 2
    1b24:	f8 01       	movw	r30, r16
    1b26:	21 8d       	ldd	r18, Z+25	; 0x19
    1b28:	32 8d       	ldd	r19, Z+26	; 0x1a
    1b2a:	43 8d       	ldd	r20, Z+27	; 0x1b
    1b2c:	54 8d       	ldd	r21, Z+28	; 0x1c
    1b2e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1b32:	f8 01       	movw	r30, r16
    1b34:	22 85       	ldd	r18, Z+10	; 0x0a
    1b36:	33 85       	ldd	r19, Z+11	; 0x0b
    1b38:	44 85       	ldd	r20, Z+12	; 0x0c
    1b3a:	55 85       	ldd	r21, Z+13	; 0x0d
    1b3c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    1b40:	6b 01       	movw	r12, r22
    1b42:	7c 01       	movw	r14, r24
    1b44:	f8 01       	movw	r30, r16
    1b46:	62 87       	std	Z+10, r22	; 0x0a
    1b48:	73 87       	std	Z+11, r23	; 0x0b
    1b4a:	84 87       	std	Z+12, r24	; 0x0c
    1b4c:	95 87       	std	Z+13, r25	; 0x0d
    1b4e:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1b52:	9b 01       	movw	r18, r22
    1b54:	77 23       	and	r23, r23
    1b56:	24 f4       	brge	.+8      	; 0x1b60 <_Z31Calculate_Back_LinetrackerY_Pidv+0xc8>
    1b58:	22 27       	eor	r18, r18
    1b5a:	33 27       	eor	r19, r19
    1b5c:	26 1b       	sub	r18, r22
    1b5e:	37 0b       	sbc	r19, r23
    1b60:	26 30       	cpi	r18, 0x06	; 6
    1b62:	31 05       	cpc	r19, r1
    1b64:	5c f1       	brlt	.+86     	; 0x1bbc <_Z31Calculate_Back_LinetrackerY_Pidv+0x124>
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	a9 01       	movw	r20, r18
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	b6 01       	movw	r22, r12
    1b70:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__gesf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	6c f4       	brge	.+26     	; 0x1b92 <_Z31Calculate_Back_LinetrackerY_Pidv+0xfa>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1b7e:	b0 e4       	ldi	r27, 0x40	; 64
    1b80:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <BackLinetrackerY_+0xa>
    1b84:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <BackLinetrackerY_+0xb>
    1b88:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <BackLinetrackerY_+0xc>
    1b8c:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <BackLinetrackerY_+0xd>
    1b90:	15 c0       	rjmp	.+42     	; 0x1bbc <_Z31Calculate_Back_LinetrackerY_Pidv+0x124>
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	a9 01       	movw	r20, r18
    1b98:	c7 01       	movw	r24, r14
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	0e 94 3c 20 	call	0x4078	; 0x4078 <__cmpsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	64 f4       	brge	.+24     	; 0x1bbc <_Z31Calculate_Back_LinetrackerY_Pidv+0x124>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 ea       	ldi	r26, 0xA0	; 160
    1baa:	b0 ec       	ldi	r27, 0xC0	; 192
    1bac:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <BackLinetrackerY_+0xa>
    1bb0:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <BackLinetrackerY_+0xb>
    1bb4:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <BackLinetrackerY_+0xc>
    1bb8:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <BackLinetrackerY_+0xd>
    1bbc:	09 ea       	ldi	r16, 0xA9	; 169
    1bbe:	12 e0       	ldi	r17, 0x02	; 2
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	25 89       	ldd	r18, Z+21	; 0x15
    1bc4:	36 89       	ldd	r19, Z+22	; 0x16
    1bc6:	47 89       	ldd	r20, Z+23	; 0x17
    1bc8:	50 8d       	ldd	r21, Z+24	; 0x18
    1bca:	c5 01       	movw	r24, r10
    1bcc:	b4 01       	movw	r22, r8
    1bce:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	22 85       	ldd	r18, Z+10	; 0x0a
    1bd6:	33 85       	ldd	r19, Z+11	; 0x0b
    1bd8:	44 85       	ldd	r20, Z+12	; 0x0c
    1bda:	55 85       	ldd	r21, Z+13	; 0x0d
    1bdc:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    1be0:	6b 01       	movw	r12, r22
    1be2:	7c 01       	movw	r14, r24
    1be4:	f8 01       	movw	r30, r16
    1be6:	84 81       	ldd	r24, Z+4	; 0x04
    1be8:	95 81       	ldd	r25, Z+5	; 0x05
    1bea:	be 01       	movw	r22, r28
    1bec:	68 1b       	sub	r22, r24
    1bee:	79 0b       	sbc	r23, r25
    1bf0:	07 2e       	mov	r0, r23
    1bf2:	00 0c       	add	r0, r0
    1bf4:	88 0b       	sbc	r24, r24
    1bf6:	99 0b       	sbc	r25, r25
    1bf8:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	25 8d       	ldd	r18, Z+29	; 0x1d
    1c00:	36 8d       	ldd	r19, Z+30	; 0x1e
    1c02:	47 8d       	ldd	r20, Z+31	; 0x1f
    1c04:	50 a1       	ldd	r21, Z+32	; 0x20
    1c06:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1c0a:	9b 01       	movw	r18, r22
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	c7 01       	movw	r24, r14
    1c10:	b6 01       	movw	r22, r12
    1c12:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
    1c16:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1c1a:	9b 01       	movw	r18, r22
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	77 83       	std	Z+7, r23	; 0x07
    1c20:	66 83       	std	Z+6, r22	; 0x06
    1c22:	d5 83       	std	Z+5, r29	; 0x05
    1c24:	c4 83       	std	Z+4, r28	; 0x04
    1c26:	ab 01       	movw	r20, r22
    1c28:	77 23       	and	r23, r23
    1c2a:	24 f4       	brge	.+8      	; 0x1c34 <_Z31Calculate_Back_LinetrackerY_Pidv+0x19c>
    1c2c:	44 27       	eor	r20, r20
    1c2e:	55 27       	eor	r21, r21
    1c30:	46 1b       	sub	r20, r22
    1c32:	57 0b       	sbc	r21, r23
    1c34:	41 35       	cpi	r20, 0x51	; 81
    1c36:	51 05       	cpc	r21, r1
    1c38:	84 f0       	brlt	.+32     	; 0x1c5a <_Z31Calculate_Back_LinetrackerY_Pidv+0x1c2>
    1c3a:	12 16       	cp	r1, r18
    1c3c:	13 06       	cpc	r1, r19
    1c3e:	3c f4       	brge	.+14     	; 0x1c4e <_Z31Calculate_Back_LinetrackerY_Pidv+0x1b6>
    1c40:	80 e5       	ldi	r24, 0x50	; 80
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <BackLinetrackerY_+0x7>
    1c48:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <BackLinetrackerY_+0x6>
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <_Z31Calculate_Back_LinetrackerY_Pidv+0x1c2>
    1c4e:	80 eb       	ldi	r24, 0xB0	; 176
    1c50:	9f ef       	ldi	r25, 0xFF	; 255
    1c52:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <BackLinetrackerY_+0x7>
    1c56:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <BackLinetrackerY_+0x6>
    1c5a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1c5e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1c62:	81 11       	cpse	r24, r1
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d6>
    1c66:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <BackLinetrackerY_+0x7>
    1c6a:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <BackLinetrackerY_+0x6>
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	df 90       	pop	r13
    1c7c:	cf 90       	pop	r12
    1c7e:	bf 90       	pop	r11
    1c80:	af 90       	pop	r10
    1c82:	9f 90       	pop	r9
    1c84:	8f 90       	pop	r8
    1c86:	08 95       	ret

00001c88 <_Z18Calculate_Velocityv>:
    1c88:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_axis>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <_Z18Calculate_Velocityv+0x18>
    1c90:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	71 f0       	breq	.+28     	; 0x1cb4 <_Z18Calculate_Velocityv+0x2c>
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	71 f4       	brne	.+28     	; 0x1cb8 <_Z18Calculate_Velocityv+0x30>
    1c9c:	a1 e0       	ldi	r26, 0x01	; 1
    1c9e:	13 c0       	rjmp	.+38     	; 0x1cc6 <_Z18Calculate_Velocityv+0x3e>
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	61 f4       	brne	.+24     	; 0x1cbc <_Z18Calculate_Velocityv+0x34>
    1ca4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	51 f0       	breq	.+20     	; 0x1cc0 <_Z18Calculate_Velocityv+0x38>
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	51 f4       	brne	.+20     	; 0x1cc4 <_Z18Calculate_Velocityv+0x3c>
    1cb0:	a3 e0       	ldi	r26, 0x03	; 3
    1cb2:	09 c0       	rjmp	.+18     	; 0x1cc6 <_Z18Calculate_Velocityv+0x3e>
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	07 c0       	rjmp	.+14     	; 0x1cc6 <_Z18Calculate_Velocityv+0x3e>
    1cb8:	a4 e0       	ldi	r26, 0x04	; 4
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <_Z18Calculate_Velocityv+0x3e>
    1cbc:	a4 e0       	ldi	r26, 0x04	; 4
    1cbe:	03 c0       	rjmp	.+6      	; 0x1cc6 <_Z18Calculate_Velocityv+0x3e>
    1cc0:	a2 e0       	ldi	r26, 0x02	; 2
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <_Z18Calculate_Velocityv+0x3e>
    1cc4:	a4 e0       	ldi	r26, 0x04	; 4
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	aa 0f       	add	r26, r26
    1cca:	bb 1f       	adc	r27, r27
    1ccc:	aa 0f       	add	r26, r26
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	a3 5f       	subi	r26, 0xF3	; 243
    1cd2:	bd 4f       	sbci	r27, 0xFD	; 253
    1cd4:	ea eb       	ldi	r30, 0xBA	; 186
    1cd6:	f3 e0       	ldi	r31, 0x03	; 3
    1cd8:	62 ec       	ldi	r22, 0xC2	; 194
    1cda:	73 e0       	ldi	r23, 0x03	; 3
    1cdc:	4d 91       	ld	r20, X+
    1cde:	20 81       	ld	r18, Z
    1ce0:	31 81       	ldd	r19, Z+1	; 0x01
    1ce2:	42 03       	mulsu	r20, r18
    1ce4:	c0 01       	movw	r24, r0
    1ce6:	43 9f       	mul	r20, r19
    1ce8:	90 0d       	add	r25, r0
    1cea:	11 24       	eor	r1, r1
    1cec:	81 93       	st	Z+, r24
    1cee:	91 93       	st	Z+, r25
    1cf0:	e6 17       	cp	r30, r22
    1cf2:	f7 07       	cpc	r31, r23
    1cf4:	99 f7       	brne	.-26     	; 0x1cdc <_Z18Calculate_Velocityv+0x54>
    1cf6:	08 95       	ret

00001cf8 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>:
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	ec 01       	movw	r28, r24
    1cfe:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
    1d02:	d3 dd       	rcall	.-1114   	; 0x18aa <_Z32Calculate_Front_LinetrackerY_Pidv>
    1d04:	c9 de       	rcall	.-622    	; 0x1a98 <_Z31Calculate_Back_LinetrackerY_Pidv>
    1d06:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1d0a:	82 30       	cpi	r24, 0x02	; 2
    1d0c:	f1 f4       	brne	.+60     	; 0x1d4a <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x52>
    1d0e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <FrontLinetrackerY_+0x6>
    1d12:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <FrontLinetrackerY_+0x7>
    1d16:	ea eb       	ldi	r30, 0xBA	; 186
    1d18:	f3 e0       	ldi	r31, 0x03	; 3
    1d1a:	9c 01       	movw	r18, r24
    1d1c:	2c 0f       	add	r18, r28
    1d1e:	3d 1f       	adc	r19, r29
    1d20:	31 83       	std	Z+1, r19	; 0x01
    1d22:	20 83       	st	Z, r18
    1d24:	9e 01       	movw	r18, r28
    1d26:	28 1b       	sub	r18, r24
    1d28:	39 0b       	sbc	r19, r25
    1d2a:	33 83       	std	Z+3, r19	; 0x03
    1d2c:	22 83       	std	Z+2, r18	; 0x02
    1d2e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <BackLinetrackerY_+0x6>
    1d32:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <BackLinetrackerY_+0x7>
    1d36:	9e 01       	movw	r18, r28
    1d38:	28 0f       	add	r18, r24
    1d3a:	39 1f       	adc	r19, r25
    1d3c:	35 83       	std	Z+5, r19	; 0x05
    1d3e:	24 83       	std	Z+4, r18	; 0x04
    1d40:	c8 1b       	sub	r28, r24
    1d42:	d9 0b       	sbc	r29, r25
    1d44:	d7 83       	std	Z+7, r29	; 0x07
    1d46:	c6 83       	std	Z+6, r28	; 0x06
    1d48:	1c c0       	rjmp	.+56     	; 0x1d82 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x8a>
    1d4a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <FrontLinetrackerY_+0x6>
    1d4e:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <FrontLinetrackerY_+0x7>
    1d52:	ea eb       	ldi	r30, 0xBA	; 186
    1d54:	f3 e0       	ldi	r31, 0x03	; 3
    1d56:	9e 01       	movw	r18, r28
    1d58:	28 1b       	sub	r18, r24
    1d5a:	39 0b       	sbc	r19, r25
    1d5c:	31 83       	std	Z+1, r19	; 0x01
    1d5e:	20 83       	st	Z, r18
    1d60:	8c 0f       	add	r24, r28
    1d62:	9d 1f       	adc	r25, r29
    1d64:	93 83       	std	Z+3, r25	; 0x03
    1d66:	82 83       	std	Z+2, r24	; 0x02
    1d68:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <BackLinetrackerY_+0x6>
    1d6c:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <BackLinetrackerY_+0x7>
    1d70:	9e 01       	movw	r18, r28
    1d72:	28 1b       	sub	r18, r24
    1d74:	39 0b       	sbc	r19, r25
    1d76:	35 83       	std	Z+5, r19	; 0x05
    1d78:	24 83       	std	Z+4, r18	; 0x04
    1d7a:	c8 0f       	add	r28, r24
    1d7c:	d9 1f       	adc	r29, r25
    1d7e:	d7 83       	std	Z+7, r29	; 0x07
    1d80:	c6 83       	std	Z+6, r28	; 0x06
    1d82:	82 df       	rcall	.-252    	; 0x1c88 <_Z18Calculate_Velocityv>
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	08 95       	ret

00001d8a <_Z15movYForwardSlowj>:
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	ea ec       	ldi	r30, 0xCA	; 202
    1d90:	f2 e0       	ldi	r31, 0x02	; 2
    1d92:	0a e9       	ldi	r16, 0x9A	; 154
    1d94:	19 e9       	ldi	r17, 0x99	; 153
    1d96:	29 e1       	ldi	r18, 0x19	; 25
    1d98:	3f e3       	ldi	r19, 0x3F	; 63
    1d9a:	05 8b       	std	Z+21, r16	; 0x15
    1d9c:	16 8b       	std	Z+22, r17	; 0x16
    1d9e:	27 8b       	std	Z+23, r18	; 0x17
    1da0:	30 8f       	std	Z+24, r19	; 0x18
    1da2:	11 8e       	std	Z+25, r1	; 0x19
    1da4:	12 8e       	std	Z+26, r1	; 0x1a
    1da6:	13 8e       	std	Z+27, r1	; 0x1b
    1da8:	14 8e       	std	Z+28, r1	; 0x1c
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	60 e8       	ldi	r22, 0x80	; 128
    1db0:	71 e4       	ldi	r23, 0x41	; 65
    1db2:	45 8f       	std	Z+29, r20	; 0x1d
    1db4:	56 8f       	std	Z+30, r21	; 0x1e
    1db6:	67 8f       	std	Z+31, r22	; 0x1f
    1db8:	70 a3       	std	Z+32, r23	; 0x20
    1dba:	e9 ea       	ldi	r30, 0xA9	; 169
    1dbc:	f2 e0       	ldi	r31, 0x02	; 2
    1dbe:	05 8b       	std	Z+21, r16	; 0x15
    1dc0:	16 8b       	std	Z+22, r17	; 0x16
    1dc2:	27 8b       	std	Z+23, r18	; 0x17
    1dc4:	30 8f       	std	Z+24, r19	; 0x18
    1dc6:	11 8e       	std	Z+25, r1	; 0x19
    1dc8:	12 8e       	std	Z+26, r1	; 0x1a
    1dca:	13 8e       	std	Z+27, r1	; 0x1b
    1dcc:	14 8e       	std	Z+28, r1	; 0x1c
    1dce:	45 8f       	std	Z+29, r20	; 0x1d
    1dd0:	56 8f       	std	Z+30, r21	; 0x1e
    1dd2:	67 8f       	std	Z+31, r22	; 0x1f
    1dd4:	70 a3       	std	Z+32, r23	; 0x20
    1dd6:	21 e0       	ldi	r18, 0x01	; 1
    1dd8:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <_axis>
    1ddc:	22 e0       	ldi	r18, 0x02	; 2
    1dde:	20 93 0b 02 	sts	0x020B, r18	; 0x80020b <_direction>
    1de2:	8a df       	rcall	.-236    	; 0x1cf8 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	08 95       	ret

00001dea <_Z10Move_Yaxisiij>:
    1dea:	2f 92       	push	r2
    1dec:	3f 92       	push	r3
    1dee:	4f 92       	push	r4
    1df0:	5f 92       	push	r5
    1df2:	6f 92       	push	r6
    1df4:	7f 92       	push	r7
    1df6:	8f 92       	push	r8
    1df8:	9f 92       	push	r9
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	1c 01       	movw	r2, r24
    1e10:	8b 01       	movw	r16, r22
    1e12:	7a 01       	movw	r14, r20
    1e14:	ea ec       	ldi	r30, 0xCA	; 202
    1e16:	f2 e0       	ldi	r31, 0x02	; 2
    1e18:	8a e9       	ldi	r24, 0x9A	; 154
    1e1a:	99 e9       	ldi	r25, 0x99	; 153
    1e1c:	a9 e9       	ldi	r26, 0x99	; 153
    1e1e:	bf e3       	ldi	r27, 0x3F	; 63
    1e20:	85 8b       	std	Z+21, r24	; 0x15
    1e22:	96 8b       	std	Z+22, r25	; 0x16
    1e24:	a7 8b       	std	Z+23, r26	; 0x17
    1e26:	b0 8f       	std	Z+24, r27	; 0x18
    1e28:	11 8e       	std	Z+25, r1	; 0x19
    1e2a:	12 8e       	std	Z+26, r1	; 0x1a
    1e2c:	13 8e       	std	Z+27, r1	; 0x1b
    1e2e:	14 8e       	std	Z+28, r1	; 0x1c
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e8       	ldi	r26, 0x80	; 128
    1e36:	b1 e4       	ldi	r27, 0x41	; 65
    1e38:	85 8f       	std	Z+29, r24	; 0x1d
    1e3a:	96 8f       	std	Z+30, r25	; 0x1e
    1e3c:	a7 8f       	std	Z+31, r26	; 0x1f
    1e3e:	b0 a3       	std	Z+32, r27	; 0x20
    1e40:	82 e8       	ldi	r24, 0x82	; 130
    1e42:	92 e0       	ldi	r25, 0x02	; 2
    1e44:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1e48:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1e4c:	9b 01       	movw	r18, r22
    1e4e:	77 23       	and	r23, r23
    1e50:	24 f4       	brge	.+8      	; 0x1e5a <_Z10Move_Yaxisiij+0x70>
    1e52:	22 27       	eor	r18, r18
    1e54:	33 27       	eor	r19, r19
    1e56:	26 1b       	sub	r18, r22
    1e58:	37 0b       	sbc	r19, r23
    1e5a:	e9 01       	movw	r28, r18
    1e5c:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <distanceY+0x1>
    1e60:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <distanceY>
    1e64:	30 92 fa 02 	sts	0x02FA, r3	; 0x8002fa <driveY+0xf>
    1e68:	20 92 f9 02 	sts	0x02F9, r2	; 0x8002f9 <driveY+0xe>
    1e6c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PidUpdateFlagDriveY>
    1e70:	88 23       	and	r24, r24
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <_Z10Move_Yaxisiij+0x8c>
    1e74:	0a c1       	rjmp	.+532    	; 0x208a <_Z10Move_Yaxisiij+0x2a0>
    1e76:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PidUpdateFlagDriveY>
    1e7a:	28 35       	cpi	r18, 0x58	; 88
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	38 07       	cpc	r19, r24
    1e80:	0c f4       	brge	.+2      	; 0x1e84 <_Z10Move_Yaxisiij+0x9a>
    1e82:	ad c0       	rjmp	.+346    	; 0x1fde <_Z10Move_Yaxisiij+0x1f4>
    1e84:	0f 2e       	mov	r0, r31
    1e86:	fb ee       	ldi	r31, 0xEB	; 235
    1e88:	cf 2e       	mov	r12, r31
    1e8a:	f2 e0       	ldi	r31, 0x02	; 2
    1e8c:	df 2e       	mov	r13, r31
    1e8e:	f0 2d       	mov	r31, r0
    1e90:	f6 01       	movw	r30, r12
    1e92:	31 83       	std	Z+1, r19	; 0x01
    1e94:	20 83       	st	Z, r18
    1e96:	22 1a       	sub	r2, r18
    1e98:	33 0a       	sbc	r3, r19
    1e9a:	33 82       	std	Z+3, r3	; 0x03
    1e9c:	22 82       	std	Z+2, r2	; 0x02
    1e9e:	b1 01       	movw	r22, r2
    1ea0:	03 2c       	mov	r0, r3
    1ea2:	00 0c       	add	r0, r0
    1ea4:	88 0b       	sbc	r24, r24
    1ea6:	99 0b       	sbc	r25, r25
    1ea8:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1eac:	2b 01       	movw	r4, r22
    1eae:	3c 01       	movw	r6, r24
    1eb0:	f6 01       	movw	r30, r12
    1eb2:	21 8d       	ldd	r18, Z+25	; 0x19
    1eb4:	32 8d       	ldd	r19, Z+26	; 0x1a
    1eb6:	43 8d       	ldd	r20, Z+27	; 0x1b
    1eb8:	54 8d       	ldd	r21, Z+28	; 0x1c
    1eba:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	22 85       	ldd	r18, Z+10	; 0x0a
    1ec2:	33 85       	ldd	r19, Z+11	; 0x0b
    1ec4:	44 85       	ldd	r20, Z+12	; 0x0c
    1ec6:	55 85       	ldd	r21, Z+13	; 0x0d
    1ec8:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    1ecc:	4b 01       	movw	r8, r22
    1ece:	5c 01       	movw	r10, r24
    1ed0:	f6 01       	movw	r30, r12
    1ed2:	62 87       	std	Z+10, r22	; 0x0a
    1ed4:	73 87       	std	Z+11, r23	; 0x0b
    1ed6:	84 87       	std	Z+12, r24	; 0x0c
    1ed8:	95 87       	std	Z+13, r25	; 0x0d
    1eda:	80 89       	ldd	r24, Z+16	; 0x10
    1edc:	88 23       	and	r24, r24
    1ede:	19 f0       	breq	.+6      	; 0x1ee6 <_Z10Move_Yaxisiij+0xfc>
    1ee0:	d5 83       	std	Z+5, r29	; 0x05
    1ee2:	c4 83       	std	Z+4, r28	; 0x04
    1ee4:	10 8a       	std	Z+16, r1	; 0x10
    1ee6:	c5 01       	movw	r24, r10
    1ee8:	b4 01       	movw	r22, r8
    1eea:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1eee:	9b 01       	movw	r18, r22
    1ef0:	77 23       	and	r23, r23
    1ef2:	24 f4       	brge	.+8      	; 0x1efc <_Z10Move_Yaxisiij+0x112>
    1ef4:	22 27       	eor	r18, r18
    1ef6:	33 27       	eor	r19, r19
    1ef8:	26 1b       	sub	r18, r22
    1efa:	37 0b       	sbc	r19, r23
    1efc:	2b 30       	cpi	r18, 0x0B	; 11
    1efe:	31 05       	cpc	r19, r1
    1f00:	5c f1       	brlt	.+86     	; 0x1f58 <_Z10Move_Yaxisiij+0x16e>
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	a9 01       	movw	r20, r18
    1f08:	c5 01       	movw	r24, r10
    1f0a:	b4 01       	movw	r22, r8
    1f0c:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <__gesf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	6c f4       	brge	.+26     	; 0x1f2e <_Z10Move_Yaxisiij+0x144>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e2       	ldi	r26, 0x20	; 32
    1f1a:	b1 e4       	ldi	r27, 0x41	; 65
    1f1c:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <driveY+0xa>
    1f20:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <driveY+0xb>
    1f24:	a0 93 f7 02 	sts	0x02F7, r26	; 0x8002f7 <driveY+0xc>
    1f28:	b0 93 f8 02 	sts	0x02F8, r27	; 0x8002f8 <driveY+0xd>
    1f2c:	15 c0       	rjmp	.+42     	; 0x1f58 <_Z10Move_Yaxisiij+0x16e>
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	a9 01       	movw	r20, r18
    1f34:	c5 01       	movw	r24, r10
    1f36:	b4 01       	movw	r22, r8
    1f38:	0e 94 3c 20 	call	0x4078	; 0x4078 <__cmpsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	64 f4       	brge	.+24     	; 0x1f58 <_Z10Move_Yaxisiij+0x16e>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e2       	ldi	r26, 0x20	; 32
    1f46:	b1 ec       	ldi	r27, 0xC1	; 193
    1f48:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <driveY+0xa>
    1f4c:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <driveY+0xb>
    1f50:	a0 93 f7 02 	sts	0x02F7, r26	; 0x8002f7 <driveY+0xc>
    1f54:	b0 93 f8 02 	sts	0x02F8, r27	; 0x8002f8 <driveY+0xd>
    1f58:	12 14       	cp	r1, r2
    1f5a:	13 04       	cpc	r1, r3
    1f5c:	bc f5       	brge	.+110    	; 0x1fcc <_Z10Move_Yaxisiij+0x1e2>
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	fb ee       	ldi	r31, 0xEB	; 235
    1f62:	cf 2e       	mov	r12, r31
    1f64:	f2 e0       	ldi	r31, 0x02	; 2
    1f66:	df 2e       	mov	r13, r31
    1f68:	f0 2d       	mov	r31, r0
    1f6a:	f6 01       	movw	r30, r12
    1f6c:	25 89       	ldd	r18, Z+21	; 0x15
    1f6e:	36 89       	ldd	r19, Z+22	; 0x16
    1f70:	47 89       	ldd	r20, Z+23	; 0x17
    1f72:	50 8d       	ldd	r21, Z+24	; 0x18
    1f74:	c3 01       	movw	r24, r6
    1f76:	b2 01       	movw	r22, r4
    1f78:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1f7c:	f6 01       	movw	r30, r12
    1f7e:	22 85       	ldd	r18, Z+10	; 0x0a
    1f80:	33 85       	ldd	r19, Z+11	; 0x0b
    1f82:	44 85       	ldd	r20, Z+12	; 0x0c
    1f84:	55 85       	ldd	r21, Z+13	; 0x0d
    1f86:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    1f8a:	4b 01       	movw	r8, r22
    1f8c:	5c 01       	movw	r10, r24
    1f8e:	f6 01       	movw	r30, r12
    1f90:	84 81       	ldd	r24, Z+4	; 0x04
    1f92:	95 81       	ldd	r25, Z+5	; 0x05
    1f94:	be 01       	movw	r22, r28
    1f96:	68 1b       	sub	r22, r24
    1f98:	79 0b       	sbc	r23, r25
    1f9a:	07 2e       	mov	r0, r23
    1f9c:	00 0c       	add	r0, r0
    1f9e:	88 0b       	sbc	r24, r24
    1fa0:	99 0b       	sbc	r25, r25
    1fa2:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1fa6:	f6 01       	movw	r30, r12
    1fa8:	25 8d       	ldd	r18, Z+29	; 0x1d
    1faa:	36 8d       	ldd	r19, Z+30	; 0x1e
    1fac:	47 8d       	ldd	r20, Z+31	; 0x1f
    1fae:	50 a1       	ldd	r21, Z+32	; 0x20
    1fb0:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1fb4:	9b 01       	movw	r18, r22
    1fb6:	ac 01       	movw	r20, r24
    1fb8:	c5 01       	movw	r24, r10
    1fba:	b4 01       	movw	r22, r8
    1fbc:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
    1fc0:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    1fc4:	f6 01       	movw	r30, r12
    1fc6:	77 83       	std	Z+7, r23	; 0x07
    1fc8:	66 83       	std	Z+6, r22	; 0x06
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <_Z10Move_Yaxisiij+0x1ea>
    1fcc:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <driveY+0x7>
    1fd0:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <driveY+0x6>
    1fd4:	d0 93 f0 02 	sts	0x02F0, r29	; 0x8002f0 <driveY+0x5>
    1fd8:	c0 93 ef 02 	sts	0x02EF, r28	; 0x8002ef <driveY+0x4>
    1fdc:	18 c0       	rjmp	.+48     	; 0x200e <_Z10Move_Yaxisiij+0x224>
    1fde:	b9 01       	movw	r22, r18
    1fe0:	33 0f       	add	r19, r19
    1fe2:	88 0b       	sbc	r24, r24
    1fe4:	99 0b       	sbc	r25, r25
    1fe6:	0e 94 de 20 	call	0x41bc	; 0x41bc <__floatsisf>
    1fea:	2a e9       	ldi	r18, 0x9A	; 154
    1fec:	39 e9       	ldi	r19, 0x99	; 153
    1fee:	49 e1       	ldi	r20, 0x19	; 25
    1ff0:	5e e3       	ldi	r21, 0x3E	; 62
    1ff2:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e7       	ldi	r20, 0x70	; 112
    1ffc:	52 e4       	ldi	r21, 0x42	; 66
    1ffe:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2002:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2006:	70 93 f2 02 	sts	0x02F2, r23	; 0x8002f2 <driveY+0x7>
    200a:	60 93 f1 02 	sts	0x02F1, r22	; 0x8002f1 <driveY+0x6>
    200e:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <driveY+0x6>
    2012:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <driveY+0x7>
    2016:	99 23       	and	r25, r25
    2018:	1c f4       	brge	.+6      	; 0x2020 <_Z10Move_Yaxisiij+0x236>
    201a:	91 95       	neg	r25
    201c:	81 95       	neg	r24
    201e:	91 09       	sbc	r25, r1
    2020:	8e 15       	cp	r24, r14
    2022:	9f 05       	cpc	r25, r15
    2024:	20 f0       	brcs	.+8      	; 0x202e <_Z10Move_Yaxisiij+0x244>
    2026:	f0 92 f2 02 	sts	0x02F2, r15	; 0x8002f2 <driveY+0x7>
    202a:	e0 92 f1 02 	sts	0x02F1, r14	; 0x8002f1 <driveY+0x6>
    202e:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <driveY+0x6>
    2032:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <driveY+0x7>
    2036:	43 96       	adiw	r24, 0x13	; 19
    2038:	87 97       	sbiw	r24, 0x27	; 39
    203a:	30 f4       	brcc	.+12     	; 0x2048 <_Z10Move_Yaxisiij+0x25e>
    203c:	84 e1       	ldi	r24, 0x14	; 20
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <driveY+0x7>
    2044:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <driveY+0x6>
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
    204e:	02 30       	cpi	r16, 0x02	; 2
    2050:	11 05       	cpc	r17, r1
    2052:	61 f4       	brne	.+24     	; 0x206c <_Z10Move_Yaxisiij+0x282>
    2054:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <movingyfront>
    2058:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <movingyback>
    205c:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <movingxfront>
    2060:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <movingxback>
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    206a:	0f c0       	rjmp	.+30     	; 0x208a <_Z10Move_Yaxisiij+0x2a0>
    206c:	03 30       	cpi	r16, 0x03	; 3
    206e:	11 05       	cpc	r17, r1
    2070:	61 f4       	brne	.+24     	; 0x208a <_Z10Move_Yaxisiij+0x2a0>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <movingyback>
    2078:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <movingyfront>
    207c:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <movingxfront>
    2080:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <movingxback>
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    208a:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <driveY+0x6>
    208e:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <driveY+0x7>
    2092:	32 de       	rcall	.-924    	; 0x1cf8 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	7f 90       	pop	r7
    20ae:	6f 90       	pop	r6
    20b0:	5f 90       	pop	r5
    20b2:	4f 90       	pop	r4
    20b4:	3f 90       	pop	r3
    20b6:	2f 90       	pop	r2
    20b8:	08 95       	ret

000020ba <_Z13Hold_Positionv>:


void Hold_Position(void)
{
	_axis = Y_Axis;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
	_direction = Back;
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    20c6:	ea ec       	ldi	r30, 0xCA	; 202
    20c8:	f2 e0       	ldi	r31, 0x02	; 2
    20ca:	46 e6       	ldi	r20, 0x66	; 102
    20cc:	56 e6       	ldi	r21, 0x66	; 102
    20ce:	66 ee       	ldi	r22, 0xE6	; 230
    20d0:	7f e3       	ldi	r23, 0x3F	; 63
    20d2:	45 8b       	std	Z+21, r20	; 0x15
    20d4:	56 8b       	std	Z+22, r21	; 0x16
    20d6:	67 8b       	std	Z+23, r22	; 0x17
    20d8:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    20da:	11 8e       	std	Z+25, r1	; 0x19
    20dc:	12 8e       	std	Z+26, r1	; 0x1a
    20de:	13 8e       	std	Z+27, r1	; 0x1b
    20e0:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a8 ec       	ldi	r26, 0xC8	; 200
    20e8:	b1 e4       	ldi	r27, 0x41	; 65
    20ea:	85 8f       	std	Z+29, r24	; 0x1d
    20ec:	96 8f       	std	Z+30, r25	; 0x1e
    20ee:	a7 8f       	std	Z+31, r26	; 0x1f
    20f0:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    20f2:	e9 ea       	ldi	r30, 0xA9	; 169
    20f4:	f2 e0       	ldi	r31, 0x02	; 2
    20f6:	45 8b       	std	Z+21, r20	; 0x15
    20f8:	56 8b       	std	Z+22, r21	; 0x16
    20fa:	67 8b       	std	Z+23, r22	; 0x17
    20fc:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    20fe:	11 8e       	std	Z+25, r1	; 0x19
    2100:	12 8e       	std	Z+26, r1	; 0x1a
    2102:	13 8e       	std	Z+27, r1	; 0x1b
    2104:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    2106:	85 8f       	std	Z+29, r24	; 0x1d
    2108:	96 8f       	std	Z+30, r25	; 0x1e
    210a:	a7 8f       	std	Z+31, r26	; 0x1f
    210c:	b0 a3       	std	Z+32, r27	; 0x20
	
	
 	FrontLinetrackerY_.setPid(1.8,0,25);
 	BackLinetrackerY_.setPid(1.8,0,25);
	
	Calculate_Motor_Differential_Velocity_With_Center_Pivot(0);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	f2 cd       	rjmp	.-1052   	; 0x1cf8 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    2114:	08 95       	ret

00002116 <_Z14updateZoneflagv>:
//  		else        uart0_puts("0 \n");


}

void updateZoneflag(void){
    2116:	cf 93       	push	r28
	//uart0_puts("update \r\n");
	/*if low on shuttlecock pin then shuttlecock received
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
    2118:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <ShuttleCockGiven>
    211c:	81 11       	cpse	r24, r1
    211e:	ab c0       	rjmp	.+342    	; 0x2276 <__stack+0x77>
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
    2120:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2124:	86 fd       	sbrc	r24, 6
    2126:	69 c0       	rjmp	.+210    	; 0x21fa <_Z14updateZoneflagv+0xe4>
    2128:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    212c:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2130:	05 97       	sbiw	r24, 0x05	; 5
    2132:	09 f0       	breq	.+2      	; 0x2136 <_Z14updateZoneflagv+0x20>
    2134:	62 c0       	rjmp	.+196    	; 0x21fa <_Z14updateZoneflagv+0xe4>
    2136:	54 c0       	rjmp	.+168    	; 0x21e0 <_Z14updateZoneflagv+0xca>
			GoThrowingZone1 = true;
			task3 = task4 = false;
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    2138:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    213c:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2140:	06 97       	sbiw	r24, 0x06	; 6
    2142:	f9 f4       	brne	.+62     	; 0x2182 <_Z14updateZoneflagv+0x6c>
    2144:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    2148:	81 11       	cpse	r24, r1
    214a:	5c c0       	rjmp	.+184    	; 0x2204 <__stack+0x5>
    214c:	1a c0       	rjmp	.+52     	; 0x2182 <_Z14updateZoneflagv+0x6c>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    214e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    2152:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2156:	05 97       	sbiw	r24, 0x05	; 5
    2158:	31 f0       	breq	.+12     	; 0x2166 <_Z14updateZoneflagv+0x50>
    215a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    215e:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2162:	06 97       	sbiw	r24, 0x06	; 6
    2164:	31 f4       	brne	.+12     	; 0x2172 <_Z14updateZoneflagv+0x5c>
		//uart0_puts("Shuttlecock arm gone \r\n");
		ShuttleCockArmGone = true;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <ShuttleCockArmGone>
		uart3_putc('w');
    216c:	87 e7       	ldi	r24, 0x77	; 119
    216e:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
	}
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
    2172:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <ShuttleCockGiven>
    2176:	88 23       	and	r24, r24
    2178:	21 f0       	breq	.+8      	; 0x2182 <_Z14updateZoneflagv+0x6c>
    217a:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <GoldenRackGiven>
    217e:	81 11       	cpse	r24, r1
    2180:	7f c0       	rjmp	.+254    	; 0x2280 <__stack+0x81>
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
    2182:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <sendoncetorotateGeneva>
    2186:	88 23       	and	r24, r24
    2188:	99 f0       	breq	.+38     	; 0x21b0 <_Z14updateZoneflagv+0x9a>
    218a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    218e:	86 fd       	sbrc	r24, 6
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <_Z14updateZoneflagv+0x9a>
    2192:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2196:	82 fd       	sbrc	r24, 2
    2198:	0b c0       	rjmp	.+22     	; 0x21b0 <_Z14updateZoneflagv+0x9a>
    219a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    219e:	81 11       	cpse	r24, r1
    21a0:	07 c0       	rjmp	.+14     	; 0x21b0 <_Z14updateZoneflagv+0x9a>
    21a2:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    21a6:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    21aa:	06 97       	sbiw	r24, 0x06	; 6
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <_Z14updateZoneflagv+0x9a>
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <__stack+0x2f>
			uart3_putc('k');
			sendoncetorotateGeneva = false;
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
    21b0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    21b4:	82 ff       	sbrs	r24, 2
    21b6:	58 c0       	rjmp	.+176    	; 0x2268 <__stack+0x69>
    21b8:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    21bc:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    21c0:	06 97       	sbiw	r24, 0x06	; 6
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <_Z14updateZoneflagv+0xb0>
    21c4:	51 c0       	rjmp	.+162    	; 0x2268 <__stack+0x69>
    21c6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    21ca:	81 11       	cpse	r24, r1
    21cc:	4d c0       	rjmp	.+154    	; 0x2268 <__stack+0x69>
    21ce:	35 c0       	rjmp	.+106    	; 0x223a <__stack+0x3b>
			GoThrowingZone2 = false;
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
			//uart0_puts("none \r\n");
			GoldenRackGiven = false;
    21d0:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <GoldenRackGiven>
			GoThrowingZone2 = true;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <GoThrowingZone2>
			GoThrowingZone3 = false;
    21da:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <GoThrowingZone3>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    21de:	50 c0       	rjmp	.+160    	; 0x2280 <__stack+0x81>
	if(!ShuttleCockGiven){
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
			//uart0_puts("Shuttlecock given in LZ1\r\n");
			//'w' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    21e0:	8f e6       	ldi	r24, 0x6F	; 111
    21e2:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = true;
    21ec:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <GoThrowingZone1>
			task3 = task4 = false;
    21f0:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <task4>
    21f4:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <task3>
    21f8:	3e c0       	rjmp	.+124    	; 0x2276 <__stack+0x77>
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    21fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    21fe:	86 ff       	sbrs	r24, 6
    2200:	9b cf       	rjmp	.-202    	; 0x2138 <_Z14updateZoneflagv+0x22>
    2202:	bf cf       	rjmp	.-130    	; 0x2182 <_Z14updateZoneflagv+0x6c>
			//uart0_puts("Shuttlecock given in loading zone 2\r\nManual robot ahead \r\n");
			//'o' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    2204:	8f e6       	ldi	r24, 0x6F	; 111
    2206:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = false;
    2210:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <GoThrowingZone1>
			GoThrowingZone2 = true;
    2214:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <GoThrowingZone2>
			task3 = task4 = task5 = true;
    2218:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <task5>
    221c:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <task4>
    2220:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <task3>
			task6 = task7 = false;
    2224:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <task7>
    2228:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <task6>
    222c:	24 c0       	rjmp	.+72     	; 0x2276 <__stack+0x77>
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
			uart3_putc('k');
    222e:	8b e6       	ldi	r24, 0x6B	; 107
    2230:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
			sendoncetorotateGeneva = false;
    2234:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sendoncetorotateGeneva>
    2238:	bb cf       	rjmp	.-138    	; 0x21b0 <_Z14updateZoneflagv+0x9a>
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
			//'f' is sent to throwing mechanism to tell to throwing zone 3 from golden rack
			task6 = task7 = true;
    223a:	c1 e0       	ldi	r28, 0x01	; 1
    223c:	c0 93 96 02 	sts	0x0296, r28	; 0x800296 <task7>
    2240:	c0 93 97 02 	sts	0x0297, r28	; 0x800297 <task6>
			task8 = task9 = false;
    2244:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <task9>
    2248:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <task8>
			//uart0_puts("going throwing zone 3\r\n");
			uart3_putc('j');
    224c:	8a e6       	ldi	r24, 0x6A	; 106
    224e:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
			GoldenRackGiven = true;
    2252:	c0 93 a7 02 	sts	0x02A7, r28	; 0x8002a7 <GoldenRackGiven>
			ShuttleCockArmGone = true;
    2256:	c0 93 a6 02 	sts	0x02A6, r28	; 0x8002a6 <ShuttleCockArmGone>
			ShuttleCockGiven = true;
    225a:	c0 93 a8 02 	sts	0x02A8, r28	; 0x8002a8 <ShuttleCockGiven>
			GoThrowingZone3 = true;
    225e:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <GoThrowingZone3>
			GoThrowingZone2 = false;
    2262:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <GoThrowingZone2>
    2266:	0c c0       	rjmp	.+24     	; 0x2280 <__stack+0x81>
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
    2268:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    226c:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2270:	06 97       	sbiw	r24, 0x06	; 6
    2272:	31 f4       	brne	.+12     	; 0x2280 <__stack+0x81>
    2274:	ad cf       	rjmp	.-166    	; 0x21d0 <_Z14updateZoneflagv+0xba>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    2276:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    227a:	86 fd       	sbrc	r24, 6
    227c:	68 cf       	rjmp	.-304    	; 0x214e <_Z14updateZoneflagv+0x38>
    227e:	7d cf       	rjmp	.-262    	; 0x217a <_Z14updateZoneflagv+0x64>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    2280:	cf 91       	pop	r28
    2282:	08 95       	ret

00002284 <_Z18gorockthegamefieldv>:
// 				if(task7){uart0_puts("7");}
// 				if(task8){uart0_puts("8");}
	
	

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
    2284:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    2288:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    228c:	05 97       	sbiw	r24, 0x05	; 5
    228e:	31 f0       	breq	.+12     	; 0x229c <_Z18gorockthegamefieldv+0x18>
    2290:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    2294:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2298:	06 97       	sbiw	r24, 0x06	; 6
    229a:	89 f5       	brne	.+98     	; 0x22fe <_Z18gorockthegamefieldv+0x7a>
    229c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    22a0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    22a4:	08 97       	sbiw	r24, 0x08	; 8
    22a6:	59 f5       	brne	.+86     	; 0x22fe <_Z18gorockthegamefieldv+0x7a>
    22a8:	3d c4       	rjmp	.+2170   	; 0x2b24 <_Z18gorockthegamefieldv+0x8a0>
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    22aa:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <task5>
    22ae:	81 11       	cpse	r24, r1
    22b0:	09 c0       	rjmp	.+18     	; 0x22c4 <_Z18gorockthegamefieldv+0x40>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
    22b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    22b6:	84 ff       	sbrs	r24, 4
    22b8:	3a c4       	rjmp	.+2164   	; 0x2b2e <_Z18gorockthegamefieldv+0x8aa>
    22ba:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <alwaysTZ1>
    22be:	81 11       	cpse	r24, r1
    22c0:	36 c4       	rjmp	.+2156   	; 0x2b2e <_Z18gorockthegamefieldv+0x8aa>
    22c2:	3e c4       	rjmp	.+2172   	; 0x2b40 <_Z18gorockthegamefieldv+0x8bc>
				task3 = task4 = false;
				updateZoneflag();
				//holdposition();
			}	
		}
		else if(task6 && task7 ){
    22c4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <task6>
    22c8:	88 23       	and	r24, r24
    22ca:	b9 f0       	breq	.+46     	; 0x22fa <_Z18gorockthegamefieldv+0x76>
    22cc:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <task7>
    22d0:	88 23       	and	r24, r24
    22d2:	99 f0       	breq	.+38     	; 0x22fa <_Z18gorockthegamefieldv+0x76>
			if((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !alwaysTZ2){
    22d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    22d8:	84 ff       	sbrs	r24, 4
    22da:	4b c4       	rjmp	.+2198   	; 0x2b72 <_Z18gorockthegamefieldv+0x8ee>
    22dc:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <alwaysTZ2>
    22e0:	81 11       	cpse	r24, r1
    22e2:	47 c4       	rjmp	.+2190   	; 0x2b72 <_Z18gorockthegamefieldv+0x8ee>
    22e4:	3b c4       	rjmp	.+2166   	; 0x2b5c <_Z18gorockthegamefieldv+0x8d8>
				ManualInFrontOfLZ2 = false;
				updateZoneflag();
				Hold_Position();
			}
			else if (ManualInFrontOfLZ2){
				task6 = task7 = false;
    22e6:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <task7>
    22ea:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <task6>
				xJunctionMeetFromTZ2 = false;
    22ee:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <xJunctionMeetFromTZ2>
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <_Z18gorockthegamefieldv+0x7a>
			}
			else{
				updateZoneflag();
    22f4:	10 df       	rcall	.-480    	; 0x2116 <_Z14updateZoneflagv>
				Hold_Position();
    22f6:	e1 de       	rcall	.-574    	; 0x20ba <_Z13Hold_Positionv>
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <_Z18gorockthegamefieldv+0x7a>
			}
		}
		
		/*if the robot is in loading zone 1 or loading zone 2  otherwise */
		else{
			updateZoneflag();
    22fa:	0d df       	rcall	.-486    	; 0x2116 <_Z14updateZoneflagv>
    22fc:	de de       	rcall	.-580    	; 0x20ba <_Z13Hold_Positionv>
			Hold_Position();
    22fe:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <task1>
		}
	}
	
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
    2302:	81 11       	cpse	r24, r1
    2304:	dd c5       	rjmp	.+3002   	; 0x2ec0 <_Z18gorockthegamefieldv+0xc3c>
    2306:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <where>
    230a:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <where+0x1>
    230e:	23 2b       	or	r18, r19
    2310:	09 f0       	breq	.+2      	; 0x2314 <_Z18gorockthegamefieldv+0x90>
    2312:	d0 c5       	rjmp	.+2976   	; 0x2eb4 <_Z18gorockthegamefieldv+0xc30>
    2314:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <normalGame>
    2318:	91 11       	cpse	r25, r1
    231a:	30 c4       	rjmp	.+2144   	; 0x2b7c <_Z18gorockthegamefieldv+0x8f8>
    231c:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <alwaysTZ1>
    2320:	91 11       	cpse	r25, r1
    2322:	2c c4       	rjmp	.+2136   	; 0x2b7c <_Z18gorockthegamefieldv+0x8f8>
    2324:	c7 c5       	rjmp	.+2958   	; 0x2eb4 <_Z18gorockthegamefieldv+0xc30>
    2326:	78 94       	sei
    2328:	e8 e6       	ldi	r30, 0x68	; 104
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    232a:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE0);
    232c:	80 81       	ld	r24, Z
    232e:	81 60       	ori	r24, 0x01	; 1
    2330:	80 83       	st	Z, r24
    2332:	eb e6       	ldi	r30, 0x6B	; 107
    2334:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK0 |= (1<<PCINT4);
    2336:	80 81       	ld	r24, Z
    2338:	80 61       	ori	r24, 0x10	; 16
    233a:	80 83       	st	Z, r24
    233c:	28 c1       	rjmp	.+592    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    233e:	20 91 82 04 	lds	r18, 0x0482	; 0x800482 <directlyTZ3>
			linetrackerXjunctionWatch();
			//uart0_puts("int on");
		}

	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    2342:	21 11       	cpse	r18, r1
    2344:	08 c0       	rjmp	.+16     	; 0x2356 <_Z18gorockthegamefieldv+0xd2>
    2346:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <LZ2ForTZ3>
    234a:	21 11       	cpse	r18, r1
    234c:	04 c0       	rjmp	.+8      	; 0x2356 <_Z18gorockthegamefieldv+0xd2>
    234e:	20 91 80 04 	lds	r18, 0x0480	; 0x800480 <alwaysTZ2>
    2352:	22 23       	and	r18, r18
    2354:	89 f1       	breq	.+98     	; 0x23b8 <_Z18gorockthegamefieldv+0x134>
    2356:	81 11       	cpse	r24, r1
    2358:	32 c0       	rjmp	.+100    	; 0x23be <_Z18gorockthegamefieldv+0x13a>
    235a:	48 ec       	ldi	r20, 0xC8	; 200
    235c:	50 e0       	ldi	r21, 0x00	; 0
		movx((Throwingzone2.x),Front,STARTZONEtoCORNER);
    235e:	62 e0       	ldi	r22, 0x02	; 2
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	80 e9       	ldi	r24, 0x90	; 144
    2364:	9a e1       	ldi	r25, 0x1A	; 26
    2366:	0e 94 0e 09 	call	0x121c	; 0x121c <_Z4movxiij>
    236a:	87 e0       	ldi	r24, 0x07	; 7
    236c:	90 e0       	ldi	r25, 0x00	; 0
		robotState = moving;
    236e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2372:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2376:	8a e8       	ldi	r24, 0x8A	; 138
    2378:	92 e0       	ldi	r25, 0x02	; 2
		if(abs(encoderX.getdistance()) >= 6600){
    237a:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    237e:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2382:	9b 01       	movw	r18, r22
    2384:	77 23       	and	r23, r23
    2386:	24 f4       	brge	.+8      	; 0x2390 <_Z18gorockthegamefieldv+0x10c>
    2388:	22 27       	eor	r18, r18
    238a:	33 27       	eor	r19, r19
    238c:	26 1b       	sub	r18, r22
    238e:	37 0b       	sbc	r19, r23
    2390:	28 3c       	cpi	r18, 0xC8	; 200
    2392:	39 41       	sbci	r19, 0x19	; 25
    2394:	0c f4       	brge	.+2      	; 0x2398 <_Z18gorockthegamefieldv+0x114>
    2396:	fb c0       	rjmp	.+502    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    2398:	87 e5       	ldi	r24, 0x57	; 87
    239a:	92 e0       	ldi	r25, 0x02	; 2
			uart0_puts("interrupt on\t");
    239c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_Z10uart0_putsPKc>
    23a0:	78 94       	sei
    23a2:	e8 e6       	ldi	r30, 0x68	; 104
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE0);
    23a6:	80 81       	ld	r24, Z
    23a8:	81 60       	ori	r24, 0x01	; 1
    23aa:	80 83       	st	Z, r24
    23ac:	eb e6       	ldi	r30, 0x6B	; 107
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK0 |= (1<<PCINT4);
    23b0:	80 81       	ld	r24, Z
    23b2:	80 61       	ori	r24, 0x10	; 16
    23b4:	80 83       	st	Z, r24
    23b6:	eb c0       	rjmp	.+470    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    23b8:	88 23       	and	r24, r24
    23ba:	09 f4       	brne	.+2      	; 0x23be <_Z18gorockthegamefieldv+0x13a>
			linetrackerXjunctionWatch();
		}
	}
	
	///move from corner to loading zone1 if task1 is completed and task2 not completed
	else if(task1 && !task2){	
    23bc:	75 c0       	rjmp	.+234    	; 0x24a8 <_Z18gorockthegamefieldv+0x224>
    23be:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <task2>
    23c2:	81 11       	cpse	r24, r1
    23c4:	38 c0       	rjmp	.+112    	; 0x2436 <_Z18gorockthegamefieldv+0x1b2>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
		where = inFirstloadingCorner;
    23ca:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    23ce:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    23d2:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <startingAtFront>
		startingAtFront = false;
    23d6:	ed e2       	ldi	r30, 0x2D	; 45
    23d8:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e0       	ldi	r26, 0x00	; 0
    23e0:	b0 e4       	ldi	r27, 0x40	; 64
    23e2:	85 8b       	std	Z+21, r24	; 0x15
    23e4:	96 8b       	std	Z+22, r25	; 0x16
    23e6:	a7 8b       	std	Z+23, r26	; 0x17
    23e8:	b0 8f       	std	Z+24, r27	; 0x18
    23ea:	11 8e       	std	Z+25, r1	; 0x19
    23ec:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    23ee:	13 8e       	std	Z+27, r1	; 0x1b
    23f0:	14 8e       	std	Z+28, r1	; 0x1c
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    23f6:	a0 ef       	ldi	r26, 0xF0	; 240
    23f8:	b1 e4       	ldi	r27, 0x41	; 65
    23fa:	85 8f       	std	Z+29, r24	; 0x1d
    23fc:	96 8f       	std	Z+30, r25	; 0x1e
    23fe:	a7 8f       	std	Z+31, r26	; 0x1f
    2400:	b0 a3       	std	Z+32, r27	; 0x20
    2402:	87 e0       	ldi	r24, 0x07	; 7
    2404:	90 e0       	ldi	r25, 0x00	; 0
		compass.setPid(2.0,0,30);
		//uart0_puts("moving aheead \r\n");
		robotState = moving;
    2406:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    240a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    240e:	eb e6       	ldi	r30, 0x6B	; 107
    2410:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2412:	80 81       	ld	r24, Z
    2414:	8f 7e       	andi	r24, 0xEF	; 239
    2416:	80 83       	st	Z, r24
    2418:	78 94       	sei
    241a:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    241c:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    241e:	80 81       	ld	r24, Z
    2420:	84 60       	ori	r24, 0x04	; 4
    2422:	80 83       	st	Z, r24
    2424:	ed e6       	ldi	r30, 0x6D	; 109
    2426:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    2428:	80 81       	ld	r24, Z
    242a:	80 68       	ori	r24, 0x80	; 128
    242c:	80 83       	st	Z, r24
    242e:	8e e1       	ldi	r24, 0x1E	; 30
		linetrackerXjunctionWatchOff();
		linetrackerYjunctionWatch();
		movYForwardSlow(CORNERtoLZ1);
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	ab dc       	rcall	.-1706   	; 0x1d8a <_Z15movYForwardSlowj>
    2434:	ac c0       	rjmp	.+344    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    2436:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <where>
		//MovY_Slow(1000, Front, CORNERtoLZ1);
		//movYForwardSlow(CORNERtoLZ1);
	}
	/*if task2 is completed and robot just reached loading zone 1*/
	else if(task1 && task2 && where == inFirstloadingCorner && (robotState == moving) && (normalGame||alwaysTZ1)){
    243a:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <where+0x1>
    243e:	21 30       	cpi	r18, 0x01	; 1
    2440:	31 05       	cpc	r19, r1
    2442:	09 f0       	breq	.+2      	; 0x2446 <_Z18gorockthegamefieldv+0x1c2>
    2444:	2e c5       	rjmp	.+2652   	; 0x2ea2 <_Z18gorockthegamefieldv+0xc1e>
    2446:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <robotState>
    244a:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <robotState+0x1>
    244e:	27 30       	cpi	r18, 0x07	; 7
    2450:	31 05       	cpc	r19, r1
    2452:	09 f0       	breq	.+2      	; 0x2456 <_Z18gorockthegamefieldv+0x1d2>
    2454:	26 c5       	rjmp	.+2636   	; 0x2ea2 <_Z18gorockthegamefieldv+0xc1e>
    2456:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <normalGame>
    245a:	81 11       	cpse	r24, r1
    245c:	05 c0       	rjmp	.+10     	; 0x2468 <_Z18gorockthegamefieldv+0x1e4>
    245e:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <alwaysTZ1>
    2462:	88 23       	and	r24, r24
    2464:	09 f4       	brne	.+2      	; 0x2468 <_Z18gorockthegamefieldv+0x1e4>
    2466:	1d c5       	rjmp	.+2618   	; 0x2ea2 <_Z18gorockthegamefieldv+0xc1e>
    2468:	85 e0       	ldi	r24, 0x05	; 5
    246a:	90 e0       	ldi	r25, 0x00	; 0
		where = inLZ1;
    246c:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2470:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2474:	88 e6       	ldi	r24, 0x68	; 104
    2476:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
		uart3_putc('h');
    247a:	88 e0       	ldi	r24, 0x08	; 8
    247c:	90 e0       	ldi	r25, 0x00	; 0
		//uart0_puts("in loading zone 1\r\n");
		//compass.setPid(2.0,0,30);
		robotState = notmoving;
    247e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2482:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2486:	ed e6       	ldi	r30, 0x6D	; 109
    2488:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    248a:	80 81       	ld	r24, Z
    248c:	8f 77       	andi	r24, 0x7F	; 127
    248e:	80 83       	st	Z, r24
    2490:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
		linetrackerYjunctionWatchOff();
		BrakeMotor();
    2494:	12 de       	rcall	.-988    	; 0x20ba <_Z13Hold_Positionv>
		Hold_Position();
    2496:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
		inline void resetCount(){count_encoder = 0;};
    249a:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    249e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    24a2:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    24a6:	73 c0       	rjmp	.+230    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    24a8:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <where>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    24ac:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <where+0x1>
    24b0:	21 30       	cpi	r18, 0x01	; 1
    24b2:	31 05       	cpc	r19, r1
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <_Z18gorockthegamefieldv+0x234>
    24b6:	6b c0       	rjmp	.+214    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    24b8:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <task2>
    24bc:	88 23       	and	r24, r24
    24be:	09 f4       	brne	.+2      	; 0x24c2 <_Z18gorockthegamefieldv+0x23e>
    24c0:	66 c0       	rjmp	.+204    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    24c2:	91 11       	cpse	r25, r1
    24c4:	0d c0       	rjmp	.+26     	; 0x24e0 <_Z18gorockthegamefieldv+0x25c>
    24c6:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <directlyTZ3>
    24ca:	81 11       	cpse	r24, r1
    24cc:	09 c0       	rjmp	.+18     	; 0x24e0 <_Z18gorockthegamefieldv+0x25c>
    24ce:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <LZ2ForTZ3>
    24d2:	81 11       	cpse	r24, r1
    24d4:	05 c0       	rjmp	.+10     	; 0x24e0 <_Z18gorockthegamefieldv+0x25c>
    24d6:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <alwaysTZ2>
    24da:	88 23       	and	r24, r24
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <_Z18gorockthegamefieldv+0x25c>
    24de:	57 c0       	rjmp	.+174    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    24e0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    24e4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    24e8:	07 97       	sbiw	r24, 0x07	; 7
    24ea:	09 f0       	breq	.+2      	; 0x24ee <_Z18gorockthegamefieldv+0x26a>
    24ec:	50 c0       	rjmp	.+160    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    24ee:	78 c3       	rjmp	.+1776   	; 0x2be0 <_Z18gorockthegamefieldv+0x95c>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <task5>
		robotState = notmoving;
		BrakeMotor();
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
			task1 = task2 = task3 = task4 = task5 = true;
    24f6:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <task4>
    24fa:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <task3>
    24fe:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <task2>
    2502:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <task1>
    2506:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
			ManualInFrontOfLZ2 = true;
    250a:	41 c0       	rjmp	.+130    	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    250c:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <directlyTZ3>
		}
		else if(directlyTZ3){
    2510:	88 23       	and	r24, r24
    2512:	b1 f0       	breq	.+44     	; 0x2540 <_Z18gorockthegamefieldv+0x2bc>
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <task7>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    251a:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <task6>
    251e:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <task5>
    2522:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <task4>
    2526:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <task3>
    252a:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <task2>
    252e:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <task1>
    2532:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <ShuttleCockArmGone>
			ShuttleCockArmGone = true;
    2536:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <ShuttleCockGiven>
			ShuttleCockGiven = true;
    253a:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <GoThrowingZone3>
			GoThrowingZone3 = true;
    253e:	31 c0       	rjmp	.+98     	; 0x25a2 <_Z18gorockthegamefieldv+0x31e>
    2540:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <LZ2ForTZ3>
		}
		else if(LZ2ForTZ3){
    2544:	88 23       	and	r24, r24
    2546:	91 f0       	breq	.+36     	; 0x256c <_Z18gorockthegamefieldv+0x2e8>
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <task7>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    254e:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <task6>
    2552:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <task5>
    2556:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <task4>
    255a:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <task3>
    255e:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <task2>
    2562:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <task1>
    2566:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
			ManualInFrontOfLZ2 = false;
    256a:	11 c0       	rjmp	.+34     	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    256c:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <alwaysTZ2>
		}
		else if(alwaysTZ2){
    2570:	88 23       	and	r24, r24
    2572:	69 f0       	breq	.+26     	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <task5>
			task1 = task2 = task3 = task4 = task5 = true;
    257a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <task4>
    257e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <task3>
    2582:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <task2>
    2586:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <task1>
    258a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
			ManualInFrontOfLZ2 = true;
    258e:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <ShuttleCockGiven>
		}
	}
	/*if Shuttlecock is given*/
	if(ShuttleCockGiven && ShuttleCockArmGone)
    2592:	88 23       	and	r24, r24
    2594:	09 f4       	brne	.+2      	; 0x2598 <_Z18gorockthegamefieldv+0x314>
    2596:	a1 c4       	rjmp	.+2370   	; 0x2eda <_Z18gorockthegamefieldv+0xc56>
    2598:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <ShuttleCockArmGone>
    259c:	88 23       	and	r24, r24
    259e:	09 f4       	brne	.+2      	; 0x25a2 <_Z18gorockthegamefieldv+0x31e>
    25a0:	9c c4       	rjmp	.+2360   	; 0x2eda <_Z18gorockthegamefieldv+0xc56>
    25a2:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <GoThrowingZone1>
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
    25a6:	88 23       	and	r24, r24
    25a8:	09 f4       	brne	.+2      	; 0x25ac <_Z18gorockthegamefieldv+0x328>
    25aa:	71 c3       	rjmp	.+1762   	; 0x2c8e <_Z18gorockthegamefieldv+0xa0a>
    25ac:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <task3>
    25b0:	81 11       	cpse	r24, r1
    25b2:	13 c0       	rjmp	.+38     	; 0x25da <_Z18gorockthegamefieldv+0x356>
    25b4:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    25b8:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    25bc:	05 97       	sbiw	r24, 0x05	; 5
    25be:	f1 f4       	brne	.+60     	; 0x25fc <_Z18gorockthegamefieldv+0x378>
    25c0:	31 c3       	rjmp	.+1634   	; 0x2c24 <_Z18gorockthegamefieldv+0x9a0>
    25c2:	78 94       	sei
    25c4:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    25c8:	80 81       	ld	r24, Z
    25ca:	84 60       	ori	r24, 0x04	; 4
    25cc:	80 83       	st	Z, r24
    25ce:	ed e6       	ldi	r30, 0x6D	; 109
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    25d2:	80 81       	ld	r24, Z
    25d4:	80 68       	ori	r24, 0x80	; 128
    25d6:	80 83       	st	Z, r24
    25d8:	11 c0       	rjmp	.+34     	; 0x25fc <_Z18gorockthegamefieldv+0x378>
    25da:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <task4>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    25de:	81 11       	cpse	r24, r1
    25e0:	0d c0       	rjmp	.+26     	; 0x25fc <_Z18gorockthegamefieldv+0x378>
    25e2:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    25e6:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    25ea:	05 97       	sbiw	r24, 0x05	; 5
    25ec:	39 f4       	brne	.+14     	; 0x25fc <_Z18gorockthegamefieldv+0x378>
    25ee:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    25f2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    25f6:	07 97       	sbiw	r24, 0x07	; 7
    25f8:	09 f4       	brne	.+2      	; 0x25fc <_Z18gorockthegamefieldv+0x378>
    25fa:	4f c3       	rjmp	.+1694   	; 0x2c9a <_Z18gorockthegamefieldv+0xa16>
    25fc:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
				robotState = notmoving;
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
    2600:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2604:	02 97       	sbiw	r24, 0x02	; 2
    2606:	d9 f4       	brne	.+54     	; 0x263e <_Z18gorockthegamefieldv+0x3ba>
    2608:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    260c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2610:	08 97       	sbiw	r24, 0x08	; 8
    2612:	a9 f4       	brne	.+42     	; 0x263e <_Z18gorockthegamefieldv+0x3ba>
    2614:	5e c3       	rjmp	.+1724   	; 0x2cd2 <_Z18gorockthegamefieldv+0xa4e>
    2616:	81 e3       	ldi	r24, 0x31	; 49
    2618:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
				//uart3_puts("Throwing \r\n");
				Hold_Position();

				if(_b_Transmit_once)	//Stable_Robot() && 
				{	
					uart3_putc('1');
    261c:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_b_Transmit_once>
					//uart3_puts("Job Done\r\n\n");
					_b_Transmit_once = false;
    2620:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <_Z10uart3_getcv>
				}
				
				receiveAck = uart3_getc();
    2624:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <receiveAck>
    2628:	87 36       	cpi	r24, 0x67	; 103
    262a:	49 f4       	brne	.+18     	; 0x263e <_Z18gorockthegamefieldv+0x3ba>
				if(receiveAck == 'g'){
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <backtoLZ1>
					backtoLZ1 = true;
    2632:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <GoThrowingZone1>
					GoThrowingZone1 = false;
    2636:	80 e2       	ldi	r24, 0x20	; 32
    2638:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <receiveAck>
					receiveAck = ' ';
    263c:	05 c0       	rjmp	.+10     	; 0x2648 <_Z18gorockthegamefieldv+0x3c4>
    263e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <backtoLZ1>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ1 && task3 && !task4){
    2642:	88 23       	and	r24, r24
    2644:	09 f4       	brne	.+2      	; 0x2648 <_Z18gorockthegamefieldv+0x3c4>
    2646:	49 c0       	rjmp	.+146    	; 0x26da <_Z18gorockthegamefieldv+0x456>
    2648:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <task3>
    264c:	88 23       	and	r24, r24
    264e:	09 f4       	brne	.+2      	; 0x2652 <_Z18gorockthegamefieldv+0x3ce>
    2650:	44 c0       	rjmp	.+136    	; 0x26da <_Z18gorockthegamefieldv+0x456>
    2652:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <task4>
    2656:	81 11       	cpse	r24, r1
    2658:	45 c0       	rjmp	.+138    	; 0x26e4 <_Z18gorockthegamefieldv+0x460>
    265a:	ed e2       	ldi	r30, 0x2D	; 45
    265c:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e4       	ldi	r27, 0x40	; 64
    2666:	85 8b       	std	Z+21, r24	; 0x15
    2668:	96 8b       	std	Z+22, r25	; 0x16
    266a:	a7 8b       	std	Z+23, r26	; 0x17
    266c:	b0 8f       	std	Z+24, r27	; 0x18
    266e:	11 8e       	std	Z+25, r1	; 0x19
    2670:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2672:	13 8e       	std	Z+27, r1	; 0x1b
    2674:	14 8e       	std	Z+28, r1	; 0x1c
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    267a:	a0 ef       	ldi	r26, 0xF0	; 240
    267c:	b1 e4       	ldi	r27, 0x41	; 65
    267e:	85 8f       	std	Z+29, r24	; 0x1d
    2680:	96 8f       	std	Z+30, r25	; 0x1e
    2682:	a7 8f       	std	Z+31, r26	; 0x1f
    2684:	b0 a3       	std	Z+32, r27	; 0x20
    2686:	44 e6       	ldi	r20, 0x64	; 100
    2688:	50 e0       	ldi	r21, 0x00	; 0
				compass.setPid(2.0,0,30);
				//uart0_puts("Returning from tz1 \t");
				Move_Yaxis(Throwingzone1.y+25, Back, LZ1toTZ1);
    268a:	63 e0       	ldi	r22, 0x03	; 3
    268c:	70 e0       	ldi	r23, 0x00	; 0
    268e:	85 e8       	ldi	r24, 0x85	; 133
    2690:	97 e0       	ldi	r25, 0x07	; 7
    2692:	ab db       	rcall	.-2218   	; 0x1dea <_Z10Move_Yaxisiij>
    2694:	87 e0       	ldi	r24, 0x07	; 7
    2696:	90 e0       	ldi	r25, 0x00	; 0
				//movy(Throwingzone1.y, Back,TZ1toLZ1);
				robotState = moving;
    2698:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    269c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    26a0:	82 e8       	ldi	r24, 0x82	; 130
    26a2:	92 e0       	ldi	r25, 0x02	; 2
				if(abs(encoderY.getdistance()) >= 1200){
    26a4:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    26a8:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    26ac:	9b 01       	movw	r18, r22
    26ae:	77 23       	and	r23, r23
    26b0:	24 f4       	brge	.+8      	; 0x26ba <_Z18gorockthegamefieldv+0x436>
    26b2:	22 27       	eor	r18, r18
    26b4:	33 27       	eor	r19, r19
    26b6:	26 1b       	sub	r18, r22
    26b8:	37 0b       	sbc	r19, r23
    26ba:	20 3b       	cpi	r18, 0xB0	; 176
    26bc:	34 40       	sbci	r19, 0x04	; 4
    26be:	0c f4       	brge	.+2      	; 0x26c2 <_Z18gorockthegamefieldv+0x43e>
    26c0:	75 c0       	rjmp	.+234    	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    26c2:	78 94       	sei
    26c4:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    26c8:	80 81       	ld	r24, Z
    26ca:	84 60       	ori	r24, 0x04	; 4
    26cc:	80 83       	st	Z, r24
    26ce:	ed e6       	ldi	r30, 0x6D	; 109
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    26d2:	80 81       	ld	r24, Z
    26d4:	80 68       	ori	r24, 0x80	; 128
    26d6:	80 83       	st	Z, r24
    26d8:	69 c0       	rjmp	.+210    	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    26da:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <task4>
				//uart0_puts("\r\n");
			
			}
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
    26de:	88 23       	and	r24, r24
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <_Z18gorockthegamefieldv+0x460>
    26e2:	fe c2       	rjmp	.+1532   	; 0x2ce0 <_Z18gorockthegamefieldv+0xa5c>
    26e4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    26e8:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    26ec:	07 97       	sbiw	r24, 0x07	; 7
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <_Z18gorockthegamefieldv+0x46e>
    26f0:	f7 c2       	rjmp	.+1518   	; 0x2ce0 <_Z18gorockthegamefieldv+0xa5c>
    26f2:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    26f6:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    26fa:	02 97       	sbiw	r24, 0x02	; 2
    26fc:	09 f0       	breq	.+2      	; 0x2700 <_Z18gorockthegamefieldv+0x47c>
    26fe:	f0 c2       	rjmp	.+1504   	; 0x2ce0 <_Z18gorockthegamefieldv+0xa5c>
    2700:	f4 c2       	rjmp	.+1512   	; 0x2cea <_Z18gorockthegamefieldv+0xa66>
    2702:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <task5>
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2706:	81 11       	cpse	r24, r1
    2708:	44 c0       	rjmp	.+136    	; 0x2792 <_Z18gorockthegamefieldv+0x50e>
    270a:	ed e2       	ldi	r30, 0x2D	; 45
    270c:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e0       	ldi	r26, 0x00	; 0
    2714:	b0 e4       	ldi	r27, 0x40	; 64
    2716:	85 8b       	std	Z+21, r24	; 0x15
    2718:	96 8b       	std	Z+22, r25	; 0x16
    271a:	a7 8b       	std	Z+23, r26	; 0x17
    271c:	b0 8f       	std	Z+24, r27	; 0x18
    271e:	11 8e       	std	Z+25, r1	; 0x19
    2720:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2722:	13 8e       	std	Z+27, r1	; 0x1b
    2724:	14 8e       	std	Z+28, r1	; 0x1c
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    272a:	a0 ef       	ldi	r26, 0xF0	; 240
    272c:	b1 e4       	ldi	r27, 0x41	; 65
    272e:	85 8f       	std	Z+29, r24	; 0x1d
    2730:	96 8f       	std	Z+30, r25	; 0x1e
    2732:	a7 8f       	std	Z+31, r26	; 0x1f
    2734:	b0 a3       	std	Z+32, r27	; 0x20
    2736:	44 e6       	ldi	r20, 0x64	; 100
    2738:	50 e0       	ldi	r21, 0x00	; 0
				//uart0_puts("heading loading zone 2\t");
				compass.setPid(2.0,0,30);
				movx(2100,Front,LZ1toLZ2);
    273a:	62 e0       	ldi	r22, 0x02	; 2
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	84 e3       	ldi	r24, 0x34	; 52
    2740:	98 e0       	ldi	r25, 0x08	; 8
    2742:	0e 94 0e 09 	call	0x121c	; 0x121c <_Z4movxiij>
    2746:	87 e0       	ldi	r24, 0x07	; 7
    2748:	90 e0       	ldi	r25, 0x00	; 0
				robotState = moving;
    274a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    274e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2752:	8a e8       	ldi	r24, 0x8A	; 138
    2754:	92 e0       	ldi	r25, 0x02	; 2
				if(abs(encoderX.getdistance()) >= 1900){
    2756:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    275a:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    275e:	9b 01       	movw	r18, r22
    2760:	77 23       	and	r23, r23
    2762:	24 f4       	brge	.+8      	; 0x276c <_Z18gorockthegamefieldv+0x4e8>
    2764:	22 27       	eor	r18, r18
    2766:	33 27       	eor	r19, r19
    2768:	26 1b       	sub	r18, r22
    276a:	37 0b       	sbc	r19, r23
    276c:	2c 36       	cpi	r18, 0x6C	; 108
    276e:	37 40       	sbci	r19, 0x07	; 7
    2770:	ec f0       	brlt	.+58     	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    2772:	78 94       	sei
    2774:	e8 e6       	ldi	r30, 0x68	; 104
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    2776:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE0);
    2778:	80 81       	ld	r24, Z
    277a:	81 60       	ori	r24, 0x01	; 1
    277c:	80 83       	st	Z, r24
    277e:	eb e6       	ldi	r30, 0x6B	; 107
    2780:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK0 |= (1<<PCINT4);
    2782:	80 81       	ld	r24, Z
    2784:	80 61       	ori	r24, 0x10	; 16
    2786:	80 83       	st	Z, r24
    2788:	11 c0       	rjmp	.+34     	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    278a:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <task5>
				}
				//uart0_puts("\r\n");
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
    278e:	88 23       	and	r24, r24
    2790:	69 f0       	breq	.+26     	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    2792:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2796:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    279a:	07 97       	sbiw	r24, 0x07	; 7
    279c:	39 f4       	brne	.+14     	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    279e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    27a2:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    27a6:	05 97       	sbiw	r24, 0x05	; 5
    27a8:	09 f4       	brne	.+2      	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    27aa:	c1 c2       	rjmp	.+1410   	; 0x2d2e <_Z18gorockthegamefieldv+0xaaa>
    27ac:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <GoThrowingZone2>
			}
			
			
			/*if there is manual robot ahead of automatic robot && golden rack is not given and shuttlecock
			is given*/
			if(GoThrowingZone2 && !task6 ){
    27b0:	88 23       	and	r24, r24
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <_Z18gorockthegamefieldv+0x532>
    27b4:	43 c0       	rjmp	.+134    	; 0x283c <_Z18gorockthegamefieldv+0x5b8>
    27b6:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <task6>
    27ba:	81 11       	cpse	r24, r1
    27bc:	43 c0       	rjmp	.+134    	; 0x2844 <_Z18gorockthegamefieldv+0x5c0>
    27be:	ed e2       	ldi	r30, 0x2D	; 45
    27c0:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 e0       	ldi	r26, 0x00	; 0
    27c8:	b0 e4       	ldi	r27, 0x40	; 64
    27ca:	85 8b       	std	Z+21, r24	; 0x15
    27cc:	96 8b       	std	Z+22, r25	; 0x16
    27ce:	a7 8b       	std	Z+23, r26	; 0x17
    27d0:	b0 8f       	std	Z+24, r27	; 0x18
    27d2:	11 8e       	std	Z+25, r1	; 0x19
    27d4:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    27d6:	13 8e       	std	Z+27, r1	; 0x1b
    27d8:	14 8e       	std	Z+28, r1	; 0x1c
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    27de:	a0 ef       	ldi	r26, 0xF0	; 240
    27e0:	b1 e4       	ldi	r27, 0x41	; 65
    27e2:	85 8f       	std	Z+29, r24	; 0x1d
    27e4:	96 8f       	std	Z+30, r25	; 0x1e
    27e6:	a7 8f       	std	Z+31, r26	; 0x1f
    27e8:	b0 a3       	std	Z+32, r27	; 0x20
    27ea:	87 e0       	ldi	r24, 0x07	; 7
    27ec:	90 e0       	ldi	r25, 0x00	; 0
				//uart0_puts("going tz2 \t");
				compass.setPid(2.0,0,30);
				robotState = moving;
    27ee:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    27f2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    27f6:	44 e6       	ldi	r20, 0x64	; 100
				Move_Yaxis(Throwingzone2.y+50, Front, LZ2toTZ2);
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	62 e0       	ldi	r22, 0x02	; 2
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	8e e9       	ldi	r24, 0x9E	; 158
    2800:	97 e0       	ldi	r25, 0x07	; 7
    2802:	f3 da       	rcall	.-2586   	; 0x1dea <_Z10Move_Yaxisiij>
    2804:	82 e8       	ldi	r24, 0x82	; 130
    2806:	92 e0       	ldi	r25, 0x02	; 2
				//movy(Throwingzone2.y, Front,LZ2toTZ2);
			
				if(abs(encoderY.getdistance()) >=1200){
    2808:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    280c:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2810:	9b 01       	movw	r18, r22
    2812:	77 23       	and	r23, r23
    2814:	24 f4       	brge	.+8      	; 0x281e <_Z18gorockthegamefieldv+0x59a>
    2816:	22 27       	eor	r18, r18
    2818:	33 27       	eor	r19, r19
    281a:	26 1b       	sub	r18, r22
    281c:	37 0b       	sbc	r19, r23
    281e:	20 3b       	cpi	r18, 0xB0	; 176
    2820:	34 40       	sbci	r19, 0x04	; 4
    2822:	0c f1       	brlt	.+66     	; 0x2866 <_Z18gorockthegamefieldv+0x5e2>
    2824:	78 94       	sei
    2826:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2828:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    282a:	80 81       	ld	r24, Z
    282c:	84 60       	ori	r24, 0x04	; 4
    282e:	80 83       	st	Z, r24
    2830:	ed e6       	ldi	r30, 0x6D	; 109
    2832:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    2834:	80 81       	ld	r24, Z
    2836:	80 68       	ori	r24, 0x80	; 128
    2838:	80 83       	st	Z, r24
    283a:	15 c0       	rjmp	.+42     	; 0x2866 <_Z18gorockthegamefieldv+0x5e2>
    283c:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <task6>
				}
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
    2840:	88 23       	and	r24, r24
    2842:	89 f0       	breq	.+34     	; 0x2866 <_Z18gorockthegamefieldv+0x5e2>
    2844:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <task7>
    2848:	81 11       	cpse	r24, r1
    284a:	0d c0       	rjmp	.+26     	; 0x2866 <_Z18gorockthegamefieldv+0x5e2>
    284c:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    2850:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2854:	06 97       	sbiw	r24, 0x06	; 6
    2856:	39 f4       	brne	.+14     	; 0x2866 <_Z18gorockthegamefieldv+0x5e2>
    2858:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    285c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2860:	07 97       	sbiw	r24, 0x07	; 7
    2862:	09 f4       	brne	.+2      	; 0x2866 <_Z18gorockthegamefieldv+0x5e2>
    2864:	86 c2       	rjmp	.+1292   	; 0x2d72 <_Z18gorockthegamefieldv+0xaee>
    2866:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
				//uart3_putc('2');
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
    286a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    286e:	03 97       	sbiw	r24, 0x03	; 3
    2870:	19 f5       	brne	.+70     	; 0x28b8 <_Z18gorockthegamefieldv+0x634>
    2872:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2876:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    287a:	08 97       	sbiw	r24, 0x08	; 8
    287c:	e9 f4       	brne	.+58     	; 0x28b8 <_Z18gorockthegamefieldv+0x634>
    287e:	95 c2       	rjmp	.+1322   	; 0x2daa <_Z18gorockthegamefieldv+0xb26>
    2880:	82 e3       	ldi	r24, 0x32	; 50
    2882:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
				velocity_robot[0] =0;
				velocity_robot[1]=0;
				Hold_Position();
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
				{
					uart3_putc('2');
    2886:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    288a:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    288e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2892:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2896:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_b_Transmit_once>
					encoderX.resetCount();
					encoderY.resetCount();
					_b_Transmit_once = false;
    289a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <_Z10uart3_getcv>
				}
				
				receiveAck = uart3_getc();
    289e:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <receiveAck>
    28a2:	87 36       	cpi	r24, 0x67	; 103
    28a4:	49 f4       	brne	.+18     	; 0x28b8 <_Z18gorockthegamefieldv+0x634>
				if(receiveAck == 'g'){
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <backtoLZ2>
					backtoLZ2 = true;
    28ac:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <GoThrowingZone3>
					GoThrowingZone3 = false;
    28b0:	80 e2       	ldi	r24, 0x20	; 32
    28b2:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <receiveAck>
					receiveAck = ' ';
    28b6:	05 c0       	rjmp	.+10     	; 0x28c2 <_Z18gorockthegamefieldv+0x63e>
    28b8:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <backtoLZ2>
				}
			}
			///if acknowledge received from throwing mechanism after throwing then back to loading zone 2
			if(backtoLZ2 && task6 && !task7){
    28bc:	88 23       	and	r24, r24
    28be:	09 f4       	brne	.+2      	; 0x28c2 <_Z18gorockthegamefieldv+0x63e>
    28c0:	48 c0       	rjmp	.+144    	; 0x2952 <_Z18gorockthegamefieldv+0x6ce>
    28c2:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <task6>
    28c6:	88 23       	and	r24, r24
    28c8:	09 f4       	brne	.+2      	; 0x28cc <_Z18gorockthegamefieldv+0x648>
    28ca:	43 c0       	rjmp	.+134    	; 0x2952 <_Z18gorockthegamefieldv+0x6ce>
    28cc:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <task7>
    28d0:	81 11       	cpse	r24, r1
    28d2:	43 c0       	rjmp	.+134    	; 0x295a <_Z18gorockthegamefieldv+0x6d6>
    28d4:	ed e2       	ldi	r30, 0x2D	; 45
    28d6:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e0       	ldi	r26, 0x00	; 0
    28de:	b0 e4       	ldi	r27, 0x40	; 64
    28e0:	85 8b       	std	Z+21, r24	; 0x15
    28e2:	96 8b       	std	Z+22, r25	; 0x16
    28e4:	a7 8b       	std	Z+23, r26	; 0x17
    28e6:	b0 8f       	std	Z+24, r27	; 0x18
    28e8:	11 8e       	std	Z+25, r1	; 0x19
    28ea:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    28ec:	13 8e       	std	Z+27, r1	; 0x1b
    28ee:	14 8e       	std	Z+28, r1	; 0x1c
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    28f4:	a0 ef       	ldi	r26, 0xF0	; 240
    28f6:	b1 e4       	ldi	r27, 0x41	; 65
    28f8:	85 8f       	std	Z+29, r24	; 0x1d
    28fa:	96 8f       	std	Z+30, r25	; 0x1e
    28fc:	a7 8f       	std	Z+31, r26	; 0x1f
    28fe:	b0 a3       	std	Z+32, r27	; 0x20
    2900:	44 e6       	ldi	r20, 0x64	; 100
					//if(abs(encoderX.getdistance()) >= 400){
						//linetrackerXjunctionWatch();
					//}
				//}
				//else{
					Move_Yaxis(Throwingzone2.y+50, Back, LZ2toTZ2);
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	63 e0       	ldi	r22, 0x03	; 3
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	8e e9       	ldi	r24, 0x9E	; 158
    290a:	97 e0       	ldi	r25, 0x07	; 7
    290c:	6e da       	rcall	.-2852   	; 0x1dea <_Z10Move_Yaxisiij>
    290e:	87 e0       	ldi	r24, 0x07	; 7
    2910:	90 e0       	ldi	r25, 0x00	; 0
					//movy(Throwingzone2.y,Back,TZ2toLZ2);
					robotState = moving;
    2912:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2916:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    291a:	82 e8       	ldi	r24, 0x82	; 130
    291c:	92 e0       	ldi	r25, 0x02	; 2
			
					if(abs(encoderY.getdistance()) >= 1200){
    291e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2922:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2926:	9b 01       	movw	r18, r22
    2928:	77 23       	and	r23, r23
    292a:	24 f4       	brge	.+8      	; 0x2934 <_Z18gorockthegamefieldv+0x6b0>
    292c:	22 27       	eor	r18, r18
    292e:	33 27       	eor	r19, r19
    2930:	26 1b       	sub	r18, r22
    2932:	37 0b       	sbc	r19, r23
    2934:	20 3b       	cpi	r18, 0xB0	; 176
    2936:	34 40       	sbci	r19, 0x04	; 4
    2938:	ec f0       	brlt	.+58     	; 0x2974 <_Z18gorockthegamefieldv+0x6f0>
    293a:	78 94       	sei
    293c:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    293e:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    2940:	80 81       	ld	r24, Z
    2942:	84 60       	ori	r24, 0x04	; 4
    2944:	80 83       	st	Z, r24
    2946:	ed e6       	ldi	r30, 0x6D	; 109
    2948:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    294a:	80 81       	ld	r24, Z
    294c:	80 68       	ori	r24, 0x80	; 128
    294e:	80 83       	st	Z, r24
    2950:	11 c0       	rjmp	.+34     	; 0x2974 <_Z18gorockthegamefieldv+0x6f0>
    2952:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <task7>
				//uart0_puts("\r\n");
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
    2956:	88 23       	and	r24, r24
    2958:	69 f0       	breq	.+26     	; 0x2974 <_Z18gorockthegamefieldv+0x6f0>
    295a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    295e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2962:	07 97       	sbiw	r24, 0x07	; 7
    2964:	39 f4       	brne	.+14     	; 0x2974 <_Z18gorockthegamefieldv+0x6f0>
    2966:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    296a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    296e:	03 97       	sbiw	r24, 0x03	; 3
    2970:	09 f4       	brne	.+2      	; 0x2974 <_Z18gorockthegamefieldv+0x6f0>
    2972:	28 c2       	rjmp	.+1104   	; 0x2dc4 <_Z18gorockthegamefieldv+0xb40>
    2974:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <GoThrowingZone3>
				ShuttleCockArmGone = false;
				backtoLZ2 = false;
			}
			
			/*if golden rack is given to automatic robot and says goto throwingzone 1*/
			if(GoThrowingZone3 && !task8){
    2978:	88 23       	and	r24, r24
    297a:	09 f4       	brne	.+2      	; 0x297e <_Z18gorockthegamefieldv+0x6fa>
    297c:	4c c0       	rjmp	.+152    	; 0x2a16 <_Z18gorockthegamefieldv+0x792>
    297e:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <task8>
    2982:	81 11       	cpse	r24, r1
    2984:	4c c0       	rjmp	.+152    	; 0x2a1e <_Z18gorockthegamefieldv+0x79a>
    2986:	ed e2       	ldi	r30, 0x2D	; 45
    2988:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e4       	ldi	r27, 0x40	; 64
    2992:	85 8b       	std	Z+21, r24	; 0x15
    2994:	96 8b       	std	Z+22, r25	; 0x16
    2996:	a7 8b       	std	Z+23, r26	; 0x17
    2998:	b0 8f       	std	Z+24, r27	; 0x18
    299a:	11 8e       	std	Z+25, r1	; 0x19
    299c:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    299e:	13 8e       	std	Z+27, r1	; 0x1b
    29a0:	14 8e       	std	Z+28, r1	; 0x1c
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    29a6:	a0 ef       	ldi	r26, 0xF0	; 240
    29a8:	b1 e4       	ldi	r27, 0x41	; 65
    29aa:	85 8f       	std	Z+29, r24	; 0x1d
    29ac:	96 8f       	std	Z+30, r25	; 0x1e
    29ae:	a7 8f       	std	Z+31, r26	; 0x1f
    29b0:	b0 a3       	std	Z+32, r27	; 0x20
    29b2:	85 eb       	ldi	r24, 0xB5	; 181
    29b4:	90 e0       	ldi	r25, 0x00	; 0
				compass.setPid(2.0,0,30);//2.0
				//uart0_puts("going tz3 \t");
				compass.SETPOINT = 181;
    29b6:	97 87       	std	Z+15, r25	; 0x0f
    29b8:	86 87       	std	Z+14, r24	; 0x0e
    29ba:	46 e9       	ldi	r20, 0x96	; 150
				Move_Yaxis(Throwingzone3.y-50, Front, LZ2toTZ3);
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	62 e0       	ldi	r22, 0x02	; 2
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	8e e1       	ldi	r24, 0x1E	; 30
    29c4:	94 e1       	ldi	r25, 0x14	; 20
    29c6:	11 da       	rcall	.-3038   	; 0x1dea <_Z10Move_Yaxisiij>
    29c8:	87 e0       	ldi	r24, 0x07	; 7
    29ca:	90 e0       	ldi	r25, 0x00	; 0
				//movy(5300,Front,LZ2toTZ3);
				robotState = moving;
    29cc:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    29d0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    29d4:	82 e8       	ldi	r24, 0x82	; 130
    29d6:	92 e0       	ldi	r25, 0x02	; 2
				if(abs(encoderY.getdistance()) >= 4000){
    29d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    29dc:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    29e0:	9b 01       	movw	r18, r22
    29e2:	77 23       	and	r23, r23
    29e4:	24 f4       	brge	.+8      	; 0x29ee <_Z18gorockthegamefieldv+0x76a>
    29e6:	22 27       	eor	r18, r18
    29e8:	33 27       	eor	r19, r19
    29ea:	26 1b       	sub	r18, r22
    29ec:	37 0b       	sbc	r19, r23
    29ee:	20 3a       	cpi	r18, 0xA0	; 160
    29f0:	3f 40       	sbci	r19, 0x0F	; 15
    29f2:	0c f4       	brge	.+2      	; 0x29f6 <_Z18gorockthegamefieldv+0x772>
    29f4:	3d c0       	rjmp	.+122    	; 0x2a70 <_Z18gorockthegamefieldv+0x7ec>
    29f6:	78 94       	sei
    29f8:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    29fc:	80 81       	ld	r24, Z
    29fe:	84 60       	ori	r24, 0x04	; 4
    2a00:	80 83       	st	Z, r24
    2a02:	ed e6       	ldi	r30, 0x6D	; 109
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    2a06:	80 81       	ld	r24, Z
    2a08:	80 68       	ori	r24, 0x80	; 128
    2a0a:	80 83       	st	Z, r24
    2a0c:	85 e6       	ldi	r24, 0x65	; 101
    2a0e:	92 e0       	ldi	r25, 0x02	; 2
					linetrackerYjunctionWatch();	
					uart0_puts("interrupt on");
    2a10:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_Z10uart0_putsPKc>
    2a14:	2d c0       	rjmp	.+90     	; 0x2a70 <_Z18gorockthegamefieldv+0x7ec>
    2a16:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <task8>
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
    2a1a:	88 23       	and	r24, r24
    2a1c:	49 f1       	breq	.+82     	; 0x2a70 <_Z18gorockthegamefieldv+0x7ec>
    2a1e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    2a22:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2a26:	06 97       	sbiw	r24, 0x06	; 6
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <_Z18gorockthegamefieldv+0x7a8>
    2a2a:	4f c2       	rjmp	.+1182   	; 0x2eca <_Z18gorockthegamefieldv+0xc46>
    2a2c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2a30:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2a34:	07 97       	sbiw	r24, 0x07	; 7
    2a36:	09 f0       	breq	.+2      	; 0x2a3a <_Z18gorockthegamefieldv+0x7b6>
    2a38:	48 c2       	rjmp	.+1168   	; 0x2eca <_Z18gorockthegamefieldv+0xc46>
    2a3a:	e7 c1       	rjmp	.+974    	; 0x2e0a <_Z18gorockthegamefieldv+0xb86>
    2a3c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2a40:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2a44:	08 97       	sbiw	r24, 0x08	; 8
    2a46:	a1 f4       	brne	.+40     	; 0x2a70 <_Z18gorockthegamefieldv+0x7ec>
    2a48:	fe c1       	rjmp	.+1020   	; 0x2e46 <_Z18gorockthegamefieldv+0xbc2>
    2a4a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <_b_Transmit_once>
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2a4e:	81 11       	cpse	r24, r1
    2a50:	00 c2       	rjmp	.+1024   	; 0x2e52 <_Z18gorockthegamefieldv+0xbce>
    2a52:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <_Z10uart3_getcv>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
					_b_Transmit_once = false;
				}
				receiveAck = uart3_getc();
    2a56:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <receiveAck>
    2a5a:	87 36       	cpi	r24, 0x67	; 103
    2a5c:	49 f4       	brne	.+18     	; 0x2a70 <_Z18gorockthegamefieldv+0x7ec>
				if(receiveAck == 'g'){
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <backtoLZ2>
					backtoLZ2 = true;
    2a64:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <GoThrowingZone3>
					GoThrowingZone3 = false;
    2a68:	80 e2       	ldi	r24, 0x20	; 32
    2a6a:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <receiveAck>
					receiveAck = ' ';
    2a6e:	05 c0       	rjmp	.+10     	; 0x2a7a <_Z18gorockthegamefieldv+0x7f6>
    2a70:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <backtoLZ2>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ2 && task8 && !task9){
    2a74:	88 23       	and	r24, r24
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <_Z18gorockthegamefieldv+0x7f6>
    2a78:	41 c0       	rjmp	.+130    	; 0x2afc <_Z18gorockthegamefieldv+0x878>
    2a7a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <task8>
    2a7e:	88 23       	and	r24, r24
    2a80:	e9 f1       	breq	.+122    	; 0x2afc <_Z18gorockthegamefieldv+0x878>
    2a82:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <task9>
    2a86:	81 11       	cpse	r24, r1
    2a88:	3e c0       	rjmp	.+124    	; 0x2b06 <_Z18gorockthegamefieldv+0x882>
    2a8a:	ed e2       	ldi	r30, 0x2D	; 45
    2a8c:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	a0 e0       	ldi	r26, 0x00	; 0
    2a94:	b0 e4       	ldi	r27, 0x40	; 64
    2a96:	85 8b       	std	Z+21, r24	; 0x15
    2a98:	96 8b       	std	Z+22, r25	; 0x16
    2a9a:	a7 8b       	std	Z+23, r26	; 0x17
    2a9c:	b0 8f       	std	Z+24, r27	; 0x18
    2a9e:	11 8e       	std	Z+25, r1	; 0x19
    2aa0:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2aa2:	13 8e       	std	Z+27, r1	; 0x1b
    2aa4:	14 8e       	std	Z+28, r1	; 0x1c
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2aaa:	a0 ef       	ldi	r26, 0xF0	; 240
    2aac:	b1 e4       	ldi	r27, 0x41	; 65
    2aae:	85 8f       	std	Z+29, r24	; 0x1d
    2ab0:	96 8f       	std	Z+30, r25	; 0x1e
    2ab2:	a7 8f       	std	Z+31, r26	; 0x1f
    2ab4:	b0 a3       	std	Z+32, r27	; 0x20
    2ab6:	87 e0       	ldi	r24, 0x07	; 7
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
				////uart0_puts("back to lz2\t");
				compass.setPid(2.0,0,30);//2.0
				
					//movy(5300,Back,LZ2toTZ3);
					robotState = moving;
    2aba:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2abe:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2ac2:	82 e8       	ldi	r24, 0x82	; 130
    2ac4:	92 e0       	ldi	r25, 0x02	; 2
					if(abs(encoderY.getdistance()) >= 4000){
    2ac6:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2aca:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2ace:	9b 01       	movw	r18, r22
    2ad0:	77 23       	and	r23, r23
    2ad2:	24 f4       	brge	.+8      	; 0x2adc <_Z18gorockthegamefieldv+0x858>
    2ad4:	22 27       	eor	r18, r18
    2ad6:	33 27       	eor	r19, r19
    2ad8:	26 1b       	sub	r18, r22
    2ada:	37 0b       	sbc	r19, r23
    2adc:	20 3a       	cpi	r18, 0xA0	; 160
    2ade:	3f 40       	sbci	r19, 0x0F	; 15
    2ae0:	0c f4       	brge	.+2      	; 0x2ae4 <_Z18gorockthegamefieldv+0x860>
    2ae2:	fb c1       	rjmp	.+1014   	; 0x2eda <_Z18gorockthegamefieldv+0xc56>
    2ae4:	78 94       	sei
    2ae6:	e8 e6       	ldi	r30, 0x68	; 104
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
	PCICR |= (1<<PCIE2);
    2aea:	80 81       	ld	r24, Z
    2aec:	84 60       	ori	r24, 0x04	; 4
    2aee:	80 83       	st	Z, r24
    2af0:	ed e6       	ldi	r30, 0x6D	; 109
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    2af4:	80 81       	ld	r24, Z
    2af6:	80 68       	ori	r24, 0x80	; 128
    2af8:	80 83       	st	Z, r24
    2afa:	08 95       	ret
    2afc:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <task9>
					}
				////uart0_puts("\r\n");
			}
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
    2b00:	88 23       	and	r24, r24
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <_Z18gorockthegamefieldv+0x882>
    2b04:	ea c1       	rjmp	.+980    	; 0x2eda <_Z18gorockthegamefieldv+0xc56>
    2b06:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2b0a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2b0e:	07 97       	sbiw	r24, 0x07	; 7
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <_Z18gorockthegamefieldv+0x890>
    2b12:	e3 c1       	rjmp	.+966    	; 0x2eda <_Z18gorockthegamefieldv+0xc56>
    2b14:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
    2b18:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2b1c:	04 97       	sbiw	r24, 0x04	; 4
    2b1e:	09 f0       	breq	.+2      	; 0x2b22 <_Z18gorockthegamefieldv+0x89e>
    2b20:	dc c1       	rjmp	.+952    	; 0x2eda <_Z18gorockthegamefieldv+0xc56>
    2b22:	9d c1       	rjmp	.+826    	; 0x2e5e <_Z18gorockthegamefieldv+0xbda>
    2b24:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <task4>

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    2b28:	81 11       	cpse	r24, r1
    2b2a:	bf cb       	rjmp	.-2178   	; 0x22aa <_Z18gorockthegamefieldv+0x26>
    2b2c:	cb cb       	rjmp	.-2154   	; 0x22c4 <_Z18gorockthegamefieldv+0x40>
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
			
			/*if there is manual robot infront of automatic robot*/
			
			else{
				/*if there is manual robot ahead of automatic robot then goto throwing zone1*/
				GoThrowingZone1 = true;
    2b30:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <GoThrowingZone1>
    2b34:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <task4>
				task3 = task4 = false;
    2b38:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <task3>
    2b3c:	ec da       	rcall	.-2600   	; 0x2116 <_Z14updateZoneflagv>
				updateZoneflag();
    2b3e:	df cb       	rjmp	.-2114   	; 0x22fe <_Z18gorockthegamefieldv+0x7a>
    2b40:	85 e0       	ldi	r24, 0x05	; 5
    2b42:	90 e0       	ldi	r25, 0x00	; 0
		but yet to complete task5*/ 
		if(task4 && !task5){
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
				/*go directly to loading zone 2 and manual robot is waiting there*/
				where = inLZ1;
    2b44:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2b48:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <gotoLZ2>
				gotoLZ2 = true;
    2b52:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <ShuttleCockGiven>
				ShuttleCockGiven = true;	
    2b56:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <ShuttleCockArmGone>
				ShuttleCockArmGone = true;
    2b5a:	d1 cb       	rjmp	.-2142   	; 0x22fe <_Z18gorockthegamefieldv+0x7a>
				//holdposition();
			}	
		}
		else if(task6 && task7 ){
			if((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !alwaysTZ2){
				where = inLZ2;
    2b5c:	86 e0       	ldi	r24, 0x06	; 6
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2b64:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
				ManualInFrontOfLZ2 = false;
    2b68:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
				updateZoneflag();
    2b6c:	d4 da       	rcall	.-2648   	; 0x2116 <_Z14updateZoneflagv>
    2b6e:	a5 da       	rcall	.-2742   	; 0x20ba <_Z13Hold_Positionv>
				Hold_Position();
    2b70:	c6 cb       	rjmp	.-2164   	; 0x22fe <_Z18gorockthegamefieldv+0x7a>
    2b72:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
			}
			else if (ManualInFrontOfLZ2){
    2b76:	81 11       	cpse	r24, r1
    2b78:	b6 cb       	rjmp	.-2196   	; 0x22e6 <_Z18gorockthegamefieldv+0x62>
    2b7a:	bc cb       	rjmp	.-2184   	; 0x22f4 <_Z18gorockthegamefieldv+0x70>
    2b7c:	ed e2       	ldi	r30, 0x2D	; 45
    2b7e:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a0 e0       	ldi	r26, 0x00	; 0
    2b86:	b0 e4       	ldi	r27, 0x40	; 64
    2b88:	85 8b       	std	Z+21, r24	; 0x15
    2b8a:	96 8b       	std	Z+22, r25	; 0x16
    2b8c:	a7 8b       	std	Z+23, r26	; 0x17
    2b8e:	b0 8f       	std	Z+24, r27	; 0x18
    2b90:	11 8e       	std	Z+25, r1	; 0x19
    2b92:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2b94:	13 8e       	std	Z+27, r1	; 0x1b
    2b96:	14 8e       	std	Z+28, r1	; 0x1c
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2b9c:	a0 ef       	ldi	r26, 0xF0	; 240
    2b9e:	b1 e4       	ldi	r27, 0x41	; 65
    2ba0:	85 8f       	std	Z+29, r24	; 0x1d
    2ba2:	96 8f       	std	Z+30, r25	; 0x1e
    2ba4:	a7 8f       	std	Z+31, r26	; 0x1f
    2ba6:	b0 a3       	std	Z+32, r27	; 0x20
    2ba8:	88 e0       	ldi	r24, 0x08	; 8
    2baa:	90 e0       	ldi	r25, 0x00	; 0
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
		compass.setPid(2.0,0,30);
		//uart0_puts("hello\r\n");
		//movx(Throwingzone1.x,Front,STARTZONEtoCORNER);
		movDegree(8);
    2bac:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_Z9movDegreei>
    2bb0:	87 e0       	ldi	r24, 0x07	; 7
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
		robotState = moving;
    2bb4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2bb8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2bbc:	8a e8       	ldi	r24, 0x8A	; 138
    2bbe:	92 e0       	ldi	r25, 0x02	; 2
		//uart0_puts("going ahead \t");
		if(abs(encoderX.getdistance()) >= 4400){
    2bc0:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2bc4:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2bc8:	9b 01       	movw	r18, r22
    2bca:	77 23       	and	r23, r23
    2bcc:	24 f4       	brge	.+8      	; 0x2bd6 <_Z18gorockthegamefieldv+0x952>
    2bce:	22 27       	eor	r18, r18
    2bd0:	33 27       	eor	r19, r19
    2bd2:	26 1b       	sub	r18, r22
    2bd4:	37 0b       	sbc	r19, r23
    2bd6:	20 33       	cpi	r18, 0x30	; 48
    2bd8:	31 41       	sbci	r19, 0x11	; 17
    2bda:	0c f0       	brlt	.+2      	; 0x2bde <_Z18gorockthegamefieldv+0x95a>
    2bdc:	a4 cb       	rjmp	.-2232   	; 0x2326 <_Z18gorockthegamefieldv+0xa2>
    2bde:	d7 cc       	rjmp	.-1618   	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    2be0:	ed e6       	ldi	r30, 0x6D	; 109
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2be4:	80 81       	ld	r24, Z
    2be6:	8f 77       	andi	r24, 0x7F	; 127
    2be8:	80 83       	st	Z, r24
    2bea:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <startingAtFront>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
		linetrackerYjunctionWatchOff();
		startingAtFront = false;
    2bee:	86 e0       	ldi	r24, 0x06	; 6
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
		where = inLZ2;
    2bf2:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2bf6:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2bfa:	88 e0       	ldi	r24, 0x08	; 8
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
		robotState = notmoving;
    2bfe:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2c02:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c06:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
		BrakeMotor();
    2c0a:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2c0e:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2c12:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2c16:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2c1a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <directlyLZ2>
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
    2c1e:	81 11       	cpse	r24, r1
    2c20:	67 cc       	rjmp	.-1842   	; 0x24f0 <_Z18gorockthegamefieldv+0x26c>
    2c22:	74 cc       	rjmp	.-1816   	; 0x250c <_Z18gorockthegamefieldv+0x288>
    2c24:	87 e0       	ldi	r24, 0x07	; 7
    2c26:	90 e0       	ldi	r25, 0x00	; 0
	if(ShuttleCockGiven && ShuttleCockArmGone)
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
				robotState = moving;
    2c28:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2c2c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c30:	ed e2       	ldi	r30, 0x2D	; 45
    2c32:	f3 e0       	ldi	r31, 0x03	; 3
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a0 e0       	ldi	r26, 0x00	; 0
    2c3a:	b0 e4       	ldi	r27, 0x40	; 64
    2c3c:	85 8b       	std	Z+21, r24	; 0x15
    2c3e:	96 8b       	std	Z+22, r25	; 0x16
    2c40:	a7 8b       	std	Z+23, r26	; 0x17
    2c42:	b0 8f       	std	Z+24, r27	; 0x18
    2c44:	11 8e       	std	Z+25, r1	; 0x19
    2c46:	12 8e       	std	Z+26, r1	; 0x1a
		ki = i;
    2c48:	13 8e       	std	Z+27, r1	; 0x1b
    2c4a:	14 8e       	std	Z+28, r1	; 0x1c
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2c50:	a0 ef       	ldi	r26, 0xF0	; 240
    2c52:	b1 e4       	ldi	r27, 0x41	; 65
    2c54:	85 8f       	std	Z+29, r24	; 0x1d
    2c56:	96 8f       	std	Z+30, r25	; 0x1e
    2c58:	a7 8f       	std	Z+31, r26	; 0x1f
    2c5a:	b0 a3       	std	Z+32, r27	; 0x20
    2c5c:	44 e6       	ldi	r20, 0x64	; 100
				compass.setPid(2.0,0,30);
				Move_Yaxis(Throwingzone1.y+50,Front,LZ1toTZ1);
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	62 e0       	ldi	r22, 0x02	; 2
    2c62:	70 e0       	ldi	r23, 0x00	; 0
    2c64:	8e e9       	ldi	r24, 0x9E	; 158
    2c66:	97 e0       	ldi	r25, 0x07	; 7
    2c68:	c0 d8       	rcall	.-3712   	; 0x1dea <_Z10Move_Yaxisiij>
    2c6a:	82 e8       	ldi	r24, 0x82	; 130
    2c6c:	92 e0       	ldi	r25, 0x02	; 2
				//movy(Throwingzone1.y,Front,LZ1toTZ1);
				//uart0_puts("going tz1\t");
				if(abs(encoderY.getdistance()) >= 1600){
    2c6e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2c72:	0e 94 ab 20 	call	0x4156	; 0x4156 <__fixsfsi>
    2c76:	9b 01       	movw	r18, r22
    2c78:	77 23       	and	r23, r23
    2c7a:	24 f4       	brge	.+8      	; 0x2c84 <_Z18gorockthegamefieldv+0xa00>
    2c7c:	22 27       	eor	r18, r18
    2c7e:	33 27       	eor	r19, r19
    2c80:	26 1b       	sub	r18, r22
    2c82:	37 0b       	sbc	r19, r23
    2c84:	20 34       	cpi	r18, 0x40	; 64
    2c86:	36 40       	sbci	r19, 0x06	; 6
    2c88:	0c f0       	brlt	.+2      	; 0x2c8c <_Z18gorockthegamefieldv+0xa08>
    2c8a:	9b cc       	rjmp	.-1738   	; 0x25c2 <_Z18gorockthegamefieldv+0x33e>
    2c8c:	b7 cc       	rjmp	.-1682   	; 0x25fc <_Z18gorockthegamefieldv+0x378>
    2c8e:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <task3>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    2c92:	88 23       	and	r24, r24
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <_Z18gorockthegamefieldv+0xa14>
    2c96:	b2 cc       	rjmp	.-1692   	; 0x25fc <_Z18gorockthegamefieldv+0x378>
    2c98:	a0 cc       	rjmp	.-1728   	; 0x25da <_Z18gorockthegamefieldv+0x356>
    2c9a:	ed e6       	ldi	r30, 0x6D	; 109
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8f 77       	andi	r24, 0x7F	; 127
    2ca2:	80 83       	st	Z, r24
    2ca4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				linetrackerYjunctionWatchOff();
				//uart0_puts("reached throwing zone 1\r\n");
				BrakeMotor();
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	90 e0       	ldi	r25, 0x00	; 0
				//uart3_putc('1');
				where = inTZ1;
    2cac:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2cb0:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2cb4:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2cb8:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2cbc:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2cc0:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2cc4:	88 e0       	ldi	r24, 0x08	; 8
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2ccc:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2cd0:	95 cc       	rjmp	.-1750   	; 0x25fc <_Z18gorockthegamefieldv+0x378>
    2cd2:	f3 d9       	rcall	.-3098   	; 0x20ba <_Z13Hold_Positionv>
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
				//uart3_puts("Throwing \r\n");
				Hold_Position();
    2cd4:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <_b_Transmit_once>

				if(_b_Transmit_once)	//Stable_Robot() && 
    2cd8:	88 23       	and	r24, r24
    2cda:	09 f4       	brne	.+2      	; 0x2cde <_Z18gorockthegamefieldv+0xa5a>
    2cdc:	a1 cc       	rjmp	.-1726   	; 0x2620 <_Z18gorockthegamefieldv+0x39c>
    2cde:	9b cc       	rjmp	.-1738   	; 0x2616 <_Z18gorockthegamefieldv+0x392>
    2ce0:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <gotoLZ2>
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2ce4:	81 11       	cpse	r24, r1
    2ce6:	0d cd       	rjmp	.-1510   	; 0x2702 <_Z18gorockthegamefieldv+0x47e>
    2ce8:	50 cd       	rjmp	.-1376   	; 0x278a <_Z18gorockthegamefieldv+0x506>
    2cea:	ed e6       	ldi	r30, 0x6D	; 109
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	8f 77       	andi	r24, 0x7F	; 127
    2cf2:	80 83       	st	Z, r24
    2cf4:	85 e0       	ldi	r24, 0x05	; 5
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
				//uart0_puts("REached loading zone 1\r\n");
				linetrackerYjunctionWatchOff();
				where = inLZ1;
    2cf8:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2cfc:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2d00:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				BrakeMotor();
    2d04:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2d08:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2d0c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2d10:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2d14:	88 e0       	ldi	r24, 0x08	; 8
    2d16:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2d18:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2d1c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2d20:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <ShuttleCockGiven>
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2d24:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2d28:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <backtoLZ1>
				backtoLZ1 = false;
    2d2c:	3f cd       	rjmp	.-1410   	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    2d2e:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <gotoLZ2>
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
				//uart0_puts("reached loading zone 2\r\n");
				gotoLZ2 = false;
    2d32:	eb e6       	ldi	r30, 0x6B	; 107
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2d36:	80 81       	ld	r24, Z
    2d38:	8f 7e       	andi	r24, 0xEF	; 239
    2d3a:	80 83       	st	Z, r24
    2d3c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				linetrackerXjunctionWatchOff();
				BrakeMotor();
    2d40:	86 e0       	ldi	r24, 0x06	; 6
    2d42:	90 e0       	ldi	r25, 0x00	; 0
				where = inLZ2;
    2d44:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2d48:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2d4c:	88 e0       	ldi	r24, 0x08	; 8
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
				robotState = notmoving;
    2d50:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2d54:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2d58:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2d5c:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2d60:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2d64:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2d68:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <ShuttleCockGiven>
				encoderX.resetCount();
				encoderY.resetCount();
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2d6c:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2d70:	1d cd       	rjmp	.-1478   	; 0x27ac <_Z18gorockthegamefieldv+0x528>
    2d72:	83 e0       	ldi	r24, 0x03	; 3
    2d74:	90 e0       	ldi	r25, 0x00	; 0

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
				//uart0_puts("Reached tz2 \r\n");
				where = inTZ2;
    2d76:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2d7a:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2d7e:	ed e6       	ldi	r30, 0x6D	; 109
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2d82:	80 81       	ld	r24, Z
    2d84:	8f 77       	andi	r24, 0x7F	; 127
    2d86:	80 83       	st	Z, r24
    2d88:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2d8c:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2d90:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2d94:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2d98:	88 e0       	ldi	r24, 0x08	; 8
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
				linetrackerYjunctionWatchOff();
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2d9c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2da0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2da4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				BrakeMotor();
    2da8:	5e cd       	rjmp	.-1348   	; 0x2866 <_Z18gorockthegamefieldv+0x5e2>
			if(where == inTZ2 && robotState == notmoving){
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				velocity_robot[0] =0;
    2daa:	e4 eb       	ldi	r30, 0xB4	; 180
    2dac:	f3 e0       	ldi	r31, 0x03	; 3
    2dae:	11 82       	std	Z+1, r1	; 0x01
    2db0:	10 82       	st	Z, r1
				velocity_robot[1]=0;
    2db2:	13 82       	std	Z+3, r1	; 0x03
    2db4:	12 82       	std	Z+2, r1	; 0x02
				Hold_Position();
    2db6:	81 d9       	rcall	.-3326   	; 0x20ba <_Z13Hold_Positionv>
    2db8:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <_b_Transmit_once>
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
    2dbc:	88 23       	and	r24, r24
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <_Z18gorockthegamefieldv+0xb3e>
    2dc0:	6c cd       	rjmp	.-1320   	; 0x289a <_Z18gorockthegamefieldv+0x616>
    2dc2:	5e cd       	rjmp	.-1348   	; 0x2880 <_Z18gorockthegamefieldv+0x5fc>
    2dc4:	7a d9       	rcall	.-3340   	; 0x20ba <_Z13Hold_Positionv>
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
				Hold_Position();
    2dc6:	ed e6       	ldi	r30, 0x6D	; 109
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	8f 77       	andi	r24, 0x7F	; 127
    2dce:	80 83       	st	Z, r24
    2dd0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				//uart0_puts("reached loading zone 2 \r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2dd4:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2dd8:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2ddc:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2de0:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2de4:	86 e0       	ldi	r24, 0x06	; 6
    2de6:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2de8:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2dec:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2df0:	88 e0       	ldi	r24, 0x08	; 8
    2df2:	90 e0       	ldi	r25, 0x00	; 0
				robotState = notmoving;
    2df4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2df8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2dfc:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <ShuttleCockGiven>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2e00:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2e04:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <backtoLZ2>
				backtoLZ2 = false;
    2e08:	b5 cd       	rjmp	.-1174   	; 0x2974 <_Z18gorockthegamefieldv+0x6f0>
    2e0a:	ed e6       	ldi	r30, 0x6D	; 109
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8f 77       	andi	r24, 0x7F	; 127
    2e12:	80 83       	st	Z, r24
    2e14:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
				//uart0_puts("reached tz3\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2e18:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2e1c:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2e20:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2e24:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2e28:	88 e0       	ldi	r24, 0x08	; 8
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2e30:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2e34:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <GoThrowingZone3>
				GoThrowingZone3 = false;
    2e38:	84 e0       	ldi	r24, 0x04	; 4
				where = inTZ3;
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2e40:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2e44:	15 ce       	rjmp	.-982    	; 0x2a70 <_Z18gorockthegamefieldv+0x7ec>
    2e46:	39 d9       	rcall	.-3470   	; 0x20ba <_Z13Hold_Positionv>
				//velocity_robot[0] = velocity_robot[1] = velocity_robot[2] = 0;
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
    2e48:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_Z21Goto_Fence_And_Detectv>
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2e4c:	81 11       	cpse	r24, r1
    2e4e:	fd cd       	rjmp	.-1030   	; 0x2a4a <_Z18gorockthegamefieldv+0x7c6>
    2e50:	00 ce       	rjmp	.-1024   	; 0x2a52 <_Z18gorockthegamefieldv+0x7ce>
    2e52:	83 e3       	ldi	r24, 0x33	; 51
    2e54:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <_Z10uart3_putch>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
    2e58:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <_b_Transmit_once>
					_b_Transmit_once = false;
    2e5c:	fa cd       	rjmp	.-1036   	; 0x2a52 <_Z18gorockthegamefieldv+0x7ce>
    2e5e:	ed e6       	ldi	r30, 0x6D	; 109
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	8f 77       	andi	r24, 0x7F	; 127
    2e66:	80 83       	st	Z, r24
    2e68:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
				////uart0_puts("reached loading zone 2\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2e6c:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2e70:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2e74:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2e78:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    2e7c:	86 e0       	ldi	r24, 0x06	; 6
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2e80:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <where+0x1>
    2e84:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <where>
    2e88:	88 e0       	ldi	r24, 0x08	; 8
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
				robotState = notmoving;
    2e8c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2e90:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2e94:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <ShuttleCockGiven>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2e98:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2e9c:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <backtoLZ2>
				backtoLZ2 = false;
    2ea0:	08 95       	ret
    2ea2:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <where>
		BrakeMotor();
		Hold_Position();
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    2ea6:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <where+0x1>
    2eaa:	21 30       	cpi	r18, 0x01	; 1
    2eac:	31 05       	cpc	r19, r1
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <_Z18gorockthegamefieldv+0xc2e>
    2eb0:	6e cb       	rjmp	.-2340   	; 0x258e <_Z18gorockthegamefieldv+0x30a>
    2eb2:	07 cb       	rjmp	.-2546   	; 0x24c2 <_Z18gorockthegamefieldv+0x23e>
    2eb4:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <directlyLZ2>
			linetrackerXjunctionWatch();
			//uart0_puts("int on");
		}

	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    2eb8:	99 23       	and	r25, r25
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <_Z18gorockthegamefieldv+0xc3a>
    2ebc:	40 ca       	rjmp	.-2944   	; 0x233e <_Z18gorockthegamefieldv+0xba>
    2ebe:	4d ca       	rjmp	.-2918   	; 0x235a <_Z18gorockthegamefieldv+0xd6>
    2ec0:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <directlyLZ2>
    2ec4:	91 11       	cpse	r25, r1
    2ec6:	7b ca       	rjmp	.-2826   	; 0x23be <_Z18gorockthegamefieldv+0x13a>
    2ec8:	3a ca       	rjmp	.-2956   	; 0x233e <_Z18gorockthegamefieldv+0xba>
    2eca:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <where>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2ece:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <where+0x1>
    2ed2:	04 97       	sbiw	r24, 0x04	; 4
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <_Z18gorockthegamefieldv+0xc54>
    2ed6:	cc cd       	rjmp	.-1128   	; 0x2a70 <_Z18gorockthegamefieldv+0x7ec>
    2ed8:	b1 cd       	rjmp	.-1182   	; 0x2a3c <_Z18gorockthegamefieldv+0x7b8>
    2eda:	08 95       	ret

00002edc <__vector_9>:
    2edc:	1f 92       	push	r1
    2ede:	0f 92       	push	r0
}


/*When Junction on Linetracker X is deteced*/
ISR(PCINT0_vect)		
{
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	0f 92       	push	r0
    2ee4:	11 24       	eor	r1, r1
    2ee6:	0b b6       	in	r0, 0x3b	; 59
    2ee8:	0f 92       	push	r0
    2eea:	2f 93       	push	r18
    2eec:	3f 93       	push	r19
    2eee:	4f 93       	push	r20
    2ef0:	5f 93       	push	r21
    2ef2:	6f 93       	push	r22
    2ef4:	7f 93       	push	r23
    2ef6:	8f 93       	push	r24
    2ef8:	9f 93       	push	r25
    2efa:	af 93       	push	r26
    2efc:	bf 93       	push	r27
    2efe:	ef 93       	push	r30
    2f00:	ff 93       	push	r31
	if(!task1){
    2f02:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <task1>
    2f06:	81 11       	cpse	r24, r1
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <__vector_9+0x3a>
		task1 = true;			//reached to corner of loading zone1
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <task1>
		FlagChangeSetpointCompass = true;
    2f10:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <FlagChangeSetpointCompass>
    2f14:	22 c0       	rjmp	.+68     	; 0x2f5a <__vector_9+0x7e>
	}
	else if(!task5){
    2f16:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <task5>
    2f1a:	81 11       	cpse	r24, r1
    2f1c:	08 c0       	rjmp	.+16     	; 0x2f2e <__vector_9+0x52>
		task5 = true;			//reached loading zone 2 from loading zone 1
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <task5>
		FlagChangeSetpointCompass = true;
    2f24:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <FlagChangeSetpointCompass>
		BrakeMotor();
    2f28:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2f2c:	16 c0       	rjmp	.+44     	; 0x2f5a <__vector_9+0x7e>
	}
	else if(!xJunctionMeetFromTZ2){
    2f2e:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <xJunctionMeetFromTZ2>
    2f32:	81 11       	cpse	r24, r1
    2f34:	12 c0       	rjmp	.+36     	; 0x2f5a <__vector_9+0x7e>
		xJunctionMeetFromTZ2 = true;
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <xJunctionMeetFromTZ2>
		BrakeMotor();
    2f3c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2f40:	eb e6       	ldi	r30, 0x6B	; 107
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	8f 7e       	andi	r24, 0xEF	; 239
    2f48:	80 83       	st	Z, r24
    2f4a:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    2f4e:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
    2f52:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    2f56:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
		linetrackerXjunctionWatchOff();
		encoderX.resetCount();
		encoderY.resetCount();
	}
}
    2f5a:	ff 91       	pop	r31
    2f5c:	ef 91       	pop	r30
    2f5e:	bf 91       	pop	r27
    2f60:	af 91       	pop	r26
    2f62:	9f 91       	pop	r25
    2f64:	8f 91       	pop	r24
    2f66:	7f 91       	pop	r23
    2f68:	6f 91       	pop	r22
    2f6a:	5f 91       	pop	r21
    2f6c:	4f 91       	pop	r20
    2f6e:	3f 91       	pop	r19
    2f70:	2f 91       	pop	r18
    2f72:	0f 90       	pop	r0
    2f74:	0b be       	out	0x3b, r0	; 59
    2f76:	0f 90       	pop	r0
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	0f 90       	pop	r0
    2f7c:	1f 90       	pop	r1
    2f7e:	18 95       	reti

00002f80 <__vector_11>:


/*When Junction on Linetracker Y is detected*/
ISR(PCINT2_vect)
{
    2f80:	1f 92       	push	r1
    2f82:	0f 92       	push	r0
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	0f 92       	push	r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	0b b6       	in	r0, 0x3b	; 59
    2f8c:	0f 92       	push	r0
    2f8e:	2f 93       	push	r18
    2f90:	3f 93       	push	r19
    2f92:	4f 93       	push	r20
    2f94:	5f 93       	push	r21
    2f96:	6f 93       	push	r22
    2f98:	7f 93       	push	r23
    2f9a:	8f 93       	push	r24
    2f9c:	9f 93       	push	r25
    2f9e:	af 93       	push	r26
    2fa0:	bf 93       	push	r27
    2fa2:	ef 93       	push	r30
    2fa4:	ff 93       	push	r31
	if(!task2){
    2fa6:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <task2>
    2faa:	81 11       	cpse	r24, r1
    2fac:	06 c0       	rjmp	.+12     	; 0x2fba <__vector_11+0x3a>
		BrakeMotor();
    2fae:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
		task2 = true;		//reached to loading zone 1
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <task2>
    2fb8:	41 c0       	rjmp	.+130    	; 0x303c <__vector_11+0xbc>
	}
	else if(!task3){
    2fba:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <task3>
    2fbe:	81 11       	cpse	r24, r1
    2fc0:	08 c0       	rjmp	.+16     	; 0x2fd2 <__vector_11+0x52>
		_b_Transmit_once = true;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <_b_Transmit_once>
		task3 = true;		//reached throwing zone 1
    2fc8:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <task3>
		BrakeMotor();
    2fcc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2fd0:	35 c0       	rjmp	.+106    	; 0x303c <__vector_11+0xbc>
	}
		
	else if(!task4){
    2fd2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <task4>
    2fd6:	81 11       	cpse	r24, r1
    2fd8:	06 c0       	rjmp	.+12     	; 0x2fe6 <__vector_11+0x66>
		task4 = true;		//reached loading zone 1 from throwing zone 1
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <task4>
		 BrakeMotor();
    2fe0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2fe4:	2b c0       	rjmp	.+86     	; 0x303c <__vector_11+0xbc>
	}
	else if(!task6){
    2fe6:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <task6>
    2fea:	81 11       	cpse	r24, r1
    2fec:	08 c0       	rjmp	.+16     	; 0x2ffe <__vector_11+0x7e>
		_b_Transmit_once = true;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <_b_Transmit_once>
		task6 = true;		//reached throwing zone 2
    2ff4:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <task6>
		BrakeMotor();
    2ff8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2ffc:	1f c0       	rjmp	.+62     	; 0x303c <__vector_11+0xbc>
	}
		
	else if(!task7){
    2ffe:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <task7>
    3002:	81 11       	cpse	r24, r1
    3004:	06 c0       	rjmp	.+12     	; 0x3012 <__vector_11+0x92>
		task7 = true;		//reached loading zone 2 from throwing zone 2
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <task7>
		BrakeMotor();
    300c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    3010:	15 c0       	rjmp	.+42     	; 0x303c <__vector_11+0xbc>
	}
	else if(!task8){
    3012:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <task8>
    3016:	81 11       	cpse	r24, r1
    3018:	08 c0       	rjmp	.+16     	; 0x302a <__vector_11+0xaa>
		_b_Transmit_once = true;
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <_b_Transmit_once>
		task8 = true;		//reached throwing zone 3
    3020:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <task8>
		BrakeMotor();
    3024:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    3028:	09 c0       	rjmp	.+18     	; 0x303c <__vector_11+0xbc>
	}
	else if(!task9){
    302a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <task9>
    302e:	81 11       	cpse	r24, r1
    3030:	05 c0       	rjmp	.+10     	; 0x303c <__vector_11+0xbc>
		task9 = true;		//reached loading zone 2 from throwing zone 3
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <task9>
		BrakeMotor();
    3038:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
	}
}
    303c:	ff 91       	pop	r31
    303e:	ef 91       	pop	r30
    3040:	bf 91       	pop	r27
    3042:	af 91       	pop	r26
    3044:	9f 91       	pop	r25
    3046:	8f 91       	pop	r24
    3048:	7f 91       	pop	r23
    304a:	6f 91       	pop	r22
    304c:	5f 91       	pop	r21
    304e:	4f 91       	pop	r20
    3050:	3f 91       	pop	r19
    3052:	2f 91       	pop	r18
    3054:	0f 90       	pop	r0
    3056:	0b be       	out	0x3b, r0	; 59
    3058:	0f 90       	pop	r0
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	0f 90       	pop	r0
    305e:	1f 90       	pop	r1
    3060:	18 95       	reti

00003062 <main>:
////////////////////////////////////////////

int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
	INPUT(SHUTTLECOCKPIN);
    3062:	aa e0       	ldi	r26, 0x0A	; 10
    3064:	b1 e0       	ldi	r27, 0x01	; 1
    3066:	8c 91       	ld	r24, X
    3068:	8f 7b       	andi	r24, 0xBF	; 191
    306a:	8c 93       	st	X, r24
	INPUT(ZONEPIN);
    306c:	8c 91       	ld	r24, X
    306e:	8f 7e       	andi	r24, 0xEF	; 239
    3070:	8c 93       	st	X, r24
 	SET(SHUTTLECOCKPIN);
    3072:	eb e0       	ldi	r30, 0x0B	; 11
    3074:	f1 e0       	ldi	r31, 0x01	; 1
    3076:	80 81       	ld	r24, Z
    3078:	80 64       	ori	r24, 0x40	; 64
    307a:	80 83       	st	Z, r24
 	SET(ZONEPIN);
    307c:	80 81       	ld	r24, Z
    307e:	80 61       	ori	r24, 0x10	; 16
    3080:	80 83       	st	Z, r24
	///////PULL DOWN RACK PIN 
	INPUT(RACKPIN);
    3082:	8c 91       	ld	r24, X
    3084:	8b 7f       	andi	r24, 0xFB	; 251
    3086:	8c 93       	st	X, r24
	CLEAR(RACKPIN);
    3088:	80 81       	ld	r24, Z
    308a:	8b 7f       	andi	r24, 0xFB	; 251
    308c:	80 83       	st	Z, r24
	
	///Turn internal pullup for limit switch pin
	INPUT(RIGHT_LIMIT_SW);
    308e:	e1 e0       	ldi	r30, 0x01	; 1
    3090:	f1 e0       	ldi	r31, 0x01	; 1
    3092:	80 81       	ld	r24, Z
    3094:	87 7f       	andi	r24, 0xF7	; 247
    3096:	80 83       	st	Z, r24
	INPUT(LEFT_LIMIT_SW);
    3098:	6b 98       	cbi	0x0d, 3	; 13
	SET(RIGHT_LIMIT_SW);
    309a:	e2 e0       	ldi	r30, 0x02	; 2
    309c:	f1 e0       	ldi	r31, 0x01	; 1
    309e:	80 81       	ld	r24, Z
    30a0:	88 60       	ori	r24, 0x08	; 8
    30a2:	80 83       	st	Z, r24
	SET(LEFT_LIMIT_SW);
    30a4:	73 9a       	sbi	0x0e, 3	; 14
	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
	DDRK |= (1<<PK0);
    30a6:	e7 e0       	ldi	r30, 0x07	; 7
    30a8:	f1 e0       	ldi	r31, 0x01	; 1
    30aa:	80 81       	ld	r24, Z
    30ac:	81 60       	ori	r24, 0x01	; 1
    30ae:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK0); 
    30b0:	e8 e0       	ldi	r30, 0x08	; 8
    30b2:	f1 e0       	ldi	r31, 0x01	; 1
    30b4:	80 81       	ld	r24, Z
    30b6:	8e 7f       	andi	r24, 0xFE	; 254
    30b8:	80 83       	st	Z, r24
	/// INITIALIZE ALL THE UART
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    30ba:	87 e6       	ldi	r24, 0x67	; 103
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	66 d5       	rcall	.+2764   	; 0x3b8c <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
    30c0:	89 e1       	ldi	r24, 0x19	; 25
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	3a d6       	rcall	.+3188   	; 0x3d3a <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(9600,F_CPU));
    30c6:	87 e6       	ldi	r24, 0x67	; 103
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	c6 d6       	rcall	.+3468   	; 0x3e58 <_Z10uart3_initj>
	//INITIALIZE EVERYTHING ELSE
	initializeAll();
    30cc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13initializeAllv>
	
	char rcvdata = 't';
	sei();
    while (1) 
    {
 		gorockthegamefield();
    30d0:	78 94       	sei
    30d2:	d8 d8       	rcall	.-3664   	; 0x2284 <_Z18gorockthegamefieldv>
	
 		calculatevel();
    30d4:	0e 94 4b 08 	call	0x1096	; 0x1096 <_Z12calculatevelv>
    30d8:	fc cf       	rjmp	.-8      	; 0x30d2 <main+0x70>

000030da <_GLOBAL__sub_I_compassPID>:
#include "hmccompass.h"
#include "MPU6050.h"
#include "General-function.h"


static MPU6050 mpu;
    30da:	86 ef       	ldi	r24, 0xF6	; 246
    30dc:	93 e0       	ldi	r25, 0x03	; 3
    30de:	3d d0       	rcall	.+122    	; 0x315a <_ZN7MPU6050C1Ev>
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    30e0:	ef e6       	ldi	r30, 0x6F	; 111
    30e2:	f3 e0       	ldi	r31, 0x03	; 3
    30e4:	10 86       	std	Z+8, r1	; 0x08
    30e6:	11 86       	std	Z+9, r1	; 0x09
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	80 8b       	std	Z+16, r24	; 0x10
    30ec:	ee e4       	ldi	r30, 0x4E	; 78
    30ee:	f3 e0       	ldi	r31, 0x03	; 3
    30f0:	10 86       	std	Z+8, r1	; 0x08
    30f2:	11 86       	std	Z+9, r1	; 0x09
    30f4:	80 8b       	std	Z+16, r24	; 0x10
    30f6:	ed e2       	ldi	r30, 0x2D	; 45
    30f8:	f3 e0       	ldi	r31, 0x03	; 3
    30fa:	10 86       	std	Z+8, r1	; 0x08
    30fc:	11 86       	std	Z+9, r1	; 0x09
    30fe:	80 8b       	std	Z+16, r24	; 0x10
    3100:	ec e0       	ldi	r30, 0x0C	; 12
    3102:	f3 e0       	ldi	r31, 0x03	; 3
    3104:	10 86       	std	Z+8, r1	; 0x08
    3106:	11 86       	std	Z+9, r1	; 0x09
    3108:	80 8b       	std	Z+16, r24	; 0x10
    310a:	eb ee       	ldi	r30, 0xEB	; 235
    310c:	f2 e0       	ldi	r31, 0x02	; 2
    310e:	10 86       	std	Z+8, r1	; 0x08
    3110:	11 86       	std	Z+9, r1	; 0x09
    3112:	80 8b       	std	Z+16, r24	; 0x10
    3114:	ea ec       	ldi	r30, 0xCA	; 202
    3116:	f2 e0       	ldi	r31, 0x02	; 2
    3118:	10 86       	std	Z+8, r1	; 0x08
    311a:	11 86       	std	Z+9, r1	; 0x09
    311c:	80 8b       	std	Z+16, r24	; 0x10
    311e:	e9 ea       	ldi	r30, 0xA9	; 169
    3120:	f2 e0       	ldi	r31, 0x02	; 2
    3122:	10 86       	std	Z+8, r1	; 0x08
    3124:	11 86       	std	Z+9, r1	; 0x09
    3126:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    3128:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <encoderX+0x1>
    312c:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <encoderX>
			Init_encoder_interrupt();
    3130:	8a e8       	ldi	r24, 0x8A	; 138
    3132:	92 e0       	ldi	r25, 0x02	; 2
    3134:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    3138:	8a e8       	ldi	r24, 0x8A	; 138
    313a:	92 e0       	ldi	r25, 0x02	; 2
    313c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    3140:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    3144:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
			Init_encoder_interrupt();
    3148:	82 e8       	ldi	r24, 0x82	; 130
    314a:	92 e0       	ldi	r25, 0x02	; 2
    314c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    3150:	82 e8       	ldi	r24, 0x82	; 130
    3152:	92 e0       	ldi	r25, 0x02	; 2
    3154:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
    3158:	08 95       	ret

0000315a <_ZN7MPU6050C1Ev>:

// Get current threshold value
uint8_t MPU6050::getThreshold(void)
{
	return actualThreshold;
}
    315a:	fc 01       	movw	r30, r24
    315c:	14 ae       	std	Z+60, r1	; 0x3c
    315e:	15 ae       	std	Z+61, r1	; 0x3d
    3160:	16 ae       	std	Z+62, r1	; 0x3e
    3162:	17 ae       	std	Z+63, r1	; 0x3f
    3164:	dc 01       	movw	r26, r24
    3166:	a0 5c       	subi	r26, 0xC0	; 192
    3168:	bf 4f       	sbci	r27, 0xFF	; 255
    316a:	1d 92       	st	X+, r1
    316c:	1d 92       	st	X+, r1
    316e:	1d 92       	st	X+, r1
    3170:	1c 92       	st	X, r1
    3172:	13 97       	sbiw	r26, 0x03	; 3
    3174:	14 96       	adiw	r26, 0x04	; 4
    3176:	1d 92       	st	X+, r1
    3178:	1d 92       	st	X+, r1
    317a:	1d 92       	st	X+, r1
    317c:	1c 92       	st	X, r1
    317e:	13 97       	sbiw	r26, 0x03	; 3
    3180:	d4 96       	adiw	r26, 0x34	; 52
    3182:	1c 92       	st	X, r1
    3184:	d0 97       	sbiw	r26, 0x30	; 48
    3186:	1d 92       	st	X+, r1
    3188:	1d 92       	st	X+, r1
    318a:	1d 92       	st	X+, r1
    318c:	1c 92       	st	X, r1
    318e:	13 97       	sbiw	r26, 0x03	; 3
    3190:	14 96       	adiw	r26, 0x04	; 4
    3192:	1d 92       	st	X+, r1
    3194:	1d 92       	st	X+, r1
    3196:	1d 92       	st	X+, r1
    3198:	1c 92       	st	X, r1
    319a:	13 97       	sbiw	r26, 0x03	; 3
    319c:	14 96       	adiw	r26, 0x04	; 4
    319e:	1d 92       	st	X+, r1
    31a0:	1d 92       	st	X+, r1
    31a2:	1d 92       	st	X+, r1
    31a4:	1c 92       	st	X, r1
    31a6:	13 97       	sbiw	r26, 0x03	; 3
    31a8:	10 aa       	std	Z+48, r1	; 0x30
    31aa:	11 aa       	std	Z+49, r1	; 0x31
    31ac:	12 aa       	std	Z+50, r1	; 0x32
    31ae:	13 aa       	std	Z+51, r1	; 0x33
    31b0:	14 aa       	std	Z+52, r1	; 0x34
    31b2:	15 aa       	std	Z+53, r1	; 0x35
    31b4:	16 aa       	std	Z+54, r1	; 0x36
    31b6:	17 aa       	std	Z+55, r1	; 0x37
    31b8:	10 ae       	std	Z+56, r1	; 0x38
    31ba:	11 ae       	std	Z+57, r1	; 0x39
    31bc:	12 ae       	std	Z+58, r1	; 0x3a
    31be:	13 ae       	std	Z+59, r1	; 0x3b
    31c0:	94 96       	adiw	r26, 0x24	; 36
    31c2:	1d 92       	st	X+, r1
    31c4:	1d 92       	st	X+, r1
    31c6:	1d 92       	st	X+, r1
    31c8:	1c 92       	st	X, r1
    31ca:	13 97       	sbiw	r26, 0x03	; 3
    31cc:	18 97       	sbiw	r26, 0x08	; 8
    31ce:	4f e3       	ldi	r20, 0x3F	; 63
    31d0:	5e e1       	ldi	r21, 0x1E	; 30
    31d2:	6a ef       	ldi	r22, 0xFA	; 250
    31d4:	7b e3       	ldi	r23, 0x3B	; 59
    31d6:	4d 93       	st	X+, r20
    31d8:	5d 93       	st	X+, r21
    31da:	6d 93       	st	X+, r22
    31dc:	7c 93       	st	X, r23
    31de:	13 97       	sbiw	r26, 0x03	; 3
    31e0:	e0 59       	subi	r30, 0x90	; 144
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	80 e4       	ldi	r24, 0x40	; 64
    31e6:	9a ed       	ldi	r25, 0xDA	; 218
    31e8:	af e7       	ldi	r26, 0x7F	; 127
    31ea:	b8 e3       	ldi	r27, 0x38	; 56
    31ec:	80 83       	st	Z, r24
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	a2 83       	std	Z+2, r26	; 0x02
    31f2:	b3 83       	std	Z+3, r27	; 0x03
    31f4:	08 95       	ret

000031f6 <_ZN7MPU60504InitEv>:
    31f6:	2f ef       	ldi	r18, 0xFF	; 255
    31f8:	82 e5       	ldi	r24, 0x52	; 82
    31fa:	97 e0       	ldi	r25, 0x07	; 7
    31fc:	21 50       	subi	r18, 0x01	; 1
    31fe:	80 40       	sbci	r24, 0x00	; 0
    3200:	90 40       	sbci	r25, 0x00	; 0
    3202:	e1 f7       	brne	.-8      	; 0x31fc <_ZN7MPU60504InitEv+0x6>
    3204:	00 c0       	rjmp	.+0      	; 0x3206 <_ZN7MPU60504InitEv+0x10>
    3206:	00 00       	nop
    3208:	80 ed       	ldi	r24, 0xD0	; 208
    320a:	ce d3       	rcall	.+1948   	; 0x39a8 <_Z9i2c_starth>
    320c:	8b e6       	ldi	r24, 0x6B	; 107
    320e:	39 d4       	rcall	.+2162   	; 0x3a82 <_Z9i2c_writeh>
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	37 d4       	rcall	.+2158   	; 0x3a82 <_Z9i2c_writeh>
    3214:	f2 d3       	rcall	.+2020   	; 0x39fa <_Z8i2c_stopv>
    3216:	80 ed       	ldi	r24, 0xD0	; 208
    3218:	c7 d3       	rcall	.+1934   	; 0x39a8 <_Z9i2c_starth>
    321a:	89 e1       	ldi	r24, 0x19	; 25
    321c:	32 d4       	rcall	.+2148   	; 0x3a82 <_Z9i2c_writeh>
    321e:	89 e1       	ldi	r24, 0x19	; 25
    3220:	30 d4       	rcall	.+2144   	; 0x3a82 <_Z9i2c_writeh>
    3222:	eb d3       	rcall	.+2006   	; 0x39fa <_Z8i2c_stopv>
    3224:	80 ed       	ldi	r24, 0xD0	; 208
    3226:	c0 d3       	rcall	.+1920   	; 0x39a8 <_Z9i2c_starth>
    3228:	8a e1       	ldi	r24, 0x1A	; 26
    322a:	2b d4       	rcall	.+2134   	; 0x3a82 <_Z9i2c_writeh>
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	29 d4       	rcall	.+2130   	; 0x3a82 <_Z9i2c_writeh>
    3230:	e4 d3       	rcall	.+1992   	; 0x39fa <_Z8i2c_stopv>
    3232:	80 ed       	ldi	r24, 0xD0	; 208
    3234:	b9 d3       	rcall	.+1906   	; 0x39a8 <_Z9i2c_starth>
    3236:	8b e1       	ldi	r24, 0x1B	; 27
    3238:	24 d4       	rcall	.+2120   	; 0x3a82 <_Z9i2c_writeh>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	22 d4       	rcall	.+2116   	; 0x3a82 <_Z9i2c_writeh>
    323e:	dd d3       	rcall	.+1978   	; 0x39fa <_Z8i2c_stopv>
    3240:	80 ed       	ldi	r24, 0xD0	; 208
    3242:	b2 d3       	rcall	.+1892   	; 0x39a8 <_Z9i2c_starth>
    3244:	88 e3       	ldi	r24, 0x38	; 56
    3246:	1d d4       	rcall	.+2106   	; 0x3a82 <_Z9i2c_writeh>
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	1b d4       	rcall	.+2102   	; 0x3a82 <_Z9i2c_writeh>
    324c:	d6 d3       	rcall	.+1964   	; 0x39fa <_Z8i2c_stopv>
    324e:	80 ed       	ldi	r24, 0xD0	; 208
    3250:	ab d3       	rcall	.+1878   	; 0x39a8 <_Z9i2c_starth>
    3252:	8c e1       	ldi	r24, 0x1C	; 28
    3254:	16 d4       	rcall	.+2092   	; 0x3a82 <_Z9i2c_writeh>
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	14 d4       	rcall	.+2088   	; 0x3a82 <_Z9i2c_writeh>
    325a:	cf c3       	rjmp	.+1950   	; 0x39fa <_Z8i2c_stopv>
    325c:	08 95       	ret

0000325e <_ZN7MPU605017startReadLocationEh>:
    325e:	cf 93       	push	r28
    3260:	c6 2f       	mov	r28, r22
    3262:	80 ed       	ldi	r24, 0xD0	; 208
    3264:	d3 d3       	rcall	.+1958   	; 0x3a0c <_Z14i2c_start_waith>
    3266:	8c 2f       	mov	r24, r28
    3268:	0c d4       	rcall	.+2072   	; 0x3a82 <_Z9i2c_writeh>
    326a:	81 ed       	ldi	r24, 0xD1	; 209
    326c:	c4 d3       	rcall	.+1928   	; 0x39f6 <_Z13i2c_rep_starth>
    326e:	cf 91       	pop	r28
    3270:	08 95       	ret

00003272 <_ZN7MPU605012readRawAccelEv>:
    3272:	af 92       	push	r10
    3274:	bf 92       	push	r11
    3276:	cf 92       	push	r12
    3278:	df 92       	push	r13
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	8c 01       	movw	r16, r24
    3288:	eb 01       	movw	r28, r22
    328a:	6b e3       	ldi	r22, 0x3B	; 59
    328c:	ce 01       	movw	r24, r28
    328e:	e7 df       	rcall	.-50     	; 0x325e <_ZN7MPU605017startReadLocationEh>
    3290:	0a d4       	rcall	.+2068   	; 0x3aa6 <_Z11i2c_readAckv>
    3292:	a8 2e       	mov	r10, r24
    3294:	08 d4       	rcall	.+2064   	; 0x3aa6 <_Z11i2c_readAckv>
    3296:	b8 2e       	mov	r11, r24
    3298:	06 d4       	rcall	.+2060   	; 0x3aa6 <_Z11i2c_readAckv>
    329a:	c8 2e       	mov	r12, r24
    329c:	04 d4       	rcall	.+2056   	; 0x3aa6 <_Z11i2c_readAckv>
    329e:	e8 2e       	mov	r14, r24
    32a0:	02 d4       	rcall	.+2052   	; 0x3aa6 <_Z11i2c_readAckv>
    32a2:	d8 2e       	mov	r13, r24
    32a4:	0b d4       	rcall	.+2070   	; 0x3abc <_Z11i2c_readNakv>
    32a6:	f8 2e       	mov	r15, r24
    32a8:	6b 2d       	mov	r22, r11
    32aa:	70 e0       	ldi	r23, 0x00	; 0
    32ac:	7a 29       	or	r23, r10
    32ae:	07 2e       	mov	r0, r23
    32b0:	00 0c       	add	r0, r0
    32b2:	88 0b       	sbc	r24, r24
    32b4:	99 0b       	sbc	r25, r25
    32b6:	82 d7       	rcall	.+3844   	; 0x41bc <__floatsisf>
    32b8:	fe 01       	movw	r30, r28
    32ba:	e8 5b       	subi	r30, 0xB8	; 184
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	20 81       	ld	r18, Z
    32c0:	31 81       	ldd	r19, Z+1	; 0x01
    32c2:	42 81       	ldd	r20, Z+2	; 0x02
    32c4:	53 81       	ldd	r21, Z+3	; 0x03
    32c6:	11 d6       	rcall	.+3106   	; 0x3eea <__subsf3>
    32c8:	68 83       	st	Y, r22
    32ca:	79 83       	std	Y+1, r23	; 0x01
    32cc:	8a 83       	std	Y+2, r24	; 0x02
    32ce:	9b 83       	std	Y+3, r25	; 0x03
    32d0:	6e 2d       	mov	r22, r14
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	7c 29       	or	r23, r12
    32d6:	07 2e       	mov	r0, r23
    32d8:	00 0c       	add	r0, r0
    32da:	88 0b       	sbc	r24, r24
    32dc:	99 0b       	sbc	r25, r25
    32de:	6e d7       	rcall	.+3804   	; 0x41bc <__floatsisf>
    32e0:	fe 01       	movw	r30, r28
    32e2:	e4 5b       	subi	r30, 0xB4	; 180
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	20 81       	ld	r18, Z
    32e8:	31 81       	ldd	r19, Z+1	; 0x01
    32ea:	42 81       	ldd	r20, Z+2	; 0x02
    32ec:	53 81       	ldd	r21, Z+3	; 0x03
    32ee:	fd d5       	rcall	.+3066   	; 0x3eea <__subsf3>
    32f0:	6c 83       	std	Y+4, r22	; 0x04
    32f2:	7d 83       	std	Y+5, r23	; 0x05
    32f4:	8e 83       	std	Y+6, r24	; 0x06
    32f6:	9f 83       	std	Y+7, r25	; 0x07
    32f8:	6f 2d       	mov	r22, r15
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	7d 29       	or	r23, r13
    32fe:	07 2e       	mov	r0, r23
    3300:	00 0c       	add	r0, r0
    3302:	88 0b       	sbc	r24, r24
    3304:	99 0b       	sbc	r25, r25
    3306:	5a d7       	rcall	.+3764   	; 0x41bc <__floatsisf>
    3308:	68 87       	std	Y+8, r22	; 0x08
    330a:	79 87       	std	Y+9, r23	; 0x09
    330c:	8a 87       	std	Y+10, r24	; 0x0a
    330e:	9b 87       	std	Y+11, r25	; 0x0b
    3310:	74 d3       	rcall	.+1768   	; 0x39fa <_Z8i2c_stopv>
    3312:	8c e0       	ldi	r24, 0x0C	; 12
    3314:	fe 01       	movw	r30, r28
    3316:	d8 01       	movw	r26, r16
    3318:	01 90       	ld	r0, Z+
    331a:	0d 92       	st	X+, r0
    331c:	8a 95       	dec	r24
    331e:	e1 f7       	brne	.-8      	; 0x3318 <_ZN7MPU605012readRawAccelEv+0xa6>
    3320:	c8 01       	movw	r24, r16
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	1f 91       	pop	r17
    3328:	0f 91       	pop	r16
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	df 90       	pop	r13
    3330:	cf 90       	pop	r12
    3332:	bf 90       	pop	r11
    3334:	af 90       	pop	r10
    3336:	08 95       	ret

00003338 <_ZN7MPU605018readNormalizeAccelEv>:
    3338:	af 92       	push	r10
    333a:	bf 92       	push	r11
    333c:	cf 92       	push	r12
    333e:	df 92       	push	r13
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	2c 97       	sbiw	r28, 0x0c	; 12
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	5c 01       	movw	r10, r24
    335e:	8b 01       	movw	r16, r22
    3360:	ce 01       	movw	r24, r28
    3362:	01 96       	adiw	r24, 0x01	; 1
    3364:	86 df       	rcall	.-244    	; 0x3272 <_ZN7MPU605012readRawAccelEv>
    3366:	f8 01       	movw	r30, r16
    3368:	e0 59       	subi	r30, 0x90	; 144
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	c0 80       	ld	r12, Z
    336e:	d1 80       	ldd	r13, Z+1	; 0x01
    3370:	e2 80       	ldd	r14, Z+2	; 0x02
    3372:	f3 80       	ldd	r15, Z+3	; 0x03
    3374:	a7 01       	movw	r20, r14
    3376:	96 01       	movw	r18, r12
    3378:	f8 01       	movw	r30, r16
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    3386:	f8 01       	movw	r30, r16
    3388:	60 8f       	std	Z+24, r22	; 0x18
    338a:	71 8f       	std	Z+25, r23	; 0x19
    338c:	82 8f       	std	Z+26, r24	; 0x1a
    338e:	93 8f       	std	Z+27, r25	; 0x1b
    3390:	a7 01       	movw	r20, r14
    3392:	96 01       	movw	r18, r12
    3394:	64 81       	ldd	r22, Z+4	; 0x04
    3396:	75 81       	ldd	r23, Z+5	; 0x05
    3398:	86 81       	ldd	r24, Z+6	; 0x06
    339a:	97 81       	ldd	r25, Z+7	; 0x07
    339c:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    33a0:	f8 01       	movw	r30, r16
    33a2:	64 8f       	std	Z+28, r22	; 0x1c
    33a4:	75 8f       	std	Z+29, r23	; 0x1d
    33a6:	86 8f       	std	Z+30, r24	; 0x1e
    33a8:	97 8f       	std	Z+31, r25	; 0x1f
    33aa:	a7 01       	movw	r20, r14
    33ac:	96 01       	movw	r18, r12
    33ae:	60 85       	ldd	r22, Z+8	; 0x08
    33b0:	71 85       	ldd	r23, Z+9	; 0x09
    33b2:	82 85       	ldd	r24, Z+10	; 0x0a
    33b4:	93 85       	ldd	r25, Z+11	; 0x0b
    33b6:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__mulsf3>
    33ba:	f8 01       	movw	r30, r16
    33bc:	60 a3       	std	Z+32, r22	; 0x20
    33be:	71 a3       	std	Z+33, r23	; 0x21
    33c0:	82 a3       	std	Z+34, r24	; 0x22
    33c2:	93 a3       	std	Z+35, r25	; 0x23
    33c4:	8c e0       	ldi	r24, 0x0C	; 12
    33c6:	78 96       	adiw	r30, 0x18	; 24
    33c8:	d5 01       	movw	r26, r10
    33ca:	01 90       	ld	r0, Z+
    33cc:	0d 92       	st	X+, r0
    33ce:	8a 95       	dec	r24
    33d0:	e1 f7       	brne	.-8      	; 0x33ca <_ZN7MPU605018readNormalizeAccelEv+0x92>
    33d2:	c5 01       	movw	r24, r10
    33d4:	2c 96       	adiw	r28, 0x0c	; 12
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	1f 91       	pop	r17
    33e6:	0f 91       	pop	r16
    33e8:	ff 90       	pop	r15
    33ea:	ef 90       	pop	r14
    33ec:	df 90       	pop	r13
    33ee:	cf 90       	pop	r12
    33f0:	bf 90       	pop	r11
    33f2:	af 90       	pop	r10
    33f4:	08 95       	ret

000033f6 <_ZN7MPU605011readRawGyroEv>:
    33f6:	ff 92       	push	r15
    33f8:	0f 93       	push	r16
    33fa:	1f 93       	push	r17
    33fc:	cf 93       	push	r28
    33fe:	df 93       	push	r29
    3400:	8c 01       	movw	r16, r24
    3402:	eb 01       	movw	r28, r22
    3404:	63 e4       	ldi	r22, 0x43	; 67
    3406:	ce 01       	movw	r24, r28
    3408:	2a df       	rcall	.-428    	; 0x325e <_ZN7MPU605017startReadLocationEh>
    340a:	4d d3       	rcall	.+1690   	; 0x3aa6 <_Z11i2c_readAckv>
    340c:	f8 2e       	mov	r15, r24
    340e:	4b d3       	rcall	.+1686   	; 0x3aa6 <_Z11i2c_readAckv>
    3410:	6f 2d       	mov	r22, r15
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	76 2f       	mov	r23, r22
    3416:	66 27       	eor	r22, r22
    3418:	68 2b       	or	r22, r24
    341a:	07 2e       	mov	r0, r23
    341c:	00 0c       	add	r0, r0
    341e:	88 0b       	sbc	r24, r24
    3420:	99 0b       	sbc	r25, r25
    3422:	cc d6       	rcall	.+3480   	; 0x41bc <__floatsisf>
    3424:	6c 87       	std	Y+12, r22	; 0x0c
    3426:	7d 87       	std	Y+13, r23	; 0x0d
    3428:	8e 87       	std	Y+14, r24	; 0x0e
    342a:	9f 87       	std	Y+15, r25	; 0x0f
    342c:	3c d3       	rcall	.+1656   	; 0x3aa6 <_Z11i2c_readAckv>
    342e:	f8 2e       	mov	r15, r24
    3430:	3a d3       	rcall	.+1652   	; 0x3aa6 <_Z11i2c_readAckv>
    3432:	6f 2d       	mov	r22, r15
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	76 2f       	mov	r23, r22
    3438:	66 27       	eor	r22, r22
    343a:	68 2b       	or	r22, r24
    343c:	07 2e       	mov	r0, r23
    343e:	00 0c       	add	r0, r0
    3440:	88 0b       	sbc	r24, r24
    3442:	99 0b       	sbc	r25, r25
    3444:	bb d6       	rcall	.+3446   	; 0x41bc <__floatsisf>
    3446:	68 8b       	std	Y+16, r22	; 0x10
    3448:	79 8b       	std	Y+17, r23	; 0x11
    344a:	8a 8b       	std	Y+18, r24	; 0x12
    344c:	9b 8b       	std	Y+19, r25	; 0x13
    344e:	2b d3       	rcall	.+1622   	; 0x3aa6 <_Z11i2c_readAckv>
    3450:	f8 2e       	mov	r15, r24
    3452:	34 d3       	rcall	.+1640   	; 0x3abc <_Z11i2c_readNakv>
    3454:	6f 2d       	mov	r22, r15
    3456:	70 e0       	ldi	r23, 0x00	; 0
    3458:	76 2f       	mov	r23, r22
    345a:	66 27       	eor	r22, r22
    345c:	68 2b       	or	r22, r24
    345e:	07 2e       	mov	r0, r23
    3460:	00 0c       	add	r0, r0
    3462:	88 0b       	sbc	r24, r24
    3464:	99 0b       	sbc	r25, r25
    3466:	aa d6       	rcall	.+3412   	; 0x41bc <__floatsisf>
    3468:	6c 8b       	std	Y+20, r22	; 0x14
    346a:	7d 8b       	std	Y+21, r23	; 0x15
    346c:	8e 8b       	std	Y+22, r24	; 0x16
    346e:	9f 8b       	std	Y+23, r25	; 0x17
    3470:	c4 d2       	rcall	.+1416   	; 0x39fa <_Z8i2c_stopv>
    3472:	8c e0       	ldi	r24, 0x0C	; 12
    3474:	fe 01       	movw	r30, r28
    3476:	3c 96       	adiw	r30, 0x0c	; 12
    3478:	d8 01       	movw	r26, r16
    347a:	01 90       	ld	r0, Z+
    347c:	0d 92       	st	X+, r0
    347e:	8a 95       	dec	r24
    3480:	e1 f7       	brne	.-8      	; 0x347a <_ZN7MPU605011readRawGyroEv+0x84>
    3482:	c8 01       	movw	r24, r16
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	1f 91       	pop	r17
    348a:	0f 91       	pop	r16
    348c:	ff 90       	pop	r15
    348e:	08 95       	ret

00003490 <_ZN7MPU605012setThresholdEh>:

// Set treshold value
void MPU6050::setThreshold(uint8_t multiple)
{
    3490:	cf 92       	push	r12
    3492:	df 92       	push	r13
    3494:	ef 92       	push	r14
    3496:	ff 92       	push	r15
    3498:	1f 93       	push	r17
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	ec 01       	movw	r28, r24
    34a0:	16 2f       	mov	r17, r22
	if (multiple > 0)
    34a2:	66 23       	and	r22, r22
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <_ZN7MPU605012setThresholdEh+0x18>
    34a6:	3b c0       	rjmp	.+118    	; 0x351e <_ZN7MPU605012setThresholdEh+0x8e>
	{
		// If not calibrated, need calibrate
		if (!useCalibrate)
    34a8:	fc 01       	movw	r30, r24
    34aa:	e8 58       	subi	r30, 0x88	; 136
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	80 81       	ld	r24, Z
    34b0:	81 11       	cpse	r24, r1
    34b2:	03 c0       	rjmp	.+6      	; 0x34ba <_ZN7MPU605012setThresholdEh+0x2a>
		{
			calibrateGyro();
    34b4:	62 e3       	ldi	r22, 0x32	; 50
    34b6:	ce 01       	movw	r24, r28
    34b8:	51 d0       	rcall	.+162    	; 0x355c <_ZN7MPU605013calibrateGyroEh>
		}

		// Calculate threshold vectors
		tg.XAxis = th.XAxis * multiple;
    34ba:	61 2f       	mov	r22, r17
    34bc:	70 e0       	ldi	r23, 0x00	; 0
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	7c d6       	rcall	.+3320   	; 0x41bc <__floatsisf>
    34c4:	6b 01       	movw	r12, r22
    34c6:	7c 01       	movw	r14, r24
    34c8:	9b 01       	movw	r18, r22
    34ca:	ac 01       	movw	r20, r24
    34cc:	fe 01       	movw	r30, r28
    34ce:	ec 5a       	subi	r30, 0xAC	; 172
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	60 81       	ld	r22, Z
    34d4:	71 81       	ldd	r23, Z+1	; 0x01
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	93 81       	ldd	r25, Z+3	; 0x03
    34da:	89 d7       	rcall	.+3858   	; 0x43ee <__mulsf3>
    34dc:	68 ab       	std	Y+48, r22	; 0x30
    34de:	79 ab       	std	Y+49, r23	; 0x31
    34e0:	8a ab       	std	Y+50, r24	; 0x32
    34e2:	9b ab       	std	Y+51, r25	; 0x33
		tg.YAxis = th.YAxis * multiple;
    34e4:	a7 01       	movw	r20, r14
    34e6:	96 01       	movw	r18, r12
    34e8:	fe 01       	movw	r30, r28
    34ea:	e8 5a       	subi	r30, 0xA8	; 168
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	7b d7       	rcall	.+3830   	; 0x43ee <__mulsf3>
    34f8:	6c ab       	std	Y+52, r22	; 0x34
    34fa:	7d ab       	std	Y+53, r23	; 0x35
    34fc:	8e ab       	std	Y+54, r24	; 0x36
    34fe:	9f ab       	std	Y+55, r25	; 0x37
		tg.ZAxis = th.ZAxis * multiple;
    3500:	a7 01       	movw	r20, r14
    3502:	96 01       	movw	r18, r12
    3504:	fe 01       	movw	r30, r28
    3506:	e4 5a       	subi	r30, 0xA4	; 164
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	6d d7       	rcall	.+3802   	; 0x43ee <__mulsf3>
    3514:	68 af       	std	Y+56, r22	; 0x38
    3516:	79 af       	std	Y+57, r23	; 0x39
    3518:	8a af       	std	Y+58, r24	; 0x3a
    351a:	9b af       	std	Y+59, r25	; 0x3b
    351c:	0c c0       	rjmp	.+24     	; 0x3536 <_ZN7MPU605012setThresholdEh+0xa6>
	} else
	{
		// No threshold
		tg.XAxis = 0;
    351e:	18 aa       	std	Y+48, r1	; 0x30
    3520:	19 aa       	std	Y+49, r1	; 0x31
    3522:	1a aa       	std	Y+50, r1	; 0x32
    3524:	1b aa       	std	Y+51, r1	; 0x33
		tg.YAxis = 0;
    3526:	1c aa       	std	Y+52, r1	; 0x34
    3528:	1d aa       	std	Y+53, r1	; 0x35
    352a:	1e aa       	std	Y+54, r1	; 0x36
    352c:	1f aa       	std	Y+55, r1	; 0x37
		tg.ZAxis = 0;
    352e:	18 ae       	std	Y+56, r1	; 0x38
    3530:	19 ae       	std	Y+57, r1	; 0x39
    3532:	1a ae       	std	Y+58, r1	; 0x3a
    3534:	1b ae       	std	Y+59, r1	; 0x3b
	}

	// Remember old threshold value
	actualThreshold = multiple;
    3536:	cc 58       	subi	r28, 0x8C	; 140
    3538:	df 4f       	sbci	r29, 0xFF	; 255
    353a:	61 2f       	mov	r22, r17
    353c:	70 e0       	ldi	r23, 0x00	; 0
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	3a d6       	rcall	.+3188   	; 0x41b8 <__floatunsisf>
    3544:	68 83       	st	Y, r22
    3546:	79 83       	std	Y+1, r23	; 0x01
    3548:	8a 83       	std	Y+2, r24	; 0x02
    354a:	9b 83       	std	Y+3, r25	; 0x03
}
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	08 95       	ret

0000355c <_ZN7MPU605013calibrateGyroEh>:
	offsetAccelero.XAxis = sumX / samples;
	offsetAccelero.YAxis = sumY / samples;
}

void MPU6050::calibrateGyro(uint8_t samples)
{
    355c:	2f 92       	push	r2
    355e:	3f 92       	push	r3
    3560:	4f 92       	push	r4
    3562:	5f 92       	push	r5
    3564:	6f 92       	push	r6
    3566:	7f 92       	push	r7
    3568:	8f 92       	push	r8
    356a:	9f 92       	push	r9
    356c:	af 92       	push	r10
    356e:	bf 92       	push	r11
    3570:	cf 92       	push	r12
    3572:	df 92       	push	r13
    3574:	ef 92       	push	r14
    3576:	ff 92       	push	r15
    3578:	0f 93       	push	r16
    357a:	1f 93       	push	r17
    357c:	cf 93       	push	r28
    357e:	df 93       	push	r29
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	a4 97       	sbiw	r28, 0x24	; 36
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	1c 01       	movw	r2, r24
    3592:	06 2f       	mov	r16, r22
	// Set calibrate
	useCalibrate = true;
    3594:	fc 01       	movw	r30, r24
    3596:	e8 58       	subi	r30, 0x88	; 136
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	80 83       	st	Z, r24
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    359e:	66 23       	and	r22, r22
    35a0:	09 f4       	brne	.+2      	; 0x35a4 <_ZN7MPU605013calibrateGyroEh+0x48>
    35a2:	87 c0       	rjmp	.+270    	; 0x36b2 <_ZN7MPU605013calibrateGyroEh+0x156>
    35a4:	10 e0       	ldi	r17, 0x00	; 0
    35a6:	19 8e       	std	Y+25, r1	; 0x19
    35a8:	1a 8e       	std	Y+26, r1	; 0x1a
    35aa:	1b 8e       	std	Y+27, r1	; 0x1b
    35ac:	1c 8e       	std	Y+28, r1	; 0x1c
    35ae:	1d 8a       	std	Y+21, r1	; 0x15
    35b0:	1e 8a       	std	Y+22, r1	; 0x16
    35b2:	1f 8a       	std	Y+23, r1	; 0x17
    35b4:	18 8e       	std	Y+24, r1	; 0x18
    35b6:	1d 86       	std	Y+13, r1	; 0x0d
    35b8:	1e 86       	std	Y+14, r1	; 0x0e
    35ba:	1f 86       	std	Y+15, r1	; 0x0f
    35bc:	18 8a       	std	Y+16, r1	; 0x10
    35be:	19 a2       	std	Y+33, r1	; 0x21
    35c0:	1a a2       	std	Y+34, r1	; 0x22
    35c2:	1b a2       	std	Y+35, r1	; 0x23
    35c4:	1c a2       	std	Y+36, r1	; 0x24
    35c6:	1d 8e       	std	Y+29, r1	; 0x1d
    35c8:	1e 8e       	std	Y+30, r1	; 0x1e
    35ca:	1f 8e       	std	Y+31, r1	; 0x1f
    35cc:	18 a2       	std	Y+32, r1	; 0x20
    35ce:	19 8a       	std	Y+17, r1	; 0x11
    35d0:	1a 8a       	std	Y+18, r1	; 0x12
    35d2:	1b 8a       	std	Y+19, r1	; 0x13
    35d4:	1c 8a       	std	Y+20, r1	; 0x14
	{
		readRawGyro();
    35d6:	b1 01       	movw	r22, r2
    35d8:	ce 01       	movw	r24, r28
    35da:	01 96       	adiw	r24, 0x01	; 1
    35dc:	0c df       	rcall	.-488    	; 0x33f6 <_ZN7MPU605011readRawGyroEv>
		sumX += rg.XAxis;
    35de:	f1 01       	movw	r30, r2
    35e0:	44 84       	ldd	r4, Z+12	; 0x0c
    35e2:	55 84       	ldd	r5, Z+13	; 0x0d
    35e4:	66 84       	ldd	r6, Z+14	; 0x0e
    35e6:	77 84       	ldd	r7, Z+15	; 0x0f
    35e8:	a3 01       	movw	r20, r6
    35ea:	92 01       	movw	r18, r4
    35ec:	69 89       	ldd	r22, Y+17	; 0x11
    35ee:	7a 89       	ldd	r23, Y+18	; 0x12
    35f0:	8b 89       	ldd	r24, Y+19	; 0x13
    35f2:	9c 89       	ldd	r25, Y+20	; 0x14
    35f4:	7b d4       	rcall	.+2294   	; 0x3eec <__addsf3>
    35f6:	69 8b       	std	Y+17, r22	; 0x11
    35f8:	7a 8b       	std	Y+18, r23	; 0x12
    35fa:	8b 8b       	std	Y+19, r24	; 0x13
    35fc:	9c 8b       	std	Y+20, r25	; 0x14
		sumY += rg.YAxis;
    35fe:	f1 01       	movw	r30, r2
    3600:	80 88       	ldd	r8, Z+16	; 0x10
    3602:	91 88       	ldd	r9, Z+17	; 0x11
    3604:	a2 88       	ldd	r10, Z+18	; 0x12
    3606:	b3 88       	ldd	r11, Z+19	; 0x13
    3608:	a5 01       	movw	r20, r10
    360a:	94 01       	movw	r18, r8
    360c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    360e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3610:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3612:	98 a1       	ldd	r25, Y+32	; 0x20
    3614:	6b d4       	rcall	.+2262   	; 0x3eec <__addsf3>
    3616:	6d 8f       	std	Y+29, r22	; 0x1d
    3618:	7e 8f       	std	Y+30, r23	; 0x1e
    361a:	8f 8f       	std	Y+31, r24	; 0x1f
    361c:	98 a3       	std	Y+32, r25	; 0x20
		sumZ += rg.ZAxis;
    361e:	f1 01       	movw	r30, r2
    3620:	c4 88       	ldd	r12, Z+20	; 0x14
    3622:	d5 88       	ldd	r13, Z+21	; 0x15
    3624:	e6 88       	ldd	r14, Z+22	; 0x16
    3626:	f7 88       	ldd	r15, Z+23	; 0x17
    3628:	a7 01       	movw	r20, r14
    362a:	96 01       	movw	r18, r12
    362c:	69 a1       	ldd	r22, Y+33	; 0x21
    362e:	7a a1       	ldd	r23, Y+34	; 0x22
    3630:	8b a1       	ldd	r24, Y+35	; 0x23
    3632:	9c a1       	ldd	r25, Y+36	; 0x24
    3634:	5b d4       	rcall	.+2230   	; 0x3eec <__addsf3>
    3636:	69 a3       	std	Y+33, r22	; 0x21
    3638:	7a a3       	std	Y+34, r23	; 0x22
    363a:	8b a3       	std	Y+35, r24	; 0x23
    363c:	9c a3       	std	Y+36, r25	; 0x24

		sigmaX += rg.XAxis * rg.XAxis;
    363e:	a3 01       	movw	r20, r6
    3640:	92 01       	movw	r18, r4
    3642:	c3 01       	movw	r24, r6
    3644:	b2 01       	movw	r22, r4
    3646:	d3 d6       	rcall	.+3494   	; 0x43ee <__mulsf3>
    3648:	9b 01       	movw	r18, r22
    364a:	ac 01       	movw	r20, r24
    364c:	6d 85       	ldd	r22, Y+13	; 0x0d
    364e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3650:	8f 85       	ldd	r24, Y+15	; 0x0f
    3652:	98 89       	ldd	r25, Y+16	; 0x10
    3654:	4b d4       	rcall	.+2198   	; 0x3eec <__addsf3>
    3656:	6d 87       	std	Y+13, r22	; 0x0d
    3658:	7e 87       	std	Y+14, r23	; 0x0e
    365a:	8f 87       	std	Y+15, r24	; 0x0f
    365c:	98 8b       	std	Y+16, r25	; 0x10
		sigmaY += rg.YAxis * rg.YAxis;
    365e:	a5 01       	movw	r20, r10
    3660:	94 01       	movw	r18, r8
    3662:	c5 01       	movw	r24, r10
    3664:	b4 01       	movw	r22, r8
    3666:	c3 d6       	rcall	.+3462   	; 0x43ee <__mulsf3>
    3668:	9b 01       	movw	r18, r22
    366a:	ac 01       	movw	r20, r24
    366c:	6d 89       	ldd	r22, Y+21	; 0x15
    366e:	7e 89       	ldd	r23, Y+22	; 0x16
    3670:	8f 89       	ldd	r24, Y+23	; 0x17
    3672:	98 8d       	ldd	r25, Y+24	; 0x18
    3674:	3b d4       	rcall	.+2166   	; 0x3eec <__addsf3>
    3676:	6d 8b       	std	Y+21, r22	; 0x15
    3678:	7e 8b       	std	Y+22, r23	; 0x16
    367a:	8f 8b       	std	Y+23, r24	; 0x17
    367c:	98 8f       	std	Y+24, r25	; 0x18
		sigmaZ += rg.ZAxis * rg.ZAxis;
    367e:	a7 01       	movw	r20, r14
    3680:	96 01       	movw	r18, r12
    3682:	c7 01       	movw	r24, r14
    3684:	b6 01       	movw	r22, r12
    3686:	b3 d6       	rcall	.+3430   	; 0x43ee <__mulsf3>
    3688:	9b 01       	movw	r18, r22
    368a:	ac 01       	movw	r20, r24
    368c:	69 8d       	ldd	r22, Y+25	; 0x19
    368e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3690:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3692:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3694:	2b d4       	rcall	.+2134   	; 0x3eec <__addsf3>
    3696:	69 8f       	std	Y+25, r22	; 0x19
    3698:	7a 8f       	std	Y+26, r23	; 0x1a
    369a:	8b 8f       	std	Y+27, r24	; 0x1b
    369c:	9c 8f       	std	Y+28, r25	; 0x1c
    369e:	8f e1       	ldi	r24, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36a0:	9e e4       	ldi	r25, 0x4E	; 78
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <_ZN7MPU605013calibrateGyroEh+0x146>
    36a6:	00 c0       	rjmp	.+0      	; 0x36a8 <_ZN7MPU605013calibrateGyroEh+0x14c>
    36a8:	00 00       	nop
    36aa:	1f 5f       	subi	r17, 0xFF	; 255
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    36ac:	01 13       	cpse	r16, r17
    36ae:	93 cf       	rjmp	.-218    	; 0x35d6 <_ZN7MPU605013calibrateGyroEh+0x7a>
    36b0:	18 c0       	rjmp	.+48     	; 0x36e2 <_ZN7MPU605013calibrateGyroEh+0x186>
    36b2:	19 8e       	std	Y+25, r1	; 0x19
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;
    36b4:	1a 8e       	std	Y+26, r1	; 0x1a
    36b6:	1b 8e       	std	Y+27, r1	; 0x1b
    36b8:	1c 8e       	std	Y+28, r1	; 0x1c
    36ba:	1d 8a       	std	Y+21, r1	; 0x15
	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
    36bc:	1e 8a       	std	Y+22, r1	; 0x16
    36be:	1f 8a       	std	Y+23, r1	; 0x17
    36c0:	18 8e       	std	Y+24, r1	; 0x18
    36c2:	1d 86       	std	Y+13, r1	; 0x0d

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
    36c4:	1e 86       	std	Y+14, r1	; 0x0e
    36c6:	1f 86       	std	Y+15, r1	; 0x0f
    36c8:	18 8a       	std	Y+16, r1	; 0x10
    36ca:	19 a2       	std	Y+33, r1	; 0x21
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
    36cc:	1a a2       	std	Y+34, r1	; 0x22
    36ce:	1b a2       	std	Y+35, r1	; 0x23
    36d0:	1c a2       	std	Y+36, r1	; 0x24
    36d2:	1d 8e       	std	Y+29, r1	; 0x1d
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
    36d4:	1e 8e       	std	Y+30, r1	; 0x1e
    36d6:	1f 8e       	std	Y+31, r1	; 0x1f
    36d8:	18 a2       	std	Y+32, r1	; 0x20
{
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
    36da:	19 8a       	std	Y+17, r1	; 0x11
    36dc:	1a 8a       	std	Y+18, r1	; 0x12
    36de:	1b 8a       	std	Y+19, r1	; 0x13
    36e0:	1c 8a       	std	Y+20, r1	; 0x14

		_delay_ms(5);
	}

	// Calculate delta vectors
	dg.XAxis = sumX / samples;
    36e2:	60 2f       	mov	r22, r16
    36e4:	70 e0       	ldi	r23, 0x00	; 0
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	68 d5       	rcall	.+2768   	; 0x41bc <__floatsisf>
    36ec:	4b 01       	movw	r8, r22
    36ee:	5c 01       	movw	r10, r24
    36f0:	9b 01       	movw	r18, r22
    36f2:	ac 01       	movw	r20, r24
    36f4:	69 89       	ldd	r22, Y+17	; 0x11
    36f6:	7a 89       	ldd	r23, Y+18	; 0x12
    36f8:	8b 89       	ldd	r24, Y+19	; 0x13
    36fa:	9c 89       	ldd	r25, Y+20	; 0x14
    36fc:	c4 d4       	rcall	.+2440   	; 0x4086 <__divsf3>
    36fe:	6b 01       	movw	r12, r22
    3700:	7c 01       	movw	r14, r24
    3702:	f1 01       	movw	r30, r2
    3704:	64 af       	std	Z+60, r22	; 0x3c
    3706:	75 af       	std	Z+61, r23	; 0x3d
    3708:	86 af       	std	Z+62, r24	; 0x3e
    370a:	97 af       	std	Z+63, r25	; 0x3f
	dg.YAxis = sumY / samples;
    370c:	a5 01       	movw	r20, r10
    370e:	94 01       	movw	r18, r8
    3710:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3712:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3714:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3716:	98 a1       	ldd	r25, Y+32	; 0x20
    3718:	b6 d4       	rcall	.+2412   	; 0x4086 <__divsf3>
    371a:	2b 01       	movw	r4, r22
    371c:	3c 01       	movw	r6, r24
    371e:	f1 01       	movw	r30, r2
    3720:	e0 5c       	subi	r30, 0xC0	; 192
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	60 83       	st	Z, r22
    3726:	71 83       	std	Z+1, r23	; 0x01
    3728:	82 83       	std	Z+2, r24	; 0x02
    372a:	93 83       	std	Z+3, r25	; 0x03
	dg.ZAxis = sumZ / samples;
    372c:	a5 01       	movw	r20, r10
    372e:	94 01       	movw	r18, r8
    3730:	69 a1       	ldd	r22, Y+33	; 0x21
    3732:	7a a1       	ldd	r23, Y+34	; 0x22
    3734:	8b a1       	ldd	r24, Y+35	; 0x23
    3736:	9c a1       	ldd	r25, Y+36	; 0x24
    3738:	a6 d4       	rcall	.+2380   	; 0x4086 <__divsf3>
    373a:	4b 01       	movw	r8, r22
    373c:	5c 01       	movw	r10, r24
    373e:	f1 01       	movw	r30, r2
    3740:	ec 5b       	subi	r30, 0xBC	; 188
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	60 83       	st	Z, r22
    3746:	71 83       	std	Z+1, r23	; 0x01
    3748:	82 83       	std	Z+2, r24	; 0x02
    374a:	93 83       	std	Z+3, r25	; 0x03

	// Calculate threshold vectors
	th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	48 e4       	ldi	r20, 0x48	; 72
    3752:	52 e4       	ldi	r21, 0x42	; 66
    3754:	6d 85       	ldd	r22, Y+13	; 0x0d
    3756:	7e 85       	ldd	r23, Y+14	; 0x0e
    3758:	8f 85       	ldd	r24, Y+15	; 0x0f
    375a:	98 89       	ldd	r25, Y+16	; 0x10
    375c:	94 d4       	rcall	.+2344   	; 0x4086 <__divsf3>
    375e:	69 8b       	std	Y+17, r22	; 0x11
    3760:	7a 8b       	std	Y+18, r23	; 0x12
    3762:	8b 8b       	std	Y+19, r24	; 0x13
    3764:	9c 8b       	std	Y+20, r25	; 0x14
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	48 e4       	ldi	r20, 0x48	; 72
    376c:	52 e4       	ldi	r21, 0x42	; 66
    376e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3770:	7e 85       	ldd	r23, Y+14	; 0x0e
    3772:	8f 85       	ldd	r24, Y+15	; 0x0f
    3774:	98 89       	ldd	r25, Y+16	; 0x10
    3776:	87 d4       	rcall	.+2318   	; 0x4086 <__divsf3>
    3778:	6d 87       	std	Y+13, r22	; 0x0d
    377a:	7e 87       	std	Y+14, r23	; 0x0e
    377c:	8f 87       	std	Y+15, r24	; 0x0f
    377e:	98 8b       	std	Y+16, r25	; 0x10
    3780:	a7 01       	movw	r20, r14
    3782:	96 01       	movw	r18, r12
    3784:	c7 01       	movw	r24, r14
    3786:	b6 01       	movw	r22, r12
    3788:	32 d6       	rcall	.+3172   	; 0x43ee <__mulsf3>
    378a:	9b 01       	movw	r18, r22
    378c:	ac 01       	movw	r20, r24
    378e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3790:	7e 85       	ldd	r23, Y+14	; 0x0e
    3792:	8f 85       	ldd	r24, Y+15	; 0x0f
    3794:	98 89       	ldd	r25, Y+16	; 0x10
    3796:	a9 d3       	rcall	.+1874   	; 0x3eea <__subsf3>
    3798:	97 d6       	rcall	.+3374   	; 0x44c8 <sqrt>
    379a:	f1 01       	movw	r30, r2
    379c:	ec 5a       	subi	r30, 0xAC	; 172
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	60 83       	st	Z, r22
    37a2:	71 83       	std	Z+1, r23	; 0x01
    37a4:	82 83       	std	Z+2, r24	; 0x02
    37a6:	93 83       	std	Z+3, r25	; 0x03
	th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	48 e4       	ldi	r20, 0x48	; 72
    37ae:	52 e4       	ldi	r21, 0x42	; 66
    37b0:	6d 89       	ldd	r22, Y+21	; 0x15
    37b2:	7e 89       	ldd	r23, Y+22	; 0x16
    37b4:	8f 89       	ldd	r24, Y+23	; 0x17
    37b6:	98 8d       	ldd	r25, Y+24	; 0x18
    37b8:	66 d4       	rcall	.+2252   	; 0x4086 <__divsf3>
    37ba:	6b 01       	movw	r12, r22
    37bc:	7c 01       	movw	r14, r24
    37be:	a3 01       	movw	r20, r6
    37c0:	92 01       	movw	r18, r4
    37c2:	c3 01       	movw	r24, r6
    37c4:	b2 01       	movw	r22, r4
    37c6:	13 d6       	rcall	.+3110   	; 0x43ee <__mulsf3>
    37c8:	9b 01       	movw	r18, r22
    37ca:	ac 01       	movw	r20, r24
    37cc:	c7 01       	movw	r24, r14
    37ce:	b6 01       	movw	r22, r12
    37d0:	8c d3       	rcall	.+1816   	; 0x3eea <__subsf3>
    37d2:	7a d6       	rcall	.+3316   	; 0x44c8 <sqrt>
    37d4:	f1 01       	movw	r30, r2
    37d6:	e8 5a       	subi	r30, 0xA8	; 168
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	60 83       	st	Z, r22
    37dc:	71 83       	std	Z+1, r23	; 0x01
    37de:	82 83       	std	Z+2, r24	; 0x02
    37e0:	93 83       	std	Z+3, r25	; 0x03
	th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	48 e4       	ldi	r20, 0x48	; 72
    37e8:	52 e4       	ldi	r21, 0x42	; 66
    37ea:	69 8d       	ldd	r22, Y+25	; 0x19
    37ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f2:	49 d4       	rcall	.+2194   	; 0x4086 <__divsf3>
    37f4:	6b 01       	movw	r12, r22
    37f6:	7c 01       	movw	r14, r24
    37f8:	a5 01       	movw	r20, r10
    37fa:	94 01       	movw	r18, r8
    37fc:	c5 01       	movw	r24, r10
    37fe:	b4 01       	movw	r22, r8
    3800:	f6 d5       	rcall	.+3052   	; 0x43ee <__mulsf3>
    3802:	9b 01       	movw	r18, r22
    3804:	ac 01       	movw	r20, r24
    3806:	c7 01       	movw	r24, r14
    3808:	b6 01       	movw	r22, r12
    380a:	6f d3       	rcall	.+1758   	; 0x3eea <__subsf3>
    380c:	5d d6       	rcall	.+3258   	; 0x44c8 <sqrt>
    380e:	f1 01       	movw	r30, r2
    3810:	e4 5a       	subi	r30, 0xA4	; 164
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	60 83       	st	Z, r22
    3816:	71 83       	std	Z+1, r23	; 0x01
    3818:	82 83       	std	Z+2, r24	; 0x02
    381a:	93 83       	std	Z+3, r25	; 0x03
    381c:	78 96       	adiw	r30, 0x18	; 24

	// If already set threshold, recalculate threshold vectors
	if (actualThreshold > 0)
    381e:	c0 80       	ld	r12, Z
    3820:	d1 80       	ldd	r13, Z+1	; 0x01
    3822:	e2 80       	ldd	r14, Z+2	; 0x02
    3824:	f3 80       	ldd	r15, Z+3	; 0x03
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	a9 01       	movw	r20, r18
    382c:	c7 01       	movw	r24, r14
    382e:	b6 01       	movw	r22, r12
    3830:	d3 d5       	rcall	.+2982   	; 0x43d8 <__gesf2>
    3832:	18 16       	cp	r1, r24
    3834:	2c f4       	brge	.+10     	; 0x3840 <_ZN7MPU605013calibrateGyroEh+0x2e4>
    3836:	c7 01       	movw	r24, r14
    3838:	b6 01       	movw	r22, r12
	{
		setThreshold(actualThreshold);
    383a:	92 d4       	rcall	.+2340   	; 0x4160 <__fixunssfsi>
    383c:	c1 01       	movw	r24, r2
    383e:	28 de       	rcall	.-944    	; 0x3490 <_ZN7MPU605012setThresholdEh>
    3840:	a4 96       	adiw	r28, 0x24	; 36
    3842:	0f b6       	in	r0, 0x3f	; 63
    3844:	f8 94       	cli
    3846:	de bf       	out	0x3e, r29	; 62
	}
}
    3848:	0f be       	out	0x3f, r0	; 63
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	df 91       	pop	r29
    384e:	cf 91       	pop	r28
    3850:	1f 91       	pop	r17
    3852:	0f 91       	pop	r16
    3854:	ff 90       	pop	r15
    3856:	ef 90       	pop	r14
    3858:	df 90       	pop	r13
    385a:	cf 90       	pop	r12
    385c:	bf 90       	pop	r11
    385e:	af 90       	pop	r10
    3860:	9f 90       	pop	r9
    3862:	8f 90       	pop	r8
    3864:	7f 90       	pop	r7
    3866:	6f 90       	pop	r6
    3868:	5f 90       	pop	r5
    386a:	4f 90       	pop	r4
    386c:	3f 90       	pop	r3
    386e:	2f 90       	pop	r2
    3870:	08 95       	ret

00003872 <_ZN7MPU60508rateGyroEv>:
    3872:	ef 92       	push	r14
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17

	// Remember old threshold value
	actualThreshold = multiple;
}

void MPU6050::rateGyro(){
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	2c 97       	sbiw	r28, 0x0c	; 12
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	8c 01       	movw	r16, r24
	readRawGyro();
    3890:	bc 01       	movw	r22, r24
    3892:	ce 01       	movw	r24, r28
    3894:	01 96       	adiw	r24, 0x01	; 1
    3896:	af dd       	rcall	.-1186   	; 0x33f6 <_ZN7MPU605011readRawGyroEv>
	gyroRateX = (rg.XAxis)/131;
    3898:	78 01       	movw	r14, r16
    389a:	80 e6       	ldi	r24, 0x60	; 96
    389c:	e8 0e       	add	r14, r24
    389e:	f1 1c       	adc	r15, r1
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	43 e0       	ldi	r20, 0x03	; 3
    38a6:	53 e4       	ldi	r21, 0x43	; 67
    38a8:	f8 01       	movw	r30, r16
    38aa:	64 85       	ldd	r22, Z+12	; 0x0c
    38ac:	75 85       	ldd	r23, Z+13	; 0x0d
    38ae:	86 85       	ldd	r24, Z+14	; 0x0e
    38b0:	97 85       	ldd	r25, Z+15	; 0x0f
    38b2:	e9 d3       	rcall	.+2002   	; 0x4086 <__divsf3>
    38b4:	f7 01       	movw	r30, r14
    38b6:	60 83       	st	Z, r22
    38b8:	71 83       	std	Z+1, r23	; 0x01
    38ba:	82 83       	std	Z+2, r24	; 0x02
    38bc:	93 83       	std	Z+3, r25	; 0x03
	gyroRateY = (rg.YAxis)/131;
    38be:	78 01       	movw	r14, r16
    38c0:	f4 e6       	ldi	r31, 0x64	; 100
    38c2:	ef 0e       	add	r14, r31
    38c4:	f1 1c       	adc	r15, r1
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	43 e0       	ldi	r20, 0x03	; 3
    38cc:	53 e4       	ldi	r21, 0x43	; 67
    38ce:	f8 01       	movw	r30, r16
    38d0:	60 89       	ldd	r22, Z+16	; 0x10
    38d2:	71 89       	ldd	r23, Z+17	; 0x11
    38d4:	82 89       	ldd	r24, Z+18	; 0x12
    38d6:	93 89       	ldd	r25, Z+19	; 0x13
    38d8:	d6 d3       	rcall	.+1964   	; 0x4086 <__divsf3>
    38da:	f7 01       	movw	r30, r14
    38dc:	60 83       	st	Z, r22
    38de:	71 83       	std	Z+1, r23	; 0x01
    38e0:	82 83       	std	Z+2, r24	; 0x02
    38e2:	93 83       	std	Z+3, r25	; 0x03
	gyroRateZ = (rg.ZAxis)/131;
    38e4:	78 01       	movw	r14, r16
    38e6:	f8 e6       	ldi	r31, 0x68	; 104
    38e8:	ef 0e       	add	r14, r31
    38ea:	f1 1c       	adc	r15, r1
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	43 e0       	ldi	r20, 0x03	; 3
    38f2:	53 e4       	ldi	r21, 0x43	; 67
    38f4:	f8 01       	movw	r30, r16
    38f6:	64 89       	ldd	r22, Z+20	; 0x14
    38f8:	75 89       	ldd	r23, Z+21	; 0x15
    38fa:	86 89       	ldd	r24, Z+22	; 0x16
    38fc:	97 89       	ldd	r25, Z+23	; 0x17
    38fe:	c3 d3       	rcall	.+1926   	; 0x4086 <__divsf3>
    3900:	f7 01       	movw	r30, r14
    3902:	60 83       	st	Z, r22
    3904:	71 83       	std	Z+1, r23	; 0x01
    3906:	82 83       	std	Z+2, r24	; 0x02
    3908:	93 83       	std	Z+3, r25	; 0x03
}
    390a:	2c 96       	adiw	r28, 0x0c	; 12
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	cd bf       	out	0x3d, r28	; 61
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	ef 90       	pop	r14
    3922:	08 95       	ret

00003924 <_ZN7MPU605012getGyroRateXEv>:

float MPU6050::getGyroRateX(){
	return gyroRateX;
    3924:	80 5a       	subi	r24, 0xA0	; 160
    3926:	9f 4f       	sbci	r25, 0xFF	; 255
    3928:	fc 01       	movw	r30, r24
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
}
    3932:	08 95       	ret

00003934 <_ZN7MPU605012getGyroRateYEv>:
float MPU6050::getGyroRateY(){
	return gyroRateY;
    3934:	8c 59       	subi	r24, 0x9C	; 156
    3936:	9f 4f       	sbci	r25, 0xFF	; 255
    3938:	fc 01       	movw	r30, r24
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
}
    3942:	08 95       	ret

00003944 <_ZN7MPU605012getGyroRateZEv>:
float MPU6050::getGyroRateZ(){
	return gyroRateZ;
    3944:	88 59       	subi	r24, 0x98	; 152
    3946:	9f 4f       	sbci	r25, 0xFF	; 255
    3948:	fc 01       	movw	r30, r24
    394a:	60 81       	ld	r22, Z
    394c:	71 81       	ldd	r23, Z+1	; 0x01
    394e:	82 81       	ldd	r24, Z+2	; 0x02
    3950:	93 81       	ldd	r25, Z+3	; 0x03
    3952:	08 95       	ret

00003954 <_Z16checkRobotMotionv>:
 bool normalGame			= false;

 
void checkRobotMotion(){
	//Wait while main switch is not clicked//
 	while(READ(M_MAIN_SWITCH));
    3954:	78 99       	sbic	0x0f, 0	; 15
    3956:	fe cf       	rjmp	.-4      	; 0x3954 <_Z16checkRobotMotionv>
 	////after main switch is clicked check the state of retry conditions//
 	if(!READ(M_DIRECTLY_LZ2))			{directlyLZ2 = true;}
    3958:	79 99       	sbic	0x0f, 1	; 15
    395a:	04 c0       	rjmp	.+8      	; 0x3964 <_Z16checkRobotMotionv+0x10>
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <directlyLZ2>
    3962:	08 95       	ret
 	else if(!READ(M_DIRECTLY_TZ3))		{directlyTZ3 = true;}
    3964:	7a 99       	sbic	0x0f, 2	; 15
    3966:	04 c0       	rjmp	.+8      	; 0x3970 <_Z16checkRobotMotionv+0x1c>
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <directlyTZ3>
    396e:	08 95       	ret
 	else if(!READ(M_LZ2FORTZ3))			{LZ2ForTZ3   = true;}
    3970:	7b 99       	sbic	0x0f, 3	; 15
    3972:	04 c0       	rjmp	.+8      	; 0x397c <_Z16checkRobotMotionv+0x28>
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <LZ2ForTZ3>
    397a:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ2))			{alwaysTZ2   = true;}
    397c:	7c 99       	sbic	0x0f, 4	; 15
    397e:	04 c0       	rjmp	.+8      	; 0x3988 <_Z16checkRobotMotionv+0x34>
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <alwaysTZ2>
    3986:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ1))			{alwaysTZ1   = true;}
    3988:	7d 99       	sbic	0x0f, 5	; 15
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <_Z16checkRobotMotionv+0x40>
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <alwaysTZ1>
    3992:	08 95       	ret
 	else								{normalGame = true;}
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <normalGame>
    399a:	08 95       	ret

0000399c <_Z8i2c_initv>:
uint8_t i2c_write_array(uint8_t *data, uint8_t count){
	while(count--){
		if(i2c_write(*data++) != 0)		return count;
	}
	return 0;
}
    399c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    39a0:	88 e4       	ldi	r24, 0x48	; 72
    39a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    39a6:	08 95       	ret

000039a8 <_Z9i2c_starth>:
    39a8:	94 ea       	ldi	r25, 0xA4	; 164
    39aa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39ae:	ec eb       	ldi	r30, 0xBC	; 188
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	90 81       	ld	r25, Z
    39b4:	99 23       	and	r25, r25
    39b6:	ec f7       	brge	.-6      	; 0x39b2 <_Z9i2c_starth+0xa>
    39b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    39bc:	98 7f       	andi	r25, 0xF8	; 248
    39be:	98 30       	cpi	r25, 0x08	; 8
    39c0:	11 f0       	breq	.+4      	; 0x39c6 <_Z9i2c_starth+0x1e>
    39c2:	90 31       	cpi	r25, 0x10	; 16
    39c4:	a1 f4       	brne	.+40     	; 0x39ee <_Z9i2c_starth+0x46>
    39c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    39ca:	84 e8       	ldi	r24, 0x84	; 132
    39cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39d0:	ec eb       	ldi	r30, 0xBC	; 188
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	88 23       	and	r24, r24
    39d8:	ec f7       	brge	.-6      	; 0x39d4 <_Z9i2c_starth+0x2c>
    39da:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    39de:	98 7f       	andi	r25, 0xF8	; 248
    39e0:	98 31       	cpi	r25, 0x18	; 24
    39e2:	39 f0       	breq	.+14     	; 0x39f2 <_Z9i2c_starth+0x4a>
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	90 34       	cpi	r25, 0x40	; 64
    39e8:	29 f4       	brne	.+10     	; 0x39f4 <_Z9i2c_starth+0x4c>
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	08 95       	ret
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	08 95       	ret
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	08 95       	ret

000039f6 <_Z13i2c_rep_starth>:
    39f6:	d8 cf       	rjmp	.-80     	; 0x39a8 <_Z9i2c_starth>
    39f8:	08 95       	ret

000039fa <_Z8i2c_stopv>:
    39fa:	84 e9       	ldi	r24, 0x94	; 148
    39fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a00:	ec eb       	ldi	r30, 0xBC	; 188
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	84 fd       	sbrc	r24, 4
    3a08:	fd cf       	rjmp	.-6      	; 0x3a04 <_Z8i2c_stopv+0xa>
    3a0a:	08 95       	ret

00003a0c <_Z14i2c_start_waith>:
    3a0c:	bf 92       	push	r11
    3a0e:	cf 92       	push	r12
    3a10:	df 92       	push	r13
    3a12:	ef 92       	push	r14
    3a14:	ff 92       	push	r15
    3a16:	0f 93       	push	r16
    3a18:	1f 93       	push	r17
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
    3a1e:	b8 2e       	mov	r11, r24
    3a20:	cc eb       	ldi	r28, 0xBC	; 188
    3a22:	d0 e0       	ldi	r29, 0x00	; 0
    3a24:	09 eb       	ldi	r16, 0xB9	; 185
    3a26:	10 e0       	ldi	r17, 0x00	; 0
    3a28:	0f 2e       	mov	r0, r31
    3a2a:	f4 ea       	ldi	r31, 0xA4	; 164
    3a2c:	df 2e       	mov	r13, r31
    3a2e:	f0 2d       	mov	r31, r0
    3a30:	0f 2e       	mov	r0, r31
    3a32:	fb eb       	ldi	r31, 0xBB	; 187
    3a34:	ef 2e       	mov	r14, r31
    3a36:	f1 2c       	mov	r15, r1
    3a38:	f0 2d       	mov	r31, r0
    3a3a:	0f 2e       	mov	r0, r31
    3a3c:	f4 e8       	ldi	r31, 0x84	; 132
    3a3e:	cf 2e       	mov	r12, r31
    3a40:	f0 2d       	mov	r31, r0
    3a42:	d8 82       	st	Y, r13
    3a44:	88 81       	ld	r24, Y
    3a46:	88 23       	and	r24, r24
    3a48:	ec f7       	brge	.-6      	; 0x3a44 <_Z14i2c_start_waith+0x38>
    3a4a:	f8 01       	movw	r30, r16
    3a4c:	80 81       	ld	r24, Z
    3a4e:	88 7f       	andi	r24, 0xF8	; 248
    3a50:	88 30       	cpi	r24, 0x08	; 8
    3a52:	b9 f7       	brne	.-18     	; 0x3a42 <_Z14i2c_start_waith+0x36>
    3a54:	f7 01       	movw	r30, r14
    3a56:	b0 82       	st	Z, r11
    3a58:	c8 82       	st	Y, r12
    3a5a:	88 81       	ld	r24, Y
    3a5c:	88 23       	and	r24, r24
    3a5e:	ec f7       	brge	.-6      	; 0x3a5a <_Z14i2c_start_waith+0x4e>
    3a60:	f8 01       	movw	r30, r16
    3a62:	80 81       	ld	r24, Z
    3a64:	88 7f       	andi	r24, 0xF8	; 248
    3a66:	88 31       	cpi	r24, 0x18	; 24
    3a68:	11 f0       	breq	.+4      	; 0x3a6e <_Z14i2c_start_waith+0x62>
    3a6a:	c7 df       	rcall	.-114    	; 0x39fa <_Z8i2c_stopv>
    3a6c:	ea cf       	rjmp	.-44     	; 0x3a42 <_Z14i2c_start_waith+0x36>
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	ef 90       	pop	r14
    3a7a:	df 90       	pop	r13
    3a7c:	cf 90       	pop	r12
    3a7e:	bf 90       	pop	r11
    3a80:	08 95       	ret

00003a82 <_Z9i2c_writeh>:
    3a82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3a86:	84 e8       	ldi	r24, 0x84	; 132
    3a88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a8c:	ec eb       	ldi	r30, 0xBC	; 188
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	88 23       	and	r24, r24
    3a94:	ec f7       	brge	.-6      	; 0x3a90 <_Z9i2c_writeh+0xe>
    3a96:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3a9a:	98 7f       	andi	r25, 0xF8	; 248
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	98 32       	cpi	r25, 0x28	; 40
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <_Z9i2c_writeh+0x22>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	08 95       	ret

00003aa6 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3aa6:	84 ec       	ldi	r24, 0xC4	; 196
    3aa8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
    3aac:	ec eb       	ldi	r30, 0xBC	; 188
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	88 23       	and	r24, r24
    3ab4:	ec f7       	brge	.-6      	; 0x3ab0 <_Z11i2c_readAckv+0xa>

    return TWDR;
    3ab6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readAck */
    3aba:	08 95       	ret

00003abc <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3abc:	84 e8       	ldi	r24, 0x84	; 132
    3abe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
    3ac2:	ec eb       	ldi	r30, 0xBC	; 188
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	80 81       	ld	r24, Z
    3ac8:	88 23       	and	r24, r24
    3aca:	ec f7       	brge	.-6      	; 0x3ac6 <_Z11i2c_readNakv+0xa>
	
    return TWDR;
    3acc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

    3ad0:	08 95       	ret

00003ad2 <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    3ad2:	1f 92       	push	r1
    3ad4:	0f 92       	push	r0
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	0f 92       	push	r0
    3ada:	11 24       	eor	r1, r1
    3adc:	0b b6       	in	r0, 0x3b	; 59
    3ade:	0f 92       	push	r0
    3ae0:	2f 93       	push	r18
    3ae2:	8f 93       	push	r24
    3ae4:	9f 93       	push	r25
    3ae6:	ef 93       	push	r30
    3ae8:	ff 93       	push	r31
    3aea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    3aee:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3af2:	88 71       	andi	r24, 0x18	; 24
    3af4:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <_ZL12UART0_RxHead>
    3af8:	ef 5f       	subi	r30, 0xFF	; 255
    3afa:	ef 71       	andi	r30, 0x1F	; 31
    3afc:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <_ZL12UART0_RxTail>
    3b00:	e9 17       	cp	r30, r25
    3b02:	39 f0       	breq	.+14     	; 0x3b12 <__vector_25+0x40>
    3b04:	e0 93 34 05 	sts	0x0534, r30	; 0x800534 <_ZL12UART0_RxHead>
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	e9 5c       	subi	r30, 0xC9	; 201
    3b0c:	fa 4f       	sbci	r31, 0xFA	; 250
    3b0e:	20 83       	st	Z, r18
    3b10:	01 c0       	rjmp	.+2      	; 0x3b14 <__vector_25+0x42>
    3b12:	82 e0       	ldi	r24, 0x02	; 2
    3b14:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <_ZL17UART0_LastRxError>
    3b18:	ff 91       	pop	r31
    3b1a:	ef 91       	pop	r30
    3b1c:	9f 91       	pop	r25
    3b1e:	8f 91       	pop	r24
    3b20:	2f 91       	pop	r18
    3b22:	0f 90       	pop	r0
    3b24:	0b be       	out	0x3b, r0	; 59
    3b26:	0f 90       	pop	r0
    3b28:	0f be       	out	0x3f, r0	; 63
    3b2a:	0f 90       	pop	r0
    3b2c:	1f 90       	pop	r1
    3b2e:	18 95       	reti

00003b30 <__vector_26>:
    3b30:	1f 92       	push	r1
    3b32:	0f 92       	push	r0
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	0f 92       	push	r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	0b b6       	in	r0, 0x3b	; 59
    3b3c:	0f 92       	push	r0
    3b3e:	8f 93       	push	r24
    3b40:	9f 93       	push	r25
    3b42:	ef 93       	push	r30
    3b44:	ff 93       	push	r31
    3b46:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <_ZL12UART0_TxHead>
    3b4a:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <_ZL12UART0_TxTail>
    3b4e:	98 17       	cp	r25, r24
    3b50:	69 f0       	breq	.+26     	; 0x3b6c <__vector_26+0x3c>
    3b52:	e0 91 35 05 	lds	r30, 0x0535	; 0x800535 <_ZL12UART0_TxTail>
    3b56:	ef 5f       	subi	r30, 0xFF	; 255
    3b58:	ef 71       	andi	r30, 0x1F	; 31
    3b5a:	e0 93 35 05 	sts	0x0535, r30	; 0x800535 <_ZL12UART0_TxTail>
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	e9 5a       	subi	r30, 0xA9	; 169
    3b62:	fa 4f       	sbci	r31, 0xFA	; 250
    3b64:	80 81       	ld	r24, Z
    3b66:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3b6a:	05 c0       	rjmp	.+10     	; 0x3b76 <__vector_26+0x46>
    3b6c:	e1 ec       	ldi	r30, 0xC1	; 193
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	80 81       	ld	r24, Z
    3b72:	8f 7d       	andi	r24, 0xDF	; 223
    3b74:	80 83       	st	Z, r24
    3b76:	ff 91       	pop	r31
    3b78:	ef 91       	pop	r30
    3b7a:	9f 91       	pop	r25
    3b7c:	8f 91       	pop	r24
    3b7e:	0f 90       	pop	r0
    3b80:	0b be       	out	0x3b, r0	; 59
    3b82:	0f 90       	pop	r0
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	0f 90       	pop	r0
    3b88:	1f 90       	pop	r1
    3b8a:	18 95       	reti

00003b8c <_Z10uart0_initj>:
    3b8c:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <_ZL12UART0_TxHead>
    3b90:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <_ZL12UART0_TxTail>
    3b94:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <_ZL12UART0_RxHead>
    3b98:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <_ZL12UART0_RxTail>
    3b9c:	99 23       	and	r25, r25
    3b9e:	24 f4       	brge	.+8      	; 0x3ba8 <_Z10uart0_initj+0x1c>
    3ba0:	22 e0       	ldi	r18, 0x02	; 2
    3ba2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    3ba6:	9f 77       	andi	r25, 0x7F	; 127
    3ba8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    3bac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    3bb0:	88 e9       	ldi	r24, 0x98	; 152
    3bb2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    3bb6:	86 e0       	ldi	r24, 0x06	; 6
    3bb8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    3bbc:	08 95       	ret

00003bbe <_Z10uart0_putch>:
    3bbe:	20 91 36 05 	lds	r18, 0x0536	; 0x800536 <_ZL12UART0_TxHead>
    3bc2:	2f 5f       	subi	r18, 0xFF	; 255
    3bc4:	2f 71       	andi	r18, 0x1F	; 31
    3bc6:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <_ZL12UART0_TxTail>
    3bca:	29 17       	cp	r18, r25
    3bcc:	e1 f3       	breq	.-8      	; 0x3bc6 <_Z10uart0_putch+0x8>
    3bce:	e2 2f       	mov	r30, r18
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	e9 5a       	subi	r30, 0xA9	; 169
    3bd4:	fa 4f       	sbci	r31, 0xFA	; 250
    3bd6:	80 83       	st	Z, r24
    3bd8:	20 93 36 05 	sts	0x0536, r18	; 0x800536 <_ZL12UART0_TxHead>
    3bdc:	e1 ec       	ldi	r30, 0xC1	; 193
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	80 62       	ori	r24, 0x20	; 32
    3be4:	80 83       	st	Z, r24
    3be6:	08 95       	ret

00003be8 <_Z10uart0_putsPKc>:
    3be8:	cf 93       	push	r28
    3bea:	df 93       	push	r29
    3bec:	ec 01       	movw	r28, r24
    3bee:	88 81       	ld	r24, Y
    3bf0:	88 23       	and	r24, r24
    3bf2:	29 f0       	breq	.+10     	; 0x3bfe <_Z10uart0_putsPKc+0x16>
    3bf4:	21 96       	adiw	r28, 0x01	; 1
    3bf6:	e3 df       	rcall	.-58     	; 0x3bbe <_Z10uart0_putch>
    3bf8:	89 91       	ld	r24, Y+
    3bfa:	81 11       	cpse	r24, r1
    3bfc:	fc cf       	rjmp	.-8      	; 0x3bf6 <_Z10uart0_putsPKc+0xe>
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	08 95       	ret

00003c04 <__vector_36>:
    3c04:	1f 92       	push	r1
    3c06:	0f 92       	push	r0
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	0f 92       	push	r0
    3c0c:	11 24       	eor	r1, r1
    3c0e:	0b b6       	in	r0, 0x3b	; 59
    3c10:	0f 92       	push	r0
    3c12:	2f 93       	push	r18
    3c14:	8f 93       	push	r24
    3c16:	9f 93       	push	r25
    3c18:	ef 93       	push	r30
    3c1a:	ff 93       	push	r31
    3c1c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    3c20:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3c24:	88 71       	andi	r24, 0x18	; 24
    3c26:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <_ZL12UART1_RxHead>
    3c2a:	ef 5f       	subi	r30, 0xFF	; 255
    3c2c:	ef 71       	andi	r30, 0x1F	; 31
    3c2e:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <_ZL12UART1_RxTail>
    3c32:	e9 17       	cp	r30, r25
    3c34:	39 f0       	breq	.+14     	; 0x3c44 <__vector_36+0x40>
    3c36:	e0 93 ef 04 	sts	0x04EF, r30	; 0x8004ef <_ZL12UART1_RxHead>
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	ee 50       	subi	r30, 0x0E	; 14
    3c3e:	fb 4f       	sbci	r31, 0xFB	; 251
    3c40:	20 83       	st	Z, r18
    3c42:	01 c0       	rjmp	.+2      	; 0x3c46 <__vector_36+0x42>
    3c44:	82 e0       	ldi	r24, 0x02	; 2
    3c46:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <_ZL17UART1_LastRxError>
    3c4a:	ff 91       	pop	r31
    3c4c:	ef 91       	pop	r30
    3c4e:	9f 91       	pop	r25
    3c50:	8f 91       	pop	r24
    3c52:	2f 91       	pop	r18
    3c54:	0f 90       	pop	r0
    3c56:	0b be       	out	0x3b, r0	; 59
    3c58:	0f 90       	pop	r0
    3c5a:	0f be       	out	0x3f, r0	; 63
    3c5c:	0f 90       	pop	r0
    3c5e:	1f 90       	pop	r1
    3c60:	18 95       	reti

00003c62 <__vector_37>:
    3c62:	1f 92       	push	r1
    3c64:	0f 92       	push	r0
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	0f 92       	push	r0
    3c6a:	11 24       	eor	r1, r1
    3c6c:	0b b6       	in	r0, 0x3b	; 59
    3c6e:	0f 92       	push	r0
    3c70:	8f 93       	push	r24
    3c72:	9f 93       	push	r25
    3c74:	ef 93       	push	r30
    3c76:	ff 93       	push	r31
    3c78:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <_ZL12UART1_TxHead>
    3c7c:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZL12UART1_TxTail>
    3c80:	98 17       	cp	r25, r24
    3c82:	69 f0       	breq	.+26     	; 0x3c9e <__vector_37+0x3c>
    3c84:	e0 91 f0 04 	lds	r30, 0x04F0	; 0x8004f0 <_ZL12UART1_TxTail>
    3c88:	ef 5f       	subi	r30, 0xFF	; 255
    3c8a:	ef 71       	andi	r30, 0x1F	; 31
    3c8c:	e0 93 f0 04 	sts	0x04F0, r30	; 0x8004f0 <_ZL12UART1_TxTail>
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	ee 5e       	subi	r30, 0xEE	; 238
    3c94:	fa 4f       	sbci	r31, 0xFA	; 250
    3c96:	80 81       	ld	r24, Z
    3c98:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3c9c:	05 c0       	rjmp	.+10     	; 0x3ca8 <__vector_37+0x46>
    3c9e:	e9 ec       	ldi	r30, 0xC9	; 201
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	80 81       	ld	r24, Z
    3ca4:	8f 7d       	andi	r24, 0xDF	; 223
    3ca6:	80 83       	st	Z, r24
    3ca8:	ff 91       	pop	r31
    3caa:	ef 91       	pop	r30
    3cac:	9f 91       	pop	r25
    3cae:	8f 91       	pop	r24
    3cb0:	0f 90       	pop	r0
    3cb2:	0b be       	out	0x3b, r0	; 59
    3cb4:	0f 90       	pop	r0
    3cb6:	0f be       	out	0x3f, r0	; 63
    3cb8:	0f 90       	pop	r0
    3cba:	1f 90       	pop	r1
    3cbc:	18 95       	reti

00003cbe <__vector_51>:
    3cbe:	1f 92       	push	r1
    3cc0:	0f 92       	push	r0
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	0f 92       	push	r0
    3cc6:	11 24       	eor	r1, r1
    3cc8:	8f 93       	push	r24
    3cca:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3cce:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <buffer2>
    3cd2:	8f 91       	pop	r24
    3cd4:	0f 90       	pop	r0
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	0f 90       	pop	r0
    3cda:	1f 90       	pop	r1
    3cdc:	18 95       	reti

00003cde <__vector_52>:
    3cde:	1f 92       	push	r1
    3ce0:	0f 92       	push	r0
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	0f 92       	push	r0
    3ce6:	11 24       	eor	r1, r1
    3ce8:	0b b6       	in	r0, 0x3b	; 59
    3cea:	0f 92       	push	r0
    3cec:	8f 93       	push	r24
    3cee:	9f 93       	push	r25
    3cf0:	ef 93       	push	r30
    3cf2:	ff 93       	push	r31
    3cf4:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <_ZL12UART2_TxHead>
    3cf8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <_ZL12UART2_TxTail>
    3cfc:	98 17       	cp	r25, r24
    3cfe:	69 f0       	breq	.+26     	; 0x3d1a <__vector_52+0x3c>
    3d00:	e0 91 cb 04 	lds	r30, 0x04CB	; 0x8004cb <_ZL12UART2_TxTail>
    3d04:	ef 5f       	subi	r30, 0xFF	; 255
    3d06:	ef 71       	andi	r30, 0x1F	; 31
    3d08:	e0 93 cb 04 	sts	0x04CB, r30	; 0x8004cb <_ZL12UART2_TxTail>
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	e3 53       	subi	r30, 0x33	; 51
    3d10:	fb 4f       	sbci	r31, 0xFB	; 251
    3d12:	80 81       	ld	r24, Z
    3d14:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3d18:	05 c0       	rjmp	.+10     	; 0x3d24 <__vector_52+0x46>
    3d1a:	e1 ed       	ldi	r30, 0xD1	; 209
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	80 81       	ld	r24, Z
    3d20:	8f 7d       	andi	r24, 0xDF	; 223
    3d22:	80 83       	st	Z, r24
    3d24:	ff 91       	pop	r31
    3d26:	ef 91       	pop	r30
    3d28:	9f 91       	pop	r25
    3d2a:	8f 91       	pop	r24
    3d2c:	0f 90       	pop	r0
    3d2e:	0b be       	out	0x3b, r0	; 59
    3d30:	0f 90       	pop	r0
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	0f 90       	pop	r0
    3d36:	1f 90       	pop	r1
    3d38:	18 95       	reti

00003d3a <_Z10uart2_initj>:
    3d3a:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZL12UART2_TxHead>
    3d3e:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <_ZL12UART2_TxTail>
    3d42:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <_ZL12UART2_RxHead>
    3d46:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZL12UART2_RxTail>
    3d4a:	99 23       	and	r25, r25
    3d4c:	24 f4       	brge	.+8      	; 0x3d56 <_Z10uart2_initj+0x1c>
    3d4e:	22 e0       	ldi	r18, 0x02	; 2
    3d50:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    3d54:	9f 77       	andi	r25, 0x7F	; 127
    3d56:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    3d5a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    3d5e:	88 e9       	ldi	r24, 0x98	; 152
    3d60:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    3d64:	86 e0       	ldi	r24, 0x06	; 6
    3d66:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    3d6a:	08 95       	ret

00003d6c <_Z10uart2_getcv>:
    3d6c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <buffer2>
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	08 95       	ret

00003d74 <_Z10uart2_putch>:
    3d74:	20 91 cc 04 	lds	r18, 0x04CC	; 0x8004cc <_ZL12UART2_TxHead>
    3d78:	2f 5f       	subi	r18, 0xFF	; 255
    3d7a:	2f 71       	andi	r18, 0x1F	; 31
    3d7c:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <_ZL12UART2_TxTail>
    3d80:	29 17       	cp	r18, r25
    3d82:	e1 f3       	breq	.-8      	; 0x3d7c <_Z10uart2_putch+0x8>
    3d84:	e2 2f       	mov	r30, r18
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	e3 53       	subi	r30, 0x33	; 51
    3d8a:	fb 4f       	sbci	r31, 0xFB	; 251
    3d8c:	80 83       	st	Z, r24
    3d8e:	20 93 cc 04 	sts	0x04CC, r18	; 0x8004cc <_ZL12UART2_TxHead>
    3d92:	e1 ed       	ldi	r30, 0xD1	; 209
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	80 62       	ori	r24, 0x20	; 32
    3d9a:	80 83       	st	Z, r24
    3d9c:	08 95       	ret

00003d9e <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    3d9e:	1f 92       	push	r1
    3da0:	0f 92       	push	r0
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	0f 92       	push	r0
    3da6:	11 24       	eor	r1, r1
    3da8:	0b b6       	in	r0, 0x3b	; 59
    3daa:	0f 92       	push	r0
    3dac:	2f 93       	push	r18
    3dae:	8f 93       	push	r24
    3db0:	9f 93       	push	r25
    3db2:	ef 93       	push	r30
    3db4:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    3db6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    3dba:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    3dbe:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    3dc0:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZL12UART3_RxHead>
    3dc4:	ef 5f       	subi	r30, 0xFF	; 255
    3dc6:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    3dc8:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <_ZL12UART3_RxTail>
    3dcc:	e9 17       	cp	r30, r25
    3dce:	39 f0       	breq	.+14     	; 0x3dde <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    3dd0:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	e7 57       	subi	r30, 0x77	; 119
    3dd8:	fb 4f       	sbci	r31, 0xFB	; 251
    3dda:	20 83       	st	Z, r18
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3dde:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    3de0:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <_ZL17UART3_LastRxError>
}
    3de4:	ff 91       	pop	r31
    3de6:	ef 91       	pop	r30
    3de8:	9f 91       	pop	r25
    3dea:	8f 91       	pop	r24
    3dec:	2f 91       	pop	r18
    3dee:	0f 90       	pop	r0
    3df0:	0b be       	out	0x3b, r0	; 59
    3df2:	0f 90       	pop	r0
    3df4:	0f be       	out	0x3f, r0	; 63
    3df6:	0f 90       	pop	r0
    3df8:	1f 90       	pop	r1
    3dfa:	18 95       	reti

00003dfc <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    3dfc:	1f 92       	push	r1
    3dfe:	0f 92       	push	r0
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	0f 92       	push	r0
    3e04:	11 24       	eor	r1, r1
    3e06:	0b b6       	in	r0, 0x3b	; 59
    3e08:	0f 92       	push	r0
    3e0a:	8f 93       	push	r24
    3e0c:	9f 93       	push	r25
    3e0e:	ef 93       	push	r30
    3e10:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    3e12:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <_ZL12UART3_TxHead>
    3e16:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <_ZL12UART3_TxTail>
    3e1a:	98 17       	cp	r25, r24
    3e1c:	69 f0       	breq	.+26     	; 0x3e38 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    3e1e:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <_ZL12UART3_TxTail>
    3e22:	ef 5f       	subi	r30, 0xFF	; 255
    3e24:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    3e26:	e0 93 87 04 	sts	0x0487, r30	; 0x800487 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	e7 55       	subi	r30, 0x57	; 87
    3e2e:	fb 4f       	sbci	r31, 0xFB	; 251
    3e30:	80 81       	ld	r24, Z
    3e32:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3e36:	05 c0       	rjmp	.+10     	; 0x3e42 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    3e38:	e1 e3       	ldi	r30, 0x31	; 49
    3e3a:	f1 e0       	ldi	r31, 0x01	; 1
    3e3c:	80 81       	ld	r24, Z
    3e3e:	8f 7d       	andi	r24, 0xDF	; 223
    3e40:	80 83       	st	Z, r24
	}
}
    3e42:	ff 91       	pop	r31
    3e44:	ef 91       	pop	r30
    3e46:	9f 91       	pop	r25
    3e48:	8f 91       	pop	r24
    3e4a:	0f 90       	pop	r0
    3e4c:	0b be       	out	0x3b, r0	; 59
    3e4e:	0f 90       	pop	r0
    3e50:	0f be       	out	0x3f, r0	; 63
    3e52:	0f 90       	pop	r0
    3e54:	1f 90       	pop	r1
    3e56:	18 95       	reti

00003e58 <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    3e58:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    3e5c:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    3e60:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    3e64:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    3e68:	99 23       	and	r25, r25
    3e6a:	24 f4       	brge	.+8      	; 0x3e74 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    3e6c:	26 e0       	ldi	r18, 0x06	; 6
    3e6e:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    3e72:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    3e74:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    3e78:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    3e7c:	88 e9       	ldi	r24, 0x98	; 152
    3e7e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    3e82:	86 e0       	ldi	r24, 0x06	; 6
    3e84:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    3e88:	08 95       	ret

00003e8a <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    3e8a:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <_ZL12UART3_RxHead>
    3e8e:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <_ZL12UART3_RxTail>
    3e92:	98 17       	cp	r25, r24
    3e94:	91 f0       	breq	.+36     	; 0x3eba <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    3e96:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <_ZL12UART3_RxTail>
    3e9a:	ef 5f       	subi	r30, 0xFF	; 255
    3e9c:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    3e9e:	e0 93 85 04 	sts	0x0485, r30	; 0x800485 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	e7 57       	subi	r30, 0x77	; 119
    3ea6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ea8:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    3eaa:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_ZL17UART3_LastRxError>
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	98 2f       	mov	r25, r24
    3eb2:	88 27       	eor	r24, r24
    3eb4:	82 0f       	add	r24, r18
    3eb6:	91 1d       	adc	r25, r1
    3eb8:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    3ebe:	08 95       	ret

00003ec0 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    3ec0:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <_ZL12UART3_TxHead>
    3ec4:	2f 5f       	subi	r18, 0xFF	; 255
    3ec6:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    3ec8:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZL12UART3_TxTail>
    3ecc:	29 17       	cp	r18, r25
    3ece:	e1 f3       	breq	.-8      	; 0x3ec8 <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    3ed0:	e2 2f       	mov	r30, r18
    3ed2:	f0 e0       	ldi	r31, 0x00	; 0
    3ed4:	e7 55       	subi	r30, 0x57	; 87
    3ed6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ed8:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    3eda:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    3ede:	e1 e3       	ldi	r30, 0x31	; 49
    3ee0:	f1 e0       	ldi	r31, 0x01	; 1
    3ee2:	80 81       	ld	r24, Z
    3ee4:	80 62       	ori	r24, 0x20	; 32
    3ee6:	80 83       	st	Z, r24
    3ee8:	08 95       	ret

00003eea <__subsf3>:
    3eea:	50 58       	subi	r21, 0x80	; 128

00003eec <__addsf3>:
    3eec:	bb 27       	eor	r27, r27
    3eee:	aa 27       	eor	r26, r26
    3ef0:	0e d0       	rcall	.+28     	; 0x3f0e <__addsf3x>
    3ef2:	27 c2       	rjmp	.+1102   	; 0x4342 <__fp_round>
    3ef4:	f0 d1       	rcall	.+992    	; 0x42d6 <__fp_pscA>
    3ef6:	30 f0       	brcs	.+12     	; 0x3f04 <__addsf3+0x18>
    3ef8:	f5 d1       	rcall	.+1002   	; 0x42e4 <__fp_pscB>
    3efa:	20 f0       	brcs	.+8      	; 0x3f04 <__addsf3+0x18>
    3efc:	31 f4       	brne	.+12     	; 0x3f0a <__addsf3+0x1e>
    3efe:	9f 3f       	cpi	r25, 0xFF	; 255
    3f00:	11 f4       	brne	.+4      	; 0x3f06 <__addsf3+0x1a>
    3f02:	1e f4       	brtc	.+6      	; 0x3f0a <__addsf3+0x1e>
    3f04:	c0 c1       	rjmp	.+896    	; 0x4286 <__fp_nan>
    3f06:	0e f4       	brtc	.+2      	; 0x3f0a <__addsf3+0x1e>
    3f08:	e0 95       	com	r30
    3f0a:	e7 fb       	bst	r30, 7
    3f0c:	b6 c1       	rjmp	.+876    	; 0x427a <__fp_inf>

00003f0e <__addsf3x>:
    3f0e:	e9 2f       	mov	r30, r25
    3f10:	3a d2       	rcall	.+1140   	; 0x4386 <__fp_split3>
    3f12:	80 f3       	brcs	.-32     	; 0x3ef4 <__addsf3+0x8>
    3f14:	ba 17       	cp	r27, r26
    3f16:	62 07       	cpc	r22, r18
    3f18:	73 07       	cpc	r23, r19
    3f1a:	84 07       	cpc	r24, r20
    3f1c:	95 07       	cpc	r25, r21
    3f1e:	18 f0       	brcs	.+6      	; 0x3f26 <__addsf3x+0x18>
    3f20:	71 f4       	brne	.+28     	; 0x3f3e <__addsf3x+0x30>
    3f22:	9e f5       	brtc	.+102    	; 0x3f8a <__addsf3x+0x7c>
    3f24:	52 c2       	rjmp	.+1188   	; 0x43ca <__fp_zero>
    3f26:	0e f4       	brtc	.+2      	; 0x3f2a <__addsf3x+0x1c>
    3f28:	e0 95       	com	r30
    3f2a:	0b 2e       	mov	r0, r27
    3f2c:	ba 2f       	mov	r27, r26
    3f2e:	a0 2d       	mov	r26, r0
    3f30:	0b 01       	movw	r0, r22
    3f32:	b9 01       	movw	r22, r18
    3f34:	90 01       	movw	r18, r0
    3f36:	0c 01       	movw	r0, r24
    3f38:	ca 01       	movw	r24, r20
    3f3a:	a0 01       	movw	r20, r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	ff 27       	eor	r31, r31
    3f40:	59 1b       	sub	r21, r25
    3f42:	99 f0       	breq	.+38     	; 0x3f6a <__addsf3x+0x5c>
    3f44:	59 3f       	cpi	r21, 0xF9	; 249
    3f46:	50 f4       	brcc	.+20     	; 0x3f5c <__addsf3x+0x4e>
    3f48:	50 3e       	cpi	r21, 0xE0	; 224
    3f4a:	68 f1       	brcs	.+90     	; 0x3fa6 <__addsf3x+0x98>
    3f4c:	1a 16       	cp	r1, r26
    3f4e:	f0 40       	sbci	r31, 0x00	; 0
    3f50:	a2 2f       	mov	r26, r18
    3f52:	23 2f       	mov	r18, r19
    3f54:	34 2f       	mov	r19, r20
    3f56:	44 27       	eor	r20, r20
    3f58:	58 5f       	subi	r21, 0xF8	; 248
    3f5a:	f3 cf       	rjmp	.-26     	; 0x3f42 <__addsf3x+0x34>
    3f5c:	46 95       	lsr	r20
    3f5e:	37 95       	ror	r19
    3f60:	27 95       	ror	r18
    3f62:	a7 95       	ror	r26
    3f64:	f0 40       	sbci	r31, 0x00	; 0
    3f66:	53 95       	inc	r21
    3f68:	c9 f7       	brne	.-14     	; 0x3f5c <__addsf3x+0x4e>
    3f6a:	7e f4       	brtc	.+30     	; 0x3f8a <__addsf3x+0x7c>
    3f6c:	1f 16       	cp	r1, r31
    3f6e:	ba 0b       	sbc	r27, r26
    3f70:	62 0b       	sbc	r22, r18
    3f72:	73 0b       	sbc	r23, r19
    3f74:	84 0b       	sbc	r24, r20
    3f76:	ba f0       	brmi	.+46     	; 0x3fa6 <__addsf3x+0x98>
    3f78:	91 50       	subi	r25, 0x01	; 1
    3f7a:	a1 f0       	breq	.+40     	; 0x3fa4 <__addsf3x+0x96>
    3f7c:	ff 0f       	add	r31, r31
    3f7e:	bb 1f       	adc	r27, r27
    3f80:	66 1f       	adc	r22, r22
    3f82:	77 1f       	adc	r23, r23
    3f84:	88 1f       	adc	r24, r24
    3f86:	c2 f7       	brpl	.-16     	; 0x3f78 <__addsf3x+0x6a>
    3f88:	0e c0       	rjmp	.+28     	; 0x3fa6 <__addsf3x+0x98>
    3f8a:	ba 0f       	add	r27, r26
    3f8c:	62 1f       	adc	r22, r18
    3f8e:	73 1f       	adc	r23, r19
    3f90:	84 1f       	adc	r24, r20
    3f92:	48 f4       	brcc	.+18     	; 0x3fa6 <__addsf3x+0x98>
    3f94:	87 95       	ror	r24
    3f96:	77 95       	ror	r23
    3f98:	67 95       	ror	r22
    3f9a:	b7 95       	ror	r27
    3f9c:	f7 95       	ror	r31
    3f9e:	9e 3f       	cpi	r25, 0xFE	; 254
    3fa0:	08 f0       	brcs	.+2      	; 0x3fa4 <__addsf3x+0x96>
    3fa2:	b3 cf       	rjmp	.-154    	; 0x3f0a <__addsf3+0x1e>
    3fa4:	93 95       	inc	r25
    3fa6:	88 0f       	add	r24, r24
    3fa8:	08 f0       	brcs	.+2      	; 0x3fac <__addsf3x+0x9e>
    3faa:	99 27       	eor	r25, r25
    3fac:	ee 0f       	add	r30, r30
    3fae:	97 95       	ror	r25
    3fb0:	87 95       	ror	r24
    3fb2:	08 95       	ret
    3fb4:	90 d1       	rcall	.+800    	; 0x42d6 <__fp_pscA>
    3fb6:	58 f0       	brcs	.+22     	; 0x3fce <__addsf3x+0xc0>
    3fb8:	80 e8       	ldi	r24, 0x80	; 128
    3fba:	91 e0       	ldi	r25, 0x01	; 1
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <__addsf3x+0xb2>
    3fbe:	9e ef       	ldi	r25, 0xFE	; 254
    3fc0:	91 d1       	rcall	.+802    	; 0x42e4 <__fp_pscB>
    3fc2:	28 f0       	brcs	.+10     	; 0x3fce <__addsf3x+0xc0>
    3fc4:	40 e8       	ldi	r20, 0x80	; 128
    3fc6:	51 e0       	ldi	r21, 0x01	; 1
    3fc8:	59 f4       	brne	.+22     	; 0x3fe0 <atan2+0xe>
    3fca:	5e ef       	ldi	r21, 0xFE	; 254
    3fcc:	09 c0       	rjmp	.+18     	; 0x3fe0 <atan2+0xe>
    3fce:	5b c1       	rjmp	.+694    	; 0x4286 <__fp_nan>
    3fd0:	fc c1       	rjmp	.+1016   	; 0x43ca <__fp_zero>

00003fd2 <atan2>:
    3fd2:	e9 2f       	mov	r30, r25
    3fd4:	e0 78       	andi	r30, 0x80	; 128
    3fd6:	d7 d1       	rcall	.+942    	; 0x4386 <__fp_split3>
    3fd8:	68 f3       	brcs	.-38     	; 0x3fb4 <__addsf3x+0xa6>
    3fda:	09 2e       	mov	r0, r25
    3fdc:	05 2a       	or	r0, r21
    3fde:	c1 f3       	breq	.-16     	; 0x3fd0 <__addsf3x+0xc2>
    3fe0:	26 17       	cp	r18, r22
    3fe2:	37 07       	cpc	r19, r23
    3fe4:	48 07       	cpc	r20, r24
    3fe6:	59 07       	cpc	r21, r25
    3fe8:	38 f0       	brcs	.+14     	; 0x3ff8 <atan2+0x26>
    3fea:	0e 2e       	mov	r0, r30
    3fec:	07 f8       	bld	r0, 7
    3fee:	e0 25       	eor	r30, r0
    3ff0:	69 f0       	breq	.+26     	; 0x400c <atan2+0x3a>
    3ff2:	e0 25       	eor	r30, r0
    3ff4:	e0 64       	ori	r30, 0x40	; 64
    3ff6:	0a c0       	rjmp	.+20     	; 0x400c <atan2+0x3a>
    3ff8:	ef 63       	ori	r30, 0x3F	; 63
    3ffa:	07 f8       	bld	r0, 7
    3ffc:	00 94       	com	r0
    3ffe:	07 fa       	bst	r0, 7
    4000:	db 01       	movw	r26, r22
    4002:	b9 01       	movw	r22, r18
    4004:	9d 01       	movw	r18, r26
    4006:	dc 01       	movw	r26, r24
    4008:	ca 01       	movw	r24, r20
    400a:	ad 01       	movw	r20, r26
    400c:	ef 93       	push	r30
    400e:	4a d0       	rcall	.+148    	; 0x40a4 <__divsf3_pse>
    4010:	98 d1       	rcall	.+816    	; 0x4342 <__fp_round>
    4012:	0a d0       	rcall	.+20     	; 0x4028 <atan>
    4014:	5f 91       	pop	r21
    4016:	55 23       	and	r21, r21
    4018:	31 f0       	breq	.+12     	; 0x4026 <atan2+0x54>
    401a:	2b ed       	ldi	r18, 0xDB	; 219
    401c:	3f e0       	ldi	r19, 0x0F	; 15
    401e:	49 e4       	ldi	r20, 0x49	; 73
    4020:	50 fd       	sbrc	r21, 0
    4022:	49 ec       	ldi	r20, 0xC9	; 201
    4024:	63 cf       	rjmp	.-314    	; 0x3eec <__addsf3>
    4026:	08 95       	ret

00004028 <atan>:
    4028:	df 93       	push	r29
    402a:	dd 27       	eor	r29, r29
    402c:	b9 2f       	mov	r27, r25
    402e:	bf 77       	andi	r27, 0x7F	; 127
    4030:	40 e8       	ldi	r20, 0x80	; 128
    4032:	5f e3       	ldi	r21, 0x3F	; 63
    4034:	16 16       	cp	r1, r22
    4036:	17 06       	cpc	r1, r23
    4038:	48 07       	cpc	r20, r24
    403a:	5b 07       	cpc	r21, r27
    403c:	10 f4       	brcc	.+4      	; 0x4042 <atan+0x1a>
    403e:	d9 2f       	mov	r29, r25
    4040:	cf d1       	rcall	.+926    	; 0x43e0 <inverse>
    4042:	9f 93       	push	r25
    4044:	8f 93       	push	r24
    4046:	7f 93       	push	r23
    4048:	6f 93       	push	r22
    404a:	7c d2       	rcall	.+1272   	; 0x4544 <square>
    404c:	e4 ee       	ldi	r30, 0xE4	; 228
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	1d d1       	rcall	.+570    	; 0x428c <__fp_powser>
    4052:	77 d1       	rcall	.+750    	; 0x4342 <__fp_round>
    4054:	2f 91       	pop	r18
    4056:	3f 91       	pop	r19
    4058:	4f 91       	pop	r20
    405a:	5f 91       	pop	r21
    405c:	d4 d1       	rcall	.+936    	; 0x4406 <__mulsf3x>
    405e:	dd 23       	and	r29, r29
    4060:	49 f0       	breq	.+18     	; 0x4074 <atan+0x4c>
    4062:	90 58       	subi	r25, 0x80	; 128
    4064:	a2 ea       	ldi	r26, 0xA2	; 162
    4066:	2a ed       	ldi	r18, 0xDA	; 218
    4068:	3f e0       	ldi	r19, 0x0F	; 15
    406a:	49 ec       	ldi	r20, 0xC9	; 201
    406c:	5f e3       	ldi	r21, 0x3F	; 63
    406e:	d0 78       	andi	r29, 0x80	; 128
    4070:	5d 27       	eor	r21, r29
    4072:	4d df       	rcall	.-358    	; 0x3f0e <__addsf3x>
    4074:	df 91       	pop	r29
    4076:	65 c1       	rjmp	.+714    	; 0x4342 <__fp_round>

00004078 <__cmpsf2>:
    4078:	dc d0       	rcall	.+440    	; 0x4232 <__fp_cmp>
    407a:	08 f4       	brcc	.+2      	; 0x407e <__cmpsf2+0x6>
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	08 95       	ret

00004080 <cos>:
    4080:	39 d1       	rcall	.+626    	; 0x42f4 <__fp_rempio2>
    4082:	e3 95       	inc	r30
    4084:	6f c1       	rjmp	.+734    	; 0x4364 <__fp_sinus>

00004086 <__divsf3>:
    4086:	0c d0       	rcall	.+24     	; 0x40a0 <__divsf3x>
    4088:	5c c1       	rjmp	.+696    	; 0x4342 <__fp_round>
    408a:	2c d1       	rcall	.+600    	; 0x42e4 <__fp_pscB>
    408c:	40 f0       	brcs	.+16     	; 0x409e <__divsf3+0x18>
    408e:	23 d1       	rcall	.+582    	; 0x42d6 <__fp_pscA>
    4090:	30 f0       	brcs	.+12     	; 0x409e <__divsf3+0x18>
    4092:	21 f4       	brne	.+8      	; 0x409c <__divsf3+0x16>
    4094:	5f 3f       	cpi	r21, 0xFF	; 255
    4096:	19 f0       	breq	.+6      	; 0x409e <__divsf3+0x18>
    4098:	f0 c0       	rjmp	.+480    	; 0x427a <__fp_inf>
    409a:	51 11       	cpse	r21, r1
    409c:	97 c1       	rjmp	.+814    	; 0x43cc <__fp_szero>
    409e:	f3 c0       	rjmp	.+486    	; 0x4286 <__fp_nan>

000040a0 <__divsf3x>:
    40a0:	72 d1       	rcall	.+740    	; 0x4386 <__fp_split3>
    40a2:	98 f3       	brcs	.-26     	; 0x408a <__divsf3+0x4>

000040a4 <__divsf3_pse>:
    40a4:	99 23       	and	r25, r25
    40a6:	c9 f3       	breq	.-14     	; 0x409a <__divsf3+0x14>
    40a8:	55 23       	and	r21, r21
    40aa:	b1 f3       	breq	.-20     	; 0x4098 <__divsf3+0x12>
    40ac:	95 1b       	sub	r25, r21
    40ae:	55 0b       	sbc	r21, r21
    40b0:	bb 27       	eor	r27, r27
    40b2:	aa 27       	eor	r26, r26
    40b4:	62 17       	cp	r22, r18
    40b6:	73 07       	cpc	r23, r19
    40b8:	84 07       	cpc	r24, r20
    40ba:	38 f0       	brcs	.+14     	; 0x40ca <__divsf3_pse+0x26>
    40bc:	9f 5f       	subi	r25, 0xFF	; 255
    40be:	5f 4f       	sbci	r21, 0xFF	; 255
    40c0:	22 0f       	add	r18, r18
    40c2:	33 1f       	adc	r19, r19
    40c4:	44 1f       	adc	r20, r20
    40c6:	aa 1f       	adc	r26, r26
    40c8:	a9 f3       	breq	.-22     	; 0x40b4 <__divsf3_pse+0x10>
    40ca:	33 d0       	rcall	.+102    	; 0x4132 <__divsf3_pse+0x8e>
    40cc:	0e 2e       	mov	r0, r30
    40ce:	3a f0       	brmi	.+14     	; 0x40de <__divsf3_pse+0x3a>
    40d0:	e0 e8       	ldi	r30, 0x80	; 128
    40d2:	30 d0       	rcall	.+96     	; 0x4134 <__divsf3_pse+0x90>
    40d4:	91 50       	subi	r25, 0x01	; 1
    40d6:	50 40       	sbci	r21, 0x00	; 0
    40d8:	e6 95       	lsr	r30
    40da:	00 1c       	adc	r0, r0
    40dc:	ca f7       	brpl	.-14     	; 0x40d0 <__divsf3_pse+0x2c>
    40de:	29 d0       	rcall	.+82     	; 0x4132 <__divsf3_pse+0x8e>
    40e0:	fe 2f       	mov	r31, r30
    40e2:	27 d0       	rcall	.+78     	; 0x4132 <__divsf3_pse+0x8e>
    40e4:	66 0f       	add	r22, r22
    40e6:	77 1f       	adc	r23, r23
    40e8:	88 1f       	adc	r24, r24
    40ea:	bb 1f       	adc	r27, r27
    40ec:	26 17       	cp	r18, r22
    40ee:	37 07       	cpc	r19, r23
    40f0:	48 07       	cpc	r20, r24
    40f2:	ab 07       	cpc	r26, r27
    40f4:	b0 e8       	ldi	r27, 0x80	; 128
    40f6:	09 f0       	breq	.+2      	; 0x40fa <__divsf3_pse+0x56>
    40f8:	bb 0b       	sbc	r27, r27
    40fa:	80 2d       	mov	r24, r0
    40fc:	bf 01       	movw	r22, r30
    40fe:	ff 27       	eor	r31, r31
    4100:	93 58       	subi	r25, 0x83	; 131
    4102:	5f 4f       	sbci	r21, 0xFF	; 255
    4104:	2a f0       	brmi	.+10     	; 0x4110 <__divsf3_pse+0x6c>
    4106:	9e 3f       	cpi	r25, 0xFE	; 254
    4108:	51 05       	cpc	r21, r1
    410a:	68 f0       	brcs	.+26     	; 0x4126 <__divsf3_pse+0x82>
    410c:	b6 c0       	rjmp	.+364    	; 0x427a <__fp_inf>
    410e:	5e c1       	rjmp	.+700    	; 0x43cc <__fp_szero>
    4110:	5f 3f       	cpi	r21, 0xFF	; 255
    4112:	ec f3       	brlt	.-6      	; 0x410e <__divsf3_pse+0x6a>
    4114:	98 3e       	cpi	r25, 0xE8	; 232
    4116:	dc f3       	brlt	.-10     	; 0x410e <__divsf3_pse+0x6a>
    4118:	86 95       	lsr	r24
    411a:	77 95       	ror	r23
    411c:	67 95       	ror	r22
    411e:	b7 95       	ror	r27
    4120:	f7 95       	ror	r31
    4122:	9f 5f       	subi	r25, 0xFF	; 255
    4124:	c9 f7       	brne	.-14     	; 0x4118 <__divsf3_pse+0x74>
    4126:	88 0f       	add	r24, r24
    4128:	91 1d       	adc	r25, r1
    412a:	96 95       	lsr	r25
    412c:	87 95       	ror	r24
    412e:	97 f9       	bld	r25, 7
    4130:	08 95       	ret
    4132:	e1 e0       	ldi	r30, 0x01	; 1
    4134:	66 0f       	add	r22, r22
    4136:	77 1f       	adc	r23, r23
    4138:	88 1f       	adc	r24, r24
    413a:	bb 1f       	adc	r27, r27
    413c:	62 17       	cp	r22, r18
    413e:	73 07       	cpc	r23, r19
    4140:	84 07       	cpc	r24, r20
    4142:	ba 07       	cpc	r27, r26
    4144:	20 f0       	brcs	.+8      	; 0x414e <__divsf3_pse+0xaa>
    4146:	62 1b       	sub	r22, r18
    4148:	73 0b       	sbc	r23, r19
    414a:	84 0b       	sbc	r24, r20
    414c:	ba 0b       	sbc	r27, r26
    414e:	ee 1f       	adc	r30, r30
    4150:	88 f7       	brcc	.-30     	; 0x4134 <__divsf3_pse+0x90>
    4152:	e0 95       	com	r30
    4154:	08 95       	ret

00004156 <__fixsfsi>:
    4156:	04 d0       	rcall	.+8      	; 0x4160 <__fixunssfsi>
    4158:	68 94       	set
    415a:	b1 11       	cpse	r27, r1
    415c:	37 c1       	rjmp	.+622    	; 0x43cc <__fp_szero>
    415e:	08 95       	ret

00004160 <__fixunssfsi>:
    4160:	1a d1       	rcall	.+564    	; 0x4396 <__fp_splitA>
    4162:	88 f0       	brcs	.+34     	; 0x4186 <__fixunssfsi+0x26>
    4164:	9f 57       	subi	r25, 0x7F	; 127
    4166:	90 f0       	brcs	.+36     	; 0x418c <__fixunssfsi+0x2c>
    4168:	b9 2f       	mov	r27, r25
    416a:	99 27       	eor	r25, r25
    416c:	b7 51       	subi	r27, 0x17	; 23
    416e:	a0 f0       	brcs	.+40     	; 0x4198 <__fixunssfsi+0x38>
    4170:	d1 f0       	breq	.+52     	; 0x41a6 <__fixunssfsi+0x46>
    4172:	66 0f       	add	r22, r22
    4174:	77 1f       	adc	r23, r23
    4176:	88 1f       	adc	r24, r24
    4178:	99 1f       	adc	r25, r25
    417a:	1a f0       	brmi	.+6      	; 0x4182 <__fixunssfsi+0x22>
    417c:	ba 95       	dec	r27
    417e:	c9 f7       	brne	.-14     	; 0x4172 <__fixunssfsi+0x12>
    4180:	12 c0       	rjmp	.+36     	; 0x41a6 <__fixunssfsi+0x46>
    4182:	b1 30       	cpi	r27, 0x01	; 1
    4184:	81 f0       	breq	.+32     	; 0x41a6 <__fixunssfsi+0x46>
    4186:	21 d1       	rcall	.+578    	; 0x43ca <__fp_zero>
    4188:	b1 e0       	ldi	r27, 0x01	; 1
    418a:	08 95       	ret
    418c:	1e c1       	rjmp	.+572    	; 0x43ca <__fp_zero>
    418e:	67 2f       	mov	r22, r23
    4190:	78 2f       	mov	r23, r24
    4192:	88 27       	eor	r24, r24
    4194:	b8 5f       	subi	r27, 0xF8	; 248
    4196:	39 f0       	breq	.+14     	; 0x41a6 <__fixunssfsi+0x46>
    4198:	b9 3f       	cpi	r27, 0xF9	; 249
    419a:	cc f3       	brlt	.-14     	; 0x418e <__fixunssfsi+0x2e>
    419c:	86 95       	lsr	r24
    419e:	77 95       	ror	r23
    41a0:	67 95       	ror	r22
    41a2:	b3 95       	inc	r27
    41a4:	d9 f7       	brne	.-10     	; 0x419c <__fixunssfsi+0x3c>
    41a6:	3e f4       	brtc	.+14     	; 0x41b6 <__fixunssfsi+0x56>
    41a8:	90 95       	com	r25
    41aa:	80 95       	com	r24
    41ac:	70 95       	com	r23
    41ae:	61 95       	neg	r22
    41b0:	7f 4f       	sbci	r23, 0xFF	; 255
    41b2:	8f 4f       	sbci	r24, 0xFF	; 255
    41b4:	9f 4f       	sbci	r25, 0xFF	; 255
    41b6:	08 95       	ret

000041b8 <__floatunsisf>:
    41b8:	e8 94       	clt
    41ba:	09 c0       	rjmp	.+18     	; 0x41ce <__floatsisf+0x12>

000041bc <__floatsisf>:
    41bc:	97 fb       	bst	r25, 7
    41be:	3e f4       	brtc	.+14     	; 0x41ce <__floatsisf+0x12>
    41c0:	90 95       	com	r25
    41c2:	80 95       	com	r24
    41c4:	70 95       	com	r23
    41c6:	61 95       	neg	r22
    41c8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ca:	8f 4f       	sbci	r24, 0xFF	; 255
    41cc:	9f 4f       	sbci	r25, 0xFF	; 255
    41ce:	99 23       	and	r25, r25
    41d0:	a9 f0       	breq	.+42     	; 0x41fc <__floatsisf+0x40>
    41d2:	f9 2f       	mov	r31, r25
    41d4:	96 e9       	ldi	r25, 0x96	; 150
    41d6:	bb 27       	eor	r27, r27
    41d8:	93 95       	inc	r25
    41da:	f6 95       	lsr	r31
    41dc:	87 95       	ror	r24
    41de:	77 95       	ror	r23
    41e0:	67 95       	ror	r22
    41e2:	b7 95       	ror	r27
    41e4:	f1 11       	cpse	r31, r1
    41e6:	f8 cf       	rjmp	.-16     	; 0x41d8 <__floatsisf+0x1c>
    41e8:	fa f4       	brpl	.+62     	; 0x4228 <__floatsisf+0x6c>
    41ea:	bb 0f       	add	r27, r27
    41ec:	11 f4       	brne	.+4      	; 0x41f2 <__floatsisf+0x36>
    41ee:	60 ff       	sbrs	r22, 0
    41f0:	1b c0       	rjmp	.+54     	; 0x4228 <__floatsisf+0x6c>
    41f2:	6f 5f       	subi	r22, 0xFF	; 255
    41f4:	7f 4f       	sbci	r23, 0xFF	; 255
    41f6:	8f 4f       	sbci	r24, 0xFF	; 255
    41f8:	9f 4f       	sbci	r25, 0xFF	; 255
    41fa:	16 c0       	rjmp	.+44     	; 0x4228 <__floatsisf+0x6c>
    41fc:	88 23       	and	r24, r24
    41fe:	11 f0       	breq	.+4      	; 0x4204 <__floatsisf+0x48>
    4200:	96 e9       	ldi	r25, 0x96	; 150
    4202:	11 c0       	rjmp	.+34     	; 0x4226 <__floatsisf+0x6a>
    4204:	77 23       	and	r23, r23
    4206:	21 f0       	breq	.+8      	; 0x4210 <__floatsisf+0x54>
    4208:	9e e8       	ldi	r25, 0x8E	; 142
    420a:	87 2f       	mov	r24, r23
    420c:	76 2f       	mov	r23, r22
    420e:	05 c0       	rjmp	.+10     	; 0x421a <__floatsisf+0x5e>
    4210:	66 23       	and	r22, r22
    4212:	71 f0       	breq	.+28     	; 0x4230 <__floatsisf+0x74>
    4214:	96 e8       	ldi	r25, 0x86	; 134
    4216:	86 2f       	mov	r24, r22
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	60 e0       	ldi	r22, 0x00	; 0
    421c:	2a f0       	brmi	.+10     	; 0x4228 <__floatsisf+0x6c>
    421e:	9a 95       	dec	r25
    4220:	66 0f       	add	r22, r22
    4222:	77 1f       	adc	r23, r23
    4224:	88 1f       	adc	r24, r24
    4226:	da f7       	brpl	.-10     	; 0x421e <__floatsisf+0x62>
    4228:	88 0f       	add	r24, r24
    422a:	96 95       	lsr	r25
    422c:	87 95       	ror	r24
    422e:	97 f9       	bld	r25, 7
    4230:	08 95       	ret

00004232 <__fp_cmp>:
    4232:	99 0f       	add	r25, r25
    4234:	00 08       	sbc	r0, r0
    4236:	55 0f       	add	r21, r21
    4238:	aa 0b       	sbc	r26, r26
    423a:	e0 e8       	ldi	r30, 0x80	; 128
    423c:	fe ef       	ldi	r31, 0xFE	; 254
    423e:	16 16       	cp	r1, r22
    4240:	17 06       	cpc	r1, r23
    4242:	e8 07       	cpc	r30, r24
    4244:	f9 07       	cpc	r31, r25
    4246:	c0 f0       	brcs	.+48     	; 0x4278 <__fp_cmp+0x46>
    4248:	12 16       	cp	r1, r18
    424a:	13 06       	cpc	r1, r19
    424c:	e4 07       	cpc	r30, r20
    424e:	f5 07       	cpc	r31, r21
    4250:	98 f0       	brcs	.+38     	; 0x4278 <__fp_cmp+0x46>
    4252:	62 1b       	sub	r22, r18
    4254:	73 0b       	sbc	r23, r19
    4256:	84 0b       	sbc	r24, r20
    4258:	95 0b       	sbc	r25, r21
    425a:	39 f4       	brne	.+14     	; 0x426a <__fp_cmp+0x38>
    425c:	0a 26       	eor	r0, r26
    425e:	61 f0       	breq	.+24     	; 0x4278 <__fp_cmp+0x46>
    4260:	23 2b       	or	r18, r19
    4262:	24 2b       	or	r18, r20
    4264:	25 2b       	or	r18, r21
    4266:	21 f4       	brne	.+8      	; 0x4270 <__fp_cmp+0x3e>
    4268:	08 95       	ret
    426a:	0a 26       	eor	r0, r26
    426c:	09 f4       	brne	.+2      	; 0x4270 <__fp_cmp+0x3e>
    426e:	a1 40       	sbci	r26, 0x01	; 1
    4270:	a6 95       	lsr	r26
    4272:	8f ef       	ldi	r24, 0xFF	; 255
    4274:	81 1d       	adc	r24, r1
    4276:	81 1d       	adc	r24, r1
    4278:	08 95       	ret

0000427a <__fp_inf>:
    427a:	97 f9       	bld	r25, 7
    427c:	9f 67       	ori	r25, 0x7F	; 127
    427e:	80 e8       	ldi	r24, 0x80	; 128
    4280:	70 e0       	ldi	r23, 0x00	; 0
    4282:	60 e0       	ldi	r22, 0x00	; 0
    4284:	08 95       	ret

00004286 <__fp_nan>:
    4286:	9f ef       	ldi	r25, 0xFF	; 255
    4288:	80 ec       	ldi	r24, 0xC0	; 192
    428a:	08 95       	ret

0000428c <__fp_powser>:
    428c:	df 93       	push	r29
    428e:	cf 93       	push	r28
    4290:	1f 93       	push	r17
    4292:	0f 93       	push	r16
    4294:	ff 92       	push	r15
    4296:	ef 92       	push	r14
    4298:	df 92       	push	r13
    429a:	7b 01       	movw	r14, r22
    429c:	8c 01       	movw	r16, r24
    429e:	68 94       	set
    42a0:	05 c0       	rjmp	.+10     	; 0x42ac <__fp_powser+0x20>
    42a2:	da 2e       	mov	r13, r26
    42a4:	ef 01       	movw	r28, r30
    42a6:	af d0       	rcall	.+350    	; 0x4406 <__mulsf3x>
    42a8:	fe 01       	movw	r30, r28
    42aa:	e8 94       	clt
    42ac:	a5 91       	lpm	r26, Z+
    42ae:	25 91       	lpm	r18, Z+
    42b0:	35 91       	lpm	r19, Z+
    42b2:	45 91       	lpm	r20, Z+
    42b4:	55 91       	lpm	r21, Z+
    42b6:	ae f3       	brts	.-22     	; 0x42a2 <__fp_powser+0x16>
    42b8:	ef 01       	movw	r28, r30
    42ba:	29 de       	rcall	.-942    	; 0x3f0e <__addsf3x>
    42bc:	fe 01       	movw	r30, r28
    42be:	97 01       	movw	r18, r14
    42c0:	a8 01       	movw	r20, r16
    42c2:	da 94       	dec	r13
    42c4:	79 f7       	brne	.-34     	; 0x42a4 <__fp_powser+0x18>
    42c6:	df 90       	pop	r13
    42c8:	ef 90       	pop	r14
    42ca:	ff 90       	pop	r15
    42cc:	0f 91       	pop	r16
    42ce:	1f 91       	pop	r17
    42d0:	cf 91       	pop	r28
    42d2:	df 91       	pop	r29
    42d4:	08 95       	ret

000042d6 <__fp_pscA>:
    42d6:	00 24       	eor	r0, r0
    42d8:	0a 94       	dec	r0
    42da:	16 16       	cp	r1, r22
    42dc:	17 06       	cpc	r1, r23
    42de:	18 06       	cpc	r1, r24
    42e0:	09 06       	cpc	r0, r25
    42e2:	08 95       	ret

000042e4 <__fp_pscB>:
    42e4:	00 24       	eor	r0, r0
    42e6:	0a 94       	dec	r0
    42e8:	12 16       	cp	r1, r18
    42ea:	13 06       	cpc	r1, r19
    42ec:	14 06       	cpc	r1, r20
    42ee:	05 06       	cpc	r0, r21
    42f0:	08 95       	ret
    42f2:	c9 cf       	rjmp	.-110    	; 0x4286 <__fp_nan>

000042f4 <__fp_rempio2>:
    42f4:	50 d0       	rcall	.+160    	; 0x4396 <__fp_splitA>
    42f6:	e8 f3       	brcs	.-6      	; 0x42f2 <__fp_pscB+0xe>
    42f8:	e8 94       	clt
    42fa:	e0 e0       	ldi	r30, 0x00	; 0
    42fc:	bb 27       	eor	r27, r27
    42fe:	9f 57       	subi	r25, 0x7F	; 127
    4300:	f0 f0       	brcs	.+60     	; 0x433e <__fp_rempio2+0x4a>
    4302:	2a ed       	ldi	r18, 0xDA	; 218
    4304:	3f e0       	ldi	r19, 0x0F	; 15
    4306:	49 ec       	ldi	r20, 0xC9	; 201
    4308:	06 c0       	rjmp	.+12     	; 0x4316 <__fp_rempio2+0x22>
    430a:	ee 0f       	add	r30, r30
    430c:	bb 0f       	add	r27, r27
    430e:	66 1f       	adc	r22, r22
    4310:	77 1f       	adc	r23, r23
    4312:	88 1f       	adc	r24, r24
    4314:	28 f0       	brcs	.+10     	; 0x4320 <__fp_rempio2+0x2c>
    4316:	b2 3a       	cpi	r27, 0xA2	; 162
    4318:	62 07       	cpc	r22, r18
    431a:	73 07       	cpc	r23, r19
    431c:	84 07       	cpc	r24, r20
    431e:	28 f0       	brcs	.+10     	; 0x432a <__fp_rempio2+0x36>
    4320:	b2 5a       	subi	r27, 0xA2	; 162
    4322:	62 0b       	sbc	r22, r18
    4324:	73 0b       	sbc	r23, r19
    4326:	84 0b       	sbc	r24, r20
    4328:	e3 95       	inc	r30
    432a:	9a 95       	dec	r25
    432c:	72 f7       	brpl	.-36     	; 0x430a <__fp_rempio2+0x16>
    432e:	80 38       	cpi	r24, 0x80	; 128
    4330:	30 f4       	brcc	.+12     	; 0x433e <__fp_rempio2+0x4a>
    4332:	9a 95       	dec	r25
    4334:	bb 0f       	add	r27, r27
    4336:	66 1f       	adc	r22, r22
    4338:	77 1f       	adc	r23, r23
    433a:	88 1f       	adc	r24, r24
    433c:	d2 f7       	brpl	.-12     	; 0x4332 <__fp_rempio2+0x3e>
    433e:	90 48       	sbci	r25, 0x80	; 128
    4340:	06 c1       	rjmp	.+524    	; 0x454e <__fp_mpack_finite>

00004342 <__fp_round>:
    4342:	09 2e       	mov	r0, r25
    4344:	03 94       	inc	r0
    4346:	00 0c       	add	r0, r0
    4348:	11 f4       	brne	.+4      	; 0x434e <__fp_round+0xc>
    434a:	88 23       	and	r24, r24
    434c:	52 f0       	brmi	.+20     	; 0x4362 <__fp_round+0x20>
    434e:	bb 0f       	add	r27, r27
    4350:	40 f4       	brcc	.+16     	; 0x4362 <__fp_round+0x20>
    4352:	bf 2b       	or	r27, r31
    4354:	11 f4       	brne	.+4      	; 0x435a <__fp_round+0x18>
    4356:	60 ff       	sbrs	r22, 0
    4358:	04 c0       	rjmp	.+8      	; 0x4362 <__fp_round+0x20>
    435a:	6f 5f       	subi	r22, 0xFF	; 255
    435c:	7f 4f       	sbci	r23, 0xFF	; 255
    435e:	8f 4f       	sbci	r24, 0xFF	; 255
    4360:	9f 4f       	sbci	r25, 0xFF	; 255
    4362:	08 95       	ret

00004364 <__fp_sinus>:
    4364:	ef 93       	push	r30
    4366:	e0 ff       	sbrs	r30, 0
    4368:	06 c0       	rjmp	.+12     	; 0x4376 <__fp_sinus+0x12>
    436a:	a2 ea       	ldi	r26, 0xA2	; 162
    436c:	2a ed       	ldi	r18, 0xDA	; 218
    436e:	3f e0       	ldi	r19, 0x0F	; 15
    4370:	49 ec       	ldi	r20, 0xC9	; 201
    4372:	5f eb       	ldi	r21, 0xBF	; 191
    4374:	cc dd       	rcall	.-1128   	; 0x3f0e <__addsf3x>
    4376:	e5 df       	rcall	.-54     	; 0x4342 <__fp_round>
    4378:	0f 90       	pop	r0
    437a:	03 94       	inc	r0
    437c:	01 fc       	sbrc	r0, 1
    437e:	90 58       	subi	r25, 0x80	; 128
    4380:	e1 e1       	ldi	r30, 0x11	; 17
    4382:	f1 e0       	ldi	r31, 0x01	; 1
    4384:	f7 c0       	rjmp	.+494    	; 0x4574 <__fp_powsodd>

00004386 <__fp_split3>:
    4386:	57 fd       	sbrc	r21, 7
    4388:	90 58       	subi	r25, 0x80	; 128
    438a:	44 0f       	add	r20, r20
    438c:	55 1f       	adc	r21, r21
    438e:	59 f0       	breq	.+22     	; 0x43a6 <__fp_splitA+0x10>
    4390:	5f 3f       	cpi	r21, 0xFF	; 255
    4392:	71 f0       	breq	.+28     	; 0x43b0 <__fp_splitA+0x1a>
    4394:	47 95       	ror	r20

00004396 <__fp_splitA>:
    4396:	88 0f       	add	r24, r24
    4398:	97 fb       	bst	r25, 7
    439a:	99 1f       	adc	r25, r25
    439c:	61 f0       	breq	.+24     	; 0x43b6 <__fp_splitA+0x20>
    439e:	9f 3f       	cpi	r25, 0xFF	; 255
    43a0:	79 f0       	breq	.+30     	; 0x43c0 <__fp_splitA+0x2a>
    43a2:	87 95       	ror	r24
    43a4:	08 95       	ret
    43a6:	12 16       	cp	r1, r18
    43a8:	13 06       	cpc	r1, r19
    43aa:	14 06       	cpc	r1, r20
    43ac:	55 1f       	adc	r21, r21
    43ae:	f2 cf       	rjmp	.-28     	; 0x4394 <__fp_split3+0xe>
    43b0:	46 95       	lsr	r20
    43b2:	f1 df       	rcall	.-30     	; 0x4396 <__fp_splitA>
    43b4:	08 c0       	rjmp	.+16     	; 0x43c6 <__fp_splitA+0x30>
    43b6:	16 16       	cp	r1, r22
    43b8:	17 06       	cpc	r1, r23
    43ba:	18 06       	cpc	r1, r24
    43bc:	99 1f       	adc	r25, r25
    43be:	f1 cf       	rjmp	.-30     	; 0x43a2 <__fp_splitA+0xc>
    43c0:	86 95       	lsr	r24
    43c2:	71 05       	cpc	r23, r1
    43c4:	61 05       	cpc	r22, r1
    43c6:	08 94       	sec
    43c8:	08 95       	ret

000043ca <__fp_zero>:
    43ca:	e8 94       	clt

000043cc <__fp_szero>:
    43cc:	bb 27       	eor	r27, r27
    43ce:	66 27       	eor	r22, r22
    43d0:	77 27       	eor	r23, r23
    43d2:	cb 01       	movw	r24, r22
    43d4:	97 f9       	bld	r25, 7
    43d6:	08 95       	ret

000043d8 <__gesf2>:
    43d8:	2c df       	rcall	.-424    	; 0x4232 <__fp_cmp>
    43da:	08 f4       	brcc	.+2      	; 0x43de <__gesf2+0x6>
    43dc:	8f ef       	ldi	r24, 0xFF	; 255
    43de:	08 95       	ret

000043e0 <inverse>:
    43e0:	9b 01       	movw	r18, r22
    43e2:	ac 01       	movw	r20, r24
    43e4:	60 e0       	ldi	r22, 0x00	; 0
    43e6:	70 e0       	ldi	r23, 0x00	; 0
    43e8:	80 e8       	ldi	r24, 0x80	; 128
    43ea:	9f e3       	ldi	r25, 0x3F	; 63
    43ec:	4c ce       	rjmp	.-872    	; 0x4086 <__divsf3>

000043ee <__mulsf3>:
    43ee:	0b d0       	rcall	.+22     	; 0x4406 <__mulsf3x>
    43f0:	a8 cf       	rjmp	.-176    	; 0x4342 <__fp_round>
    43f2:	71 df       	rcall	.-286    	; 0x42d6 <__fp_pscA>
    43f4:	28 f0       	brcs	.+10     	; 0x4400 <__mulsf3+0x12>
    43f6:	76 df       	rcall	.-276    	; 0x42e4 <__fp_pscB>
    43f8:	18 f0       	brcs	.+6      	; 0x4400 <__mulsf3+0x12>
    43fa:	95 23       	and	r25, r21
    43fc:	09 f0       	breq	.+2      	; 0x4400 <__mulsf3+0x12>
    43fe:	3d cf       	rjmp	.-390    	; 0x427a <__fp_inf>
    4400:	42 cf       	rjmp	.-380    	; 0x4286 <__fp_nan>
    4402:	11 24       	eor	r1, r1
    4404:	e3 cf       	rjmp	.-58     	; 0x43cc <__fp_szero>

00004406 <__mulsf3x>:
    4406:	bf df       	rcall	.-130    	; 0x4386 <__fp_split3>
    4408:	a0 f3       	brcs	.-24     	; 0x43f2 <__mulsf3+0x4>

0000440a <__mulsf3_pse>:
    440a:	95 9f       	mul	r25, r21
    440c:	d1 f3       	breq	.-12     	; 0x4402 <__mulsf3+0x14>
    440e:	95 0f       	add	r25, r21
    4410:	50 e0       	ldi	r21, 0x00	; 0
    4412:	55 1f       	adc	r21, r21
    4414:	62 9f       	mul	r22, r18
    4416:	f0 01       	movw	r30, r0
    4418:	72 9f       	mul	r23, r18
    441a:	bb 27       	eor	r27, r27
    441c:	f0 0d       	add	r31, r0
    441e:	b1 1d       	adc	r27, r1
    4420:	63 9f       	mul	r22, r19
    4422:	aa 27       	eor	r26, r26
    4424:	f0 0d       	add	r31, r0
    4426:	b1 1d       	adc	r27, r1
    4428:	aa 1f       	adc	r26, r26
    442a:	64 9f       	mul	r22, r20
    442c:	66 27       	eor	r22, r22
    442e:	b0 0d       	add	r27, r0
    4430:	a1 1d       	adc	r26, r1
    4432:	66 1f       	adc	r22, r22
    4434:	82 9f       	mul	r24, r18
    4436:	22 27       	eor	r18, r18
    4438:	b0 0d       	add	r27, r0
    443a:	a1 1d       	adc	r26, r1
    443c:	62 1f       	adc	r22, r18
    443e:	73 9f       	mul	r23, r19
    4440:	b0 0d       	add	r27, r0
    4442:	a1 1d       	adc	r26, r1
    4444:	62 1f       	adc	r22, r18
    4446:	83 9f       	mul	r24, r19
    4448:	a0 0d       	add	r26, r0
    444a:	61 1d       	adc	r22, r1
    444c:	22 1f       	adc	r18, r18
    444e:	74 9f       	mul	r23, r20
    4450:	33 27       	eor	r19, r19
    4452:	a0 0d       	add	r26, r0
    4454:	61 1d       	adc	r22, r1
    4456:	23 1f       	adc	r18, r19
    4458:	84 9f       	mul	r24, r20
    445a:	60 0d       	add	r22, r0
    445c:	21 1d       	adc	r18, r1
    445e:	82 2f       	mov	r24, r18
    4460:	76 2f       	mov	r23, r22
    4462:	6a 2f       	mov	r22, r26
    4464:	11 24       	eor	r1, r1
    4466:	9f 57       	subi	r25, 0x7F	; 127
    4468:	50 40       	sbci	r21, 0x00	; 0
    446a:	8a f0       	brmi	.+34     	; 0x448e <__mulsf3_pse+0x84>
    446c:	e1 f0       	breq	.+56     	; 0x44a6 <__mulsf3_pse+0x9c>
    446e:	88 23       	and	r24, r24
    4470:	4a f0       	brmi	.+18     	; 0x4484 <__mulsf3_pse+0x7a>
    4472:	ee 0f       	add	r30, r30
    4474:	ff 1f       	adc	r31, r31
    4476:	bb 1f       	adc	r27, r27
    4478:	66 1f       	adc	r22, r22
    447a:	77 1f       	adc	r23, r23
    447c:	88 1f       	adc	r24, r24
    447e:	91 50       	subi	r25, 0x01	; 1
    4480:	50 40       	sbci	r21, 0x00	; 0
    4482:	a9 f7       	brne	.-22     	; 0x446e <__mulsf3_pse+0x64>
    4484:	9e 3f       	cpi	r25, 0xFE	; 254
    4486:	51 05       	cpc	r21, r1
    4488:	70 f0       	brcs	.+28     	; 0x44a6 <__mulsf3_pse+0x9c>
    448a:	f7 ce       	rjmp	.-530    	; 0x427a <__fp_inf>
    448c:	9f cf       	rjmp	.-194    	; 0x43cc <__fp_szero>
    448e:	5f 3f       	cpi	r21, 0xFF	; 255
    4490:	ec f3       	brlt	.-6      	; 0x448c <__mulsf3_pse+0x82>
    4492:	98 3e       	cpi	r25, 0xE8	; 232
    4494:	dc f3       	brlt	.-10     	; 0x448c <__mulsf3_pse+0x82>
    4496:	86 95       	lsr	r24
    4498:	77 95       	ror	r23
    449a:	67 95       	ror	r22
    449c:	b7 95       	ror	r27
    449e:	f7 95       	ror	r31
    44a0:	e7 95       	ror	r30
    44a2:	9f 5f       	subi	r25, 0xFF	; 255
    44a4:	c1 f7       	brne	.-16     	; 0x4496 <__mulsf3_pse+0x8c>
    44a6:	fe 2b       	or	r31, r30
    44a8:	88 0f       	add	r24, r24
    44aa:	91 1d       	adc	r25, r1
    44ac:	96 95       	lsr	r25
    44ae:	87 95       	ror	r24
    44b0:	97 f9       	bld	r25, 7
    44b2:	08 95       	ret

000044b4 <sin>:
    44b4:	9f 93       	push	r25
    44b6:	1e df       	rcall	.-452    	; 0x42f4 <__fp_rempio2>
    44b8:	0f 90       	pop	r0
    44ba:	07 fc       	sbrc	r0, 7
    44bc:	ee 5f       	subi	r30, 0xFE	; 254
    44be:	52 cf       	rjmp	.-348    	; 0x4364 <__fp_sinus>
    44c0:	11 f4       	brne	.+4      	; 0x44c6 <sin+0x12>
    44c2:	0e f4       	brtc	.+2      	; 0x44c6 <sin+0x12>
    44c4:	e0 ce       	rjmp	.-576    	; 0x4286 <__fp_nan>
    44c6:	41 c0       	rjmp	.+130    	; 0x454a <__fp_mpack>

000044c8 <sqrt>:
    44c8:	66 df       	rcall	.-308    	; 0x4396 <__fp_splitA>
    44ca:	d0 f3       	brcs	.-12     	; 0x44c0 <sin+0xc>
    44cc:	99 23       	and	r25, r25
    44ce:	d9 f3       	breq	.-10     	; 0x44c6 <sin+0x12>
    44d0:	ce f3       	brts	.-14     	; 0x44c4 <sin+0x10>
    44d2:	9f 57       	subi	r25, 0x7F	; 127
    44d4:	55 0b       	sbc	r21, r21
    44d6:	87 ff       	sbrs	r24, 7
    44d8:	46 d0       	rcall	.+140    	; 0x4566 <__fp_norm2>
    44da:	00 24       	eor	r0, r0
    44dc:	a0 e6       	ldi	r26, 0x60	; 96
    44de:	40 ea       	ldi	r20, 0xA0	; 160
    44e0:	90 01       	movw	r18, r0
    44e2:	80 58       	subi	r24, 0x80	; 128
    44e4:	56 95       	lsr	r21
    44e6:	97 95       	ror	r25
    44e8:	28 f4       	brcc	.+10     	; 0x44f4 <sqrt+0x2c>
    44ea:	80 5c       	subi	r24, 0xC0	; 192
    44ec:	66 0f       	add	r22, r22
    44ee:	77 1f       	adc	r23, r23
    44f0:	88 1f       	adc	r24, r24
    44f2:	20 f0       	brcs	.+8      	; 0x44fc <sqrt+0x34>
    44f4:	26 17       	cp	r18, r22
    44f6:	37 07       	cpc	r19, r23
    44f8:	48 07       	cpc	r20, r24
    44fa:	30 f4       	brcc	.+12     	; 0x4508 <sqrt+0x40>
    44fc:	62 1b       	sub	r22, r18
    44fe:	73 0b       	sbc	r23, r19
    4500:	84 0b       	sbc	r24, r20
    4502:	20 29       	or	r18, r0
    4504:	31 29       	or	r19, r1
    4506:	4a 2b       	or	r20, r26
    4508:	a6 95       	lsr	r26
    450a:	17 94       	ror	r1
    450c:	07 94       	ror	r0
    450e:	20 25       	eor	r18, r0
    4510:	31 25       	eor	r19, r1
    4512:	4a 27       	eor	r20, r26
    4514:	58 f7       	brcc	.-42     	; 0x44ec <sqrt+0x24>
    4516:	66 0f       	add	r22, r22
    4518:	77 1f       	adc	r23, r23
    451a:	88 1f       	adc	r24, r24
    451c:	20 f0       	brcs	.+8      	; 0x4526 <sqrt+0x5e>
    451e:	26 17       	cp	r18, r22
    4520:	37 07       	cpc	r19, r23
    4522:	48 07       	cpc	r20, r24
    4524:	30 f4       	brcc	.+12     	; 0x4532 <sqrt+0x6a>
    4526:	62 0b       	sbc	r22, r18
    4528:	73 0b       	sbc	r23, r19
    452a:	84 0b       	sbc	r24, r20
    452c:	20 0d       	add	r18, r0
    452e:	31 1d       	adc	r19, r1
    4530:	41 1d       	adc	r20, r1
    4532:	a0 95       	com	r26
    4534:	81 f7       	brne	.-32     	; 0x4516 <sqrt+0x4e>
    4536:	b9 01       	movw	r22, r18
    4538:	84 2f       	mov	r24, r20
    453a:	91 58       	subi	r25, 0x81	; 129
    453c:	88 0f       	add	r24, r24
    453e:	96 95       	lsr	r25
    4540:	87 95       	ror	r24
    4542:	08 95       	ret

00004544 <square>:
    4544:	9b 01       	movw	r18, r22
    4546:	ac 01       	movw	r20, r24
    4548:	52 cf       	rjmp	.-348    	; 0x43ee <__mulsf3>

0000454a <__fp_mpack>:
    454a:	9f 3f       	cpi	r25, 0xFF	; 255
    454c:	31 f0       	breq	.+12     	; 0x455a <__fp_mpack_finite+0xc>

0000454e <__fp_mpack_finite>:
    454e:	91 50       	subi	r25, 0x01	; 1
    4550:	20 f4       	brcc	.+8      	; 0x455a <__fp_mpack_finite+0xc>
    4552:	87 95       	ror	r24
    4554:	77 95       	ror	r23
    4556:	67 95       	ror	r22
    4558:	b7 95       	ror	r27
    455a:	88 0f       	add	r24, r24
    455c:	91 1d       	adc	r25, r1
    455e:	96 95       	lsr	r25
    4560:	87 95       	ror	r24
    4562:	97 f9       	bld	r25, 7
    4564:	08 95       	ret

00004566 <__fp_norm2>:
    4566:	91 50       	subi	r25, 0x01	; 1
    4568:	50 40       	sbci	r21, 0x00	; 0
    456a:	66 0f       	add	r22, r22
    456c:	77 1f       	adc	r23, r23
    456e:	88 1f       	adc	r24, r24
    4570:	d2 f7       	brpl	.-12     	; 0x4566 <__fp_norm2>
    4572:	08 95       	ret

00004574 <__fp_powsodd>:
    4574:	9f 93       	push	r25
    4576:	8f 93       	push	r24
    4578:	7f 93       	push	r23
    457a:	6f 93       	push	r22
    457c:	ff 93       	push	r31
    457e:	ef 93       	push	r30
    4580:	9b 01       	movw	r18, r22
    4582:	ac 01       	movw	r20, r24
    4584:	34 df       	rcall	.-408    	; 0x43ee <__mulsf3>
    4586:	ef 91       	pop	r30
    4588:	ff 91       	pop	r31
    458a:	80 de       	rcall	.-768    	; 0x428c <__fp_powser>
    458c:	2f 91       	pop	r18
    458e:	3f 91       	pop	r19
    4590:	4f 91       	pop	r20
    4592:	5f 91       	pop	r21
    4594:	2c cf       	rjmp	.-424    	; 0x43ee <__mulsf3>

00004596 <__divmodhi4>:
    4596:	97 fb       	bst	r25, 7
    4598:	07 2e       	mov	r0, r23
    459a:	16 f4       	brtc	.+4      	; 0x45a0 <__divmodhi4+0xa>
    459c:	00 94       	com	r0
    459e:	06 d0       	rcall	.+12     	; 0x45ac <__divmodhi4_neg1>
    45a0:	77 fd       	sbrc	r23, 7
    45a2:	08 d0       	rcall	.+16     	; 0x45b4 <__divmodhi4_neg2>
    45a4:	0b d0       	rcall	.+22     	; 0x45bc <__udivmodhi4>
    45a6:	07 fc       	sbrc	r0, 7
    45a8:	05 d0       	rcall	.+10     	; 0x45b4 <__divmodhi4_neg2>
    45aa:	3e f4       	brtc	.+14     	; 0x45ba <__divmodhi4_exit>

000045ac <__divmodhi4_neg1>:
    45ac:	90 95       	com	r25
    45ae:	81 95       	neg	r24
    45b0:	9f 4f       	sbci	r25, 0xFF	; 255
    45b2:	08 95       	ret

000045b4 <__divmodhi4_neg2>:
    45b4:	70 95       	com	r23
    45b6:	61 95       	neg	r22
    45b8:	7f 4f       	sbci	r23, 0xFF	; 255

000045ba <__divmodhi4_exit>:
    45ba:	08 95       	ret

000045bc <__udivmodhi4>:
    45bc:	aa 1b       	sub	r26, r26
    45be:	bb 1b       	sub	r27, r27
    45c0:	51 e1       	ldi	r21, 0x11	; 17
    45c2:	07 c0       	rjmp	.+14     	; 0x45d2 <__udivmodhi4_ep>

000045c4 <__udivmodhi4_loop>:
    45c4:	aa 1f       	adc	r26, r26
    45c6:	bb 1f       	adc	r27, r27
    45c8:	a6 17       	cp	r26, r22
    45ca:	b7 07       	cpc	r27, r23
    45cc:	10 f0       	brcs	.+4      	; 0x45d2 <__udivmodhi4_ep>
    45ce:	a6 1b       	sub	r26, r22
    45d0:	b7 0b       	sbc	r27, r23

000045d2 <__udivmodhi4_ep>:
    45d2:	88 1f       	adc	r24, r24
    45d4:	99 1f       	adc	r25, r25
    45d6:	5a 95       	dec	r21
    45d8:	a9 f7       	brne	.-22     	; 0x45c4 <__udivmodhi4_loop>
    45da:	80 95       	com	r24
    45dc:	90 95       	com	r25
    45de:	bc 01       	movw	r22, r24
    45e0:	cd 01       	movw	r24, r26
    45e2:	08 95       	ret

000045e4 <__tablejump2__>:
    45e4:	ee 0f       	add	r30, r30
    45e6:	ff 1f       	adc	r31, r31
    45e8:	88 1f       	adc	r24, r24
    45ea:	8b bf       	out	0x3b, r24	; 59
    45ec:	07 90       	elpm	r0, Z+
    45ee:	f6 91       	elpm	r31, Z
    45f0:	e0 2d       	mov	r30, r0
    45f2:	19 94       	eijmp

000045f4 <_exit>:
    45f4:	f8 94       	cli

000045f6 <__stop_program>:
    45f6:	ff cf       	rjmp	.-2      	; 0x45f6 <__stop_program>
