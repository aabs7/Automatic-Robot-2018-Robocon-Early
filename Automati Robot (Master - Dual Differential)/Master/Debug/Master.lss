
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800200  00004396  0000442a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f0  00800276  00800276  000044a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000044a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000044d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b05  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001864  00000000  00000000  0000a41d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000316c  00000000  00000000  0000bc81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001100  00000000  00000000  0000edf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002216  00000000  00000000  0000fef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041cd  00000000  00000000  00012106  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  000162d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
       6:	00 00       	nop
       8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c0       	rjmp	.+490    	; 0x1f8 <__vector_3>
       e:	00 00       	nop
      10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
      12:	00 00       	nop
      14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__vector_6>
      1a:	00 00       	nop
      1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__vector_9>
      28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__vector_11>
      30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
      36:	00 00       	nop
      38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__vector_15>
      3e:	00 00       	nop
      40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
      52:	00 00       	nop
      54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
      56:	00 00       	nop
      58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1b c1       	rjmp	.+566    	; 0x294 <__vector_23>
      5e:	00 00       	nop
      60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__vector_25>
      68:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__vector_26>
      6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
      6e:	00 00       	nop
      70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
      72:	00 00       	nop
      74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
      76:	00 00       	nop
      78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
      7e:	00 00       	nop
      80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
      82:	00 00       	nop
      84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
      86:	00 00       	nop
      88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__vector_36>
      94:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__vector_37>
      98:	7d c0       	rjmp	.+250    	; 0x194 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7b c0       	rjmp	.+246    	; 0x194 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	79 c0       	rjmp	.+242    	; 0x194 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	77 c0       	rjmp	.+238    	; 0x194 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	75 c0       	rjmp	.+234    	; 0x194 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	73 c0       	rjmp	.+230    	; 0x194 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	71 c0       	rjmp	.+226    	; 0x194 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6f c0       	rjmp	.+222    	; 0x194 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6d c0       	rjmp	.+218    	; 0x194 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6b c0       	rjmp	.+214    	; 0x194 <__bad_interrupt>
      be:	00 00       	nop
      c0:	69 c0       	rjmp	.+210    	; 0x194 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	67 c0       	rjmp	.+206    	; 0x194 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	65 c0       	rjmp	.+202    	; 0x194 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 2e 1d 	jmp	0x3a5c	; 0x3a5c <__vector_51>
      d0:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__vector_52>
      d4:	5f c0       	rjmp	.+190    	; 0x194 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 9e 1d 	jmp	0x3b3c	; 0x3b3c <__vector_54>
      dc:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <__vector_55>
      e0:	59 c0       	rjmp	.+178    	; 0x194 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__ctors_start>:
     130:	61 17       	cp	r22, r17

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d1 e2       	ldi	r29, 0x21	; 33
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61
     13e:	00 e0       	ldi	r16, 0x00	; 0
     140:	0c bf       	out	0x3c, r16	; 60

00000142 <__do_copy_data>:
     142:	12 e0       	ldi	r17, 0x02	; 2
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	e6 e9       	ldi	r30, 0x96	; 150
     14a:	f3 e4       	ldi	r31, 0x43	; 67
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a6 37       	cpi	r26, 0x76	; 118
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	25 e0       	ldi	r18, 0x05	; 5
     15e:	a6 e7       	ldi	r26, 0x76	; 118
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a6 36       	cpi	r26, 0x66	; 102
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	c9 e9       	ldi	r28, 0x99	; 153
     170:	d0 e0       	ldi	r29, 0x00	; 0
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	06 c0       	rjmp	.+12     	; 0x182 <__do_global_ctors+0x16>
     176:	21 97       	sbiw	r28, 0x01	; 1
     178:	01 09       	sbc	r16, r1
     17a:	80 2f       	mov	r24, r16
     17c:	fe 01       	movw	r30, r28
     17e:	0e 94 c1 21 	call	0x4382	; 0x4382 <__tablejump2__>
     182:	c8 39       	cpi	r28, 0x98	; 152
     184:	d1 07       	cpc	r29, r17
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 07       	cpc	r16, r24
     18a:	a9 f7       	brne	.-22     	; 0x176 <__do_global_ctors+0xa>
     18c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <main>
     190:	0c 94 c9 21 	jmp	0x4392	; 0x4392 <_exit>

00000194 <__bad_interrupt>:
     194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <_ZN7encoder22Init_encoder_interruptEv>:
volatile bool PidUpdateFlagDriveY = true;


void encoder::Init_encoder_interrupt()
{
	sei();
     196:	78 94       	sei
	EICRA = 0b00110000;
     198:	80 e3       	ldi	r24, 0x30	; 48
     19a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EICRB = 0b00001100;
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	EIMSK |=  (1<<INT2) |(1<<INT5);
     1a4:	8d b3       	in	r24, 0x1d	; 29
     1a6:	84 62       	ori	r24, 0x24	; 36
     1a8:	8d bb       	out	0x1d, r24	; 29
     1aa:	08 95       	ret

000001ac <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     1ac:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     1ae:	85 b5       	in	r24, 0x25	; 37
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     1ba:	08 95       	ret

000001bc <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
	{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     1c2:	68 81       	ld	r22, Y
     1c4:	79 81       	ldd	r23, Y+1	; 0x01
     1c6:	07 2e       	mov	r0, r23
     1c8:	00 0c       	add	r0, r0
     1ca:	88 0b       	sbc	r24, r24
     1cc:	99 0b       	sbc	r25, r25
     1ce:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     1d2:	2e ef       	ldi	r18, 0xFE	; 254
     1d4:	34 e3       	ldi	r19, 0x34	; 52
     1d6:	46 e3       	ldi	r20, 0x36	; 54
     1d8:	53 e4       	ldi	r21, 0x43	; 67
     1da:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	48 e4       	ldi	r20, 0x48	; 72
     1e4:	53 e4       	ldi	r21, 0x43	; 67
     1e6:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divsf3>
     1ea:	6c 83       	std	Y+4, r22	; 0x04
     1ec:	7d 83       	std	Y+5, r23	; 0x05
     1ee:	8e 83       	std	Y+6, r24	; 0x06
     1f0:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     20e:	00 9b       	sbis	0x00, 0	; 0
     210:	08 c0       	rjmp	.+16     	; 0x222 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     212:	ee e7       	ldi	r30, 0x7E	; 126
     214:	f2 e0       	ldi	r31, 0x02	; 2
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	91 83       	std	Z+1, r25	; 0x01
     21e:	80 83       	st	Z, r24
     220:	07 c0       	rjmp	.+14     	; 0x230 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     222:	ee e7       	ldi	r30, 0x7E	; 126
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     25c:	05 9b       	sbis	0x00, 5	; 0
     25e:	08 c0       	rjmp	.+16     	; 0x270 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     260:	e6 e7       	ldi	r30, 0x76	; 118
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
     26e:	07 c0       	rjmp	.+14     	; 0x27e <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     270:	e6 e7       	ldi	r30, 0x76	; 118
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <PidUpdateFlagCompass>
	PidUpdateFlagLinetrackerBack = true;
     2a6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <PidUpdateFlagLinetrackerBack>
	PidUpdateFlagLinetrackerFront = true;
     2aa:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <PidUpdateFlagLinetrackerFront>
 
	PidUpdateFlagDriveX = true;
     2ae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <PidUpdateFlagDriveX>
	PidUpdateFlagDriveY = true;
     2b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <PidUpdateFlagDriveY>
	
     2b6:	8f 91       	pop	r24
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <_Z13init_HMC5883Lv>:
	}
	else
	{
		Calculate_Motor_Differential_Velocity_With_Center_Pivot(speed);
	}
}
     2c2:	0e 94 9d 1b 	call	0x373a	; 0x373a <_Z8i2c_initv>
     2c6:	8c e3       	ldi	r24, 0x3C	; 60
     2c8:	0e 94 a3 1b 	call	0x3746	; 0x3746 <_Z9i2c_starth>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 10 1c 	call	0x3820	; 0x3820 <_Z9i2c_writeh>
     2d2:	80 e7       	ldi	r24, 0x70	; 112
     2d4:	0e 94 10 1c 	call	0x3820	; 0x3820 <_Z9i2c_writeh>
     2d8:	0e 94 cc 1b 	call	0x3798	; 0x3798 <_Z8i2c_stopv>
     2dc:	8c e3       	ldi	r24, 0x3C	; 60
     2de:	0e 94 a3 1b 	call	0x3746	; 0x3746 <_Z9i2c_starth>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 10 1c 	call	0x3820	; 0x3820 <_Z9i2c_writeh>
     2e8:	80 ea       	ldi	r24, 0xA0	; 160
     2ea:	0e 94 10 1c 	call	0x3820	; 0x3820 <_Z9i2c_writeh>
     2ee:	0e 94 cc 1b 	call	0x3798	; 0x3798 <_Z8i2c_stopv>
     2f2:	8c e3       	ldi	r24, 0x3C	; 60
     2f4:	0e 94 a3 1b 	call	0x3746	; 0x3746 <_Z9i2c_starth>
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 10 1c 	call	0x3820	; 0x3820 <_Z9i2c_writeh>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 10 1c 	call	0x3820	; 0x3820 <_Z9i2c_writeh>
     304:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <_Z8i2c_stopv>
     308:	08 95       	ret

0000030a <_Z12read_Compassv>:
     30a:	8c e3       	ldi	r24, 0x3C	; 60
     30c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <_Z9i2c_starth>
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 10 1c 	call	0x3820	; 0x3820 <_Z9i2c_writeh>
     316:	0e 94 cc 1b 	call	0x3798	; 0x3798 <_Z8i2c_stopv>
     31a:	8d e3       	ldi	r24, 0x3D	; 61
     31c:	0e 94 ca 1b 	call	0x3794	; 0x3794 <_Z13i2c_rep_starth>
     320:	0e 94 22 1c 	call	0x3844	; 0x3844 <_Z11i2c_readAckv>
     324:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <raw_x>
     328:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <raw_x+0x1>
     32c:	0e 94 22 1c 	call	0x3844	; 0x3844 <_Z11i2c_readAckv>
     330:	20 91 6f 04 	lds	r18, 0x046F	; 0x80046f <raw_x>
     334:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <raw_x+0x1>
     338:	28 2b       	or	r18, r24
     33a:	30 93 70 04 	sts	0x0470, r19	; 0x800470 <raw_x+0x1>
     33e:	20 93 6f 04 	sts	0x046F, r18	; 0x80046f <raw_x>
     342:	0e 94 22 1c 	call	0x3844	; 0x3844 <_Z11i2c_readAckv>
     346:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <raw_z>
     34a:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <raw_z+0x1>
     34e:	0e 94 22 1c 	call	0x3844	; 0x3844 <_Z11i2c_readAckv>
     352:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <raw_z>
     356:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <raw_z+0x1>
     35a:	28 2b       	or	r18, r24
     35c:	30 93 6c 04 	sts	0x046C, r19	; 0x80046c <raw_z+0x1>
     360:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <raw_z>
     364:	0e 94 22 1c 	call	0x3844	; 0x3844 <_Z11i2c_readAckv>
     368:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <raw_y>
     36c:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <raw_y+0x1>
     370:	0e 94 2d 1c 	call	0x385a	; 0x385a <_Z11i2c_readNakv>
     374:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <raw_y>
     378:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <raw_y+0x1>
     37c:	28 2b       	or	r18, r24
     37e:	30 93 6e 04 	sts	0x046E, r19	; 0x80046e <raw_y+0x1>
     382:	20 93 6d 04 	sts	0x046D, r18	; 0x80046d <raw_y>
     386:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <_Z8i2c_stopv>
     38a:	08 95       	ret

0000038c <_Z6millisv>:
     38c:	2f b7       	in	r18, 0x3f	; 63
     38e:	f8 94       	cli
     390:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <timer2_millis>
     394:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <timer2_millis+0x1>
     398:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <timer2_millis+0x2>
     39c:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <timer2_millis+0x3>
     3a0:	2f bf       	out	0x3f, r18	; 63
     3a2:	08 95       	ret

000003a4 <_Z21initialise_timeperiodv>:
     3a4:	e1 eb       	ldi	r30, 0xB1	; 177
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	84 60       	ori	r24, 0x04	; 4
     3ac:	80 83       	st	Z, r24
     3ae:	e0 e7       	ldi	r30, 0x70	; 112
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 83       	st	Z, r24
     3b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     3bc:	08 95       	ret

000003be <__vector_15>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	9f 93       	push	r25
     3cc:	af 93       	push	r26
     3ce:	bf 93       	push	r27
     3d0:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <timer2_millis>
     3d4:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <timer2_millis+0x1>
     3d8:	a0 91 69 04 	lds	r26, 0x0469	; 0x800469 <timer2_millis+0x2>
     3dc:	b0 91 6a 04 	lds	r27, 0x046A	; 0x80046a <timer2_millis+0x3>
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	a1 1d       	adc	r26, r1
     3e4:	b1 1d       	adc	r27, r1
     3e6:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <timer2_millis>
     3ea:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <timer2_millis+0x1>
     3ee:	a0 93 69 04 	sts	0x0469, r26	; 0x800469 <timer2_millis+0x2>
     3f2:	b0 93 6a 04 	sts	0x046A, r27	; 0x80046a <timer2_millis+0x3>
     3f6:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <timer2_fract>
     3fa:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <timer2_fract+0x1>
     3fe:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <timer2_fract+0x2>
     402:	b0 91 66 04 	lds	r27, 0x0466	; 0x800466 <timer2_fract+0x3>
     406:	03 96       	adiw	r24, 0x03	; 3
     408:	a1 1d       	adc	r26, r1
     40a:	b1 1d       	adc	r27, r1
     40c:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <timer2_fract>
     410:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <timer2_fract+0x1>
     414:	a0 93 65 04 	sts	0x0465, r26	; 0x800465 <timer2_fract+0x2>
     418:	b0 93 66 04 	sts	0x0466, r27	; 0x800466 <timer2_fract+0x3>
     41c:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <timer2_fract>
     420:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <timer2_fract+0x1>
     424:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <timer2_fract+0x2>
     428:	b0 91 66 04 	lds	r27, 0x0466	; 0x800466 <timer2_fract+0x3>
     42c:	8d 37       	cpi	r24, 0x7D	; 125
     42e:	91 05       	cpc	r25, r1
     430:	a1 05       	cpc	r26, r1
     432:	b1 05       	cpc	r27, r1
     434:	38 f1       	brcs	.+78     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     436:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <timer2_fract>
     43a:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <timer2_fract+0x1>
     43e:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <timer2_fract+0x2>
     442:	b0 91 66 04 	lds	r27, 0x0466	; 0x800466 <timer2_fract+0x3>
     446:	8d 57       	subi	r24, 0x7D	; 125
     448:	91 09       	sbc	r25, r1
     44a:	a1 09       	sbc	r26, r1
     44c:	b1 09       	sbc	r27, r1
     44e:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <timer2_fract>
     452:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <timer2_fract+0x1>
     456:	a0 93 65 04 	sts	0x0465, r26	; 0x800465 <timer2_fract+0x2>
     45a:	b0 93 66 04 	sts	0x0466, r27	; 0x800466 <timer2_fract+0x3>
     45e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <timer2_millis>
     462:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <timer2_millis+0x1>
     466:	a0 91 69 04 	lds	r26, 0x0469	; 0x800469 <timer2_millis+0x2>
     46a:	b0 91 6a 04 	lds	r27, 0x046A	; 0x80046a <timer2_millis+0x3>
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	a1 1d       	adc	r26, r1
     472:	b1 1d       	adc	r27, r1
     474:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <timer2_millis>
     478:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <timer2_millis+0x1>
     47c:	a0 93 69 04 	sts	0x0469, r26	; 0x800469 <timer2_millis+0x2>
     480:	b0 93 6a 04 	sts	0x046A, r27	; 0x80046a <timer2_millis+0x3>
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <_Z8initGY88v>:
     496:	15 df       	rcall	.-470    	; 0x2c2 <_Z13init_HMC5883Lv>
     498:	8a ee       	ldi	r24, 0xEA	; 234
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	0e 94 ef 17 	call	0x2fde	; 0x2fde <_ZN7MPU60504InitEv>
     4a0:	62 e3       	ldi	r22, 0x32	; 50
     4a2:	8a ee       	ldi	r24, 0xEA	; 234
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	0e 94 a1 19 	call	0x3342	; 0x3342 <_ZN7MPU605013calibrateGyroEh>
     4aa:	7c df       	rcall	.-264    	; 0x3a4 <_Z21initialise_timeperiodv>
     4ac:	6f df       	rcall	.-290    	; 0x38c <_Z6millisv>
     4ae:	60 93 ce 03 	sts	0x03CE, r22	; 0x8003ce <previousTime>
     4b2:	70 93 cf 03 	sts	0x03CF, r23	; 0x8003cf <previousTime+0x1>
     4b6:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <previousTime+0x2>
     4ba:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <previousTime+0x3>
     4be:	08 95       	ret

000004c0 <_Z25compass_tilt_compensationfffff>:
     4c0:	4f 92       	push	r4
     4c2:	5f 92       	push	r5
     4c4:	6f 92       	push	r6
     4c6:	7f 92       	push	r7
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	64 97       	sbiw	r28, 0x14	; 20
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	69 83       	std	Y+1, r22	; 0x01
     4f2:	7a 83       	std	Y+2, r23	; 0x02
     4f4:	8b 83       	std	Y+3, r24	; 0x03
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	29 01       	movw	r4, r18
     4fa:	3a 01       	movw	r6, r20
     4fc:	e9 8a       	std	Y+17, r14	; 0x11
     4fe:	fa 8a       	std	Y+18, r15	; 0x12
     500:	0b 8b       	std	Y+19, r16	; 0x13
     502:	1c 8b       	std	Y+20, r17	; 0x14
     504:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <cos>
     508:	6d 87       	std	Y+13, r22	; 0x0d
     50a:	7e 87       	std	Y+14, r23	; 0x0e
     50c:	8f 87       	std	Y+15, r24	; 0x0f
     50e:	98 8b       	std	Y+16, r25	; 0x10
     510:	69 81       	ldd	r22, Y+1	; 0x01
     512:	7a 81       	ldd	r23, Y+2	; 0x02
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	0e 94 29 21 	call	0x4252	; 0x4252 <sin>
     51c:	69 83       	std	Y+1, r22	; 0x01
     51e:	7a 83       	std	Y+2, r23	; 0x02
     520:	8b 83       	std	Y+3, r24	; 0x03
     522:	9c 83       	std	Y+4, r25	; 0x04
     524:	c3 01       	movw	r24, r6
     526:	b2 01       	movw	r22, r4
     528:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <cos>
     52c:	6d 83       	std	Y+5, r22	; 0x05
     52e:	7e 83       	std	Y+6, r23	; 0x06
     530:	8f 83       	std	Y+7, r24	; 0x07
     532:	98 87       	std	Y+8, r25	; 0x08
     534:	c3 01       	movw	r24, r6
     536:	b2 01       	movw	r22, r4
     538:	0e 94 29 21 	call	0x4252	; 0x4252 <sin>
     53c:	69 87       	std	Y+9, r22	; 0x09
     53e:	7a 87       	std	Y+10, r23	; 0x0a
     540:	8b 87       	std	Y+11, r24	; 0x0b
     542:	9c 87       	std	Y+12, r25	; 0x0c
     544:	a6 01       	movw	r20, r12
     546:	95 01       	movw	r18, r10
     548:	6d 81       	ldd	r22, Y+5	; 0x05
     54a:	7e 81       	ldd	r23, Y+6	; 0x06
     54c:	8f 81       	ldd	r24, Y+7	; 0x07
     54e:	98 85       	ldd	r25, Y+8	; 0x08
     550:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     554:	2b 01       	movw	r4, r22
     556:	3c 01       	movw	r6, r24
     558:	28 a5       	ldd	r18, Y+40	; 0x28
     55a:	39 a5       	ldd	r19, Y+41	; 0x29
     55c:	4a a5       	ldd	r20, Y+42	; 0x2a
     55e:	5b a5       	ldd	r21, Y+43	; 0x2b
     560:	69 85       	ldd	r22, Y+9	; 0x09
     562:	7a 85       	ldd	r23, Y+10	; 0x0a
     564:	8b 85       	ldd	r24, Y+11	; 0x0b
     566:	9c 85       	ldd	r25, Y+12	; 0x0c
     568:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	c3 01       	movw	r24, r6
     572:	b2 01       	movw	r22, r4
     574:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__subsf3>
     578:	2b 01       	movw	r4, r22
     57a:	3c 01       	movw	r6, r24
     57c:	a6 01       	movw	r20, r12
     57e:	95 01       	movw	r18, r10
     580:	69 81       	ldd	r22, Y+1	; 0x01
     582:	7a 81       	ldd	r23, Y+2	; 0x02
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     58c:	29 85       	ldd	r18, Y+9	; 0x09
     58e:	3a 85       	ldd	r19, Y+10	; 0x0a
     590:	4b 85       	ldd	r20, Y+11	; 0x0b
     592:	5c 85       	ldd	r21, Y+12	; 0x0c
     594:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
     59c:	a8 01       	movw	r20, r16
     59e:	97 01       	movw	r18, r14
     5a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a6:	98 89       	ldd	r25, Y+16	; 0x10
     5a8:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	c5 01       	movw	r24, r10
     5b2:	b4 01       	movw	r22, r8
     5b4:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__subsf3>
     5b8:	4b 01       	movw	r8, r22
     5ba:	5c 01       	movw	r10, r24
     5bc:	28 a5       	ldd	r18, Y+40	; 0x28
     5be:	39 a5       	ldd	r19, Y+41	; 0x29
     5c0:	4a a5       	ldd	r20, Y+42	; 0x2a
     5c2:	5b a5       	ldd	r21, Y+43	; 0x2b
     5c4:	69 81       	ldd	r22, Y+1	; 0x01
     5c6:	7a 81       	ldd	r23, Y+2	; 0x02
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     5d0:	2d 81       	ldd	r18, Y+5	; 0x05
     5d2:	3e 81       	ldd	r19, Y+6	; 0x06
     5d4:	4f 81       	ldd	r20, Y+7	; 0x07
     5d6:	58 85       	ldd	r21, Y+8	; 0x08
     5d8:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     5dc:	9b 01       	movw	r18, r22
     5de:	ac 01       	movw	r20, r24
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     5e8:	90 58       	subi	r25, 0x80	; 128
     5ea:	a3 01       	movw	r20, r6
     5ec:	92 01       	movw	r18, r4
     5ee:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <atan2>
     5f2:	21 ee       	ldi	r18, 0xE1	; 225
     5f4:	3e e2       	ldi	r19, 0x2E	; 46
     5f6:	45 e6       	ldi	r20, 0x65	; 101
     5f8:	52 e4       	ldi	r21, 0x42	; 66
     5fa:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     5fe:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
     602:	9b 01       	movw	r18, r22
     604:	77 23       	and	r23, r23
     606:	14 f4       	brge	.+4      	; 0x60c <_Z25compass_tilt_compensationfffff+0x14c>
     608:	28 59       	subi	r18, 0x98	; 152
     60a:	3e 4f       	sbci	r19, 0xFE	; 254
     60c:	c9 01       	movw	r24, r18
     60e:	64 96       	adiw	r28, 0x14	; 20
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

0000063c <_Z24getAverageCompensatedYawv>:
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	28 97       	sbiw	r28, 0x08	; 8
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	60 91 6d 04 	lds	r22, 0x046D	; 0x80046d <raw_y>
     66c:	70 91 6e 04 	lds	r23, 0x046E	; 0x80046e <raw_y+0x1>
     670:	07 2e       	mov	r0, r23
     672:	00 0c       	add	r0, r0
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     67c:	5b 01       	movw	r10, r22
     67e:	6c 01       	movw	r12, r24
     680:	60 91 6f 04 	lds	r22, 0x046F	; 0x80046f <raw_x>
     684:	70 91 70 04 	lds	r23, 0x0470	; 0x800470 <raw_x+0x1>
     688:	07 2e       	mov	r0, r23
     68a:	00 0c       	add	r0, r0
     68c:	88 0b       	sbc	r24, r24
     68e:	99 0b       	sbc	r25, r25
     690:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     694:	69 83       	std	Y+1, r22	; 0x01
     696:	7a 83       	std	Y+2, r23	; 0x02
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	25 e3       	ldi	r18, 0x35	; 53
     69e:	3a ef       	ldi	r19, 0xFA	; 250
     6a0:	4e e8       	ldi	r20, 0x8E	; 142
     6a2:	5c e3       	ldi	r21, 0x3C	; 60
     6a4:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <_ZL14filtered_pitch>
     6a8:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <_ZL14filtered_pitch+0x1>
     6ac:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <_ZL14filtered_pitch+0x2>
     6b0:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <_ZL14filtered_pitch+0x3>
     6b4:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     6b8:	6d 83       	std	Y+5, r22	; 0x05
     6ba:	7e 83       	std	Y+6, r23	; 0x06
     6bc:	8f 83       	std	Y+7, r24	; 0x07
     6be:	98 87       	std	Y+8, r25	; 0x08
     6c0:	25 e3       	ldi	r18, 0x35	; 53
     6c2:	3a ef       	ldi	r19, 0xFA	; 250
     6c4:	4e e8       	ldi	r20, 0x8E	; 142
     6c6:	5c e3       	ldi	r21, 0x3C	; 60
     6c8:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <_ZL13filtered_roll>
     6cc:	70 91 db 03 	lds	r23, 0x03DB	; 0x8003db <_ZL13filtered_roll+0x1>
     6d0:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <_ZL13filtered_roll+0x2>
     6d4:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <_ZL13filtered_roll+0x3>
     6d8:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
     6e0:	60 91 6b 04 	lds	r22, 0x046B	; 0x80046b <raw_z>
     6e4:	70 91 6c 04 	lds	r23, 0x046C	; 0x80046c <raw_z+0x1>
     6e8:	07 2e       	mov	r0, r23
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	7f 93       	push	r23
     6fa:	6f 93       	push	r22
     6fc:	e9 80       	ldd	r14, Y+1	; 0x01
     6fe:	fa 80       	ldd	r15, Y+2	; 0x02
     700:	0b 81       	ldd	r16, Y+3	; 0x03
     702:	1c 81       	ldd	r17, Y+4	; 0x04
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	3e 81       	ldd	r19, Y+6	; 0x06
     708:	4f 81       	ldd	r20, Y+7	; 0x07
     70a:	58 85       	ldd	r21, Y+8	; 0x08
     70c:	c3 01       	movw	r24, r6
     70e:	b2 01       	movw	r22, r4
     710:	d7 de       	rcall	.-594    	; 0x4c0 <_Z25compass_tilt_compensationfffff>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	bc 01       	movw	r22, r24
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <__floatunsisf>
     724:	2b 01       	movw	r4, r22
     726:	3c 01       	movw	r6, r24
     728:	2a e0       	ldi	r18, 0x0A	; 10
     72a:	29 83       	std	Y+1, r18	; 0x01
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	cb 01       	movw	r24, r22
     732:	a3 01       	movw	r20, r6
     734:	92 01       	movw	r18, r4
     736:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     73a:	29 81       	ldd	r18, Y+1	; 0x01
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	29 83       	std	Y+1, r18	; 0x01
     740:	21 11       	cpse	r18, r1
     742:	f7 cf       	rjmp	.-18     	; 0x732 <_Z24getAverageCompensatedYawv+0xf6>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e2       	ldi	r20, 0x20	; 32
     74a:	51 e4       	ldi	r21, 0x41	; 65
     74c:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divsf3>
     750:	28 96       	adiw	r28, 0x08	; 8
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	7f 90       	pop	r7
     772:	6f 90       	pop	r6
     774:	5f 90       	pop	r5
     776:	4f 90       	pop	r4
     778:	08 95       	ret

0000077a <_Z10getYawGY88v>:
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	2c 97       	sbiw	r28, 0x0c	; 12
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	6a ee       	ldi	r22, 0xEA	; 234
     79c:	73 e0       	ldi	r23, 0x03	; 3
     79e:	ce 01       	movw	r24, r28
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN7MPU605018readNormalizeAccelEv>
     7a6:	8c e0       	ldi	r24, 0x0C	; 12
     7a8:	fe 01       	movw	r30, r28
     7aa:	31 96       	adiw	r30, 0x01	; 1
     7ac:	a2 ec       	ldi	r26, 0xC2	; 194
     7ae:	b3 e0       	ldi	r27, 0x03	; 3
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <_Z10getYawGY88v+0x36>
     7b8:	8a ee       	ldi	r24, 0xEA	; 234
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN7MPU60508rateGyroEv>
     7c0:	02 ec       	ldi	r16, 0xC2	; 194
     7c2:	13 e0       	ldi	r17, 0x03	; 3
     7c4:	f8 01       	movw	r30, r16
     7c6:	c0 84       	ldd	r12, Z+8	; 0x08
     7c8:	d1 84       	ldd	r13, Z+9	; 0x09
     7ca:	e2 84       	ldd	r14, Z+10	; 0x0a
     7cc:	f3 84       	ldd	r15, Z+11	; 0x0b
     7ce:	60 81       	ld	r22, Z
     7d0:	71 81       	ldd	r23, Z+1	; 0x01
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	a7 01       	movw	r20, r14
     7d8:	96 01       	movw	r18, r12
     7da:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <atan2>
     7de:	21 ee       	ldi	r18, 0xE1	; 225
     7e0:	3e e2       	ldi	r19, 0x2E	; 46
     7e2:	45 e6       	ldi	r20, 0x65	; 101
     7e4:	52 e4       	ldi	r21, 0x42	; 66
     7e6:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     7ea:	60 93 e6 03 	sts	0x03E6, r22	; 0x8003e6 <_ZL15unfiltered_roll>
     7ee:	70 93 e7 03 	sts	0x03E7, r23	; 0x8003e7 <_ZL15unfiltered_roll+0x1>
     7f2:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <_ZL15unfiltered_roll+0x2>
     7f6:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <_ZL15unfiltered_roll+0x3>
     7fa:	f8 01       	movw	r30, r16
     7fc:	64 81       	ldd	r22, Z+4	; 0x04
     7fe:	75 81       	ldd	r23, Z+5	; 0x05
     800:	86 81       	ldd	r24, Z+6	; 0x06
     802:	97 81       	ldd	r25, Z+7	; 0x07
     804:	a7 01       	movw	r20, r14
     806:	96 01       	movw	r18, r12
     808:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <atan2>
     80c:	21 ee       	ldi	r18, 0xE1	; 225
     80e:	3e e2       	ldi	r19, 0x2E	; 46
     810:	45 e6       	ldi	r20, 0x65	; 101
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     818:	60 93 e2 03 	sts	0x03E2, r22	; 0x8003e2 <_ZL16unfiltered_pitch>
     81c:	70 93 e3 03 	sts	0x03E3, r23	; 0x8003e3 <_ZL16unfiltered_pitch+0x1>
     820:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <_ZL16unfiltered_pitch+0x2>
     824:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <_ZL16unfiltered_pitch+0x3>
     828:	70 dd       	rcall	.-1312   	; 0x30a <_Z12read_Compassv>
     82a:	b0 dd       	rcall	.-1184   	; 0x38c <_Z6millisv>
     82c:	00 91 ce 03 	lds	r16, 0x03CE	; 0x8003ce <previousTime>
     830:	10 91 cf 03 	lds	r17, 0x03CF	; 0x8003cf <previousTime+0x1>
     834:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <previousTime+0x2>
     838:	30 91 d1 03 	lds	r19, 0x03D1	; 0x8003d1 <previousTime+0x3>
     83c:	60 17       	cp	r22, r16
     83e:	71 07       	cpc	r23, r17
     840:	82 07       	cpc	r24, r18
     842:	93 07       	cpc	r25, r19
     844:	09 f4       	brne	.+2      	; 0x848 <_Z10getYawGY88v+0xce>
     846:	f0 c0       	rjmp	.+480    	; 0xa28 <_Z10getYawGY88v+0x2ae>
     848:	a1 dd       	rcall	.-1214   	; 0x38c <_Z6millisv>
     84a:	60 93 ce 03 	sts	0x03CE, r22	; 0x8003ce <previousTime>
     84e:	70 93 cf 03 	sts	0x03CF, r23	; 0x8003cf <previousTime+0x1>
     852:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <previousTime+0x2>
     856:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <previousTime+0x3>
     85a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <readFirstData>
     85e:	88 23       	and	r24, r24
     860:	91 f1       	breq	.+100    	; 0x8c6 <_Z10getYawGY88v+0x14c>
     862:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_ZL15unfiltered_roll>
     866:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <_ZL15unfiltered_roll+0x1>
     86a:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <_ZL15unfiltered_roll+0x2>
     86e:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <_ZL15unfiltered_roll+0x3>
     872:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <_ZL13filtered_roll>
     876:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <_ZL13filtered_roll+0x1>
     87a:	a0 93 dc 03 	sts	0x03DC, r26	; 0x8003dc <_ZL13filtered_roll+0x2>
     87e:	b0 93 dd 03 	sts	0x03DD, r27	; 0x8003dd <_ZL13filtered_roll+0x3>
     882:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <_ZL16unfiltered_pitch>
     886:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <_ZL16unfiltered_pitch+0x1>
     88a:	a0 91 e4 03 	lds	r26, 0x03E4	; 0x8003e4 <_ZL16unfiltered_pitch+0x2>
     88e:	b0 91 e5 03 	lds	r27, 0x03E5	; 0x8003e5 <_ZL16unfiltered_pitch+0x3>
     892:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <_ZL14filtered_pitch>
     896:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <_ZL14filtered_pitch+0x1>
     89a:	a0 93 d8 03 	sts	0x03D8, r26	; 0x8003d8 <_ZL14filtered_pitch+0x2>
     89e:	b0 93 d9 03 	sts	0x03D9, r27	; 0x8003d9 <_ZL14filtered_pitch+0x3>
     8a2:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZL14unfiltered_yaw>
     8a6:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <_ZL14unfiltered_yaw+0x1>
     8aa:	a0 91 e0 03 	lds	r26, 0x03E0	; 0x8003e0 <_ZL14unfiltered_yaw+0x2>
     8ae:	b0 91 e1 03 	lds	r27, 0x03E1	; 0x8003e1 <_ZL14unfiltered_yaw+0x3>
     8b2:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <_ZL12filtered_yaw>
     8b6:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <_ZL12filtered_yaw+0x1>
     8ba:	a0 93 d4 03 	sts	0x03D4, r26	; 0x8003d4 <_ZL12filtered_yaw+0x2>
     8be:	b0 93 d5 03 	sts	0x03D5, r27	; 0x8003d5 <_ZL12filtered_yaw+0x3>
     8c2:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <readFirstData>
     8c6:	8a ee       	ldi	r24, 0xEA	; 234
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 85 1b 	call	0x370a	; 0x370a <_ZN7MPU605012getGyroRateXEv>
     8ce:	2f e6       	ldi	r18, 0x6F	; 111
     8d0:	32 e1       	ldi	r19, 0x12	; 18
     8d2:	43 e8       	ldi	r20, 0x83	; 131
     8d4:	5a e3       	ldi	r21, 0x3A	; 58
     8d6:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     8da:	20 91 da 03 	lds	r18, 0x03DA	; 0x8003da <_ZL13filtered_roll>
     8de:	30 91 db 03 	lds	r19, 0x03DB	; 0x8003db <_ZL13filtered_roll+0x1>
     8e2:	40 91 dc 03 	lds	r20, 0x03DC	; 0x8003dc <_ZL13filtered_roll+0x2>
     8e6:	50 91 dd 03 	lds	r21, 0x03DD	; 0x8003dd <_ZL13filtered_roll+0x3>
     8ea:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     8ee:	2b e7       	ldi	r18, 0x7B	; 123
     8f0:	34 e1       	ldi	r19, 0x14	; 20
     8f2:	4e e6       	ldi	r20, 0x6E	; 110
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	29 e2       	ldi	r18, 0x29	; 41
     900:	3c e5       	ldi	r19, 0x5C	; 92
     902:	4f e8       	ldi	r20, 0x8F	; 143
     904:	5d e3       	ldi	r21, 0x3D	; 61
     906:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <_ZL15unfiltered_roll>
     90a:	70 91 e7 03 	lds	r23, 0x03E7	; 0x8003e7 <_ZL15unfiltered_roll+0x1>
     90e:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <_ZL15unfiltered_roll+0x2>
     912:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <_ZL15unfiltered_roll+0x3>
     916:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     926:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <_ZL13filtered_roll>
     92a:	70 93 db 03 	sts	0x03DB, r23	; 0x8003db <_ZL13filtered_roll+0x1>
     92e:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <_ZL13filtered_roll+0x2>
     932:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <_ZL13filtered_roll+0x3>
     936:	8a ee       	ldi	r24, 0xEA	; 234
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	0e 94 8d 1b 	call	0x371a	; 0x371a <_ZN7MPU605012getGyroRateYEv>
     93e:	2f e6       	ldi	r18, 0x6F	; 111
     940:	32 e1       	ldi	r19, 0x12	; 18
     942:	43 e8       	ldi	r20, 0x83	; 131
     944:	5a e3       	ldi	r21, 0x3A	; 58
     946:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     94a:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <_ZL14filtered_pitch>
     94e:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <_ZL14filtered_pitch+0x1>
     952:	40 91 d8 03 	lds	r20, 0x03D8	; 0x8003d8 <_ZL14filtered_pitch+0x2>
     956:	50 91 d9 03 	lds	r21, 0x03D9	; 0x8003d9 <_ZL14filtered_pitch+0x3>
     95a:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     95e:	2b e7       	ldi	r18, 0x7B	; 123
     960:	34 e1       	ldi	r19, 0x14	; 20
     962:	4e e6       	ldi	r20, 0x6E	; 110
     964:	5f e3       	ldi	r21, 0x3F	; 63
     966:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	29 e2       	ldi	r18, 0x29	; 41
     970:	3c e5       	ldi	r19, 0x5C	; 92
     972:	4f e8       	ldi	r20, 0x8F	; 143
     974:	5d e3       	ldi	r21, 0x3D	; 61
     976:	60 91 e2 03 	lds	r22, 0x03E2	; 0x8003e2 <_ZL16unfiltered_pitch>
     97a:	70 91 e3 03 	lds	r23, 0x03E3	; 0x8003e3 <_ZL16unfiltered_pitch+0x1>
     97e:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZL16unfiltered_pitch+0x2>
     982:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <_ZL16unfiltered_pitch+0x3>
     986:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     996:	60 93 d6 03 	sts	0x03D6, r22	; 0x8003d6 <_ZL14filtered_pitch>
     99a:	70 93 d7 03 	sts	0x03D7, r23	; 0x8003d7 <_ZL14filtered_pitch+0x1>
     99e:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <_ZL14filtered_pitch+0x2>
     9a2:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <_ZL14filtered_pitch+0x3>
     9a6:	4a de       	rcall	.-876    	; 0x63c <_Z24getAverageCompensatedYawv>
     9a8:	60 93 de 03 	sts	0x03DE, r22	; 0x8003de <_ZL14unfiltered_yaw>
     9ac:	70 93 df 03 	sts	0x03DF, r23	; 0x8003df <_ZL14unfiltered_yaw+0x1>
     9b0:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <_ZL14unfiltered_yaw+0x2>
     9b4:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <_ZL14unfiltered_yaw+0x3>
     9b8:	8a ee       	ldi	r24, 0xEA	; 234
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	0e 94 95 1b 	call	0x372a	; 0x372a <_ZN7MPU605012getGyroRateZEv>
     9c0:	2f e6       	ldi	r18, 0x6F	; 111
     9c2:	32 e1       	ldi	r19, 0x12	; 18
     9c4:	43 e8       	ldi	r20, 0x83	; 131
     9c6:	5a e3       	ldi	r21, 0x3A	; 58
     9c8:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     9cc:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <_ZL12filtered_yaw>
     9d0:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <_ZL12filtered_yaw+0x1>
     9d4:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <_ZL12filtered_yaw+0x2>
     9d8:	50 91 d5 03 	lds	r21, 0x03D5	; 0x8003d5 <_ZL12filtered_yaw+0x3>
     9dc:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     9e0:	2d ec       	ldi	r18, 0xCD	; 205
     9e2:	3c ec       	ldi	r19, 0xCC	; 204
     9e4:	4c ec       	ldi	r20, 0xCC	; 204
     9e6:	5d e3       	ldi	r21, 0x3D	; 61
     9e8:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	26 e6       	ldi	r18, 0x66	; 102
     9f2:	36 e6       	ldi	r19, 0x66	; 102
     9f4:	46 e6       	ldi	r20, 0x66	; 102
     9f6:	5f e3       	ldi	r21, 0x3F	; 63
     9f8:	60 91 de 03 	lds	r22, 0x03DE	; 0x8003de <_ZL14unfiltered_yaw>
     9fc:	70 91 df 03 	lds	r23, 0x03DF	; 0x8003df <_ZL14unfiltered_yaw+0x1>
     a00:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <_ZL14unfiltered_yaw+0x2>
     a04:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <_ZL14unfiltered_yaw+0x3>
     a08:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     a18:	60 93 d2 03 	sts	0x03D2, r22	; 0x8003d2 <_ZL12filtered_yaw>
     a1c:	70 93 d3 03 	sts	0x03D3, r23	; 0x8003d3 <_ZL12filtered_yaw+0x1>
     a20:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <_ZL12filtered_yaw+0x2>
     a24:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <_ZL12filtered_yaw+0x3>
     a28:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <_ZL12filtered_yaw>
     a2c:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <_ZL12filtered_yaw+0x1>
     a30:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <_ZL12filtered_yaw+0x2>
     a34:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <_ZL12filtered_yaw+0x3>
     a38:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__fixunssfsi>
     a3c:	cb 01       	movw	r24, r22
     a3e:	2c 96       	adiw	r28, 0x0c	; 12
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	08 95       	ret

00000a5c <_Z13initializeAllv>:
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	e1 e2       	ldi	r30, 0x21	; 33
     a66:	f3 e0       	ldi	r31, 0x03	; 3
     a68:	88 e2       	ldi	r24, 0x28	; 40
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	92 8b       	std	Z+18, r25	; 0x12
     a6e:	81 8b       	std	Z+17, r24	; 0x11
     a70:	14 8a       	std	Z+20, r1	; 0x14
     a72:	13 8a       	std	Z+19, r1	; 0x13
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 eb       	ldi	r26, 0xB0	; 176
     a7a:	b0 e4       	ldi	r27, 0x40	; 64
     a7c:	85 8b       	std	Z+21, r24	; 0x15
     a7e:	96 8b       	std	Z+22, r25	; 0x16
     a80:	a7 8b       	std	Z+23, r26	; 0x17
     a82:	b0 8f       	std	Z+24, r27	; 0x18
     a84:	11 8e       	std	Z+25, r1	; 0x19
     a86:	12 8e       	std	Z+26, r1	; 0x1a
     a88:	13 8e       	std	Z+27, r1	; 0x1b
     a8a:	14 8e       	std	Z+28, r1	; 0x1c
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	aa ef       	ldi	r26, 0xFA	; 250
     a92:	b3 e4       	ldi	r27, 0x43	; 67
     a94:	85 8f       	std	Z+29, r24	; 0x1d
     a96:	96 8f       	std	Z+30, r25	; 0x1e
     a98:	a7 8f       	std	Z+31, r26	; 0x1f
     a9a:	b0 a3       	std	Z+32, r27	; 0x20
     a9c:	e0 e0       	ldi	r30, 0x00	; 0
     a9e:	f3 e0       	ldi	r31, 0x03	; 3
     aa0:	8a e9       	ldi	r24, 0x9A	; 154
     aa2:	99 e9       	ldi	r25, 0x99	; 153
     aa4:	a9 e1       	ldi	r26, 0x19	; 25
     aa6:	be e3       	ldi	r27, 0x3E	; 62
     aa8:	85 8b       	std	Z+21, r24	; 0x15
     aaa:	96 8b       	std	Z+22, r25	; 0x16
     aac:	a7 8b       	std	Z+23, r26	; 0x17
     aae:	b0 8f       	std	Z+24, r27	; 0x18
     ab0:	11 8e       	std	Z+25, r1	; 0x19
     ab2:	12 8e       	std	Z+26, r1	; 0x1a
     ab4:	13 8e       	std	Z+27, r1	; 0x1b
     ab6:	14 8e       	std	Z+28, r1	; 0x1c
     ab8:	46 e6       	ldi	r20, 0x66	; 102
     aba:	56 e6       	ldi	r21, 0x66	; 102
     abc:	66 e6       	ldi	r22, 0x66	; 102
     abe:	7f e3       	ldi	r23, 0x3F	; 63
     ac0:	45 8f       	std	Z+29, r20	; 0x1d
     ac2:	56 8f       	std	Z+30, r21	; 0x1e
     ac4:	67 8f       	std	Z+31, r22	; 0x1f
     ac6:	70 a3       	std	Z+32, r23	; 0x20
     ac8:	ef ed       	ldi	r30, 0xDF	; 223
     aca:	f2 e0       	ldi	r31, 0x02	; 2
     acc:	85 8b       	std	Z+21, r24	; 0x15
     ace:	96 8b       	std	Z+22, r25	; 0x16
     ad0:	a7 8b       	std	Z+23, r26	; 0x17
     ad2:	b0 8f       	std	Z+24, r27	; 0x18
     ad4:	11 8e       	std	Z+25, r1	; 0x19
     ad6:	12 8e       	std	Z+26, r1	; 0x1a
     ad8:	13 8e       	std	Z+27, r1	; 0x1b
     ada:	14 8e       	std	Z+28, r1	; 0x1c
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e8       	ldi	r26, 0x80	; 128
     ae2:	bf e3       	ldi	r27, 0x3F	; 63
     ae4:	85 8f       	std	Z+29, r24	; 0x1d
     ae6:	96 8f       	std	Z+30, r25	; 0x1e
     ae8:	a7 8f       	std	Z+31, r26	; 0x1f
     aea:	b0 a3       	std	Z+32, r27	; 0x20
     aec:	ae eb       	ldi	r26, 0xBE	; 190
     aee:	b2 e0       	ldi	r27, 0x02	; 2
     af0:	8d e2       	ldi	r24, 0x2D	; 45
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	1f 96       	adiw	r26, 0x0f	; 15
     af6:	9c 93       	st	X, r25
     af8:	8e 93       	st	-X, r24
     afa:	1e 97       	sbiw	r26, 0x0e	; 14
     afc:	ed e9       	ldi	r30, 0x9D	; 157
     afe:	f2 e0       	ldi	r31, 0x02	; 2
     b00:	97 87       	std	Z+15, r25	; 0x0f
     b02:	86 87       	std	Z+14, r24	; 0x0e
     b04:	0a e9       	ldi	r16, 0x9A	; 154
     b06:	19 e9       	ldi	r17, 0x99	; 153
     b08:	29 e9       	ldi	r18, 0x99	; 153
     b0a:	3f e3       	ldi	r19, 0x3F	; 63
     b0c:	55 96       	adiw	r26, 0x15	; 21
     b0e:	0d 93       	st	X+, r16
     b10:	1d 93       	st	X+, r17
     b12:	2d 93       	st	X+, r18
     b14:	3c 93       	st	X, r19
     b16:	58 97       	sbiw	r26, 0x18	; 24
     b18:	59 96       	adiw	r26, 0x19	; 25
     b1a:	1d 92       	st	X+, r1
     b1c:	1d 92       	st	X+, r1
     b1e:	1d 92       	st	X+, r1
     b20:	1c 92       	st	X, r1
     b22:	5c 97       	sbiw	r26, 0x1c	; 28
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	60 e8       	ldi	r22, 0x80	; 128
     b2a:	71 e4       	ldi	r23, 0x41	; 65
     b2c:	5d 96       	adiw	r26, 0x1d	; 29
     b2e:	4d 93       	st	X+, r20
     b30:	5d 93       	st	X+, r21
     b32:	6d 93       	st	X+, r22
     b34:	7c 93       	st	X, r23
     b36:	90 97       	sbiw	r26, 0x20	; 32
     b38:	05 8b       	std	Z+21, r16	; 0x15
     b3a:	16 8b       	std	Z+22, r17	; 0x16
     b3c:	27 8b       	std	Z+23, r18	; 0x17
     b3e:	30 8f       	std	Z+24, r19	; 0x18
     b40:	11 8e       	std	Z+25, r1	; 0x19
     b42:	12 8e       	std	Z+26, r1	; 0x1a
     b44:	13 8e       	std	Z+27, r1	; 0x1b
     b46:	14 8e       	std	Z+28, r1	; 0x1c
     b48:	45 8f       	std	Z+29, r20	; 0x1d
     b4a:	56 8f       	std	Z+30, r21	; 0x1e
     b4c:	67 8f       	std	Z+31, r22	; 0x1f
     b4e:	70 a3       	std	Z+32, r23	; 0x20
     b50:	a2 dc       	rcall	.-1724   	; 0x496 <_Z8initGY88v>
     b52:	1c dc       	rcall	.-1992   	; 0x38c <_Z6millisv>
     b54:	60 93 be 03 	sts	0x03BE, r22	; 0x8003be <startTime>
     b58:	70 93 bf 03 	sts	0x03BF, r23	; 0x8003bf <startTime+0x1>
     b5c:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <startTime+0x2>
     b60:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <startTime+0x3>
     b64:	c1 e2       	ldi	r28, 0x21	; 33
     b66:	d3 e0       	ldi	r29, 0x03	; 3
     b68:	11 dc       	rcall	.-2014   	; 0x38c <_Z6millisv>
     b6a:	00 91 be 03 	lds	r16, 0x03BE	; 0x8003be <startTime>
     b6e:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <startTime+0x1>
     b72:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <startTime+0x2>
     b76:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <startTime+0x3>
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	80 1b       	sub	r24, r16
     b80:	91 0b       	sbc	r25, r17
     b82:	a2 0b       	sbc	r26, r18
     b84:	b3 0b       	sbc	r27, r19
     b86:	84 3f       	cpi	r24, 0xF4	; 244
     b88:	91 40       	sbci	r25, 0x01	; 1
     b8a:	a1 05       	cpc	r26, r1
     b8c:	b1 05       	cpc	r27, r1
     b8e:	48 f4       	brcc	.+18     	; 0xba2 <_Z13initializeAllv+0x146>
     b90:	f4 dd       	rcall	.-1048   	; 0x77a <_Z10getYawGY88v>
     b92:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <initialCompassAngle+0x1>
     b96:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <initialCompassAngle>
     b9a:	18 8a       	std	Y+16, r1	; 0x10
     b9c:	9f 87       	std	Y+15, r25	; 0x0f
     b9e:	8e 87       	std	Y+14, r24	; 0x0e
     ba0:	e3 cf       	rjmp	.-58     	; 0xb68 <_Z13initializeAllv+0x10c>
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <_Z10BrakeMotorv>:
     bac:	e8 e0       	ldi	r30, 0x08	; 8
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	90 81       	ld	r25, Z
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	89 27       	eor	r24, r25
     bb6:	80 83       	st	Z, r24
     bb8:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <movingxfront>
     bbc:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingxback>
     bc0:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
     bc4:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
     bc8:	08 95       	ret

00000bca <_Z15sendDataToSlavev>:
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	8f e7       	ldi	r24, 0x7F	; 127
     bd0:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_Z10uart2_putch>
     bd4:	c6 eb       	ldi	r28, 0xB6	; 182
     bd6:	d3 e0       	ldi	r29, 0x03	; 3
     bd8:	88 81       	ld	r24, Y
     bda:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_Z10uart2_putch>
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_Z10uart2_putch>
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_Z10uart2_putch>
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_Z10uart2_putch>
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <_Z21Goto_Fence_And_Detectv>:
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
     bfe:	79 9b       	sbis	0x0f, 1	; 15
     c00:	33 c0       	rjmp	.+102    	; 0xc68 <_Z21Goto_Fence_And_Detectv+0x72>
     c02:	7a 9b       	sbis	0x0f, 2	; 15
     c04:	34 c0       	rjmp	.+104    	; 0xc6e <_Z21Goto_Fence_And_Detectv+0x78>
     c06:	30 c0       	rjmp	.+96     	; 0xc68 <_Z21Goto_Fence_And_Detectv+0x72>
     c08:	79 9b       	sbis	0x0f, 1	; 15
     c0a:	4d c0       	rjmp	.+154    	; 0xca6 <_Z21Goto_Fence_And_Detectv+0xb0>
     c0c:	68 c0       	rjmp	.+208    	; 0xcde <_Z21Goto_Fence_And_Detectv+0xe8>
     c0e:	79 99       	sbic	0x0f, 1	; 15
     c10:	69 c0       	rjmp	.+210    	; 0xce4 <_Z21Goto_Fence_And_Detectv+0xee>
     c12:	7a 99       	sbic	0x0f, 2	; 15
     c14:	27 c0       	rjmp	.+78     	; 0xc64 <_Z21Goto_Fence_And_Detectv+0x6e>
     c16:	79 9b       	sbis	0x0f, 1	; 15
     c18:	7d c0       	rjmp	.+250    	; 0xd14 <_Z21Goto_Fence_And_Detectv+0x11e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	91 c0       	rjmp	.+290    	; 0xd40 <_Z21Goto_Fence_And_Detectv+0x14a>
     c1e:	b6 db       	rcall	.-2196   	; 0x38c <_Z6millisv>
     c20:	60 93 ba 03 	sts	0x03BA, r22	; 0x8003ba <time_of_limit_switches_pressed>
     c24:	70 93 bb 03 	sts	0x03BB, r23	; 0x8003bb <time_of_limit_switches_pressed+0x1>
     c28:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <time_of_limit_switches_pressed+0x2>
     c2c:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <time_of_limit_switches_pressed+0x3>
     c30:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <first_data_time_of_limit_switches_pressed>
     c34:	ab db       	rcall	.-2218   	; 0x38c <_Z6millisv>
     c36:	00 91 ba 03 	lds	r16, 0x03BA	; 0x8003ba <time_of_limit_switches_pressed>
     c3a:	10 91 bb 03 	lds	r17, 0x03BB	; 0x8003bb <time_of_limit_switches_pressed+0x1>
     c3e:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <time_of_limit_switches_pressed+0x2>
     c42:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <time_of_limit_switches_pressed+0x3>
     c46:	ab 01       	movw	r20, r22
     c48:	bc 01       	movw	r22, r24
     c4a:	40 1b       	sub	r20, r16
     c4c:	51 0b       	sbc	r21, r17
     c4e:	62 0b       	sbc	r22, r18
     c50:	73 0b       	sbc	r23, r19
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	42 30       	cpi	r20, 0x02	; 2
     c56:	51 05       	cpc	r21, r1
     c58:	61 05       	cpc	r22, r1
     c5a:	71 05       	cpc	r23, r1
     c5c:	08 f0       	brcs	.+2      	; 0xc60 <_Z21Goto_Fence_And_Detectv+0x6a>
     c5e:	70 c0       	rjmp	.+224    	; 0xd40 <_Z21Goto_Fence_And_Detectv+0x14a>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	6e c0       	rjmp	.+220    	; 0xd40 <_Z21Goto_Fence_And_Detectv+0x14a>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	6c c0       	rjmp	.+216    	; 0xd40 <_Z21Goto_Fence_And_Detectv+0x14a>
     c68:	7a 99       	sbic	0x0f, 2	; 15
     c6a:	ce cf       	rjmp	.-100    	; 0xc08 <_Z21Goto_Fence_And_Detectv+0x12>
     c6c:	38 c0       	rjmp	.+112    	; 0xcde <_Z21Goto_Fence_And_Detectv+0xe8>
     c6e:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <inverseKinematicsTrue>
     c72:	ee ea       	ldi	r30, 0xAE	; 174
     c74:	f3 e0       	ldi	r31, 0x03	; 3
     c76:	8e e1       	ldi	r24, 0x1E	; 30
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	91 83       	std	Z+1, r25	; 0x01
     c7c:	80 83       	st	Z, r24
     c7e:	13 82       	std	Z+3, r1	; 0x03
     c80:	12 82       	std	Z+2, r1	; 0x02
     c82:	15 82       	std	Z+5, r1	; 0x05
     c84:	14 82       	std	Z+4, r1	; 0x04
     c86:	8c ee       	ldi	r24, 0xEC	; 236
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	97 83       	std	Z+7, r25	; 0x07
     c8c:	86 83       	std	Z+6, r24	; 0x06
     c8e:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <time_of_limit_switches_pressed>
     c92:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <time_of_limit_switches_pressed+0x1>
     c96:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <time_of_limit_switches_pressed+0x2>
     c9a:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <time_of_limit_switches_pressed+0x3>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <first_data_time_of_limit_switches_pressed>
     ca4:	b6 cf       	rjmp	.-148    	; 0xc12 <_Z21Goto_Fence_And_Detectv+0x1c>
     ca6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <inverseKinematicsTrue>
     caa:	ee ea       	ldi	r30, 0xAE	; 174
     cac:	f3 e0       	ldi	r31, 0x03	; 3
     cae:	84 e1       	ldi	r24, 0x14	; 20
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
     cb6:	13 82       	std	Z+3, r1	; 0x03
     cb8:	12 82       	std	Z+2, r1	; 0x02
     cba:	15 82       	std	Z+5, r1	; 0x05
     cbc:	14 82       	std	Z+4, r1	; 0x04
     cbe:	82 ee       	ldi	r24, 0xE2	; 226
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	97 83       	std	Z+7, r25	; 0x07
     cc4:	86 83       	std	Z+6, r24	; 0x06
     cc6:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <time_of_limit_switches_pressed>
     cca:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <time_of_limit_switches_pressed+0x1>
     cce:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <time_of_limit_switches_pressed+0x2>
     cd2:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <time_of_limit_switches_pressed+0x3>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <first_data_time_of_limit_switches_pressed>
     cdc:	9a cf       	rjmp	.-204    	; 0xc12 <_Z21Goto_Fence_And_Detectv+0x1c>
     cde:	7a 99       	sbic	0x0f, 2	; 15
     ce0:	96 cf       	rjmp	.-212    	; 0xc0e <_Z21Goto_Fence_And_Detectv+0x18>
     ce2:	97 cf       	rjmp	.-210    	; 0xc12 <_Z21Goto_Fence_And_Detectv+0x1c>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <inverseKinematicsTrue>
     cea:	e8 ea       	ldi	r30, 0xA8	; 168
     cec:	f3 e0       	ldi	r31, 0x03	; 3
     cee:	28 ed       	ldi	r18, 0xD8	; 216
     cf0:	3f ef       	ldi	r19, 0xFF	; 255
     cf2:	31 83       	std	Z+1, r19	; 0x01
     cf4:	20 83       	st	Z, r18
     cf6:	13 82       	std	Z+3, r1	; 0x03
     cf8:	12 82       	std	Z+2, r1	; 0x02
     cfa:	15 82       	std	Z+5, r1	; 0x05
     cfc:	14 82       	std	Z+4, r1	; 0x04
     cfe:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <time_of_limit_switches_pressed>
     d02:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <time_of_limit_switches_pressed+0x1>
     d06:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <time_of_limit_switches_pressed+0x2>
     d0a:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <time_of_limit_switches_pressed+0x3>
     d0e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <first_data_time_of_limit_switches_pressed>
     d12:	7f cf       	rjmp	.-258    	; 0xc12 <_Z21Goto_Fence_And_Detectv+0x1c>
     d14:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <inverseKinematicsTrue>
     d18:	ee ea       	ldi	r30, 0xAE	; 174
     d1a:	f3 e0       	ldi	r31, 0x03	; 3
     d1c:	8a e0       	ldi	r24, 0x0A	; 10
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
     d24:	13 82       	std	Z+3, r1	; 0x03
     d26:	12 82       	std	Z+2, r1	; 0x02
     d28:	15 82       	std	Z+5, r1	; 0x05
     d2a:	14 82       	std	Z+4, r1	; 0x04
     d2c:	86 ef       	ldi	r24, 0xF6	; 246
     d2e:	9f ef       	ldi	r25, 0xFF	; 255
     d30:	97 83       	std	Z+7, r25	; 0x07
     d32:	86 83       	std	Z+6, r24	; 0x06
     d34:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <first_data_time_of_limit_switches_pressed>
     d38:	88 23       	and	r24, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <_Z21Goto_Fence_And_Detectv+0x148>
     d3c:	7b cf       	rjmp	.-266    	; 0xc34 <_Z21Goto_Fence_And_Detectv+0x3e>
     d3e:	6f cf       	rjmp	.-290    	; 0xc1e <_Z21Goto_Fence_And_Detectv+0x28>
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <_Z19calculateCompassPIDv>:
     d46:	2f 92       	push	r2
     d48:	3f 92       	push	r3
     d4a:	4f 92       	push	r4
     d4c:	5f 92       	push	r5
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <_Z19calculateCompassPIDv+0x26>
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <_Z19calculateCompassPIDv+0x28>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PidUpdateFlagCompass>
     d76:	88 23       	and	r24, r24
     d78:	09 f4       	brne	.+2      	; 0xd7c <_Z19calculateCompassPIDv+0x36>
     d7a:	62 c1       	rjmp	.+708    	; 0x1040 <_Z19calculateCompassPIDv+0x2fa>
     d7c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <compassPID>
     d80:	88 23       	and	r24, r24
     d82:	09 f4       	brne	.+2      	; 0xd86 <_Z19calculateCompassPIDv+0x40>
     d84:	61 c1       	rjmp	.+706    	; 0x1048 <_Z19calculateCompassPIDv+0x302>
     d86:	f9 dc       	rcall	.-1550   	; 0x77a <_Z10getYawGY88v>
     d88:	8c 01       	movw	r16, r24
     d8a:	e1 e2       	ldi	r30, 0x21	; 33
     d8c:	f3 e0       	ldi	r31, 0x03	; 3
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24
     d92:	86 85       	ldd	r24, Z+14	; 0x0e
     d94:	97 85       	ldd	r25, Z+15	; 0x0f
     d96:	80 1b       	sub	r24, r16
     d98:	91 0b       	sbc	r25, r17
     d9a:	85 3b       	cpi	r24, 0xB5	; 181
     d9c:	91 05       	cpc	r25, r1
     d9e:	3c f0       	brlt	.+14     	; 0xdae <_Z19calculateCompassPIDv+0x68>
     da0:	88 56       	subi	r24, 0x68	; 104
     da2:	91 40       	sbci	r25, 0x01	; 1
     da4:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <compass+0x3>
     da8:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <compass+0x2>
     dac:	0f c0       	rjmp	.+30     	; 0xdcc <_Z19calculateCompassPIDv+0x86>
     dae:	8c 34       	cpi	r24, 0x4C	; 76
     db0:	2f ef       	ldi	r18, 0xFF	; 255
     db2:	92 07       	cpc	r25, r18
     db4:	2c f0       	brlt	.+10     	; 0xdc0 <_Z19calculateCompassPIDv+0x7a>
     db6:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <compass+0x3>
     dba:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <compass+0x2>
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <_Z19calculateCompassPIDv+0x86>
     dc0:	88 59       	subi	r24, 0x98	; 152
     dc2:	9e 4f       	sbci	r25, 0xFE	; 254
     dc4:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <compass+0x3>
     dc8:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <compass+0x2>
     dcc:	20 90 23 03 	lds	r2, 0x0323	; 0x800323 <compass+0x2>
     dd0:	30 90 24 03 	lds	r3, 0x0324	; 0x800324 <compass+0x3>
     dd4:	b1 01       	movw	r22, r2
     dd6:	03 2c       	mov	r0, r3
     dd8:	00 0c       	add	r0, r0
     dda:	88 0b       	sbc	r24, r24
     ddc:	99 0b       	sbc	r25, r25
     dde:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     de2:	4b 01       	movw	r8, r22
     de4:	5c 01       	movw	r10, r24
     de6:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <compass+0x19>
     dea:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <compass+0x1a>
     dee:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <compass+0x1b>
     df2:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <compass+0x1c>
     df6:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     dfa:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <compass+0xa>
     dfe:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <compass+0xb>
     e02:	40 91 2d 03 	lds	r20, 0x032D	; 0x80032d <compass+0xc>
     e06:	50 91 2e 03 	lds	r21, 0x032E	; 0x80032e <compass+0xd>
     e0a:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     e0e:	6b 01       	movw	r12, r22
     e10:	7c 01       	movw	r14, r24
     e12:	60 93 2b 03 	sts	0x032B, r22	; 0x80032b <compass+0xa>
     e16:	70 93 2c 03 	sts	0x032C, r23	; 0x80032c <compass+0xb>
     e1a:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <compass+0xc>
     e1e:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <compass+0xd>
     e22:	40 91 32 03 	lds	r20, 0x0332	; 0x800332 <compass+0x11>
     e26:	50 91 33 03 	lds	r21, 0x0333	; 0x800333 <compass+0x12>
     e2a:	5e 83       	std	Y+6, r21	; 0x06
     e2c:	4d 83       	std	Y+5, r20	; 0x05
     e2e:	ba 01       	movw	r22, r20
     e30:	55 0f       	add	r21, r21
     e32:	88 0b       	sbc	r24, r24
     e34:	99 0b       	sbc	r25, r25
     e36:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04
     e42:	2d ec       	ldi	r18, 0xCD	; 205
     e44:	3c ec       	ldi	r19, 0xCC	; 204
     e46:	4c ec       	ldi	r20, 0xCC	; 204
     e48:	5d e3       	ldi	r21, 0x3D	; 61
     e4a:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     e4e:	2b 01       	movw	r4, r22
     e50:	3c 01       	movw	r6, r24
     e52:	c7 01       	movw	r24, r14
     e54:	b6 01       	movw	r22, r12
     e56:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
     e5a:	9b 01       	movw	r18, r22
     e5c:	77 23       	and	r23, r23
     e5e:	24 f4       	brge	.+8      	; 0xe68 <_Z19calculateCompassPIDv+0x122>
     e60:	22 27       	eor	r18, r18
     e62:	33 27       	eor	r19, r19
     e64:	26 1b       	sub	r18, r22
     e66:	37 0b       	sbc	r19, r23
     e68:	b9 01       	movw	r22, r18
     e6a:	33 0f       	add	r19, r19
     e6c:	88 0b       	sbc	r24, r24
     e6e:	99 0b       	sbc	r25, r25
     e70:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     e74:	a3 01       	movw	r20, r6
     e76:	92 01       	movw	r18, r4
     e78:	0e 94 bb 20 	call	0x4176	; 0x4176 <__gesf2>
     e7c:	18 16       	cp	r1, r24
     e7e:	24 f5       	brge	.+72     	; 0xec8 <_Z19calculateCompassPIDv+0x182>
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	a9 01       	movw	r20, r18
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 bb 20 	call	0x4176	; 0x4176 <__gesf2>
     e8e:	18 16       	cp	r1, r24
     e90:	4c f4       	brge	.+18     	; 0xea4 <_Z19calculateCompassPIDv+0x15e>
     e92:	40 92 2b 03 	sts	0x032B, r4	; 0x80032b <compass+0xa>
     e96:	50 92 2c 03 	sts	0x032C, r5	; 0x80032c <compass+0xb>
     e9a:	60 92 2d 03 	sts	0x032D, r6	; 0x80032d <compass+0xc>
     e9e:	70 92 2e 03 	sts	0x032E, r7	; 0x80032e <compass+0xd>
     ea2:	12 c0       	rjmp	.+36     	; 0xec8 <_Z19calculateCompassPIDv+0x182>
     ea4:	2d ec       	ldi	r18, 0xCD	; 205
     ea6:	3c ec       	ldi	r19, 0xCC	; 204
     ea8:	4c ec       	ldi	r20, 0xCC	; 204
     eaa:	5d eb       	ldi	r21, 0xBD	; 189
     eac:	69 81       	ldd	r22, Y+1	; 0x01
     eae:	7a 81       	ldd	r23, Y+2	; 0x02
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     eb8:	60 93 2b 03 	sts	0x032B, r22	; 0x80032b <compass+0xa>
     ebc:	70 93 2c 03 	sts	0x032C, r23	; 0x80032c <compass+0xb>
     ec0:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <compass+0xc>
     ec4:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <compass+0xd>
     ec8:	c1 01       	movw	r24, r2
     eca:	03 96       	adiw	r24, 0x03	; 3
     ecc:	07 97       	sbiw	r24, 0x07	; 7
     ece:	08 f0       	brcs	.+2      	; 0xed2 <_Z19calculateCompassPIDv+0x18c>
     ed0:	41 c0       	rjmp	.+130    	; 0xf54 <_Z19calculateCompassPIDv+0x20e>
     ed2:	c1 01       	movw	r24, r2
     ed4:	33 20       	and	r3, r3
     ed6:	24 f4       	brge	.+8      	; 0xee0 <_Z19calculateCompassPIDv+0x19a>
     ed8:	88 27       	eor	r24, r24
     eda:	99 27       	eor	r25, r25
     edc:	82 19       	sub	r24, r2
     ede:	93 09       	sbc	r25, r3
     ee0:	18 16       	cp	r1, r24
     ee2:	19 06       	cpc	r1, r25
     ee4:	bc f5       	brge	.+110    	; 0xf54 <_Z19calculateCompassPIDv+0x20e>
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f1 e2       	ldi	r31, 0x21	; 33
     eea:	ef 2e       	mov	r14, r31
     eec:	f3 e0       	ldi	r31, 0x03	; 3
     eee:	ff 2e       	mov	r15, r31
     ef0:	f0 2d       	mov	r31, r0
     ef2:	f7 01       	movw	r30, r14
     ef4:	25 89       	ldd	r18, Z+21	; 0x15
     ef6:	36 89       	ldd	r19, Z+22	; 0x16
     ef8:	47 89       	ldd	r20, Z+23	; 0x17
     efa:	50 8d       	ldd	r21, Z+24	; 0x18
     efc:	c5 01       	movw	r24, r10
     efe:	b4 01       	movw	r22, r8
     f00:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     f04:	4b 01       	movw	r8, r22
     f06:	5c 01       	movw	r10, r24
     f08:	f7 01       	movw	r30, r14
     f0a:	84 81       	ldd	r24, Z+4	; 0x04
     f0c:	95 81       	ldd	r25, Z+5	; 0x05
     f0e:	b8 01       	movw	r22, r16
     f10:	68 1b       	sub	r22, r24
     f12:	79 0b       	sbc	r23, r25
     f14:	07 2e       	mov	r0, r23
     f16:	00 0c       	add	r0, r0
     f18:	88 0b       	sbc	r24, r24
     f1a:	99 0b       	sbc	r25, r25
     f1c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     f20:	f7 01       	movw	r30, r14
     f22:	25 8d       	ldd	r18, Z+29	; 0x1d
     f24:	36 8d       	ldd	r19, Z+30	; 0x1e
     f26:	47 8d       	ldd	r20, Z+31	; 0x1f
     f28:	50 a1       	ldd	r21, Z+32	; 0x20
     f2a:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     f2e:	9b 01       	movw	r18, r22
     f30:	ac 01       	movw	r20, r24
     f32:	c5 01       	movw	r24, r10
     f34:	b4 01       	movw	r22, r8
     f36:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__subsf3>
     f3a:	f7 01       	movw	r30, r14
     f3c:	22 85       	ldd	r18, Z+10	; 0x0a
     f3e:	33 85       	ldd	r19, Z+11	; 0x0b
     f40:	44 85       	ldd	r20, Z+12	; 0x0c
     f42:	55 85       	ldd	r21, Z+13	; 0x0d
     f44:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     f48:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
     f4c:	f7 01       	movw	r30, r14
     f4e:	77 83       	std	Z+7, r23	; 0x07
     f50:	66 83       	std	Z+6, r22	; 0x06
     f52:	4c c0       	rjmp	.+152    	; 0xfec <_Z19calculateCompassPIDv+0x2a6>
     f54:	c1 01       	movw	r24, r2
     f56:	99 23       	and	r25, r25
     f58:	24 f4       	brge	.+8      	; 0xf62 <_Z19calculateCompassPIDv+0x21c>
     f5a:	88 27       	eor	r24, r24
     f5c:	99 27       	eor	r25, r25
     f5e:	82 19       	sub	r24, r2
     f60:	93 09       	sbc	r25, r3
     f62:	04 97       	sbiw	r24, 0x04	; 4
     f64:	dc f1       	brlt	.+118    	; 0xfdc <_Z19calculateCompassPIDv+0x296>
     f66:	0f 2e       	mov	r0, r31
     f68:	f1 e2       	ldi	r31, 0x21	; 33
     f6a:	ef 2e       	mov	r14, r31
     f6c:	f3 e0       	ldi	r31, 0x03	; 3
     f6e:	ff 2e       	mov	r15, r31
     f70:	f0 2d       	mov	r31, r0
     f72:	f7 01       	movw	r30, r14
     f74:	65 89       	ldd	r22, Z+21	; 0x15
     f76:	76 89       	ldd	r23, Z+22	; 0x16
     f78:	87 89       	ldd	r24, Z+23	; 0x17
     f7a:	90 8d       	ldd	r25, Z+24	; 0x18
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
     f80:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     f84:	a5 01       	movw	r20, r10
     f86:	94 01       	movw	r18, r8
     f88:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     f8c:	4b 01       	movw	r8, r22
     f8e:	5c 01       	movw	r10, r24
     f90:	f7 01       	movw	r30, r14
     f92:	84 81       	ldd	r24, Z+4	; 0x04
     f94:	95 81       	ldd	r25, Z+5	; 0x05
     f96:	b8 01       	movw	r22, r16
     f98:	68 1b       	sub	r22, r24
     f9a:	79 0b       	sbc	r23, r25
     f9c:	07 2e       	mov	r0, r23
     f9e:	00 0c       	add	r0, r0
     fa0:	88 0b       	sbc	r24, r24
     fa2:	99 0b       	sbc	r25, r25
     fa4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
     fa8:	f7 01       	movw	r30, r14
     faa:	25 8d       	ldd	r18, Z+29	; 0x1d
     fac:	36 8d       	ldd	r19, Z+30	; 0x1e
     fae:	47 8d       	ldd	r20, Z+31	; 0x1f
     fb0:	50 a1       	ldd	r21, Z+32	; 0x20
     fb2:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	c5 01       	movw	r24, r10
     fbc:	b4 01       	movw	r22, r8
     fbe:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__subsf3>
     fc2:	f7 01       	movw	r30, r14
     fc4:	22 85       	ldd	r18, Z+10	; 0x0a
     fc6:	33 85       	ldd	r19, Z+11	; 0x0b
     fc8:	44 85       	ldd	r20, Z+12	; 0x0c
     fca:	55 85       	ldd	r21, Z+13	; 0x0d
     fcc:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
     fd0:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
     fd4:	f7 01       	movw	r30, r14
     fd6:	77 83       	std	Z+7, r23	; 0x07
     fd8:	66 83       	std	Z+6, r22	; 0x06
     fda:	08 c0       	rjmp	.+16     	; 0xfec <_Z19calculateCompassPIDv+0x2a6>
     fdc:	e1 e2       	ldi	r30, 0x21	; 33
     fde:	f3 e0       	ldi	r31, 0x03	; 3
     fe0:	12 86       	std	Z+10, r1	; 0x0a
     fe2:	13 86       	std	Z+11, r1	; 0x0b
     fe4:	14 86       	std	Z+12, r1	; 0x0c
     fe6:	15 86       	std	Z+13, r1	; 0x0d
     fe8:	17 82       	std	Z+7, r1	; 0x07
     fea:	16 82       	std	Z+6, r1	; 0x06
     fec:	e1 e2       	ldi	r30, 0x21	; 33
     fee:	f3 e0       	ldi	r31, 0x03	; 3
     ff0:	15 83       	std	Z+5, r17	; 0x05
     ff2:	04 83       	std	Z+4, r16	; 0x04
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	97 81       	ldd	r25, Z+7	; 0x07
     ff8:	9c 01       	movw	r18, r24
     ffa:	99 23       	and	r25, r25
     ffc:	24 f4       	brge	.+8      	; 0x1006 <_Z19calculateCompassPIDv+0x2c0>
     ffe:	22 27       	eor	r18, r18
    1000:	33 27       	eor	r19, r19
    1002:	28 1b       	sub	r18, r24
    1004:	39 0b       	sbc	r19, r25
    1006:	4d 81       	ldd	r20, Y+5	; 0x05
    1008:	5e 81       	ldd	r21, Y+6	; 0x06
    100a:	42 17       	cp	r20, r18
    100c:	53 07       	cpc	r21, r19
    100e:	74 f4       	brge	.+28     	; 0x102c <_Z19calculateCompassPIDv+0x2e6>
    1010:	48 17       	cp	r20, r24
    1012:	59 07       	cpc	r21, r25
    1014:	2c f0       	brlt	.+10     	; 0x1020 <_Z19calculateCompassPIDv+0x2da>
    1016:	51 95       	neg	r21
    1018:	41 95       	neg	r20
    101a:	51 09       	sbc	r21, r1
    101c:	5e 83       	std	Y+6, r21	; 0x06
    101e:	4d 83       	std	Y+5, r20	; 0x05
    1020:	8d 81       	ldd	r24, Y+5	; 0x05
    1022:	9e 81       	ldd	r25, Y+6	; 0x06
    1024:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <compass+0x7>
    1028:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <compass+0x6>
    102c:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <compass+0x6>
    1030:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <compass+0x7>
    1034:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <velocity_robot+0x5>
    1038:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <velocity_robot+0x4>
    103c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <PidUpdateFlagCompass>
    1040:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <compassPID>
    1044:	81 11       	cpse	r24, r1
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <_Z19calculateCompassPIDv+0x30a>
    1048:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <velocity_robot+0x5>
    104c:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <velocity_robot+0x4>
    1050:	26 96       	adiw	r28, 0x06	; 6
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	af 90       	pop	r10
    1070:	9f 90       	pop	r9
    1072:	8f 90       	pop	r8
    1074:	7f 90       	pop	r7
    1076:	6f 90       	pop	r6
    1078:	5f 90       	pop	r5
    107a:	4f 90       	pop	r4
    107c:	3f 90       	pop	r3
    107e:	2f 90       	pop	r2
    1080:	08 95       	ret

00001082 <_Z12calculatevelv>:
    1082:	2f 92       	push	r2
    1084:	3f 92       	push	r3
    1086:	4f 92       	push	r4
    1088:	5f 92       	push	r5
    108a:	6f 92       	push	r6
    108c:	7f 92       	push	r7
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <_Z12calculatevelv+0x26>
    10a8:	1f 92       	push	r1
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <inverseKinematicsTrue>
    10b2:	88 23       	and	r24, r24
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <_Z12calculatevelv+0x36>
    10b6:	57 c0       	rjmp	.+174    	; 0x1166 <_Z12calculatevelv+0xe4>
    10b8:	0f 2e       	mov	r0, r31
    10ba:	fe ea       	ldi	r31, 0xAE	; 174
    10bc:	cf 2e       	mov	r12, r31
    10be:	f3 e0       	ldi	r31, 0x03	; 3
    10c0:	df 2e       	mov	r13, r31
    10c2:	f0 2d       	mov	r31, r0
    10c4:	0f 2e       	mov	r0, r31
    10c6:	f4 e2       	ldi	r31, 0x24	; 36
    10c8:	4f 2e       	mov	r4, r31
    10ca:	f2 e0       	ldi	r31, 0x02	; 2
    10cc:	5f 2e       	mov	r5, r31
    10ce:	f0 2d       	mov	r31, r0
    10d0:	0f 2e       	mov	r0, r31
    10d2:	f6 eb       	ldi	r31, 0xB6	; 182
    10d4:	2f 2e       	mov	r2, r31
    10d6:	f3 e0       	ldi	r31, 0x03	; 3
    10d8:	3f 2e       	mov	r3, r31
    10da:	f0 2d       	mov	r31, r0
    10dc:	0f 2e       	mov	r0, r31
    10de:	fe ea       	ldi	r31, 0xAE	; 174
    10e0:	6f 2e       	mov	r6, r31
    10e2:	f3 e0       	ldi	r31, 0x03	; 3
    10e4:	7f 2e       	mov	r7, r31
    10e6:	f0 2d       	mov	r31, r0
    10e8:	da 82       	std	Y+2, r13	; 0x02
    10ea:	c9 82       	std	Y+1, r12	; 0x01
    10ec:	08 ea       	ldi	r16, 0xA8	; 168
    10ee:	13 e0       	ldi	r17, 0x03	; 3
    10f0:	72 01       	movw	r14, r4
    10f2:	1b 82       	std	Y+3, r1	; 0x03
    10f4:	1c 82       	std	Y+4, r1	; 0x04
    10f6:	d8 01       	movw	r26, r16
    10f8:	6d 91       	ld	r22, X+
    10fa:	7d 91       	ld	r23, X+
    10fc:	8d 01       	movw	r16, r26
    10fe:	f7 01       	movw	r30, r14
    1100:	81 90       	ld	r8, Z+
    1102:	91 90       	ld	r9, Z+
    1104:	a1 90       	ld	r10, Z+
    1106:	b1 90       	ld	r11, Z+
    1108:	7f 01       	movw	r14, r30
    110a:	07 2e       	mov	r0, r23
    110c:	00 0c       	add	r0, r0
    110e:	88 0b       	sbc	r24, r24
    1110:	99 0b       	sbc	r25, r25
    1112:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1116:	a5 01       	movw	r20, r10
    1118:	94 01       	movw	r18, r8
    111a:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    111e:	4b 01       	movw	r8, r22
    1120:	5c 01       	movw	r10, r24
    1122:	2b 81       	ldd	r18, Y+3	; 0x03
    1124:	3c 81       	ldd	r19, Y+4	; 0x04
    1126:	b9 01       	movw	r22, r18
    1128:	33 0f       	add	r19, r19
    112a:	88 0b       	sbc	r24, r24
    112c:	99 0b       	sbc	r25, r25
    112e:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1132:	9b 01       	movw	r18, r22
    1134:	ac 01       	movw	r20, r24
    1136:	c5 01       	movw	r24, r10
    1138:	b4 01       	movw	r22, r8
    113a:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    113e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1142:	7c 83       	std	Y+4, r23	; 0x04
    1144:	6b 83       	std	Y+3, r22	; 0x03
    1146:	06 15       	cp	r16, r6
    1148:	17 05       	cpc	r17, r7
    114a:	a9 f6       	brne	.-86     	; 0x10f6 <_Z12calculatevelv+0x74>
    114c:	a9 81       	ldd	r26, Y+1	; 0x01
    114e:	ba 81       	ldd	r27, Y+2	; 0x02
    1150:	6d 93       	st	X+, r22
    1152:	7c 93       	st	X, r23
    1154:	f2 e0       	ldi	r31, 0x02	; 2
    1156:	cf 0e       	add	r12, r31
    1158:	d1 1c       	adc	r13, r1
    115a:	2c e0       	ldi	r18, 0x0C	; 12
    115c:	42 0e       	add	r4, r18
    115e:	51 1c       	adc	r5, r1
    1160:	c2 14       	cp	r12, r2
    1162:	d3 04       	cpc	r13, r3
    1164:	09 f6       	brne	.-126    	; 0x10e8 <_Z12calculatevelv+0x66>
    1166:	e6 eb       	ldi	r30, 0xB6	; 182
    1168:	f3 e0       	ldi	r31, 0x03	; 3
    116a:	ae ea       	ldi	r26, 0xAE	; 174
    116c:	b3 e0       	ldi	r27, 0x03	; 3
    116e:	2d 91       	ld	r18, X+
    1170:	3c 91       	ld	r19, X
    1172:	47 e1       	ldi	r20, 0x17	; 23
    1174:	42 9f       	mul	r20, r18
    1176:	c0 01       	movw	r24, r0
    1178:	43 9f       	mul	r20, r19
    117a:	90 0d       	add	r25, r0
    117c:	11 24       	eor	r1, r1
    117e:	29 ef       	ldi	r18, 0xF9	; 249
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	b9 01       	movw	r22, r18
    1184:	0e 94 9a 21 	call	0x4334	; 0x4334 <__divmodhi4>
    1188:	60 83       	st	Z, r22
    118a:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <velocity_motor+0x2>
    118e:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <velocity_motor+0x3>
    1192:	46 9f       	mul	r20, r22
    1194:	c0 01       	movw	r24, r0
    1196:	47 9f       	mul	r20, r23
    1198:	90 0d       	add	r25, r0
    119a:	11 24       	eor	r1, r1
    119c:	b9 01       	movw	r22, r18
    119e:	0e 94 9a 21 	call	0x4334	; 0x4334 <__divmodhi4>
    11a2:	61 83       	std	Z+1, r22	; 0x01
    11a4:	60 91 b2 03 	lds	r22, 0x03B2	; 0x8003b2 <velocity_motor+0x4>
    11a8:	70 91 b3 03 	lds	r23, 0x03B3	; 0x8003b3 <velocity_motor+0x5>
    11ac:	46 9f       	mul	r20, r22
    11ae:	c0 01       	movw	r24, r0
    11b0:	47 9f       	mul	r20, r23
    11b2:	90 0d       	add	r25, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	b9 01       	movw	r22, r18
    11b8:	0e 94 9a 21 	call	0x4334	; 0x4334 <__divmodhi4>
    11bc:	62 83       	std	Z+2, r22	; 0x02
    11be:	60 91 b4 03 	lds	r22, 0x03B4	; 0x8003b4 <velocity_motor+0x6>
    11c2:	70 91 b5 03 	lds	r23, 0x03B5	; 0x8003b5 <velocity_motor+0x7>
    11c6:	46 9f       	mul	r20, r22
    11c8:	c0 01       	movw	r24, r0
    11ca:	47 9f       	mul	r20, r23
    11cc:	90 0d       	add	r25, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	b9 01       	movw	r22, r18
    11d2:	0e 94 9a 21 	call	0x4334	; 0x4334 <__divmodhi4>
    11d6:	63 83       	std	Z+3, r22	; 0x03
    11d8:	f8 dc       	rcall	.-1552   	; 0xbca <_Z15sendDataToSlavev>
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	bf 90       	pop	r11
    11f4:	af 90       	pop	r10
    11f6:	9f 90       	pop	r9
    11f8:	8f 90       	pop	r8
    11fa:	7f 90       	pop	r7
    11fc:	6f 90       	pop	r6
    11fe:	5f 90       	pop	r5
    1200:	4f 90       	pop	r4
    1202:	3f 90       	pop	r3
    1204:	2f 90       	pop	r2
    1206:	08 95       	ret

00001208 <_Z4movxiij>:
    1208:	2f 92       	push	r2
    120a:	3f 92       	push	r3
    120c:	4f 92       	push	r4
    120e:	5f 92       	push	r5
    1210:	6f 92       	push	r6
    1212:	7f 92       	push	r7
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	1c 01       	movw	r2, r24
    122e:	8b 01       	movw	r16, r22
    1230:	7a 01       	movw	r14, r20
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <inverseKinematicsTrue>
    1238:	8e e7       	ldi	r24, 0x7E	; 126
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1240:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1244:	ab 01       	movw	r20, r22
    1246:	77 23       	and	r23, r23
    1248:	24 f4       	brge	.+8      	; 0x1252 <_Z4movxiij+0x4a>
    124a:	44 27       	eor	r20, r20
    124c:	55 27       	eor	r21, r21
    124e:	46 1b       	sub	r20, r22
    1250:	57 0b       	sbc	r21, r23
    1252:	ea 01       	movw	r28, r20
    1254:	50 93 a7 03 	sts	0x03A7, r21	; 0x8003a7 <distanceX+0x1>
    1258:	40 93 a6 03 	sts	0x03A6, r20	; 0x8003a6 <distanceX>
    125c:	30 92 0f 03 	sts	0x030F, r3	; 0x80030f <driveX+0xf>
    1260:	20 92 0e 03 	sts	0x030E, r2	; 0x80030e <driveX+0xe>
    1264:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <PidUpdateFlagDriveX>
    1268:	22 23       	and	r18, r18
    126a:	09 f4       	brne	.+2      	; 0x126e <_Z4movxiij+0x66>
    126c:	55 c1       	rjmp	.+682    	; 0x1518 <_Z4movxiij+0x310>
    126e:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
    1272:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
    1276:	50 93 01 03 	sts	0x0301, r21	; 0x800301 <driveX+0x1>
    127a:	40 93 00 03 	sts	0x0300, r20	; 0x800300 <driveX>
    127e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <PidUpdateFlagDriveX>
    1282:	48 3e       	cpi	r20, 0xE8	; 232
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	58 07       	cpc	r21, r24
    1288:	0c f4       	brge	.+2      	; 0x128c <_Z4movxiij+0x84>
    128a:	ea c0       	rjmp	.+468    	; 0x1460 <_Z4movxiij+0x258>
    128c:	24 1a       	sub	r2, r20
    128e:	35 0a       	sbc	r3, r21
    1290:	0f 2e       	mov	r0, r31
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	cf 2e       	mov	r12, r31
    1296:	f3 e0       	ldi	r31, 0x03	; 3
    1298:	df 2e       	mov	r13, r31
    129a:	f0 2d       	mov	r31, r0
    129c:	f6 01       	movw	r30, r12
    129e:	33 82       	std	Z+3, r3	; 0x03
    12a0:	22 82       	std	Z+2, r2	; 0x02
    12a2:	b1 01       	movw	r22, r2
    12a4:	03 2c       	mov	r0, r3
    12a6:	00 0c       	add	r0, r0
    12a8:	88 0b       	sbc	r24, r24
    12aa:	99 0b       	sbc	r25, r25
    12ac:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    12b0:	2b 01       	movw	r4, r22
    12b2:	3c 01       	movw	r6, r24
    12b4:	f6 01       	movw	r30, r12
    12b6:	21 8d       	ldd	r18, Z+25	; 0x19
    12b8:	32 8d       	ldd	r19, Z+26	; 0x1a
    12ba:	43 8d       	ldd	r20, Z+27	; 0x1b
    12bc:	54 8d       	ldd	r21, Z+28	; 0x1c
    12be:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    12c2:	f6 01       	movw	r30, r12
    12c4:	22 85       	ldd	r18, Z+10	; 0x0a
    12c6:	33 85       	ldd	r19, Z+11	; 0x0b
    12c8:	44 85       	ldd	r20, Z+12	; 0x0c
    12ca:	55 85       	ldd	r21, Z+13	; 0x0d
    12cc:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    12d0:	4b 01       	movw	r8, r22
    12d2:	5c 01       	movw	r10, r24
    12d4:	f6 01       	movw	r30, r12
    12d6:	62 87       	std	Z+10, r22	; 0x0a
    12d8:	73 87       	std	Z+11, r23	; 0x0b
    12da:	84 87       	std	Z+12, r24	; 0x0c
    12dc:	95 87       	std	Z+13, r25	; 0x0d
    12de:	80 89       	ldd	r24, Z+16	; 0x10
    12e0:	88 23       	and	r24, r24
    12e2:	19 f0       	breq	.+6      	; 0x12ea <_Z4movxiij+0xe2>
    12e4:	d5 83       	std	Z+5, r29	; 0x05
    12e6:	c4 83       	std	Z+4, r28	; 0x04
    12e8:	10 8a       	std	Z+16, r1	; 0x10
    12ea:	c5 01       	movw	r24, r10
    12ec:	b4 01       	movw	r22, r8
    12ee:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    12f2:	9b 01       	movw	r18, r22
    12f4:	77 23       	and	r23, r23
    12f6:	24 f4       	brge	.+8      	; 0x1300 <_Z4movxiij+0xf8>
    12f8:	22 27       	eor	r18, r18
    12fa:	33 27       	eor	r19, r19
    12fc:	26 1b       	sub	r18, r22
    12fe:	37 0b       	sbc	r19, r23
    1300:	2b 30       	cpi	r18, 0x0B	; 11
    1302:	31 05       	cpc	r19, r1
    1304:	5c f1       	brlt	.+86     	; 0x135c <_Z4movxiij+0x154>
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	c5 01       	movw	r24, r10
    130e:	b4 01       	movw	r22, r8
    1310:	0e 94 bb 20 	call	0x4176	; 0x4176 <__gesf2>
    1314:	18 16       	cp	r1, r24
    1316:	6c f4       	brge	.+26     	; 0x1332 <_Z4movxiij+0x12a>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 e2       	ldi	r26, 0x20	; 32
    131e:	b1 e4       	ldi	r27, 0x41	; 65
    1320:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <driveX+0xa>
    1324:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <driveX+0xb>
    1328:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <driveX+0xc>
    132c:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <driveX+0xd>
    1330:	15 c0       	rjmp	.+42     	; 0x135c <_Z4movxiij+0x154>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	a9 01       	movw	r20, r18
    1338:	c5 01       	movw	r24, r10
    133a:	b4 01       	movw	r22, r8
    133c:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__cmpsf2>
    1340:	88 23       	and	r24, r24
    1342:	64 f4       	brge	.+24     	; 0x135c <_Z4movxiij+0x154>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a0 e2       	ldi	r26, 0x20	; 32
    134a:	b1 ec       	ldi	r27, 0xC1	; 193
    134c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <driveX+0xa>
    1350:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <driveX+0xb>
    1354:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <driveX+0xc>
    1358:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <driveX+0xd>
    135c:	12 14       	cp	r1, r2
    135e:	13 04       	cpc	r1, r3
    1360:	bc f5       	brge	.+110    	; 0x13d0 <_Z4movxiij+0x1c8>
    1362:	0f 2e       	mov	r0, r31
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	cf 2e       	mov	r12, r31
    1368:	f3 e0       	ldi	r31, 0x03	; 3
    136a:	df 2e       	mov	r13, r31
    136c:	f0 2d       	mov	r31, r0
    136e:	f6 01       	movw	r30, r12
    1370:	25 89       	ldd	r18, Z+21	; 0x15
    1372:	36 89       	ldd	r19, Z+22	; 0x16
    1374:	47 89       	ldd	r20, Z+23	; 0x17
    1376:	50 8d       	ldd	r21, Z+24	; 0x18
    1378:	c3 01       	movw	r24, r6
    137a:	b2 01       	movw	r22, r4
    137c:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1380:	f6 01       	movw	r30, r12
    1382:	22 85       	ldd	r18, Z+10	; 0x0a
    1384:	33 85       	ldd	r19, Z+11	; 0x0b
    1386:	44 85       	ldd	r20, Z+12	; 0x0c
    1388:	55 85       	ldd	r21, Z+13	; 0x0d
    138a:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    138e:	4b 01       	movw	r8, r22
    1390:	5c 01       	movw	r10, r24
    1392:	f6 01       	movw	r30, r12
    1394:	84 81       	ldd	r24, Z+4	; 0x04
    1396:	95 81       	ldd	r25, Z+5	; 0x05
    1398:	be 01       	movw	r22, r28
    139a:	68 1b       	sub	r22, r24
    139c:	79 0b       	sbc	r23, r25
    139e:	07 2e       	mov	r0, r23
    13a0:	00 0c       	add	r0, r0
    13a2:	88 0b       	sbc	r24, r24
    13a4:	99 0b       	sbc	r25, r25
    13a6:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    13aa:	f6 01       	movw	r30, r12
    13ac:	25 8d       	ldd	r18, Z+29	; 0x1d
    13ae:	36 8d       	ldd	r19, Z+30	; 0x1e
    13b0:	47 8d       	ldd	r20, Z+31	; 0x1f
    13b2:	50 a1       	ldd	r21, Z+32	; 0x20
    13b4:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    13b8:	9b 01       	movw	r18, r22
    13ba:	ac 01       	movw	r20, r24
    13bc:	c5 01       	movw	r24, r10
    13be:	b4 01       	movw	r22, r8
    13c0:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__subsf3>
    13c4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    13c8:	f6 01       	movw	r30, r12
    13ca:	77 83       	std	Z+7, r23	; 0x07
    13cc:	66 83       	std	Z+6, r22	; 0x06
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <_Z4movxiij+0x1d0>
    13d0:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <driveX+0x7>
    13d4:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <driveX+0x6>
    13d8:	e0 e0       	ldi	r30, 0x00	; 0
    13da:	f3 e0       	ldi	r31, 0x03	; 3
    13dc:	d5 83       	std	Z+5, r29	; 0x05
    13de:	c4 83       	std	Z+4, r28	; 0x04
    13e0:	86 81       	ldd	r24, Z+6	; 0x06
    13e2:	97 81       	ldd	r25, Z+7	; 0x07
    13e4:	9c 01       	movw	r18, r24
    13e6:	99 23       	and	r25, r25
    13e8:	24 f4       	brge	.+8      	; 0x13f2 <_Z4movxiij+0x1ea>
    13ea:	22 27       	eor	r18, r18
    13ec:	33 27       	eor	r19, r19
    13ee:	28 1b       	sub	r18, r24
    13f0:	39 0b       	sbc	r19, r25
    13f2:	e2 16       	cp	r14, r18
    13f4:	f3 06       	cpc	r15, r19
    13f6:	78 f4       	brcc	.+30     	; 0x1416 <_Z4movxiij+0x20e>
    13f8:	18 16       	cp	r1, r24
    13fa:	19 06       	cpc	r1, r25
    13fc:	2c f4       	brge	.+10     	; 0x1408 <_Z4movxiij+0x200>
    13fe:	f0 92 07 03 	sts	0x0307, r15	; 0x800307 <driveX+0x7>
    1402:	e0 92 06 03 	sts	0x0306, r14	; 0x800306 <driveX+0x6>
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <_Z4movxiij+0x20e>
    1408:	f1 94       	neg	r15
    140a:	e1 94       	neg	r14
    140c:	f1 08       	sbc	r15, r1
    140e:	f0 92 07 03 	sts	0x0307, r15	; 0x800307 <driveX+0x7>
    1412:	e0 92 06 03 	sts	0x0306, r14	; 0x800306 <driveX+0x6>
    1416:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <driveX+0x6>
    141a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <driveX+0x7>
    141e:	43 96       	adiw	r24, 0x13	; 19
    1420:	87 97       	sbiw	r24, 0x27	; 39
    1422:	a8 f4       	brcc	.+42     	; 0x144e <_Z4movxiij+0x246>
    1424:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <movingxfront>
    1428:	88 23       	and	r24, r24
    142a:	39 f0       	breq	.+14     	; 0x143a <_Z4movxiij+0x232>
    142c:	84 e1       	ldi	r24, 0x14	; 20
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <driveX+0x7>
    1434:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <driveX+0x6>
    1438:	0a c0       	rjmp	.+20     	; 0x144e <_Z4movxiij+0x246>
    143a:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <movingxback>
    143e:	88 23       	and	r24, r24
    1440:	31 f0       	breq	.+12     	; 0x144e <_Z4movxiij+0x246>
    1442:	8c ee       	ldi	r24, 0xEC	; 236
    1444:	9f ef       	ldi	r25, 0xFF	; 255
    1446:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <driveX+0x7>
    144a:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <driveX+0x6>
    144e:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <driveX+0x6>
    1452:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <driveX+0x7>
    1456:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <velocity_robot+0x1>
    145a:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <velocity_robot>
    145e:	35 c0       	rjmp	.+106    	; 0x14ca <_Z4movxiij+0x2c2>
    1460:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <startingAtFront>
    1464:	88 23       	and	r24, r24
    1466:	c9 f0       	breq	.+50     	; 0x149a <_Z4movxiij+0x292>
    1468:	ba 01       	movw	r22, r20
    146a:	55 0f       	add	r21, r21
    146c:	88 0b       	sbc	r24, r24
    146e:	99 0b       	sbc	r25, r25
    1470:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1474:	2d ec       	ldi	r18, 0xCD	; 205
    1476:	3c ec       	ldi	r19, 0xCC	; 204
    1478:	4c ec       	ldi	r20, 0xCC	; 204
    147a:	5d e3       	ldi	r21, 0x3D	; 61
    147c:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e7       	ldi	r20, 0x70	; 112
    1486:	52 e4       	ldi	r21, 0x42	; 66
    1488:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    148c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1490:	70 93 a9 03 	sts	0x03A9, r23	; 0x8003a9 <velocity_robot+0x1>
    1494:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <velocity_robot>
    1498:	18 c0       	rjmp	.+48     	; 0x14ca <_Z4movxiij+0x2c2>
    149a:	ba 01       	movw	r22, r20
    149c:	55 0f       	add	r21, r21
    149e:	88 0b       	sbc	r24, r24
    14a0:	99 0b       	sbc	r25, r25
    14a2:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    14a6:	2a e0       	ldi	r18, 0x0A	; 10
    14a8:	37 ed       	ldi	r19, 0xD7	; 215
    14aa:	43 e2       	ldi	r20, 0x23	; 35
    14ac:	5d e3       	ldi	r21, 0x3D	; 61
    14ae:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e7       	ldi	r20, 0x70	; 112
    14b8:	52 e4       	ldi	r21, 0x42	; 66
    14ba:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    14be:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    14c2:	70 93 a9 03 	sts	0x03A9, r23	; 0x8003a9 <velocity_robot+0x1>
    14c6:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <velocity_robot>
    14ca:	02 30       	cpi	r16, 0x02	; 2
    14cc:	11 05       	cpc	r17, r1
    14ce:	51 f4       	brne	.+20     	; 0x14e4 <_Z4movxiij+0x2dc>
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <movingxfront>
    14d6:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingxback>
    14da:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
    14de:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
    14e2:	1a c0       	rjmp	.+52     	; 0x1518 <_Z4movxiij+0x310>
    14e4:	03 30       	cpi	r16, 0x03	; 3
    14e6:	11 05       	cpc	r17, r1
    14e8:	b9 f4       	brne	.+46     	; 0x1518 <_Z4movxiij+0x310>
    14ea:	e8 ea       	ldi	r30, 0xA8	; 168
    14ec:	f3 e0       	ldi	r31, 0x03	; 3
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	99 23       	and	r25, r25
    14f4:	1c f4       	brge	.+6      	; 0x14fc <_Z4movxiij+0x2f4>
    14f6:	91 95       	neg	r25
    14f8:	81 95       	neg	r24
    14fa:	91 09       	sbc	r25, r1
    14fc:	91 95       	neg	r25
    14fe:	81 95       	neg	r24
    1500:	91 09       	sbc	r25, r1
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
    1506:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <movingxfront>
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <movingxback>
    1510:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
    1514:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
    1518:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <startingAtFront>
    151c:	88 23       	and	r24, r24
    151e:	39 f0       	breq	.+14     	; 0x152e <_Z4movxiij+0x326>
    1520:	86 ef       	ldi	r24, 0xF6	; 246
    1522:	9f ef       	ldi	r25, 0xFF	; 255
    1524:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <velocity_robot+0x3>
    1528:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <velocity_robot+0x2>
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <_Z4movxiij+0x32e>
    152e:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <velocity_robot+0x3>
    1532:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <velocity_robot+0x2>
    1536:	07 dc       	rcall	.-2034   	; 0xd46 <_Z19calculateCompassPIDv>
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	7f 90       	pop	r7
    1552:	6f 90       	pop	r6
    1554:	5f 90       	pop	r5
    1556:	4f 90       	pop	r4
    1558:	3f 90       	pop	r3
    155a:	2f 90       	pop	r2
    155c:	08 95       	ret

0000155e <_Z9movDegreei>:
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	8c 01       	movw	r16, r24
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <inverseKinematicsTrue>
    157e:	8e e7       	ldi	r24, 0x7E	; 126
    1580:	92 e0       	ldi	r25, 0x02	; 2
    1582:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1586:	6b 01       	movw	r12, r22
    1588:	7c 01       	movw	r14, r24
    158a:	8e e7       	ldi	r24, 0x7E	; 126
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1592:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1596:	9b 01       	movw	r18, r22
    1598:	77 23       	and	r23, r23
    159a:	24 f4       	brge	.+8      	; 0x15a4 <_Z9movDegreei+0x46>
    159c:	22 27       	eor	r18, r18
    159e:	33 27       	eor	r19, r19
    15a0:	26 1b       	sub	r18, r22
    15a2:	37 0b       	sbc	r19, r23
    15a4:	28 3e       	cpi	r18, 0xE8	; 232
    15a6:	33 40       	sbci	r19, 0x03	; 3
    15a8:	1c f5       	brge	.+70     	; 0x15f0 <_Z9movDegreei+0x92>
    15aa:	8e e7       	ldi	r24, 0x7E	; 126
    15ac:	92 e0       	ldi	r25, 0x02	; 2
    15ae:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    15b2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    15b6:	9b 01       	movw	r18, r22
    15b8:	77 23       	and	r23, r23
    15ba:	24 f4       	brge	.+8      	; 0x15c4 <_Z9movDegreei+0x66>
    15bc:	22 27       	eor	r18, r18
    15be:	33 27       	eor	r19, r19
    15c0:	26 1b       	sub	r18, r22
    15c2:	37 0b       	sbc	r19, r23
    15c4:	b9 01       	movw	r22, r18
    15c6:	33 0f       	add	r19, r19
    15c8:	88 0b       	sbc	r24, r24
    15ca:	99 0b       	sbc	r25, r25
    15cc:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    15d0:	2c ee       	ldi	r18, 0xEC	; 236
    15d2:	31 e5       	ldi	r19, 0x51	; 81
    15d4:	48 eb       	ldi	r20, 0xB8	; 184
    15d6:	5d e3       	ldi	r21, 0x3D	; 61
    15d8:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e7       	ldi	r20, 0x70	; 112
    15e2:	52 e4       	ldi	r21, 0x42	; 66
    15e4:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    15e8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    15ec:	eb 01       	movw	r28, r22
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <_Z9movDegreei+0x96>
    15f0:	c6 e9       	ldi	r28, 0x96	; 150
    15f2:	d0 e0       	ldi	r29, 0x00	; 0
    15f4:	8e e7       	ldi	r24, 0x7E	; 126
    15f6:	92 e0       	ldi	r25, 0x02	; 2
    15f8:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    15fc:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1600:	9b 01       	movw	r18, r22
    1602:	77 23       	and	r23, r23
    1604:	24 f4       	brge	.+8      	; 0x160e <_Z9movDegreei+0xb0>
    1606:	22 27       	eor	r18, r18
    1608:	33 27       	eor	r19, r19
    160a:	26 1b       	sub	r18, r22
    160c:	37 0b       	sbc	r19, r23
    160e:	21 3a       	cpi	r18, 0xA1	; 161
    1610:	3f 40       	sbci	r19, 0x0F	; 15
    1612:	3c f1       	brlt	.+78     	; 0x1662 <_Z9movDegreei+0x104>
    1614:	c7 01       	movw	r24, r14
    1616:	b6 01       	movw	r22, r12
    1618:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    161c:	9b 01       	movw	r18, r22
    161e:	77 23       	and	r23, r23
    1620:	24 f4       	brge	.+8      	; 0x162a <_Z9movDegreei+0xcc>
    1622:	22 27       	eor	r18, r18
    1624:	33 27       	eor	r19, r19
    1626:	26 1b       	sub	r18, r22
    1628:	37 0b       	sbc	r19, r23
    162a:	6c e5       	ldi	r22, 0x5C	; 92
    162c:	72 e1       	ldi	r23, 0x12	; 18
    162e:	62 1b       	sub	r22, r18
    1630:	73 0b       	sbc	r23, r19
    1632:	aa f0       	brmi	.+42     	; 0x165e <_Z9movDegreei+0x100>
    1634:	07 2e       	mov	r0, r23
    1636:	00 0c       	add	r0, r0
    1638:	88 0b       	sbc	r24, r24
    163a:	99 0b       	sbc	r25, r25
    163c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1640:	2d ec       	ldi	r18, 0xCD	; 205
    1642:	3c ec       	ldi	r19, 0xCC	; 204
    1644:	4c ec       	ldi	r20, 0xCC	; 204
    1646:	5d e3       	ldi	r21, 0x3D	; 61
    1648:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    164c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1650:	eb 01       	movw	r28, r22
    1652:	6e 31       	cpi	r22, 0x1E	; 30
    1654:	71 05       	cpc	r23, r1
    1656:	2c f4       	brge	.+10     	; 0x1662 <_Z9movDegreei+0x104>
    1658:	ce e1       	ldi	r28, 0x1E	; 30
    165a:	d0 e0       	ldi	r29, 0x00	; 0
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <_Z9movDegreei+0x104>
    165e:	ce e1       	ldi	r28, 0x1E	; 30
    1660:	d0 e0       	ldi	r29, 0x00	; 0
    1662:	be 01       	movw	r22, r28
    1664:	dd 0f       	add	r29, r29
    1666:	88 0b       	sbc	r24, r24
    1668:	99 0b       	sbc	r25, r25
    166a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    166e:	6b 01       	movw	r12, r22
    1670:	7c 01       	movw	r14, r24
    1672:	b8 01       	movw	r22, r16
    1674:	11 0f       	add	r17, r17
    1676:	88 0b       	sbc	r24, r24
    1678:	99 0b       	sbc	r25, r25
    167a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    167e:	25 e3       	ldi	r18, 0x35	; 53
    1680:	3a ef       	ldi	r19, 0xFA	; 250
    1682:	4e e8       	ldi	r20, 0x8E	; 142
    1684:	5c e3       	ldi	r21, 0x3C	; 60
    1686:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    168a:	4b 01       	movw	r8, r22
    168c:	5c 01       	movw	r10, r24
    168e:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <cos>
    1692:	9b 01       	movw	r18, r22
    1694:	ac 01       	movw	r20, r24
    1696:	c8 ea       	ldi	r28, 0xA8	; 168
    1698:	d3 e0       	ldi	r29, 0x03	; 3
    169a:	c7 01       	movw	r24, r14
    169c:	b6 01       	movw	r22, r12
    169e:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    16a2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    16a6:	79 83       	std	Y+1, r23	; 0x01
    16a8:	68 83       	st	Y, r22
    16aa:	c5 01       	movw	r24, r10
    16ac:	b4 01       	movw	r22, r8
    16ae:	0e 94 29 21 	call	0x4252	; 0x4252 <sin>
    16b2:	9b 01       	movw	r18, r22
    16b4:	ac 01       	movw	r20, r24
    16b6:	c7 01       	movw	r24, r14
    16b8:	b6 01       	movw	r22, r12
    16ba:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    16be:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    16c2:	7b 83       	std	Y+3, r23	; 0x03
    16c4:	6a 83       	std	Y+2, r22	; 0x02
    16c6:	3f db       	rcall	.-2434   	; 0xd46 <_Z19calculateCompassPIDv>
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	ff 90       	pop	r15
    16d2:	ef 90       	pop	r14
    16d4:	df 90       	pop	r13
    16d6:	cf 90       	pop	r12
    16d8:	bf 90       	pop	r11
    16da:	af 90       	pop	r10
    16dc:	9f 90       	pop	r9
    16de:	8f 90       	pop	r8
    16e0:	08 95       	ret

000016e2 <_Z27Get_Front_LinetrackerY_Datav>:
    16e2:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <_Z10uart2_getcv>
    16e6:	85 36       	cpi	r24, 0x65	; 101
    16e8:	38 f0       	brcs	.+14     	; 0x16f8 <_Z27Get_Front_LinetrackerY_Datav+0x16>
    16ea:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_previous_data_of_front_linetracker>
    16ee:	80 35       	cpi	r24, 0x50	; 80
    16f0:	61 f0       	breq	.+24     	; 0x170a <_Z27Get_Front_LinetrackerY_Datav+0x28>
    16f2:	8a 30       	cpi	r24, 0x0A	; 10
    16f4:	71 f4       	brne	.+28     	; 0x1712 <_Z27Get_Front_LinetrackerY_Datav+0x30>
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <_Z27Get_Front_LinetrackerY_Datav+0x1e>
    16f8:	86 5f       	subi	r24, 0xF6	; 246
    16fa:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    16fe:	08 95       	ret
    1700:	8a e0       	ldi	r24, 0x0A	; 10
    1702:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	08 95       	ret
    170a:	80 e5       	ldi	r24, 0x50	; 80
    170c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    1710:	8a e5       	ldi	r24, 0x5A	; 90
    1712:	08 95       	ret

00001714 <_Z26Get_Back_LinetrackerY_Datav>:
    1714:	4f 92       	push	r4
    1716:	5f 92       	push	r5
    1718:	6f 92       	push	r6
    171a:	7f 92       	push	r7
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	0f 2e       	mov	r0, r31
    1732:	f6 e6       	ldi	r31, 0x66	; 102
    1734:	ef 2e       	mov	r14, r31
    1736:	f2 e0       	ldi	r31, 0x02	; 2
    1738:	ff 2e       	mov	r15, r31
    173a:	f0 2d       	mov	r31, r0
    173c:	04 e8       	ldi	r16, 0x84	; 132
    173e:	13 e0       	ldi	r17, 0x03	; 3
    1740:	c0 e0       	ldi	r28, 0x00	; 0
    1742:	d0 e0       	ldi	r29, 0x00	; 0
    1744:	cc 24       	eor	r12, r12
    1746:	c3 94       	inc	r12
    1748:	d1 2c       	mov	r13, r1
    174a:	86 b1       	in	r24, 0x06	; 6
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0c 2e       	mov	r0, r28
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <_Z26Get_Back_LinetrackerY_Datav+0x42>
    1752:	95 95       	asr	r25
    1754:	87 95       	ror	r24
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <_Z26Get_Back_LinetrackerY_Datav+0x3e>
    175a:	80 ff       	sbrs	r24, 0
    175c:	10 c0       	rjmp	.+32     	; 0x177e <_Z26Get_Back_LinetrackerY_Datav+0x6a>
    175e:	f8 01       	movw	r30, r16
    1760:	d1 82       	std	Z+1, r13	; 0x01
    1762:	c0 82       	st	Z, r12
    1764:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <_ZL9linestate>
    1768:	c6 01       	movw	r24, r12
    176a:	0c 2e       	mov	r0, r28
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <_Z26Get_Back_LinetrackerY_Datav+0x5e>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <_Z26Get_Back_LinetrackerY_Datav+0x5a>
    1776:	82 2b       	or	r24, r18
    1778:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <_ZL9linestate>
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <_Z26Get_Back_LinetrackerY_Datav+0x70>
    177e:	f8 01       	movw	r30, r16
    1780:	11 82       	std	Z+1, r1	; 0x01
    1782:	10 82       	st	Z, r1
    1784:	f7 01       	movw	r30, r14
    1786:	81 91       	ld	r24, Z+
    1788:	91 91       	ld	r25, Z+
    178a:	7f 01       	movw	r14, r30
    178c:	f8 01       	movw	r30, r16
    178e:	a1 90       	ld	r10, Z+
    1790:	b1 90       	ld	r11, Z+
    1792:	8f 01       	movw	r16, r30
    1794:	8a 9d       	mul	r24, r10
    1796:	b0 01       	movw	r22, r0
    1798:	8b 9d       	mul	r24, r11
    179a:	70 0d       	add	r23, r0
    179c:	9a 9d       	mul	r25, r10
    179e:	70 0d       	add	r23, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	07 2e       	mov	r0, r23
    17a4:	00 0c       	add	r0, r0
    17a6:	88 0b       	sbc	r24, r24
    17a8:	99 0b       	sbc	r25, r25
    17aa:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    17ae:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <_ZL8totalSum>
    17b2:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <_ZL8totalSum+0x1>
    17b6:	40 91 9a 03 	lds	r20, 0x039A	; 0x80039a <_ZL8totalSum+0x2>
    17ba:	50 91 9b 03 	lds	r21, 0x039B	; 0x80039b <_ZL8totalSum+0x3>
    17be:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    17c2:	2b 01       	movw	r4, r22
    17c4:	3c 01       	movw	r6, r24
    17c6:	60 93 98 03 	sts	0x0398, r22	; 0x800398 <_ZL8totalSum>
    17ca:	70 93 99 03 	sts	0x0399, r23	; 0x800399 <_ZL8totalSum+0x1>
    17ce:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <_ZL8totalSum+0x2>
    17d2:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <_ZL8totalSum+0x3>
    17d6:	b5 01       	movw	r22, r10
    17d8:	bb 0c       	add	r11, r11
    17da:	88 0b       	sbc	r24, r24
    17dc:	99 0b       	sbc	r25, r25
    17de:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    17e2:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <_ZL9totalLine>
    17e6:	30 91 95 03 	lds	r19, 0x0395	; 0x800395 <_ZL9totalLine+0x1>
    17ea:	40 91 96 03 	lds	r20, 0x0396	; 0x800396 <_ZL9totalLine+0x2>
    17ee:	50 91 97 03 	lds	r21, 0x0397	; 0x800397 <_ZL9totalLine+0x3>
    17f2:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    17f6:	60 93 94 03 	sts	0x0394, r22	; 0x800394 <_ZL9totalLine>
    17fa:	70 93 95 03 	sts	0x0395, r23	; 0x800395 <_ZL9totalLine+0x1>
    17fe:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <_ZL9totalLine+0x2>
    1802:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <_ZL9totalLine+0x3>
    1806:	21 96       	adiw	r28, 0x01	; 1
    1808:	c8 30       	cpi	r28, 0x08	; 8
    180a:	d1 05       	cpc	r29, r1
    180c:	09 f0       	breq	.+2      	; 0x1810 <_Z26Get_Back_LinetrackerY_Datav+0xfc>
    180e:	9d cf       	rjmp	.-198    	; 0x174a <_Z26Get_Back_LinetrackerY_Datav+0x36>
    1810:	9b 01       	movw	r18, r22
    1812:	ac 01       	movw	r20, r24
    1814:	c3 01       	movw	r24, r6
    1816:	b2 01       	movw	r22, r4
    1818:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divsf3>
    181c:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__fixunssfsi>
    1820:	60 93 9c 03 	sts	0x039C, r22	; 0x80039c <_ZL16linetracker_data>
    1824:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZL8totalSum>
    1828:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <_ZL8totalSum+0x1>
    182c:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZL8totalSum+0x2>
    1830:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZL8totalSum+0x3>
    1834:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <_ZL9totalLine>
    1838:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <_ZL9totalLine+0x1>
    183c:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <_ZL9totalLine+0x2>
    1840:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZL9totalLine+0x3>
    1844:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_previous_data_of_back_linetracker>
    1848:	8a 30       	cpi	r24, 0x0A	; 10
    184a:	39 f4       	brne	.+14     	; 0x185a <_Z26Get_Back_LinetrackerY_Datav+0x146>
    184c:	61 11       	cpse	r22, r1
    184e:	10 c0       	rjmp	.+32     	; 0x1870 <_Z26Get_Back_LinetrackerY_Datav+0x15c>
    1850:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <_ZL16linetracker_data>
    1854:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    1858:	0d c0       	rjmp	.+26     	; 0x1874 <_Z26Get_Back_LinetrackerY_Datav+0x160>
    185a:	80 35       	cpi	r24, 0x50	; 80
    185c:	49 f4       	brne	.+18     	; 0x1870 <_Z26Get_Back_LinetrackerY_Datav+0x15c>
    185e:	61 11       	cpse	r22, r1
    1860:	07 c0       	rjmp	.+14     	; 0x1870 <_Z26Get_Back_LinetrackerY_Datav+0x15c>
    1862:	8a e5       	ldi	r24, 0x5A	; 90
    1864:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <_ZL16linetracker_data>
    1868:	80 e5       	ldi	r24, 0x50	; 80
    186a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <_Z26Get_Back_LinetrackerY_Datav+0x160>
    1870:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <_previous_data_of_back_linetracker>
    1874:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_ZL16linetracker_data>
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	ff 90       	pop	r15
    1882:	ef 90       	pop	r14
    1884:	df 90       	pop	r13
    1886:	cf 90       	pop	r12
    1888:	bf 90       	pop	r11
    188a:	af 90       	pop	r10
    188c:	7f 90       	pop	r7
    188e:	6f 90       	pop	r6
    1890:	5f 90       	pop	r5
    1892:	4f 90       	pop	r4
    1894:	08 95       	ret

00001896 <_Z32Calculate_Front_LinetrackerY_Pidv>:
    1896:	8f 92       	push	r8
    1898:	9f 92       	push	r9
    189a:	af 92       	push	r10
    189c:	bf 92       	push	r11
    189e:	cf 92       	push	r12
    18a0:	df 92       	push	r13
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <FrontLinetrackerY_+0x10>
    18b2:	88 23       	and	r24, r24
    18b4:	59 f0       	breq	.+22     	; 0x18cc <_Z32Calculate_Front_LinetrackerY_Pidv+0x36>
    18b6:	15 df       	rcall	.-470    	; 0x16e2 <_Z27Get_Front_LinetrackerY_Datav>
    18b8:	88 23       	and	r24, r24
    18ba:	41 f0       	breq	.+16     	; 0x18cc <_Z32Calculate_Front_LinetrackerY_Pidv+0x36>
    18bc:	12 df       	rcall	.-476    	; 0x16e2 <_Z27Get_Front_LinetrackerY_Datav>
    18be:	ee eb       	ldi	r30, 0xBE	; 190
    18c0:	f2 e0       	ldi	r31, 0x02	; 2
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	95 83       	std	Z+5, r25	; 0x05
    18c6:	84 83       	std	Z+4, r24	; 0x04
    18c8:	10 8a       	std	Z+16, r1	; 0x10
    18ca:	d1 c0       	rjmp	.+418    	; 0x1a6e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d8>
    18cc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <_Z32Calculate_Front_LinetrackerY_Pidv+0x40>
    18d4:	cc c0       	rjmp	.+408    	; 0x1a6e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d8>
    18d6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <linetrackerPID>
    18da:	88 23       	and	r24, r24
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <_Z32Calculate_Front_LinetrackerY_Pidv+0x4a>
    18de:	cb c0       	rjmp	.+406    	; 0x1a76 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1e0>
    18e0:	00 df       	rcall	.-512    	; 0x16e2 <_Z27Get_Front_LinetrackerY_Datav>
    18e2:	c8 2f       	mov	r28, r24
    18e4:	d0 e0       	ldi	r29, 0x00	; 0
    18e6:	d0 93 bf 02 	sts	0x02BF, r29	; 0x8002bf <FrontLinetrackerY_+0x1>
    18ea:	c0 93 be 02 	sts	0x02BE, r28	; 0x8002be <FrontLinetrackerY_>
    18ee:	20 97       	sbiw	r28, 0x00	; 0
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <_Z32Calculate_Front_LinetrackerY_Pidv+0x5e>
    18f2:	bb c0       	rjmp	.+374    	; 0x1a6a <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    18f4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <lineMeet>
    18f8:	88 23       	and	r24, r24
    18fa:	09 f4       	brne	.+2      	; 0x18fe <_Z32Calculate_Front_LinetrackerY_Pidv+0x68>
    18fc:	b6 c0       	rjmp	.+364    	; 0x1a6a <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    18fe:	ee eb       	ldi	r30, 0xBE	; 190
    1900:	f2 e0       	ldi	r31, 0x02	; 2
    1902:	66 85       	ldd	r22, Z+14	; 0x0e
    1904:	77 85       	ldd	r23, Z+15	; 0x0f
    1906:	6c 1b       	sub	r22, r28
    1908:	7d 0b       	sbc	r23, r29
    190a:	73 83       	std	Z+3, r23	; 0x03
    190c:	62 83       	std	Z+2, r22	; 0x02
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	31 f4       	brne	.+12     	; 0x1920 <_Z32Calculate_Front_LinetrackerY_Pidv+0x8a>
    1914:	12 86       	std	Z+10, r1	; 0x0a
    1916:	13 86       	std	Z+11, r1	; 0x0b
    1918:	14 86       	std	Z+12, r1	; 0x0c
    191a:	15 86       	std	Z+13, r1	; 0x0d
    191c:	d5 83       	std	Z+5, r29	; 0x05
    191e:	c4 83       	std	Z+4, r28	; 0x04
    1920:	07 2e       	mov	r0, r23
    1922:	00 0c       	add	r0, r0
    1924:	88 0b       	sbc	r24, r24
    1926:	99 0b       	sbc	r25, r25
    1928:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    192c:	4b 01       	movw	r8, r22
    192e:	5c 01       	movw	r10, r24
    1930:	0e eb       	ldi	r16, 0xBE	; 190
    1932:	12 e0       	ldi	r17, 0x02	; 2
    1934:	f8 01       	movw	r30, r16
    1936:	21 8d       	ldd	r18, Z+25	; 0x19
    1938:	32 8d       	ldd	r19, Z+26	; 0x1a
    193a:	43 8d       	ldd	r20, Z+27	; 0x1b
    193c:	54 8d       	ldd	r21, Z+28	; 0x1c
    193e:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1942:	f8 01       	movw	r30, r16
    1944:	22 85       	ldd	r18, Z+10	; 0x0a
    1946:	33 85       	ldd	r19, Z+11	; 0x0b
    1948:	44 85       	ldd	r20, Z+12	; 0x0c
    194a:	55 85       	ldd	r21, Z+13	; 0x0d
    194c:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    1950:	6b 01       	movw	r12, r22
    1952:	7c 01       	movw	r14, r24
    1954:	f8 01       	movw	r30, r16
    1956:	62 87       	std	Z+10, r22	; 0x0a
    1958:	73 87       	std	Z+11, r23	; 0x0b
    195a:	84 87       	std	Z+12, r24	; 0x0c
    195c:	95 87       	std	Z+13, r25	; 0x0d
    195e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1962:	9b 01       	movw	r18, r22
    1964:	77 23       	and	r23, r23
    1966:	24 f4       	brge	.+8      	; 0x1970 <_Z32Calculate_Front_LinetrackerY_Pidv+0xda>
    1968:	22 27       	eor	r18, r18
    196a:	33 27       	eor	r19, r19
    196c:	26 1b       	sub	r18, r22
    196e:	37 0b       	sbc	r19, r23
    1970:	26 30       	cpi	r18, 0x06	; 6
    1972:	31 05       	cpc	r19, r1
    1974:	5c f1       	brlt	.+86     	; 0x19cc <_Z32Calculate_Front_LinetrackerY_Pidv+0x136>
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	c7 01       	movw	r24, r14
    197e:	b6 01       	movw	r22, r12
    1980:	0e 94 bb 20 	call	0x4176	; 0x4176 <__gesf2>
    1984:	18 16       	cp	r1, r24
    1986:	6c f4       	brge	.+26     	; 0x19a2 <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a0 ea       	ldi	r26, 0xA0	; 160
    198e:	b0 e4       	ldi	r27, 0x40	; 64
    1990:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <FrontLinetrackerY_+0xa>
    1994:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <FrontLinetrackerY_+0xb>
    1998:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <FrontLinetrackerY_+0xc>
    199c:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <FrontLinetrackerY_+0xd>
    19a0:	15 c0       	rjmp	.+42     	; 0x19cc <_Z32Calculate_Front_LinetrackerY_Pidv+0x136>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	c7 01       	movw	r24, r14
    19aa:	b6 01       	movw	r22, r12
    19ac:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__cmpsf2>
    19b0:	88 23       	and	r24, r24
    19b2:	64 f4       	brge	.+24     	; 0x19cc <_Z32Calculate_Front_LinetrackerY_Pidv+0x136>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 ea       	ldi	r26, 0xA0	; 160
    19ba:	b0 ec       	ldi	r27, 0xC0	; 192
    19bc:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <FrontLinetrackerY_+0xa>
    19c0:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <FrontLinetrackerY_+0xb>
    19c4:	a0 93 ca 02 	sts	0x02CA, r26	; 0x8002ca <FrontLinetrackerY_+0xc>
    19c8:	b0 93 cb 02 	sts	0x02CB, r27	; 0x8002cb <FrontLinetrackerY_+0xd>
    19cc:	0e eb       	ldi	r16, 0xBE	; 190
    19ce:	12 e0       	ldi	r17, 0x02	; 2
    19d0:	f8 01       	movw	r30, r16
    19d2:	25 89       	ldd	r18, Z+21	; 0x15
    19d4:	36 89       	ldd	r19, Z+22	; 0x16
    19d6:	47 89       	ldd	r20, Z+23	; 0x17
    19d8:	50 8d       	ldd	r21, Z+24	; 0x18
    19da:	c5 01       	movw	r24, r10
    19dc:	b4 01       	movw	r22, r8
    19de:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    19e2:	f8 01       	movw	r30, r16
    19e4:	22 85       	ldd	r18, Z+10	; 0x0a
    19e6:	33 85       	ldd	r19, Z+11	; 0x0b
    19e8:	44 85       	ldd	r20, Z+12	; 0x0c
    19ea:	55 85       	ldd	r21, Z+13	; 0x0d
    19ec:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    19f0:	6b 01       	movw	r12, r22
    19f2:	7c 01       	movw	r14, r24
    19f4:	f8 01       	movw	r30, r16
    19f6:	84 81       	ldd	r24, Z+4	; 0x04
    19f8:	95 81       	ldd	r25, Z+5	; 0x05
    19fa:	be 01       	movw	r22, r28
    19fc:	68 1b       	sub	r22, r24
    19fe:	79 0b       	sbc	r23, r25
    1a00:	07 2e       	mov	r0, r23
    1a02:	00 0c       	add	r0, r0
    1a04:	88 0b       	sbc	r24, r24
    1a06:	99 0b       	sbc	r25, r25
    1a08:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	25 8d       	ldd	r18, Z+29	; 0x1d
    1a10:	36 8d       	ldd	r19, Z+30	; 0x1e
    1a12:	47 8d       	ldd	r20, Z+31	; 0x1f
    1a14:	50 a1       	ldd	r21, Z+32	; 0x20
    1a16:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	c7 01       	movw	r24, r14
    1a20:	b6 01       	movw	r22, r12
    1a22:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__subsf3>
    1a26:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	77 83       	std	Z+7, r23	; 0x07
    1a30:	66 83       	std	Z+6, r22	; 0x06
    1a32:	d5 83       	std	Z+5, r29	; 0x05
    1a34:	c4 83       	std	Z+4, r28	; 0x04
    1a36:	ab 01       	movw	r20, r22
    1a38:	77 23       	and	r23, r23
    1a3a:	24 f4       	brge	.+8      	; 0x1a44 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1ae>
    1a3c:	44 27       	eor	r20, r20
    1a3e:	55 27       	eor	r21, r21
    1a40:	46 1b       	sub	r20, r22
    1a42:	57 0b       	sbc	r21, r23
    1a44:	41 35       	cpi	r20, 0x51	; 81
    1a46:	51 05       	cpc	r21, r1
    1a48:	84 f0       	brlt	.+32     	; 0x1a6a <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    1a4a:	12 16       	cp	r1, r18
    1a4c:	13 06       	cpc	r1, r19
    1a4e:	3c f4       	brge	.+14     	; 0x1a5e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c8>
    1a50:	80 e5       	ldi	r24, 0x50	; 80
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <FrontLinetrackerY_+0x7>
    1a58:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <FrontLinetrackerY_+0x6>
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    1a5e:	80 eb       	ldi	r24, 0xB0	; 176
    1a60:	9f ef       	ldi	r25, 0xFF	; 255
    1a62:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <FrontLinetrackerY_+0x7>
    1a66:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <FrontLinetrackerY_+0x6>
    1a6a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <PidUpdateFlagLinetrackerFront>
    1a6e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <linetrackerPID>
    1a72:	81 11       	cpse	r24, r1
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1e8>
    1a76:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <FrontLinetrackerY_+0x7>
    1a7a:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <FrontLinetrackerY_+0x6>
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	bf 90       	pop	r11
    1a90:	af 90       	pop	r10
    1a92:	9f 90       	pop	r9
    1a94:	8f 90       	pop	r8
    1a96:	08 95       	ret

00001a98 <_Z31Calculate_Back_LinetrackerY_Pidv>:
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <BackLinetrackerY_+0x10>
    1ab4:	88 23       	and	r24, r24
    1ab6:	51 f0       	breq	.+20     	; 0x1acc <_Z31Calculate_Back_LinetrackerY_Pidv+0x34>
    1ab8:	2d de       	rcall	.-934    	; 0x1714 <_Z26Get_Back_LinetrackerY_Datav>
    1aba:	88 23       	and	r24, r24
    1abc:	39 f0       	breq	.+14     	; 0x1acc <_Z31Calculate_Back_LinetrackerY_Pidv+0x34>
    1abe:	2a de       	rcall	.-940    	; 0x1714 <_Z26Get_Back_LinetrackerY_Datav>
    1ac0:	ed e9       	ldi	r30, 0x9D	; 157
    1ac2:	f2 e0       	ldi	r31, 0x02	; 2
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	95 83       	std	Z+5, r25	; 0x05
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	10 8a       	std	Z+16, r1	; 0x10
    1acc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1ad0:	88 23       	and	r24, r24
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <_Z31Calculate_Back_LinetrackerY_Pidv+0x3e>
    1ad4:	ce c0       	rjmp	.+412    	; 0x1c72 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1da>
    1ad6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <linetrackerPID>
    1ada:	88 23       	and	r24, r24
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <_Z31Calculate_Back_LinetrackerY_Pidv+0x48>
    1ade:	cd c0       	rjmp	.+410    	; 0x1c7a <_Z31Calculate_Back_LinetrackerY_Pidv+0x1e2>
    1ae0:	19 de       	rcall	.-974    	; 0x1714 <_Z26Get_Back_LinetrackerY_Datav>
    1ae2:	c8 2f       	mov	r28, r24
    1ae4:	d0 e0       	ldi	r29, 0x00	; 0
    1ae6:	d0 93 9e 02 	sts	0x029E, r29	; 0x80029e <BackLinetrackerY_+0x1>
    1aea:	c0 93 9d 02 	sts	0x029D, r28	; 0x80029d <BackLinetrackerY_>
    1aee:	20 97       	sbiw	r28, 0x00	; 0
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <_Z31Calculate_Back_LinetrackerY_Pidv+0x5c>
    1af2:	bd c0       	rjmp	.+378    	; 0x1c6e <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d6>
    1af4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <lineMeet>
    1af8:	88 23       	and	r24, r24
    1afa:	09 f4       	brne	.+2      	; 0x1afe <_Z31Calculate_Back_LinetrackerY_Pidv+0x66>
    1afc:	b8 c0       	rjmp	.+368    	; 0x1c6e <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d6>
    1afe:	ed e9       	ldi	r30, 0x9D	; 157
    1b00:	f2 e0       	ldi	r31, 0x02	; 2
    1b02:	66 85       	ldd	r22, Z+14	; 0x0e
    1b04:	77 85       	ldd	r23, Z+15	; 0x0f
    1b06:	6c 1b       	sub	r22, r28
    1b08:	7d 0b       	sbc	r23, r29
    1b0a:	73 83       	std	Z+3, r23	; 0x03
    1b0c:	62 83       	std	Z+2, r22	; 0x02
    1b0e:	61 15       	cp	r22, r1
    1b10:	71 05       	cpc	r23, r1
    1b12:	41 f4       	brne	.+16     	; 0x1b24 <_Z31Calculate_Back_LinetrackerY_Pidv+0x8c>
    1b14:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <BackLinetrackerY_+0xa>
    1b18:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <BackLinetrackerY_+0xb>
    1b1c:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <BackLinetrackerY_+0xc>
    1b20:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <BackLinetrackerY_+0xd>
    1b24:	07 2e       	mov	r0, r23
    1b26:	00 0c       	add	r0, r0
    1b28:	88 0b       	sbc	r24, r24
    1b2a:	99 0b       	sbc	r25, r25
    1b2c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1b30:	4b 01       	movw	r8, r22
    1b32:	5c 01       	movw	r10, r24
    1b34:	0d e9       	ldi	r16, 0x9D	; 157
    1b36:	12 e0       	ldi	r17, 0x02	; 2
    1b38:	f8 01       	movw	r30, r16
    1b3a:	21 8d       	ldd	r18, Z+25	; 0x19
    1b3c:	32 8d       	ldd	r19, Z+26	; 0x1a
    1b3e:	43 8d       	ldd	r20, Z+27	; 0x1b
    1b40:	54 8d       	ldd	r21, Z+28	; 0x1c
    1b42:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1b46:	f8 01       	movw	r30, r16
    1b48:	22 85       	ldd	r18, Z+10	; 0x0a
    1b4a:	33 85       	ldd	r19, Z+11	; 0x0b
    1b4c:	44 85       	ldd	r20, Z+12	; 0x0c
    1b4e:	55 85       	ldd	r21, Z+13	; 0x0d
    1b50:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    1b54:	6b 01       	movw	r12, r22
    1b56:	7c 01       	movw	r14, r24
    1b58:	f8 01       	movw	r30, r16
    1b5a:	62 87       	std	Z+10, r22	; 0x0a
    1b5c:	73 87       	std	Z+11, r23	; 0x0b
    1b5e:	84 87       	std	Z+12, r24	; 0x0c
    1b60:	95 87       	std	Z+13, r25	; 0x0d
    1b62:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1b66:	9b 01       	movw	r18, r22
    1b68:	77 23       	and	r23, r23
    1b6a:	24 f4       	brge	.+8      	; 0x1b74 <_Z31Calculate_Back_LinetrackerY_Pidv+0xdc>
    1b6c:	22 27       	eor	r18, r18
    1b6e:	33 27       	eor	r19, r19
    1b70:	26 1b       	sub	r18, r22
    1b72:	37 0b       	sbc	r19, r23
    1b74:	26 30       	cpi	r18, 0x06	; 6
    1b76:	31 05       	cpc	r19, r1
    1b78:	5c f1       	brlt	.+86     	; 0x1bd0 <_Z31Calculate_Back_LinetrackerY_Pidv+0x138>
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	a9 01       	movw	r20, r18
    1b80:	c7 01       	movw	r24, r14
    1b82:	b6 01       	movw	r22, r12
    1b84:	0e 94 bb 20 	call	0x4176	; 0x4176 <__gesf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	6c f4       	brge	.+26     	; 0x1ba6 <_Z31Calculate_Back_LinetrackerY_Pidv+0x10e>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 ea       	ldi	r26, 0xA0	; 160
    1b92:	b0 e4       	ldi	r27, 0x40	; 64
    1b94:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <BackLinetrackerY_+0xa>
    1b98:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <BackLinetrackerY_+0xb>
    1b9c:	a0 93 a9 02 	sts	0x02A9, r26	; 0x8002a9 <BackLinetrackerY_+0xc>
    1ba0:	b0 93 aa 02 	sts	0x02AA, r27	; 0x8002aa <BackLinetrackerY_+0xd>
    1ba4:	15 c0       	rjmp	.+42     	; 0x1bd0 <_Z31Calculate_Back_LinetrackerY_Pidv+0x138>
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	a9 01       	movw	r20, r18
    1bac:	c7 01       	movw	r24, r14
    1bae:	b6 01       	movw	r22, r12
    1bb0:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__cmpsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	64 f4       	brge	.+24     	; 0x1bd0 <_Z31Calculate_Back_LinetrackerY_Pidv+0x138>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a0 ea       	ldi	r26, 0xA0	; 160
    1bbe:	b0 ec       	ldi	r27, 0xC0	; 192
    1bc0:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <BackLinetrackerY_+0xa>
    1bc4:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <BackLinetrackerY_+0xb>
    1bc8:	a0 93 a9 02 	sts	0x02A9, r26	; 0x8002a9 <BackLinetrackerY_+0xc>
    1bcc:	b0 93 aa 02 	sts	0x02AA, r27	; 0x8002aa <BackLinetrackerY_+0xd>
    1bd0:	0d e9       	ldi	r16, 0x9D	; 157
    1bd2:	12 e0       	ldi	r17, 0x02	; 2
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	25 89       	ldd	r18, Z+21	; 0x15
    1bd8:	36 89       	ldd	r19, Z+22	; 0x16
    1bda:	47 89       	ldd	r20, Z+23	; 0x17
    1bdc:	50 8d       	ldd	r21, Z+24	; 0x18
    1bde:	c5 01       	movw	r24, r10
    1be0:	b4 01       	movw	r22, r8
    1be2:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1be6:	f8 01       	movw	r30, r16
    1be8:	22 85       	ldd	r18, Z+10	; 0x0a
    1bea:	33 85       	ldd	r19, Z+11	; 0x0b
    1bec:	44 85       	ldd	r20, Z+12	; 0x0c
    1bee:	55 85       	ldd	r21, Z+13	; 0x0d
    1bf0:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    1bf4:	6b 01       	movw	r12, r22
    1bf6:	7c 01       	movw	r14, r24
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	84 81       	ldd	r24, Z+4	; 0x04
    1bfc:	95 81       	ldd	r25, Z+5	; 0x05
    1bfe:	be 01       	movw	r22, r28
    1c00:	68 1b       	sub	r22, r24
    1c02:	79 0b       	sbc	r23, r25
    1c04:	07 2e       	mov	r0, r23
    1c06:	00 0c       	add	r0, r0
    1c08:	88 0b       	sbc	r24, r24
    1c0a:	99 0b       	sbc	r25, r25
    1c0c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1c10:	f8 01       	movw	r30, r16
    1c12:	25 8d       	ldd	r18, Z+29	; 0x1d
    1c14:	36 8d       	ldd	r19, Z+30	; 0x1e
    1c16:	47 8d       	ldd	r20, Z+31	; 0x1f
    1c18:	50 a1       	ldd	r21, Z+32	; 0x20
    1c1a:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1c1e:	9b 01       	movw	r18, r22
    1c20:	ac 01       	movw	r20, r24
    1c22:	c7 01       	movw	r24, r14
    1c24:	b6 01       	movw	r22, r12
    1c26:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__subsf3>
    1c2a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1c2e:	9b 01       	movw	r18, r22
    1c30:	f8 01       	movw	r30, r16
    1c32:	77 83       	std	Z+7, r23	; 0x07
    1c34:	66 83       	std	Z+6, r22	; 0x06
    1c36:	d5 83       	std	Z+5, r29	; 0x05
    1c38:	c4 83       	std	Z+4, r28	; 0x04
    1c3a:	ab 01       	movw	r20, r22
    1c3c:	77 23       	and	r23, r23
    1c3e:	24 f4       	brge	.+8      	; 0x1c48 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1b0>
    1c40:	44 27       	eor	r20, r20
    1c42:	55 27       	eor	r21, r21
    1c44:	46 1b       	sub	r20, r22
    1c46:	57 0b       	sbc	r21, r23
    1c48:	41 35       	cpi	r20, 0x51	; 81
    1c4a:	51 05       	cpc	r21, r1
    1c4c:	84 f0       	brlt	.+32     	; 0x1c6e <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d6>
    1c4e:	12 16       	cp	r1, r18
    1c50:	13 06       	cpc	r1, r19
    1c52:	3c f4       	brge	.+14     	; 0x1c62 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1ca>
    1c54:	80 e5       	ldi	r24, 0x50	; 80
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <BackLinetrackerY_+0x7>
    1c5c:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <BackLinetrackerY_+0x6>
    1c60:	06 c0       	rjmp	.+12     	; 0x1c6e <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d6>
    1c62:	80 eb       	ldi	r24, 0xB0	; 176
    1c64:	9f ef       	ldi	r25, 0xFF	; 255
    1c66:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <BackLinetrackerY_+0x7>
    1c6a:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <BackLinetrackerY_+0x6>
    1c6e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1c72:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <linetrackerPID>
    1c76:	81 11       	cpse	r24, r1
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1ea>
    1c7a:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <BackLinetrackerY_+0x7>
    1c7e:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <BackLinetrackerY_+0x6>
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	df 90       	pop	r13
    1c90:	cf 90       	pop	r12
    1c92:	bf 90       	pop	r11
    1c94:	af 90       	pop	r10
    1c96:	9f 90       	pop	r9
    1c98:	8f 90       	pop	r8
    1c9a:	08 95       	ret

00001c9c <_Z18Calculate_Velocityv>:
    1c9c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_axis>
    1ca0:	81 11       	cpse	r24, r1
    1ca2:	08 c0       	rjmp	.+16     	; 0x1cb4 <_Z18Calculate_Velocityv+0x18>
    1ca4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	71 f0       	breq	.+28     	; 0x1cc8 <_Z18Calculate_Velocityv+0x2c>
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	71 f4       	brne	.+28     	; 0x1ccc <_Z18Calculate_Velocityv+0x30>
    1cb0:	a1 e0       	ldi	r26, 0x01	; 1
    1cb2:	13 c0       	rjmp	.+38     	; 0x1cda <_Z18Calculate_Velocityv+0x3e>
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	61 f4       	brne	.+24     	; 0x1cd0 <_Z18Calculate_Velocityv+0x34>
    1cb8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	51 f0       	breq	.+20     	; 0x1cd4 <_Z18Calculate_Velocityv+0x38>
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	51 f4       	brne	.+20     	; 0x1cd8 <_Z18Calculate_Velocityv+0x3c>
    1cc4:	a3 e0       	ldi	r26, 0x03	; 3
    1cc6:	09 c0       	rjmp	.+18     	; 0x1cda <_Z18Calculate_Velocityv+0x3e>
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	07 c0       	rjmp	.+14     	; 0x1cda <_Z18Calculate_Velocityv+0x3e>
    1ccc:	a4 e0       	ldi	r26, 0x04	; 4
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <_Z18Calculate_Velocityv+0x3e>
    1cd0:	a4 e0       	ldi	r26, 0x04	; 4
    1cd2:	03 c0       	rjmp	.+6      	; 0x1cda <_Z18Calculate_Velocityv+0x3e>
    1cd4:	a2 e0       	ldi	r26, 0x02	; 2
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <_Z18Calculate_Velocityv+0x3e>
    1cd8:	a4 e0       	ldi	r26, 0x04	; 4
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	aa 0f       	add	r26, r26
    1cde:	bb 1f       	adc	r27, r27
    1ce0:	aa 0f       	add	r26, r26
    1ce2:	bb 1f       	adc	r27, r27
    1ce4:	a3 5f       	subi	r26, 0xF3	; 243
    1ce6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ce8:	ee ea       	ldi	r30, 0xAE	; 174
    1cea:	f3 e0       	ldi	r31, 0x03	; 3
    1cec:	66 eb       	ldi	r22, 0xB6	; 182
    1cee:	73 e0       	ldi	r23, 0x03	; 3
    1cf0:	4d 91       	ld	r20, X+
    1cf2:	20 81       	ld	r18, Z
    1cf4:	31 81       	ldd	r19, Z+1	; 0x01
    1cf6:	42 03       	mulsu	r20, r18
    1cf8:	c0 01       	movw	r24, r0
    1cfa:	43 9f       	mul	r20, r19
    1cfc:	90 0d       	add	r25, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	81 93       	st	Z+, r24
    1d02:	91 93       	st	Z+, r25
    1d04:	e6 17       	cp	r30, r22
    1d06:	f7 07       	cpc	r31, r23
    1d08:	99 f7       	brne	.-26     	; 0x1cf0 <_Z18Calculate_Velocityv+0x54>
    1d0a:	08 95       	ret

00001d0c <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>:
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	ec 01       	movw	r28, r24
    1d12:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <inverseKinematicsTrue>
    1d16:	bf dd       	rcall	.-1154   	; 0x1896 <_Z32Calculate_Front_LinetrackerY_Pidv>
    1d18:	bf de       	rcall	.-642    	; 0x1a98 <_Z31Calculate_Back_LinetrackerY_Pidv>
    1d1a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	f1 f4       	brne	.+60     	; 0x1d5e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x52>
    1d22:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <FrontLinetrackerY_+0x6>
    1d26:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <FrontLinetrackerY_+0x7>
    1d2a:	ee ea       	ldi	r30, 0xAE	; 174
    1d2c:	f3 e0       	ldi	r31, 0x03	; 3
    1d2e:	9c 01       	movw	r18, r24
    1d30:	2c 0f       	add	r18, r28
    1d32:	3d 1f       	adc	r19, r29
    1d34:	31 83       	std	Z+1, r19	; 0x01
    1d36:	20 83       	st	Z, r18
    1d38:	9e 01       	movw	r18, r28
    1d3a:	28 1b       	sub	r18, r24
    1d3c:	39 0b       	sbc	r19, r25
    1d3e:	33 83       	std	Z+3, r19	; 0x03
    1d40:	22 83       	std	Z+2, r18	; 0x02
    1d42:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <BackLinetrackerY_+0x6>
    1d46:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <BackLinetrackerY_+0x7>
    1d4a:	9e 01       	movw	r18, r28
    1d4c:	28 0f       	add	r18, r24
    1d4e:	39 1f       	adc	r19, r25
    1d50:	35 83       	std	Z+5, r19	; 0x05
    1d52:	24 83       	std	Z+4, r18	; 0x04
    1d54:	c8 1b       	sub	r28, r24
    1d56:	d9 0b       	sbc	r29, r25
    1d58:	d7 83       	std	Z+7, r29	; 0x07
    1d5a:	c6 83       	std	Z+6, r28	; 0x06
    1d5c:	1c c0       	rjmp	.+56     	; 0x1d96 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x8a>
    1d5e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <FrontLinetrackerY_+0x6>
    1d62:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <FrontLinetrackerY_+0x7>
    1d66:	ee ea       	ldi	r30, 0xAE	; 174
    1d68:	f3 e0       	ldi	r31, 0x03	; 3
    1d6a:	9e 01       	movw	r18, r28
    1d6c:	28 1b       	sub	r18, r24
    1d6e:	39 0b       	sbc	r19, r25
    1d70:	31 83       	std	Z+1, r19	; 0x01
    1d72:	20 83       	st	Z, r18
    1d74:	8c 0f       	add	r24, r28
    1d76:	9d 1f       	adc	r25, r29
    1d78:	93 83       	std	Z+3, r25	; 0x03
    1d7a:	82 83       	std	Z+2, r24	; 0x02
    1d7c:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <BackLinetrackerY_+0x6>
    1d80:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <BackLinetrackerY_+0x7>
    1d84:	9e 01       	movw	r18, r28
    1d86:	28 1b       	sub	r18, r24
    1d88:	39 0b       	sbc	r19, r25
    1d8a:	35 83       	std	Z+5, r19	; 0x05
    1d8c:	24 83       	std	Z+4, r18	; 0x04
    1d8e:	c8 0f       	add	r28, r24
    1d90:	d9 1f       	adc	r29, r25
    1d92:	d7 83       	std	Z+7, r29	; 0x07
    1d94:	c6 83       	std	Z+6, r28	; 0x06
    1d96:	82 df       	rcall	.-252    	; 0x1c9c <_Z18Calculate_Velocityv>
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	08 95       	ret

00001d9e <_Z15movYForwardSlowj>:
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	ee eb       	ldi	r30, 0xBE	; 190
    1da4:	f2 e0       	ldi	r31, 0x02	; 2
    1da6:	0a e9       	ldi	r16, 0x9A	; 154
    1da8:	19 e9       	ldi	r17, 0x99	; 153
    1daa:	29 e1       	ldi	r18, 0x19	; 25
    1dac:	3f e3       	ldi	r19, 0x3F	; 63
    1dae:	05 8b       	std	Z+21, r16	; 0x15
    1db0:	16 8b       	std	Z+22, r17	; 0x16
    1db2:	27 8b       	std	Z+23, r18	; 0x17
    1db4:	30 8f       	std	Z+24, r19	; 0x18
    1db6:	11 8e       	std	Z+25, r1	; 0x19
    1db8:	12 8e       	std	Z+26, r1	; 0x1a
    1dba:	13 8e       	std	Z+27, r1	; 0x1b
    1dbc:	14 8e       	std	Z+28, r1	; 0x1c
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	60 e8       	ldi	r22, 0x80	; 128
    1dc4:	71 e4       	ldi	r23, 0x41	; 65
    1dc6:	45 8f       	std	Z+29, r20	; 0x1d
    1dc8:	56 8f       	std	Z+30, r21	; 0x1e
    1dca:	67 8f       	std	Z+31, r22	; 0x1f
    1dcc:	70 a3       	std	Z+32, r23	; 0x20
    1dce:	ed e9       	ldi	r30, 0x9D	; 157
    1dd0:	f2 e0       	ldi	r31, 0x02	; 2
    1dd2:	05 8b       	std	Z+21, r16	; 0x15
    1dd4:	16 8b       	std	Z+22, r17	; 0x16
    1dd6:	27 8b       	std	Z+23, r18	; 0x17
    1dd8:	30 8f       	std	Z+24, r19	; 0x18
    1dda:	11 8e       	std	Z+25, r1	; 0x19
    1ddc:	12 8e       	std	Z+26, r1	; 0x1a
    1dde:	13 8e       	std	Z+27, r1	; 0x1b
    1de0:	14 8e       	std	Z+28, r1	; 0x1c
    1de2:	45 8f       	std	Z+29, r20	; 0x1d
    1de4:	56 8f       	std	Z+30, r21	; 0x1e
    1de6:	67 8f       	std	Z+31, r22	; 0x1f
    1de8:	70 a3       	std	Z+32, r23	; 0x20
    1dea:	21 e0       	ldi	r18, 0x01	; 1
    1dec:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <_axis>
    1df0:	22 e0       	ldi	r18, 0x02	; 2
    1df2:	20 93 0b 02 	sts	0x020B, r18	; 0x80020b <_direction>
    1df6:	8a df       	rcall	.-236    	; 0x1d0c <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	08 95       	ret

00001dfe <_Z10Move_Yaxisiij>:
    1dfe:	2f 92       	push	r2
    1e00:	3f 92       	push	r3
    1e02:	4f 92       	push	r4
    1e04:	5f 92       	push	r5
    1e06:	6f 92       	push	r6
    1e08:	7f 92       	push	r7
    1e0a:	8f 92       	push	r8
    1e0c:	9f 92       	push	r9
    1e0e:	af 92       	push	r10
    1e10:	bf 92       	push	r11
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	1c 01       	movw	r2, r24
    1e24:	8b 01       	movw	r16, r22
    1e26:	7a 01       	movw	r14, r20
    1e28:	ee eb       	ldi	r30, 0xBE	; 190
    1e2a:	f2 e0       	ldi	r31, 0x02	; 2
    1e2c:	8a e9       	ldi	r24, 0x9A	; 154
    1e2e:	99 e9       	ldi	r25, 0x99	; 153
    1e30:	a9 e9       	ldi	r26, 0x99	; 153
    1e32:	bf e3       	ldi	r27, 0x3F	; 63
    1e34:	85 8b       	std	Z+21, r24	; 0x15
    1e36:	96 8b       	std	Z+22, r25	; 0x16
    1e38:	a7 8b       	std	Z+23, r26	; 0x17
    1e3a:	b0 8f       	std	Z+24, r27	; 0x18
    1e3c:	11 8e       	std	Z+25, r1	; 0x19
    1e3e:	12 8e       	std	Z+26, r1	; 0x1a
    1e40:	13 8e       	std	Z+27, r1	; 0x1b
    1e42:	14 8e       	std	Z+28, r1	; 0x1c
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a0 e8       	ldi	r26, 0x80	; 128
    1e4a:	b1 e4       	ldi	r27, 0x41	; 65
    1e4c:	85 8f       	std	Z+29, r24	; 0x1d
    1e4e:	96 8f       	std	Z+30, r25	; 0x1e
    1e50:	a7 8f       	std	Z+31, r26	; 0x1f
    1e52:	b0 a3       	std	Z+32, r27	; 0x20
    1e54:	86 e7       	ldi	r24, 0x76	; 118
    1e56:	92 e0       	ldi	r25, 0x02	; 2
    1e58:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1e5c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1e60:	9b 01       	movw	r18, r22
    1e62:	77 23       	and	r23, r23
    1e64:	24 f4       	brge	.+8      	; 0x1e6e <_Z10Move_Yaxisiij+0x70>
    1e66:	22 27       	eor	r18, r18
    1e68:	33 27       	eor	r19, r19
    1e6a:	26 1b       	sub	r18, r22
    1e6c:	37 0b       	sbc	r19, r23
    1e6e:	e9 01       	movw	r28, r18
    1e70:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <distanceY+0x1>
    1e74:	20 93 a4 03 	sts	0x03A4, r18	; 0x8003a4 <distanceY>
    1e78:	30 92 ee 02 	sts	0x02EE, r3	; 0x8002ee <driveY+0xf>
    1e7c:	20 92 ed 02 	sts	0x02ED, r2	; 0x8002ed <driveY+0xe>
    1e80:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PidUpdateFlagDriveY>
    1e84:	88 23       	and	r24, r24
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <_Z10Move_Yaxisiij+0x8c>
    1e88:	0a c1       	rjmp	.+532    	; 0x209e <_Z10Move_Yaxisiij+0x2a0>
    1e8a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PidUpdateFlagDriveY>
    1e8e:	28 35       	cpi	r18, 0x58	; 88
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	38 07       	cpc	r19, r24
    1e94:	0c f4       	brge	.+2      	; 0x1e98 <_Z10Move_Yaxisiij+0x9a>
    1e96:	ad c0       	rjmp	.+346    	; 0x1ff2 <_Z10Move_Yaxisiij+0x1f4>
    1e98:	0f 2e       	mov	r0, r31
    1e9a:	ff ed       	ldi	r31, 0xDF	; 223
    1e9c:	cf 2e       	mov	r12, r31
    1e9e:	f2 e0       	ldi	r31, 0x02	; 2
    1ea0:	df 2e       	mov	r13, r31
    1ea2:	f0 2d       	mov	r31, r0
    1ea4:	f6 01       	movw	r30, r12
    1ea6:	31 83       	std	Z+1, r19	; 0x01
    1ea8:	20 83       	st	Z, r18
    1eaa:	22 1a       	sub	r2, r18
    1eac:	33 0a       	sbc	r3, r19
    1eae:	33 82       	std	Z+3, r3	; 0x03
    1eb0:	22 82       	std	Z+2, r2	; 0x02
    1eb2:	b1 01       	movw	r22, r2
    1eb4:	03 2c       	mov	r0, r3
    1eb6:	00 0c       	add	r0, r0
    1eb8:	88 0b       	sbc	r24, r24
    1eba:	99 0b       	sbc	r25, r25
    1ebc:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1ec0:	2b 01       	movw	r4, r22
    1ec2:	3c 01       	movw	r6, r24
    1ec4:	f6 01       	movw	r30, r12
    1ec6:	21 8d       	ldd	r18, Z+25	; 0x19
    1ec8:	32 8d       	ldd	r19, Z+26	; 0x1a
    1eca:	43 8d       	ldd	r20, Z+27	; 0x1b
    1ecc:	54 8d       	ldd	r21, Z+28	; 0x1c
    1ece:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1ed2:	f6 01       	movw	r30, r12
    1ed4:	22 85       	ldd	r18, Z+10	; 0x0a
    1ed6:	33 85       	ldd	r19, Z+11	; 0x0b
    1ed8:	44 85       	ldd	r20, Z+12	; 0x0c
    1eda:	55 85       	ldd	r21, Z+13	; 0x0d
    1edc:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    1ee0:	4b 01       	movw	r8, r22
    1ee2:	5c 01       	movw	r10, r24
    1ee4:	f6 01       	movw	r30, r12
    1ee6:	62 87       	std	Z+10, r22	; 0x0a
    1ee8:	73 87       	std	Z+11, r23	; 0x0b
    1eea:	84 87       	std	Z+12, r24	; 0x0c
    1eec:	95 87       	std	Z+13, r25	; 0x0d
    1eee:	80 89       	ldd	r24, Z+16	; 0x10
    1ef0:	88 23       	and	r24, r24
    1ef2:	19 f0       	breq	.+6      	; 0x1efa <_Z10Move_Yaxisiij+0xfc>
    1ef4:	d5 83       	std	Z+5, r29	; 0x05
    1ef6:	c4 83       	std	Z+4, r28	; 0x04
    1ef8:	10 8a       	std	Z+16, r1	; 0x10
    1efa:	c5 01       	movw	r24, r10
    1efc:	b4 01       	movw	r22, r8
    1efe:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1f02:	9b 01       	movw	r18, r22
    1f04:	77 23       	and	r23, r23
    1f06:	24 f4       	brge	.+8      	; 0x1f10 <_Z10Move_Yaxisiij+0x112>
    1f08:	22 27       	eor	r18, r18
    1f0a:	33 27       	eor	r19, r19
    1f0c:	26 1b       	sub	r18, r22
    1f0e:	37 0b       	sbc	r19, r23
    1f10:	2b 30       	cpi	r18, 0x0B	; 11
    1f12:	31 05       	cpc	r19, r1
    1f14:	5c f1       	brlt	.+86     	; 0x1f6c <_Z10Move_Yaxisiij+0x16e>
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	c5 01       	movw	r24, r10
    1f1e:	b4 01       	movw	r22, r8
    1f20:	0e 94 bb 20 	call	0x4176	; 0x4176 <__gesf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	6c f4       	brge	.+26     	; 0x1f42 <_Z10Move_Yaxisiij+0x144>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e2       	ldi	r26, 0x20	; 32
    1f2e:	b1 e4       	ldi	r27, 0x41	; 65
    1f30:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <driveY+0xa>
    1f34:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <driveY+0xb>
    1f38:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <driveY+0xc>
    1f3c:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <driveY+0xd>
    1f40:	15 c0       	rjmp	.+42     	; 0x1f6c <_Z10Move_Yaxisiij+0x16e>
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	a9 01       	movw	r20, r18
    1f48:	c5 01       	movw	r24, r10
    1f4a:	b4 01       	movw	r22, r8
    1f4c:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__cmpsf2>
    1f50:	88 23       	and	r24, r24
    1f52:	64 f4       	brge	.+24     	; 0x1f6c <_Z10Move_Yaxisiij+0x16e>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e2       	ldi	r26, 0x20	; 32
    1f5a:	b1 ec       	ldi	r27, 0xC1	; 193
    1f5c:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <driveY+0xa>
    1f60:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <driveY+0xb>
    1f64:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <driveY+0xc>
    1f68:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <driveY+0xd>
    1f6c:	12 14       	cp	r1, r2
    1f6e:	13 04       	cpc	r1, r3
    1f70:	bc f5       	brge	.+110    	; 0x1fe0 <_Z10Move_Yaxisiij+0x1e2>
    1f72:	0f 2e       	mov	r0, r31
    1f74:	ff ed       	ldi	r31, 0xDF	; 223
    1f76:	cf 2e       	mov	r12, r31
    1f78:	f2 e0       	ldi	r31, 0x02	; 2
    1f7a:	df 2e       	mov	r13, r31
    1f7c:	f0 2d       	mov	r31, r0
    1f7e:	f6 01       	movw	r30, r12
    1f80:	25 89       	ldd	r18, Z+21	; 0x15
    1f82:	36 89       	ldd	r19, Z+22	; 0x16
    1f84:	47 89       	ldd	r20, Z+23	; 0x17
    1f86:	50 8d       	ldd	r21, Z+24	; 0x18
    1f88:	c3 01       	movw	r24, r6
    1f8a:	b2 01       	movw	r22, r4
    1f8c:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1f90:	f6 01       	movw	r30, r12
    1f92:	22 85       	ldd	r18, Z+10	; 0x0a
    1f94:	33 85       	ldd	r19, Z+11	; 0x0b
    1f96:	44 85       	ldd	r20, Z+12	; 0x0c
    1f98:	55 85       	ldd	r21, Z+13	; 0x0d
    1f9a:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    1f9e:	4b 01       	movw	r8, r22
    1fa0:	5c 01       	movw	r10, r24
    1fa2:	f6 01       	movw	r30, r12
    1fa4:	84 81       	ldd	r24, Z+4	; 0x04
    1fa6:	95 81       	ldd	r25, Z+5	; 0x05
    1fa8:	be 01       	movw	r22, r28
    1faa:	68 1b       	sub	r22, r24
    1fac:	79 0b       	sbc	r23, r25
    1fae:	07 2e       	mov	r0, r23
    1fb0:	00 0c       	add	r0, r0
    1fb2:	88 0b       	sbc	r24, r24
    1fb4:	99 0b       	sbc	r25, r25
    1fb6:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1fba:	f6 01       	movw	r30, r12
    1fbc:	25 8d       	ldd	r18, Z+29	; 0x1d
    1fbe:	36 8d       	ldd	r19, Z+30	; 0x1e
    1fc0:	47 8d       	ldd	r20, Z+31	; 0x1f
    1fc2:	50 a1       	ldd	r21, Z+32	; 0x20
    1fc4:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    1fc8:	9b 01       	movw	r18, r22
    1fca:	ac 01       	movw	r20, r24
    1fcc:	c5 01       	movw	r24, r10
    1fce:	b4 01       	movw	r22, r8
    1fd0:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__subsf3>
    1fd4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    1fd8:	f6 01       	movw	r30, r12
    1fda:	77 83       	std	Z+7, r23	; 0x07
    1fdc:	66 83       	std	Z+6, r22	; 0x06
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <_Z10Move_Yaxisiij+0x1ea>
    1fe0:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <driveY+0x7>
    1fe4:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <driveY+0x6>
    1fe8:	d0 93 e4 02 	sts	0x02E4, r29	; 0x8002e4 <driveY+0x5>
    1fec:	c0 93 e3 02 	sts	0x02E3, r28	; 0x8002e3 <driveY+0x4>
    1ff0:	18 c0       	rjmp	.+48     	; 0x2022 <_Z10Move_Yaxisiij+0x224>
    1ff2:	b9 01       	movw	r22, r18
    1ff4:	33 0f       	add	r19, r19
    1ff6:	88 0b       	sbc	r24, r24
    1ff8:	99 0b       	sbc	r25, r25
    1ffa:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__floatsisf>
    1ffe:	2a e9       	ldi	r18, 0x9A	; 154
    2000:	39 e9       	ldi	r19, 0x99	; 153
    2002:	49 e1       	ldi	r20, 0x19	; 25
    2004:	5e e3       	ldi	r21, 0x3E	; 62
    2006:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e7       	ldi	r20, 0x70	; 112
    2010:	52 e4       	ldi	r21, 0x42	; 66
    2012:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__addsf3>
    2016:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    201a:	70 93 e6 02 	sts	0x02E6, r23	; 0x8002e6 <driveY+0x7>
    201e:	60 93 e5 02 	sts	0x02E5, r22	; 0x8002e5 <driveY+0x6>
    2022:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <driveY+0x6>
    2026:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <driveY+0x7>
    202a:	99 23       	and	r25, r25
    202c:	1c f4       	brge	.+6      	; 0x2034 <_Z10Move_Yaxisiij+0x236>
    202e:	91 95       	neg	r25
    2030:	81 95       	neg	r24
    2032:	91 09       	sbc	r25, r1
    2034:	8e 15       	cp	r24, r14
    2036:	9f 05       	cpc	r25, r15
    2038:	20 f0       	brcs	.+8      	; 0x2042 <_Z10Move_Yaxisiij+0x244>
    203a:	f0 92 e6 02 	sts	0x02E6, r15	; 0x8002e6 <driveY+0x7>
    203e:	e0 92 e5 02 	sts	0x02E5, r14	; 0x8002e5 <driveY+0x6>
    2042:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <driveY+0x6>
    2046:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <driveY+0x7>
    204a:	43 96       	adiw	r24, 0x13	; 19
    204c:	87 97       	sbiw	r24, 0x27	; 39
    204e:	30 f4       	brcc	.+12     	; 0x205c <_Z10Move_Yaxisiij+0x25e>
    2050:	84 e1       	ldi	r24, 0x14	; 20
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <driveY+0x7>
    2058:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <driveY+0x6>
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
    2062:	02 30       	cpi	r16, 0x02	; 2
    2064:	11 05       	cpc	r17, r1
    2066:	61 f4       	brne	.+24     	; 0x2080 <_Z10Move_Yaxisiij+0x282>
    2068:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <movingyfront>
    206c:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
    2070:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <movingxfront>
    2074:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingxback>
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    207e:	0f c0       	rjmp	.+30     	; 0x209e <_Z10Move_Yaxisiij+0x2a0>
    2080:	03 30       	cpi	r16, 0x03	; 3
    2082:	11 05       	cpc	r17, r1
    2084:	61 f4       	brne	.+24     	; 0x209e <_Z10Move_Yaxisiij+0x2a0>
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <movingyback>
    208c:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
    2090:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <movingxfront>
    2094:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingxback>
    2098:	83 e0       	ldi	r24, 0x03	; 3
    209a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    209e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <driveY+0x6>
    20a2:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <driveY+0x7>
    20a6:	32 de       	rcall	.-924    	; 0x1d0c <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	bf 90       	pop	r11
    20ba:	af 90       	pop	r10
    20bc:	9f 90       	pop	r9
    20be:	8f 90       	pop	r8
    20c0:	7f 90       	pop	r7
    20c2:	6f 90       	pop	r6
    20c4:	5f 90       	pop	r5
    20c6:	4f 90       	pop	r4
    20c8:	3f 90       	pop	r3
    20ca:	2f 90       	pop	r2
    20cc:	08 95       	ret

000020ce <_Z13Hold_Positionv>:


void Hold_Position(void)
{
	_axis = Y_Axis;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
	_direction = Back;
    20d4:	83 e0       	ldi	r24, 0x03	; 3
    20d6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    20da:	ee eb       	ldi	r30, 0xBE	; 190
    20dc:	f2 e0       	ldi	r31, 0x02	; 2
    20de:	46 e6       	ldi	r20, 0x66	; 102
    20e0:	56 e6       	ldi	r21, 0x66	; 102
    20e2:	66 ee       	ldi	r22, 0xE6	; 230
    20e4:	7f e3       	ldi	r23, 0x3F	; 63
    20e6:	45 8b       	std	Z+21, r20	; 0x15
    20e8:	56 8b       	std	Z+22, r21	; 0x16
    20ea:	67 8b       	std	Z+23, r22	; 0x17
    20ec:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    20ee:	11 8e       	std	Z+25, r1	; 0x19
    20f0:	12 8e       	std	Z+26, r1	; 0x1a
    20f2:	13 8e       	std	Z+27, r1	; 0x1b
    20f4:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a8 ec       	ldi	r26, 0xC8	; 200
    20fc:	b1 e4       	ldi	r27, 0x41	; 65
    20fe:	85 8f       	std	Z+29, r24	; 0x1d
    2100:	96 8f       	std	Z+30, r25	; 0x1e
    2102:	a7 8f       	std	Z+31, r26	; 0x1f
    2104:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2106:	ed e9       	ldi	r30, 0x9D	; 157
    2108:	f2 e0       	ldi	r31, 0x02	; 2
    210a:	45 8b       	std	Z+21, r20	; 0x15
    210c:	56 8b       	std	Z+22, r21	; 0x16
    210e:	67 8b       	std	Z+23, r22	; 0x17
    2110:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    2112:	11 8e       	std	Z+25, r1	; 0x19
    2114:	12 8e       	std	Z+26, r1	; 0x1a
    2116:	13 8e       	std	Z+27, r1	; 0x1b
    2118:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    211a:	85 8f       	std	Z+29, r24	; 0x1d
    211c:	96 8f       	std	Z+30, r25	; 0x1e
    211e:	a7 8f       	std	Z+31, r26	; 0x1f
    2120:	b0 a3       	std	Z+32, r27	; 0x20
	
	
 	FrontLinetrackerY_.setPid(1.8,0,25);
 	BackLinetrackerY_.setPid(1.8,0,25);
	
	Calculate_Motor_Differential_Velocity_With_Center_Pivot(0);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	f2 cd       	rjmp	.-1052   	; 0x1d0c <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    2128:	08 95       	ret

0000212a <_Z14updateZoneflagv>:
//  		else        uart0_puts("0 \n");


}

void updateZoneflag(void){
    212a:	cf 93       	push	r28
	//uart0_puts("update \r\n");
	/*if low on shuttlecock pin then shuttlecock received
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
    212c:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <ShuttleCockGiven>
    2130:	81 11       	cpse	r24, r1
    2132:	a6 c0       	rjmp	.+332    	; 0x2280 <__stack+0x81>
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL4)) &&  where == inLZ1 ){
    2134:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2138:	84 fd       	sbrc	r24, 4
    213a:	64 c0       	rjmp	.+200    	; 0x2204 <__stack+0x5>
    213c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2140:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    2144:	05 97       	sbiw	r24, 0x05	; 5
    2146:	09 f0       	breq	.+2      	; 0x214a <_Z14updateZoneflagv+0x20>
    2148:	5d c0       	rjmp	.+186    	; 0x2204 <__stack+0x5>
    214a:	4f c0       	rjmp	.+158    	; 0x21ea <_Z14updateZoneflagv+0xc0>
			GoThrowingZone1 = true;
			task3 = task4 = false;
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    214c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2150:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    2154:	06 97       	sbiw	r24, 0x06	; 6
    2156:	f9 f4       	brne	.+62     	; 0x2196 <_Z14updateZoneflagv+0x6c>
    2158:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    215c:	81 11       	cpse	r24, r1
    215e:	57 c0       	rjmp	.+174    	; 0x220e <__stack+0xf>
    2160:	1a c0       	rjmp	.+52     	; 0x2196 <_Z14updateZoneflagv+0x6c>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL4)) &&  (where == inLZ1 || where == inLZ2) ){
    2162:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2166:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    216a:	05 97       	sbiw	r24, 0x05	; 5
    216c:	31 f0       	breq	.+12     	; 0x217a <_Z14updateZoneflagv+0x50>
    216e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2172:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    2176:	06 97       	sbiw	r24, 0x06	; 6
    2178:	31 f4       	brne	.+12     	; 0x2186 <_Z14updateZoneflagv+0x5c>
		//uart0_puts("Shuttlecock arm gone \r\n");
		ShuttleCockArmGone = true;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <ShuttleCockArmGone>
		uart3_putc('w');
    2180:	87 e7       	ldi	r24, 0x77	; 119
    2182:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z10uart3_putch>
	}
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
    2186:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <ShuttleCockGiven>
    218a:	88 23       	and	r24, r24
    218c:	21 f0       	breq	.+8      	; 0x2196 <_Z14updateZoneflagv+0x6c>
    218e:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <GoldenRackGiven>
    2192:	81 11       	cpse	r24, r1
    2194:	7a c0       	rjmp	.+244    	; 0x228a <__stack+0x8b>
		if(sendoncetorotateGeneva && !(PINL & (1<<PL4)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
    2196:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <sendoncetorotateGeneva>
    219a:	88 23       	and	r24, r24
    219c:	81 f0       	breq	.+32     	; 0x21be <_Z14updateZoneflagv+0x94>
    219e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    21a2:	84 fd       	sbrc	r24, 4
    21a4:	0c c0       	rjmp	.+24     	; 0x21be <_Z14updateZoneflagv+0x94>
    21a6:	7d 99       	sbic	0x0f, 5	; 15
    21a8:	0a c0       	rjmp	.+20     	; 0x21be <_Z14updateZoneflagv+0x94>
    21aa:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    21ae:	81 11       	cpse	r24, r1
    21b0:	06 c0       	rjmp	.+12     	; 0x21be <_Z14updateZoneflagv+0x94>
    21b2:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    21b6:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    21ba:	06 97       	sbiw	r24, 0x06	; 6
    21bc:	e9 f1       	breq	.+122    	; 0x2238 <__stack+0x39>
			uart3_putc('k');
			sendoncetorotateGeneva = false;
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
    21be:	7d 9b       	sbis	0x0f, 5	; 15
    21c0:	58 c0       	rjmp	.+176    	; 0x2272 <__stack+0x73>
    21c2:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    21c6:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    21ca:	06 97       	sbiw	r24, 0x06	; 6
    21cc:	09 f0       	breq	.+2      	; 0x21d0 <_Z14updateZoneflagv+0xa6>
    21ce:	51 c0       	rjmp	.+162    	; 0x2272 <__stack+0x73>
    21d0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    21d4:	81 11       	cpse	r24, r1
    21d6:	4d c0       	rjmp	.+154    	; 0x2272 <__stack+0x73>
    21d8:	35 c0       	rjmp	.+106    	; 0x2244 <__stack+0x45>
			GoThrowingZone2 = false;
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
			//uart0_puts("none \r\n");
			GoldenRackGiven = false;
    21da:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <GoldenRackGiven>
			GoThrowingZone2 = true;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <GoThrowingZone2>
			GoThrowingZone3 = false;
    21e4:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <GoThrowingZone3>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    21e8:	50 c0       	rjmp	.+160    	; 0x228a <__stack+0x8b>
	if(!ShuttleCockGiven){
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL4)) &&  where == inLZ1 ){
			//uart0_puts("Shuttlecock given in LZ1\r\n");
			//'w' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    21ea:	8f e6       	ldi	r24, 0x6F	; 111
    21ec:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z10uart3_putch>
			ShuttleCockGiven = true;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = true;
    21f6:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <GoThrowingZone1>
			task3 = task4 = false;
    21fa:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <task4>
    21fe:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <task3>
    2202:	3e c0       	rjmp	.+124    	; 0x2280 <__stack+0x81>
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    2204:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2208:	84 ff       	sbrs	r24, 4
    220a:	a0 cf       	rjmp	.-192    	; 0x214c <_Z14updateZoneflagv+0x22>
    220c:	c4 cf       	rjmp	.-120    	; 0x2196 <_Z14updateZoneflagv+0x6c>
			//uart0_puts("Shuttlecock given in loading zone 2\r\nManual robot ahead \r\n");
			//'o' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    220e:	8f e6       	ldi	r24, 0x6F	; 111
    2210:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z10uart3_putch>
			ShuttleCockGiven = true;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = false;
    221a:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <GoThrowingZone1>
			GoThrowingZone2 = true;
    221e:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <GoThrowingZone2>
			task3 = task4 = task5 = true;
    2222:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <task5>
    2226:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <task4>
    222a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <task3>
			task6 = task7 = false;
    222e:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <task7>
    2232:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <task6>
    2236:	24 c0       	rjmp	.+72     	; 0x2280 <__stack+0x81>
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
		if(sendoncetorotateGeneva && !(PINL & (1<<PL4)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
			uart3_putc('k');
    2238:	8b e6       	ldi	r24, 0x6B	; 107
    223a:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z10uart3_putch>
			sendoncetorotateGeneva = false;
    223e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sendoncetorotateGeneva>
    2242:	bd cf       	rjmp	.-134    	; 0x21be <_Z14updateZoneflagv+0x94>
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
			//'f' is sent to throwing mechanism to tell to throwing zone 3 from golden rack
			task6 = task7 = true;
    2244:	c1 e0       	ldi	r28, 0x01	; 1
    2246:	c0 93 8a 02 	sts	0x028A, r28	; 0x80028a <task7>
    224a:	c0 93 8b 02 	sts	0x028B, r28	; 0x80028b <task6>
			task8 = task9 = false;
    224e:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <task9>
    2252:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <task8>
			//uart0_puts("going throwing zone 3\r\n");
			uart3_putc('j');
    2256:	8a e6       	ldi	r24, 0x6A	; 106
    2258:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z10uart3_putch>
			GoldenRackGiven = true;
    225c:	c0 93 9b 02 	sts	0x029B, r28	; 0x80029b <GoldenRackGiven>
			ShuttleCockArmGone = true;
    2260:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <ShuttleCockArmGone>
			ShuttleCockGiven = true;
    2264:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <ShuttleCockGiven>
			GoThrowingZone3 = true;
    2268:	c0 93 96 02 	sts	0x0296, r28	; 0x800296 <GoThrowingZone3>
			GoThrowingZone2 = false;
    226c:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <GoThrowingZone2>
    2270:	0c c0       	rjmp	.+24     	; 0x228a <__stack+0x8b>
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
    2272:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2276:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    227a:	06 97       	sbiw	r24, 0x06	; 6
    227c:	31 f4       	brne	.+12     	; 0x228a <__stack+0x8b>
    227e:	ad cf       	rjmp	.-166    	; 0x21da <_Z14updateZoneflagv+0xb0>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL4)) &&  (where == inLZ1 || where == inLZ2) ){
    2280:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2284:	84 fd       	sbrc	r24, 4
    2286:	6d cf       	rjmp	.-294    	; 0x2162 <_Z14updateZoneflagv+0x38>
    2288:	82 cf       	rjmp	.-252    	; 0x218e <_Z14updateZoneflagv+0x64>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    228a:	cf 91       	pop	r28
    228c:	08 95       	ret

0000228e <_Z18gorockthegamefieldv>:
// 			if(task5){uart0_puts("5");}
// 			if(task6){uart0_puts("6");}
// 				if(task7){uart0_puts("7");}
// 				if(task8){uart0_puts("8");}

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
    228e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2292:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    2296:	05 97       	sbiw	r24, 0x05	; 5
    2298:	39 f0       	breq	.+14     	; 0x22a8 <_Z18gorockthegamefieldv+0x1a>
    229a:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    229e:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    22a2:	06 97       	sbiw	r24, 0x06	; 6
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <_Z18gorockthegamefieldv+0x1a>
    22a6:	52 c0       	rjmp	.+164    	; 0x234c <_Z18gorockthegamefieldv+0xbe>
    22a8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    22ac:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    22b0:	08 97       	sbiw	r24, 0x08	; 8
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <_Z18gorockthegamefieldv+0x28>
    22b4:	4b c0       	rjmp	.+150    	; 0x234c <_Z18gorockthegamefieldv+0xbe>
    22b6:	94 c3       	rjmp	.+1832   	; 0x29e0 <_Z18gorockthegamefieldv+0x752>
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    22b8:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <task5>
    22bc:	81 11       	cpse	r24, r1
    22be:	1f c0       	rjmp	.+62     	; 0x22fe <_Z18gorockthegamefieldv+0x70>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))){
    22c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    22c4:	86 ff       	sbrs	r24, 6
    22c6:	12 c0       	rjmp	.+36     	; 0x22ec <_Z18gorockthegamefieldv+0x5e>
				/*go directly to loading zone 2 and manual robot is waiting there*/
				where = inLZ1;
    22c8:	85 e0       	ldi	r24, 0x05	; 5
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    22d0:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
				gotoLZ2 = true;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <gotoLZ2>
				FlagChangeSetpointCompass = false;
    22da:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <FlagChangeSetpointCompass>
				FlagInitialAngleSetpoint = false;
    22de:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <FlagInitialAngleSetpoint>
				ShuttleCockGiven = true;	
    22e2:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <ShuttleCockGiven>
				ShuttleCockArmGone = true;
    22e6:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <ShuttleCockArmGone>
    22ea:	30 c0       	rjmp	.+96     	; 0x234c <_Z18gorockthegamefieldv+0xbe>
			
			/*if there is manual robot infront of automatic robot*/
			
			else{
				/*if there is manual robot ahead of automatic robot then goto throwing zone1*/
				GoThrowingZone1 = true;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <GoThrowingZone1>
				task3 = task4 = false;
    22f2:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <task4>
    22f6:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <task3>
				updateZoneflag();
    22fa:	17 df       	rcall	.-466    	; 0x212a <_Z14updateZoneflagv>
    22fc:	27 c0       	rjmp	.+78     	; 0x234c <_Z18gorockthegamefieldv+0xbe>
				//holdposition();
			}	
		}
		else if(task6 && task7 ){
    22fe:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <task6>
    2302:	88 23       	and	r24, r24
    2304:	09 f1       	breq	.+66     	; 0x2348 <_Z18gorockthegamefieldv+0xba>
    2306:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <task7>
    230a:	88 23       	and	r24, r24
    230c:	e9 f0       	breq	.+58     	; 0x2348 <_Z18gorockthegamefieldv+0xba>
			if((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN))){
    230e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2312:	86 ff       	sbrs	r24, 6
    2314:	0b c0       	rjmp	.+22     	; 0x232c <_Z18gorockthegamefieldv+0x9e>
				where = inLZ2;
    2316:	86 e0       	ldi	r24, 0x06	; 6
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    231e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
				ManualInFrontOfLZ2 = false;
    2322:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
				updateZoneflag();
				Hold_Position();
    2326:	01 df       	rcall	.-510    	; 0x212a <_Z14updateZoneflagv>
    2328:	d2 de       	rcall	.-604    	; 0x20ce <_Z13Hold_Positionv>
    232a:	10 c0       	rjmp	.+32     	; 0x234c <_Z18gorockthegamefieldv+0xbe>
			}
			else if (ManualInFrontOfLZ2){
    232c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    2330:	88 23       	and	r24, r24
    2332:	39 f0       	breq	.+14     	; 0x2342 <_Z18gorockthegamefieldv+0xb4>
				task6 = task7 = false;
    2334:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <task7>
    2338:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <task6>
				xJunctionMeetFromTZ2 = false;
    233c:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <xJunctionMeetFromTZ2>
			}
			else{
				updateZoneflag();
				Hold_Position();
    2340:	05 c0       	rjmp	.+10     	; 0x234c <_Z18gorockthegamefieldv+0xbe>
    2342:	f3 de       	rcall	.-538    	; 0x212a <_Z14updateZoneflagv>
    2344:	c4 de       	rcall	.-632    	; 0x20ce <_Z13Hold_Positionv>
			}
		}
		
		/*if the robot is in loading zone 1 or loading zone 2  otherwise */
		else{
			updateZoneflag();
    2346:	02 c0       	rjmp	.+4      	; 0x234c <_Z18gorockthegamefieldv+0xbe>
    2348:	f0 de       	rcall	.-544    	; 0x212a <_Z14updateZoneflagv>
			Hold_Position();
    234a:	c1 de       	rcall	.-638    	; 0x20ce <_Z13Hold_Positionv>
    234c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <task1>
		}
	}
	
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point){	
    2350:	81 11       	cpse	r24, r1
    2352:	14 c0       	rjmp	.+40     	; 0x237c <_Z18gorockthegamefieldv+0xee>
    2354:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2358:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    235c:	89 2b       	or	r24, r25
    235e:	09 f4       	brne	.+2      	; 0x2362 <_Z18gorockthegamefieldv+0xd4>
    2360:	44 c3       	rjmp	.+1672   	; 0x29ea <_Z18gorockthegamefieldv+0x75c>
    2362:	73 c0       	rjmp	.+230    	; 0x244a <_Z18gorockthegamefieldv+0x1bc>
    2364:	78 94       	sei
	}
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    2366:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE0);
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	81 60       	ori	r24, 0x01	; 1
    236e:	80 83       	st	Z, r24
    2370:	eb e6       	ldi	r30, 0x6B	; 107
	PCMSK0 |= (1<<PCINT4);
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 61       	ori	r24, 0x10	; 16
    2378:	80 83       	st	Z, r24
    237a:	67 c0       	rjmp	.+206    	; 0x244a <_Z18gorockthegamefieldv+0x1bc>
    237c:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <task2>
		}

	}
	
	///move from corner to loading zone1 if task1 is completed and task2 not completed
	else if(task1 && !task2){	
    2380:	81 11       	cpse	r24, r1
    2382:	38 c0       	rjmp	.+112    	; 0x23f4 <_Z18gorockthegamefieldv+0x166>
    2384:	81 e0       	ldi	r24, 0x01	; 1
		where = inFirstloadingCorner;
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    238c:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
    2390:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <startingAtFront>
		startingAtFront = false;
    2394:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2396:	f3 e0       	ldi	r31, 0x03	; 3
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a0 e0       	ldi	r26, 0x00	; 0
    239e:	b0 e4       	ldi	r27, 0x40	; 64
    23a0:	85 8b       	std	Z+21, r24	; 0x15
    23a2:	96 8b       	std	Z+22, r25	; 0x16
    23a4:	a7 8b       	std	Z+23, r26	; 0x17
    23a6:	b0 8f       	std	Z+24, r27	; 0x18
    23a8:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    23aa:	12 8e       	std	Z+26, r1	; 0x1a
    23ac:	13 8e       	std	Z+27, r1	; 0x1b
    23ae:	14 8e       	std	Z+28, r1	; 0x1c
    23b0:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 ef       	ldi	r26, 0xF0	; 240
    23b6:	b1 e4       	ldi	r27, 0x41	; 65
    23b8:	85 8f       	std	Z+29, r24	; 0x1d
    23ba:	96 8f       	std	Z+30, r25	; 0x1e
    23bc:	a7 8f       	std	Z+31, r26	; 0x1f
    23be:	b0 a3       	std	Z+32, r27	; 0x20
    23c0:	87 e0       	ldi	r24, 0x07	; 7
		compass.setPid(2.0,0,30);
		//uart0_puts("moving aheead \r\n");
		robotState = moving;
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    23c8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    23cc:	eb e6       	ldi	r30, 0x6B	; 107
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 7e       	andi	r24, 0xEF	; 239
    23d4:	80 83       	st	Z, r24
    23d6:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    23d8:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	84 60       	ori	r24, 0x04	; 4
    23e0:	80 83       	st	Z, r24
    23e2:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT23);
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	80 68       	ori	r24, 0x80	; 128
    23ea:	80 83       	st	Z, r24
		linetrackerXjunctionWatchOff();
		linetrackerYjunctionWatch();
		movYForwardSlow(CORNERtoLZ1);
    23ec:	8e e1       	ldi	r24, 0x1E	; 30
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	d6 dc       	rcall	.-1620   	; 0x1d9e <_Z15movYForwardSlowj>
    23f2:	2b c0       	rjmp	.+86     	; 0x244a <_Z18gorockthegamefieldv+0x1bc>
    23f4:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
		//MovY_Slow(1000, Front, CORNERtoLZ1);
		//movYForwardSlow(CORNERtoLZ1);
	}
	/*if task2 is completed and robot just reached loading zone 1*/
	else if(task1 && task2 && where == inFirstloadingCorner && (robotState == moving)){
    23f8:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	29 f5       	brne	.+74     	; 0x244a <_Z18gorockthegamefieldv+0x1bc>
    2400:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2404:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2408:	07 97       	sbiw	r24, 0x07	; 7
    240a:	f9 f4       	brne	.+62     	; 0x244a <_Z18gorockthegamefieldv+0x1bc>
    240c:	85 e0       	ldi	r24, 0x05	; 5
		where = inLZ1;
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    2414:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
    2418:	88 e6       	ldi	r24, 0x68	; 104
		uart3_putc('h');
    241a:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z10uart3_putch>
    241e:	88 e0       	ldi	r24, 0x08	; 8
		//uart0_puts("in loading zone 1\r\n");
		//compass.setPid(2.0,0,30);
		robotState = notmoving;
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2426:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    242a:	ed e6       	ldi	r30, 0x6D	; 109
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8f 77       	andi	r24, 0x7F	; 127
    2432:	80 83       	st	Z, r24
		linetrackerYjunctionWatchOff();
		BrakeMotor();
    2434:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
		Hold_Position();
    2438:	4a de       	rcall	.-876    	; 0x20ce <_Z13Hold_Positionv>
    243a:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
		inline void resetCount(){count_encoder = 0;};
    243e:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2442:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2446:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
    244a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <ShuttleCockGiven>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	
	/*if Shuttlecock is given*/
	if(ShuttleCockGiven && ShuttleCockArmGone)
    244e:	88 23       	and	r24, r24
    2450:	09 f4       	brne	.+2      	; 0x2454 <_Z18gorockthegamefieldv+0x1c6>
    2452:	43 c4       	rjmp	.+2182   	; 0x2cda <_Z18gorockthegamefieldv+0xa4c>
    2454:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <ShuttleCockArmGone>
    2458:	88 23       	and	r24, r24
    245a:	09 f4       	brne	.+2      	; 0x245e <_Z18gorockthegamefieldv+0x1d0>
    245c:	3e c4       	rjmp	.+2172   	; 0x2cda <_Z18gorockthegamefieldv+0xa4c>
    245e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <GoThrowingZone1>
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
    2462:	88 23       	and	r24, r24
    2464:	09 f4       	brne	.+2      	; 0x2468 <_Z18gorockthegamefieldv+0x1da>
    2466:	28 c3       	rjmp	.+1616   	; 0x2ab8 <_Z18gorockthegamefieldv+0x82a>
    2468:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <task3>
    246c:	81 11       	cpse	r24, r1
    246e:	13 c0       	rjmp	.+38     	; 0x2496 <_Z18gorockthegamefieldv+0x208>
    2470:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2474:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    2478:	05 97       	sbiw	r24, 0x05	; 5
    247a:	f1 f4       	brne	.+60     	; 0x24b8 <_Z18gorockthegamefieldv+0x22a>
    247c:	e8 c2       	rjmp	.+1488   	; 0x2a4e <_Z18gorockthegamefieldv+0x7c0>
    247e:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2480:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	84 60       	ori	r24, 0x04	; 4
    2488:	80 83       	st	Z, r24
    248a:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT23);
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	80 68       	ori	r24, 0x80	; 128
    2492:	80 83       	st	Z, r24
    2494:	11 c0       	rjmp	.+34     	; 0x24b8 <_Z18gorockthegamefieldv+0x22a>
    2496:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <task4>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    249a:	81 11       	cpse	r24, r1
    249c:	0d c0       	rjmp	.+26     	; 0x24b8 <_Z18gorockthegamefieldv+0x22a>
    249e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    24a2:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    24a6:	05 97       	sbiw	r24, 0x05	; 5
    24a8:	39 f4       	brne	.+14     	; 0x24b8 <_Z18gorockthegamefieldv+0x22a>
    24aa:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    24ae:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    24b2:	07 97       	sbiw	r24, 0x07	; 7
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <_Z18gorockthegamefieldv+0x22a>
    24b6:	06 c3       	rjmp	.+1548   	; 0x2ac4 <_Z18gorockthegamefieldv+0x836>
    24b8:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
				robotState = notmoving;
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
    24bc:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    24c0:	02 97       	sbiw	r24, 0x02	; 2
    24c2:	d9 f4       	brne	.+54     	; 0x24fa <_Z18gorockthegamefieldv+0x26c>
    24c4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    24c8:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    24cc:	08 97       	sbiw	r24, 0x08	; 8
    24ce:	a9 f4       	brne	.+42     	; 0x24fa <_Z18gorockthegamefieldv+0x26c>
    24d0:	15 c3       	rjmp	.+1578   	; 0x2afc <_Z18gorockthegamefieldv+0x86e>
    24d2:	81 e3       	ldi	r24, 0x31	; 49
				//uart3_puts("Throwing \r\n");
				Hold_Position();

				if(_b_Transmit_once)	//Stable_Robot() && 
				{	
					uart3_putc('1');
    24d4:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z10uart3_putch>
    24d8:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <_b_Transmit_once>
					//uart3_puts("Job Done\r\n\n");
					_b_Transmit_once = false;
    24dc:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <_Z10uart3_getcv>
				}
				
				receiveAck = uart3_getc();
    24e0:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <receiveAck>
    24e4:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    24e6:	49 f4       	brne	.+18     	; 0x24fa <_Z18gorockthegamefieldv+0x26c>
    24e8:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ1 = true;
    24ea:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <backtoLZ1>
    24ee:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <GoThrowingZone1>
					GoThrowingZone1 = false;
    24f2:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    24f4:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <receiveAck>
    24f8:	05 c0       	rjmp	.+10     	; 0x2504 <_Z18gorockthegamefieldv+0x276>
    24fa:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <backtoLZ1>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ1 && task3 && !task4){
    24fe:	88 23       	and	r24, r24
    2500:	09 f4       	brne	.+2      	; 0x2504 <_Z18gorockthegamefieldv+0x276>
    2502:	49 c0       	rjmp	.+146    	; 0x2596 <_Z18gorockthegamefieldv+0x308>
    2504:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <task3>
    2508:	88 23       	and	r24, r24
    250a:	09 f4       	brne	.+2      	; 0x250e <_Z18gorockthegamefieldv+0x280>
    250c:	44 c0       	rjmp	.+136    	; 0x2596 <_Z18gorockthegamefieldv+0x308>
    250e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <task4>
    2512:	81 11       	cpse	r24, r1
    2514:	45 c0       	rjmp	.+138    	; 0x25a0 <_Z18gorockthegamefieldv+0x312>
    2516:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2518:	f3 e0       	ldi	r31, 0x03	; 3
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a0 e0       	ldi	r26, 0x00	; 0
    2520:	b0 e4       	ldi	r27, 0x40	; 64
    2522:	85 8b       	std	Z+21, r24	; 0x15
    2524:	96 8b       	std	Z+22, r25	; 0x16
    2526:	a7 8b       	std	Z+23, r26	; 0x17
    2528:	b0 8f       	std	Z+24, r27	; 0x18
    252a:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    252c:	12 8e       	std	Z+26, r1	; 0x1a
    252e:	13 8e       	std	Z+27, r1	; 0x1b
    2530:	14 8e       	std	Z+28, r1	; 0x1c
    2532:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a0 ef       	ldi	r26, 0xF0	; 240
    2538:	b1 e4       	ldi	r27, 0x41	; 65
    253a:	85 8f       	std	Z+29, r24	; 0x1d
    253c:	96 8f       	std	Z+30, r25	; 0x1e
    253e:	a7 8f       	std	Z+31, r26	; 0x1f
    2540:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2.0,0,30);
				//uart0_puts("Returning from tz1 \t");
				Move_Yaxis(Throwingzone1.y+25, Back, LZ1toTZ1);
    2542:	44 e6       	ldi	r20, 0x64	; 100
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	63 e0       	ldi	r22, 0x03	; 3
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	85 e8       	ldi	r24, 0x85	; 133
    254c:	97 e0       	ldi	r25, 0x07	; 7
    254e:	57 dc       	rcall	.-1874   	; 0x1dfe <_Z10Move_Yaxisiij>
    2550:	87 e0       	ldi	r24, 0x07	; 7
				//movy(Throwingzone1.y, Back,TZ1toLZ1);
				robotState = moving;
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2558:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    255c:	86 e7       	ldi	r24, 0x76	; 118
				if(abs(encoderY.getdistance()) >= 1200){
    255e:	92 e0       	ldi	r25, 0x02	; 2
    2560:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2564:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    2568:	9b 01       	movw	r18, r22
    256a:	77 23       	and	r23, r23
    256c:	24 f4       	brge	.+8      	; 0x2576 <_Z18gorockthegamefieldv+0x2e8>
    256e:	22 27       	eor	r18, r18
    2570:	33 27       	eor	r19, r19
    2572:	26 1b       	sub	r18, r22
    2574:	37 0b       	sbc	r19, r23
    2576:	20 3b       	cpi	r18, 0xB0	; 176
    2578:	34 40       	sbci	r19, 0x04	; 4
    257a:	0c f4       	brge	.+2      	; 0x257e <_Z18gorockthegamefieldv+0x2f0>
    257c:	75 c0       	rjmp	.+234    	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    257e:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2580:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	84 60       	ori	r24, 0x04	; 4
    2588:	80 83       	st	Z, r24
    258a:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT23);
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	80 68       	ori	r24, 0x80	; 128
    2592:	80 83       	st	Z, r24
    2594:	69 c0       	rjmp	.+210    	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    2596:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <task4>
				//uart0_puts("\r\n");
			
			}
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
    259a:	88 23       	and	r24, r24
    259c:	09 f4       	brne	.+2      	; 0x25a0 <_Z18gorockthegamefieldv+0x312>
    259e:	d7 c2       	rjmp	.+1454   	; 0x2b4e <_Z18gorockthegamefieldv+0x8c0>
    25a0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    25a4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    25a8:	07 97       	sbiw	r24, 0x07	; 7
    25aa:	09 f0       	breq	.+2      	; 0x25ae <_Z18gorockthegamefieldv+0x320>
    25ac:	d0 c2       	rjmp	.+1440   	; 0x2b4e <_Z18gorockthegamefieldv+0x8c0>
    25ae:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    25b2:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    25b6:	02 97       	sbiw	r24, 0x02	; 2
    25b8:	09 f0       	breq	.+2      	; 0x25bc <_Z18gorockthegamefieldv+0x32e>
    25ba:	c9 c2       	rjmp	.+1426   	; 0x2b4e <_Z18gorockthegamefieldv+0x8c0>
    25bc:	a6 c2       	rjmp	.+1356   	; 0x2b0a <_Z18gorockthegamefieldv+0x87c>
    25be:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <task5>
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    25c2:	81 11       	cpse	r24, r1
    25c4:	44 c0       	rjmp	.+136    	; 0x264e <_Z18gorockthegamefieldv+0x3c0>
    25c6:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    25c8:	f3 e0       	ldi	r31, 0x03	; 3
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	a0 e0       	ldi	r26, 0x00	; 0
    25d0:	b0 e4       	ldi	r27, 0x40	; 64
    25d2:	85 8b       	std	Z+21, r24	; 0x15
    25d4:	96 8b       	std	Z+22, r25	; 0x16
    25d6:	a7 8b       	std	Z+23, r26	; 0x17
    25d8:	b0 8f       	std	Z+24, r27	; 0x18
    25da:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    25dc:	12 8e       	std	Z+26, r1	; 0x1a
    25de:	13 8e       	std	Z+27, r1	; 0x1b
    25e0:	14 8e       	std	Z+28, r1	; 0x1c
    25e2:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a0 ef       	ldi	r26, 0xF0	; 240
    25e8:	b1 e4       	ldi	r27, 0x41	; 65
    25ea:	85 8f       	std	Z+29, r24	; 0x1d
    25ec:	96 8f       	std	Z+30, r25	; 0x1e
    25ee:	a7 8f       	std	Z+31, r26	; 0x1f
    25f0:	b0 a3       	std	Z+32, r27	; 0x20
    25f2:	44 e6       	ldi	r20, 0x64	; 100
				//uart0_puts("heading loading zone 2\t");
				compass.setPid(2.0,0,30);
				movx(2100,Front,LZ1toLZ2);
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	62 e0       	ldi	r22, 0x02	; 2
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	84 e3       	ldi	r24, 0x34	; 52
    25fc:	98 e0       	ldi	r25, 0x08	; 8
    25fe:	0e 94 04 09 	call	0x1208	; 0x1208 <_Z4movxiij>
    2602:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    260a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    260e:	8e e7       	ldi	r24, 0x7E	; 126
				if(abs(encoderX.getdistance()) >= 1900){
    2610:	92 e0       	ldi	r25, 0x02	; 2
    2612:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2616:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    261a:	9b 01       	movw	r18, r22
    261c:	77 23       	and	r23, r23
    261e:	24 f4       	brge	.+8      	; 0x2628 <_Z18gorockthegamefieldv+0x39a>
    2620:	22 27       	eor	r18, r18
    2622:	33 27       	eor	r19, r19
    2624:	26 1b       	sub	r18, r22
    2626:	37 0b       	sbc	r19, r23
    2628:	2c 36       	cpi	r18, 0x6C	; 108
    262a:	37 40       	sbci	r19, 0x07	; 7
    262c:	ec f0       	brlt	.+58     	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    262e:	78 94       	sei
	}
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    2630:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE0);
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	81 60       	ori	r24, 0x01	; 1
    2638:	80 83       	st	Z, r24
    263a:	eb e6       	ldi	r30, 0x6B	; 107
	PCMSK0 |= (1<<PCINT4);
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	80 61       	ori	r24, 0x10	; 16
    2642:	80 83       	st	Z, r24
    2644:	11 c0       	rjmp	.+34     	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    2646:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <task5>
				}
				//uart0_puts("\r\n");
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
    264a:	88 23       	and	r24, r24
    264c:	69 f0       	breq	.+26     	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    264e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2652:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2656:	07 97       	sbiw	r24, 0x07	; 7
    2658:	39 f4       	brne	.+14     	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    265a:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    265e:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    2662:	05 97       	sbiw	r24, 0x05	; 5
    2664:	09 f4       	brne	.+2      	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    2666:	78 c2       	rjmp	.+1264   	; 0x2b58 <_Z18gorockthegamefieldv+0x8ca>
    2668:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <GoThrowingZone2>
			}
			
			
			/*if there is manual robot ahead of automatic robot && golden rack is not given and shuttlecock
			is given*/
			if(GoThrowingZone2 && !task6 ){
    266c:	88 23       	and	r24, r24
    266e:	09 f4       	brne	.+2      	; 0x2672 <_Z18gorockthegamefieldv+0x3e4>
    2670:	43 c0       	rjmp	.+134    	; 0x26f8 <_Z18gorockthegamefieldv+0x46a>
    2672:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <task6>
    2676:	81 11       	cpse	r24, r1
    2678:	43 c0       	rjmp	.+134    	; 0x2700 <_Z18gorockthegamefieldv+0x472>
    267a:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    267c:	f3 e0       	ldi	r31, 0x03	; 3
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a0 e0       	ldi	r26, 0x00	; 0
    2684:	b0 e4       	ldi	r27, 0x40	; 64
    2686:	85 8b       	std	Z+21, r24	; 0x15
    2688:	96 8b       	std	Z+22, r25	; 0x16
    268a:	a7 8b       	std	Z+23, r26	; 0x17
    268c:	b0 8f       	std	Z+24, r27	; 0x18
    268e:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    2690:	12 8e       	std	Z+26, r1	; 0x1a
    2692:	13 8e       	std	Z+27, r1	; 0x1b
    2694:	14 8e       	std	Z+28, r1	; 0x1c
    2696:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	a0 ef       	ldi	r26, 0xF0	; 240
    269c:	b1 e4       	ldi	r27, 0x41	; 65
    269e:	85 8f       	std	Z+29, r24	; 0x1d
    26a0:	96 8f       	std	Z+30, r25	; 0x1e
    26a2:	a7 8f       	std	Z+31, r26	; 0x1f
    26a4:	b0 a3       	std	Z+32, r27	; 0x20
    26a6:	87 e0       	ldi	r24, 0x07	; 7
				//uart0_puts("going tz2 \t");
				compass.setPid(2.0,0,30);
				robotState = moving;
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    26ae:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				Move_Yaxis(Throwingzone2.y+50, Front, LZ2toTZ2);
    26b2:	44 e6       	ldi	r20, 0x64	; 100
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	62 e0       	ldi	r22, 0x02	; 2
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	8e e9       	ldi	r24, 0x9E	; 158
    26bc:	97 e0       	ldi	r25, 0x07	; 7
    26be:	9f db       	rcall	.-2242   	; 0x1dfe <_Z10Move_Yaxisiij>
    26c0:	86 e7       	ldi	r24, 0x76	; 118
				//movy(Throwingzone2.y, Front,LZ2toTZ2);
			
				if(abs(encoderY.getdistance()) >=1200){
    26c2:	92 e0       	ldi	r25, 0x02	; 2
    26c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    26c8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    26cc:	9b 01       	movw	r18, r22
    26ce:	77 23       	and	r23, r23
    26d0:	24 f4       	brge	.+8      	; 0x26da <_Z18gorockthegamefieldv+0x44c>
    26d2:	22 27       	eor	r18, r18
    26d4:	33 27       	eor	r19, r19
    26d6:	26 1b       	sub	r18, r22
    26d8:	37 0b       	sbc	r19, r23
    26da:	20 3b       	cpi	r18, 0xB0	; 176
    26dc:	34 40       	sbci	r19, 0x04	; 4
    26de:	0c f1       	brlt	.+66     	; 0x2722 <_Z18gorockthegamefieldv+0x494>
    26e0:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    26e2:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	84 60       	ori	r24, 0x04	; 4
    26ea:	80 83       	st	Z, r24
    26ec:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT23);
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	80 68       	ori	r24, 0x80	; 128
    26f4:	80 83       	st	Z, r24
    26f6:	15 c0       	rjmp	.+42     	; 0x2722 <_Z18gorockthegamefieldv+0x494>
    26f8:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <task6>
				}
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
    26fc:	88 23       	and	r24, r24
    26fe:	89 f0       	breq	.+34     	; 0x2722 <_Z18gorockthegamefieldv+0x494>
    2700:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <task7>
    2704:	81 11       	cpse	r24, r1
    2706:	0d c0       	rjmp	.+26     	; 0x2722 <_Z18gorockthegamefieldv+0x494>
    2708:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    270c:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    2710:	06 97       	sbiw	r24, 0x06	; 6
    2712:	39 f4       	brne	.+14     	; 0x2722 <_Z18gorockthegamefieldv+0x494>
    2714:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2718:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    271c:	07 97       	sbiw	r24, 0x07	; 7
    271e:	09 f4       	brne	.+2      	; 0x2722 <_Z18gorockthegamefieldv+0x494>
    2720:	3d c2       	rjmp	.+1146   	; 0x2b9c <_Z18gorockthegamefieldv+0x90e>
    2722:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
				//uart3_putc('2');
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
    2726:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    272a:	03 97       	sbiw	r24, 0x03	; 3
    272c:	19 f5       	brne	.+70     	; 0x2774 <_Z18gorockthegamefieldv+0x4e6>
    272e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2732:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2736:	08 97       	sbiw	r24, 0x08	; 8
    2738:	e9 f4       	brne	.+58     	; 0x2774 <_Z18gorockthegamefieldv+0x4e6>
    273a:	4c c2       	rjmp	.+1176   	; 0x2bd4 <_Z18gorockthegamefieldv+0x946>
    273c:	82 e3       	ldi	r24, 0x32	; 50
				velocity_robot[0] =0;
				velocity_robot[1]=0;
				Hold_Position();
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
				{
					uart3_putc('2');
    273e:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <_Z10uart3_putch>
    2742:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2746:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    274a:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    274e:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
    2752:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <_b_Transmit_once>
					encoderX.resetCount();
					encoderY.resetCount();
					_b_Transmit_once = false;
    2756:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <_Z10uart3_getcv>
				}
				
				receiveAck = uart3_getc();
    275a:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <receiveAck>
    275e:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    2760:	49 f4       	brne	.+18     	; 0x2774 <_Z18gorockthegamefieldv+0x4e6>
    2762:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ2 = true;
    2764:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <backtoLZ2>
    2768:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <GoThrowingZone3>
					GoThrowingZone3 = false;
    276c:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    276e:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <receiveAck>
    2772:	05 c0       	rjmp	.+10     	; 0x277e <_Z18gorockthegamefieldv+0x4f0>
    2774:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <backtoLZ2>
				}
			}
			///if acknowledge received from throwing mechanism after throwing then back to loading zone 2
			if(backtoLZ2 && task6 && !task7){
    2778:	88 23       	and	r24, r24
    277a:	09 f4       	brne	.+2      	; 0x277e <_Z18gorockthegamefieldv+0x4f0>
    277c:	48 c0       	rjmp	.+144    	; 0x280e <_Z18gorockthegamefieldv+0x580>
    277e:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <task6>
    2782:	88 23       	and	r24, r24
    2784:	09 f4       	brne	.+2      	; 0x2788 <_Z18gorockthegamefieldv+0x4fa>
    2786:	43 c0       	rjmp	.+134    	; 0x280e <_Z18gorockthegamefieldv+0x580>
    2788:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <task7>
    278c:	81 11       	cpse	r24, r1
    278e:	43 c0       	rjmp	.+134    	; 0x2816 <_Z18gorockthegamefieldv+0x588>
    2790:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2792:	f3 e0       	ldi	r31, 0x03	; 3
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	a0 e0       	ldi	r26, 0x00	; 0
    279a:	b0 e4       	ldi	r27, 0x40	; 64
    279c:	85 8b       	std	Z+21, r24	; 0x15
    279e:	96 8b       	std	Z+22, r25	; 0x16
    27a0:	a7 8b       	std	Z+23, r26	; 0x17
    27a2:	b0 8f       	std	Z+24, r27	; 0x18
    27a4:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    27a6:	12 8e       	std	Z+26, r1	; 0x1a
    27a8:	13 8e       	std	Z+27, r1	; 0x1b
    27aa:	14 8e       	std	Z+28, r1	; 0x1c
    27ac:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	a0 ef       	ldi	r26, 0xF0	; 240
    27b2:	b1 e4       	ldi	r27, 0x41	; 65
    27b4:	85 8f       	std	Z+29, r24	; 0x1d
    27b6:	96 8f       	std	Z+30, r25	; 0x1e
    27b8:	a7 8f       	std	Z+31, r26	; 0x1f
    27ba:	b0 a3       	std	Z+32, r27	; 0x20
					//if(abs(encoderX.getdistance()) >= 400){
						//linetrackerXjunctionWatch();
					//}
				//}
				//else{
					Move_Yaxis(Throwingzone2.y+50, Back, LZ2toTZ2);
    27bc:	44 e6       	ldi	r20, 0x64	; 100
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	63 e0       	ldi	r22, 0x03	; 3
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	8e e9       	ldi	r24, 0x9E	; 158
    27c6:	97 e0       	ldi	r25, 0x07	; 7
    27c8:	1a db       	rcall	.-2508   	; 0x1dfe <_Z10Move_Yaxisiij>
    27ca:	87 e0       	ldi	r24, 0x07	; 7
					//movy(Throwingzone2.y,Back,TZ2toLZ2);
					robotState = moving;
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    27d2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    27d6:	86 e7       	ldi	r24, 0x76	; 118
			
					if(abs(encoderY.getdistance()) >= 1200){
    27d8:	92 e0       	ldi	r25, 0x02	; 2
    27da:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    27de:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    27e2:	9b 01       	movw	r18, r22
    27e4:	77 23       	and	r23, r23
    27e6:	24 f4       	brge	.+8      	; 0x27f0 <_Z18gorockthegamefieldv+0x562>
    27e8:	22 27       	eor	r18, r18
    27ea:	33 27       	eor	r19, r19
    27ec:	26 1b       	sub	r18, r22
    27ee:	37 0b       	sbc	r19, r23
    27f0:	20 3b       	cpi	r18, 0xB0	; 176
    27f2:	34 40       	sbci	r19, 0x04	; 4
    27f4:	ec f0       	brlt	.+58     	; 0x2830 <_Z18gorockthegamefieldv+0x5a2>
    27f6:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    27f8:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	84 60       	ori	r24, 0x04	; 4
    2800:	80 83       	st	Z, r24
    2802:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT23);
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	80 68       	ori	r24, 0x80	; 128
    280a:	80 83       	st	Z, r24
    280c:	11 c0       	rjmp	.+34     	; 0x2830 <_Z18gorockthegamefieldv+0x5a2>
    280e:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <task7>
				//uart0_puts("\r\n");
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
    2812:	88 23       	and	r24, r24
    2814:	69 f0       	breq	.+26     	; 0x2830 <_Z18gorockthegamefieldv+0x5a2>
    2816:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    281a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    281e:	07 97       	sbiw	r24, 0x07	; 7
    2820:	39 f4       	brne	.+14     	; 0x2830 <_Z18gorockthegamefieldv+0x5a2>
    2822:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    2826:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    282a:	03 97       	sbiw	r24, 0x03	; 3
    282c:	09 f4       	brne	.+2      	; 0x2830 <_Z18gorockthegamefieldv+0x5a2>
    282e:	df c1       	rjmp	.+958    	; 0x2bee <_Z18gorockthegamefieldv+0x960>
    2830:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <GoThrowingZone3>
				ShuttleCockArmGone = false;
				backtoLZ2 = false;
			}
			
			/*if golden rack is given to automatic robot and says goto throwingzone 1*/
			if(GoThrowingZone3 && !task8){
    2834:	88 23       	and	r24, r24
    2836:	09 f4       	brne	.+2      	; 0x283a <_Z18gorockthegamefieldv+0x5ac>
    2838:	4c c0       	rjmp	.+152    	; 0x28d2 <_Z18gorockthegamefieldv+0x644>
    283a:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <task8>
    283e:	81 11       	cpse	r24, r1
    2840:	4c c0       	rjmp	.+152    	; 0x28da <_Z18gorockthegamefieldv+0x64c>
    2842:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2844:	f3 e0       	ldi	r31, 0x03	; 3
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e0       	ldi	r26, 0x00	; 0
    284c:	b0 e4       	ldi	r27, 0x40	; 64
    284e:	85 8b       	std	Z+21, r24	; 0x15
    2850:	96 8b       	std	Z+22, r25	; 0x16
    2852:	a7 8b       	std	Z+23, r26	; 0x17
    2854:	b0 8f       	std	Z+24, r27	; 0x18
    2856:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    2858:	12 8e       	std	Z+26, r1	; 0x1a
    285a:	13 8e       	std	Z+27, r1	; 0x1b
    285c:	14 8e       	std	Z+28, r1	; 0x1c
    285e:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a0 ef       	ldi	r26, 0xF0	; 240
    2864:	b1 e4       	ldi	r27, 0x41	; 65
    2866:	85 8f       	std	Z+29, r24	; 0x1d
    2868:	96 8f       	std	Z+30, r25	; 0x1e
    286a:	a7 8f       	std	Z+31, r26	; 0x1f
    286c:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2.0,0,30);//2.0
				//uart0_puts("going tz3 \t");
				compass.SETPOINT = 181;
    286e:	85 eb       	ldi	r24, 0xB5	; 181
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	97 87       	std	Z+15, r25	; 0x0f
    2874:	86 87       	std	Z+14, r24	; 0x0e
				Move_Yaxis(Throwingzone3.y-50, Front, LZ2toTZ3);
    2876:	46 e9       	ldi	r20, 0x96	; 150
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	62 e0       	ldi	r22, 0x02	; 2
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	8e e1       	ldi	r24, 0x1E	; 30
    2880:	94 e1       	ldi	r25, 0x14	; 20
    2882:	bd da       	rcall	.-2694   	; 0x1dfe <_Z10Move_Yaxisiij>
    2884:	87 e0       	ldi	r24, 0x07	; 7
				//movy(5300,Front,LZ2toTZ3);
				robotState = moving;
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    288c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2890:	86 e7       	ldi	r24, 0x76	; 118
				if(abs(encoderY.getdistance()) >= 4000){
    2892:	92 e0       	ldi	r25, 0x02	; 2
    2894:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2898:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    289c:	9b 01       	movw	r18, r22
    289e:	77 23       	and	r23, r23
    28a0:	24 f4       	brge	.+8      	; 0x28aa <_Z18gorockthegamefieldv+0x61c>
    28a2:	22 27       	eor	r18, r18
    28a4:	33 27       	eor	r19, r19
    28a6:	26 1b       	sub	r18, r22
    28a8:	37 0b       	sbc	r19, r23
    28aa:	20 3a       	cpi	r18, 0xA0	; 160
    28ac:	3f 40       	sbci	r19, 0x0F	; 15
    28ae:	0c f4       	brge	.+2      	; 0x28b2 <_Z18gorockthegamefieldv+0x624>
    28b0:	3d c0       	rjmp	.+122    	; 0x292c <_Z18gorockthegamefieldv+0x69e>
    28b2:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    28b4:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	84 60       	ori	r24, 0x04	; 4
    28bc:	80 83       	st	Z, r24
    28be:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT23);
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	80 68       	ori	r24, 0x80	; 128
    28c6:	80 83       	st	Z, r24
    28c8:	89 e5       	ldi	r24, 0x59	; 89
					linetrackerYjunctionWatch();	
					uart0_puts("interrupt on");
    28ca:	92 e0       	ldi	r25, 0x02	; 2
    28cc:	0e 94 c3 1c 	call	0x3986	; 0x3986 <_Z10uart0_putsPKc>
    28d0:	2d c0       	rjmp	.+90     	; 0x292c <_Z18gorockthegamefieldv+0x69e>
    28d2:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <task8>
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
    28d6:	88 23       	and	r24, r24
    28d8:	49 f1       	breq	.+82     	; 0x292c <_Z18gorockthegamefieldv+0x69e>
    28da:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    28de:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    28e2:	06 97       	sbiw	r24, 0x06	; 6
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <_Z18gorockthegamefieldv+0x65a>
    28e6:	f1 c1       	rjmp	.+994    	; 0x2cca <_Z18gorockthegamefieldv+0xa3c>
    28e8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    28ec:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    28f0:	07 97       	sbiw	r24, 0x07	; 7
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <_Z18gorockthegamefieldv+0x668>
    28f4:	ea c1       	rjmp	.+980    	; 0x2cca <_Z18gorockthegamefieldv+0xa3c>
    28f6:	9e c1       	rjmp	.+828    	; 0x2c34 <_Z18gorockthegamefieldv+0x9a6>
    28f8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    28fc:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2900:	08 97       	sbiw	r24, 0x08	; 8
    2902:	a1 f4       	brne	.+40     	; 0x292c <_Z18gorockthegamefieldv+0x69e>
    2904:	b5 c1       	rjmp	.+874    	; 0x2c70 <_Z18gorockthegamefieldv+0x9e2>
    2906:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_b_Transmit_once>
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    290a:	81 11       	cpse	r24, r1
    290c:	b7 c1       	rjmp	.+878    	; 0x2c7c <_Z18gorockthegamefieldv+0x9ee>
    290e:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <_Z10uart3_getcv>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
					_b_Transmit_once = false;
				}
				receiveAck = uart3_getc();
    2912:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <receiveAck>
    2916:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    2918:	49 f4       	brne	.+18     	; 0x292c <_Z18gorockthegamefieldv+0x69e>
    291a:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ2 = true;
    291c:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <backtoLZ2>
    2920:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <GoThrowingZone3>
					GoThrowingZone3 = false;
    2924:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    2926:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <receiveAck>
    292a:	05 c0       	rjmp	.+10     	; 0x2936 <_Z18gorockthegamefieldv+0x6a8>
    292c:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <backtoLZ2>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ2 && task8 && !task9){
    2930:	88 23       	and	r24, r24
    2932:	09 f4       	brne	.+2      	; 0x2936 <_Z18gorockthegamefieldv+0x6a8>
    2934:	41 c0       	rjmp	.+130    	; 0x29b8 <_Z18gorockthegamefieldv+0x72a>
    2936:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <task8>
    293a:	88 23       	and	r24, r24
    293c:	e9 f1       	breq	.+122    	; 0x29b8 <_Z18gorockthegamefieldv+0x72a>
    293e:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <task9>
    2942:	81 11       	cpse	r24, r1
    2944:	3e c0       	rjmp	.+124    	; 0x29c2 <_Z18gorockthegamefieldv+0x734>
    2946:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2948:	f3 e0       	ldi	r31, 0x03	; 3
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e4       	ldi	r27, 0x40	; 64
    2952:	85 8b       	std	Z+21, r24	; 0x15
    2954:	96 8b       	std	Z+22, r25	; 0x16
    2956:	a7 8b       	std	Z+23, r26	; 0x17
    2958:	b0 8f       	std	Z+24, r27	; 0x18
    295a:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    295c:	12 8e       	std	Z+26, r1	; 0x1a
    295e:	13 8e       	std	Z+27, r1	; 0x1b
    2960:	14 8e       	std	Z+28, r1	; 0x1c
    2962:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a0 ef       	ldi	r26, 0xF0	; 240
    2968:	b1 e4       	ldi	r27, 0x41	; 65
    296a:	85 8f       	std	Z+29, r24	; 0x1d
    296c:	96 8f       	std	Z+30, r25	; 0x1e
    296e:	a7 8f       	std	Z+31, r26	; 0x1f
    2970:	b0 a3       	std	Z+32, r27	; 0x20
    2972:	87 e0       	ldi	r24, 0x07	; 7
				////uart0_puts("back to lz2\t");
				compass.setPid(2.0,0,30);//2.0
				
					//movy(5300,Back,LZ2toTZ3);
					robotState = moving;
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    297a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    297e:	86 e7       	ldi	r24, 0x76	; 118
					if(abs(encoderY.getdistance()) >= 4000){
    2980:	92 e0       	ldi	r25, 0x02	; 2
    2982:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2986:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    298a:	9b 01       	movw	r18, r22
    298c:	77 23       	and	r23, r23
    298e:	24 f4       	brge	.+8      	; 0x2998 <_Z18gorockthegamefieldv+0x70a>
    2990:	22 27       	eor	r18, r18
    2992:	33 27       	eor	r19, r19
    2994:	26 1b       	sub	r18, r22
    2996:	37 0b       	sbc	r19, r23
    2998:	20 3a       	cpi	r18, 0xA0	; 160
    299a:	3f 40       	sbci	r19, 0x0F	; 15
    299c:	0c f4       	brge	.+2      	; 0x29a0 <_Z18gorockthegamefieldv+0x712>
    299e:	9d c1       	rjmp	.+826    	; 0x2cda <_Z18gorockthegamefieldv+0xa4c>
    29a0:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    29a2:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	84 60       	ori	r24, 0x04	; 4
    29aa:	80 83       	st	Z, r24
    29ac:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT23);
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	80 68       	ori	r24, 0x80	; 128
    29b4:	80 83       	st	Z, r24
    29b6:	08 95       	ret
    29b8:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <task9>
					}
				////uart0_puts("\r\n");
			}
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
    29bc:	88 23       	and	r24, r24
    29be:	09 f4       	brne	.+2      	; 0x29c2 <_Z18gorockthegamefieldv+0x734>
    29c0:	8c c1       	rjmp	.+792    	; 0x2cda <_Z18gorockthegamefieldv+0xa4c>
    29c2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    29c6:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    29ca:	07 97       	sbiw	r24, 0x07	; 7
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <_Z18gorockthegamefieldv+0x742>
    29ce:	85 c1       	rjmp	.+778    	; 0x2cda <_Z18gorockthegamefieldv+0xa4c>
    29d0:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
    29d4:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    29d8:	04 97       	sbiw	r24, 0x04	; 4
    29da:	09 f0       	breq	.+2      	; 0x29de <_Z18gorockthegamefieldv+0x750>
    29dc:	7e c1       	rjmp	.+764    	; 0x2cda <_Z18gorockthegamefieldv+0xa4c>
    29de:	53 c1       	rjmp	.+678    	; 0x2c86 <_Z18gorockthegamefieldv+0x9f8>
    29e0:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <task4>

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    29e4:	81 11       	cpse	r24, r1
    29e6:	68 cc       	rjmp	.-1840   	; 0x22b8 <_Z18gorockthegamefieldv+0x2a>
    29e8:	8a cc       	rjmp	.-1772   	; 0x22fe <_Z18gorockthegamefieldv+0x70>
    29ea:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    29ec:	f3 e0       	ldi	r31, 0x03	; 3
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 e0       	ldi	r26, 0x00	; 0
    29f4:	b0 e4       	ldi	r27, 0x40	; 64
    29f6:	85 8b       	std	Z+21, r24	; 0x15
    29f8:	96 8b       	std	Z+22, r25	; 0x16
    29fa:	a7 8b       	std	Z+23, r26	; 0x17
    29fc:	b0 8f       	std	Z+24, r27	; 0x18
    29fe:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    2a00:	12 8e       	std	Z+26, r1	; 0x1a
    2a02:	13 8e       	std	Z+27, r1	; 0x1b
    2a04:	14 8e       	std	Z+28, r1	; 0x1c
    2a06:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	a0 ef       	ldi	r26, 0xF0	; 240
    2a0c:	b1 e4       	ldi	r27, 0x41	; 65
    2a0e:	85 8f       	std	Z+29, r24	; 0x1d
    2a10:	96 8f       	std	Z+30, r25	; 0x1e
    2a12:	a7 8f       	std	Z+31, r26	; 0x1f
    2a14:	b0 a3       	std	Z+32, r27	; 0x20
    2a16:	88 e0       	ldi	r24, 0x08	; 8
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point){	
		compass.setPid(2.0,0,30);
		//uart0_puts("hello\r\n");
		//movx(Throwingzone1.x,Front,STARTZONEtoCORNER);
		movDegree(8);
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 af 0a 	call	0x155e	; 0x155e <_Z9movDegreei>
    2a1e:	87 e0       	ldi	r24, 0x07	; 7
		robotState = moving;
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2a26:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2a2a:	8e e7       	ldi	r24, 0x7E	; 126
		//uart0_puts("going ahead \t");
		if(abs(encoderX.getdistance()) >= 4400){
    2a2c:	92 e0       	ldi	r25, 0x02	; 2
    2a2e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2a32:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    2a36:	9b 01       	movw	r18, r22
    2a38:	77 23       	and	r23, r23
    2a3a:	24 f4       	brge	.+8      	; 0x2a44 <_Z18gorockthegamefieldv+0x7b6>
    2a3c:	22 27       	eor	r18, r18
    2a3e:	33 27       	eor	r19, r19
    2a40:	26 1b       	sub	r18, r22
    2a42:	37 0b       	sbc	r19, r23
    2a44:	20 33       	cpi	r18, 0x30	; 48
    2a46:	31 41       	sbci	r19, 0x11	; 17
    2a48:	0c f0       	brlt	.+2      	; 0x2a4c <_Z18gorockthegamefieldv+0x7be>
    2a4a:	8c cc       	rjmp	.-1768   	; 0x2364 <_Z18gorockthegamefieldv+0xd6>
    2a4c:	fe cc       	rjmp	.-1540   	; 0x244a <_Z18gorockthegamefieldv+0x1bc>
    2a4e:	87 e0       	ldi	r24, 0x07	; 7
	if(ShuttleCockGiven && ShuttleCockArmGone)
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
				robotState = moving;
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2a56:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2a5a:	e1 e2       	ldi	r30, 0x21	; 33
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2a5c:	f3 e0       	ldi	r31, 0x03	; 3
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e0       	ldi	r26, 0x00	; 0
    2a64:	b0 e4       	ldi	r27, 0x40	; 64
    2a66:	85 8b       	std	Z+21, r24	; 0x15
    2a68:	96 8b       	std	Z+22, r25	; 0x16
    2a6a:	a7 8b       	std	Z+23, r26	; 0x17
    2a6c:	b0 8f       	std	Z+24, r27	; 0x18
    2a6e:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    2a70:	12 8e       	std	Z+26, r1	; 0x1a
    2a72:	13 8e       	std	Z+27, r1	; 0x1b
    2a74:	14 8e       	std	Z+28, r1	; 0x1c
    2a76:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 ef       	ldi	r26, 0xF0	; 240
    2a7c:	b1 e4       	ldi	r27, 0x41	; 65
    2a7e:	85 8f       	std	Z+29, r24	; 0x1d
    2a80:	96 8f       	std	Z+30, r25	; 0x1e
    2a82:	a7 8f       	std	Z+31, r26	; 0x1f
    2a84:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2.0,0,30);
				Move_Yaxis(Throwingzone1.y+50,Front,LZ1toTZ1);
    2a86:	44 e6       	ldi	r20, 0x64	; 100
    2a88:	50 e0       	ldi	r21, 0x00	; 0
    2a8a:	62 e0       	ldi	r22, 0x02	; 2
    2a8c:	70 e0       	ldi	r23, 0x00	; 0
    2a8e:	8e e9       	ldi	r24, 0x9E	; 158
    2a90:	97 e0       	ldi	r25, 0x07	; 7
    2a92:	b5 d9       	rcall	.-3222   	; 0x1dfe <_Z10Move_Yaxisiij>
    2a94:	86 e7       	ldi	r24, 0x76	; 118
				//movy(Throwingzone1.y,Front,LZ1toTZ1);
				//uart0_puts("going tz1\t");
				if(abs(encoderY.getdistance()) >= 1600){
    2a96:	92 e0       	ldi	r25, 0x02	; 2
    2a98:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2a9c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__fixsfsi>
    2aa0:	9b 01       	movw	r18, r22
    2aa2:	77 23       	and	r23, r23
    2aa4:	24 f4       	brge	.+8      	; 0x2aae <_Z18gorockthegamefieldv+0x820>
    2aa6:	22 27       	eor	r18, r18
    2aa8:	33 27       	eor	r19, r19
    2aaa:	26 1b       	sub	r18, r22
    2aac:	37 0b       	sbc	r19, r23
    2aae:	20 34       	cpi	r18, 0x40	; 64
    2ab0:	36 40       	sbci	r19, 0x06	; 6
    2ab2:	0c f0       	brlt	.+2      	; 0x2ab6 <_Z18gorockthegamefieldv+0x828>
    2ab4:	e4 cc       	rjmp	.-1592   	; 0x247e <_Z18gorockthegamefieldv+0x1f0>
    2ab6:	00 cd       	rjmp	.-1536   	; 0x24b8 <_Z18gorockthegamefieldv+0x22a>
    2ab8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <task3>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    2abc:	88 23       	and	r24, r24
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <_Z18gorockthegamefieldv+0x834>
    2ac0:	fb cc       	rjmp	.-1546   	; 0x24b8 <_Z18gorockthegamefieldv+0x22a>
    2ac2:	e9 cc       	rjmp	.-1582   	; 0x2496 <_Z18gorockthegamefieldv+0x208>
    2ac4:	ed e6       	ldi	r30, 0x6D	; 109
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	8f 77       	andi	r24, 0x7F	; 127
    2acc:	80 83       	st	Z, r24
    2ace:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
				linetrackerYjunctionWatchOff();
				//uart0_puts("reached throwing zone 1\r\n");
				BrakeMotor();
    2ad2:	82 e0       	ldi	r24, 0x02	; 2
				//uart3_putc('1');
				where = inTZ1;
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    2ada:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
    2ade:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2ae2:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2ae6:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2aea:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2aee:	88 e0       	ldi	r24, 0x08	; 8
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2af6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2afa:	de cc       	rjmp	.-1604   	; 0x24b8 <_Z18gorockthegamefieldv+0x22a>
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
				//uart3_puts("Throwing \r\n");
				Hold_Position();
    2afc:	e8 da       	rcall	.-2608   	; 0x20ce <_Z13Hold_Positionv>
    2afe:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_b_Transmit_once>

				if(_b_Transmit_once)	//Stable_Robot() && 
    2b02:	88 23       	and	r24, r24
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <_Z18gorockthegamefieldv+0x87a>
    2b06:	ea cc       	rjmp	.-1580   	; 0x24dc <_Z18gorockthegamefieldv+0x24e>
    2b08:	e4 cc       	rjmp	.-1592   	; 0x24d2 <_Z18gorockthegamefieldv+0x244>
    2b0a:	ed e6       	ldi	r30, 0x6D	; 109
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	8f 77       	andi	r24, 0x7F	; 127
    2b12:	80 83       	st	Z, r24
    2b14:	85 e0       	ldi	r24, 0x05	; 5
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
				//uart0_puts("REached loading zone 1\r\n");
				linetrackerYjunctionWatchOff();
				where = inLZ1;
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    2b1c:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
    2b20:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
				BrakeMotor();
    2b24:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2b28:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2b2c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2b30:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
    2b34:	88 e0       	ldi	r24, 0x08	; 8
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2b3c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2b40:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <ShuttleCockGiven>
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2b44:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2b48:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <backtoLZ1>
				backtoLZ1 = false;
    2b4c:	8d cd       	rjmp	.-1254   	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    2b4e:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <gotoLZ2>
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2b52:	81 11       	cpse	r24, r1
    2b54:	34 cd       	rjmp	.-1432   	; 0x25be <_Z18gorockthegamefieldv+0x330>
    2b56:	77 cd       	rjmp	.-1298   	; 0x2646 <_Z18gorockthegamefieldv+0x3b8>
    2b58:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <gotoLZ2>
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
				//uart0_puts("reached loading zone 2\r\n");
				gotoLZ2 = false;
    2b5c:	eb e6       	ldi	r30, 0x6B	; 107
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8f 7e       	andi	r24, 0xEF	; 239
    2b64:	80 83       	st	Z, r24
    2b66:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
				linetrackerXjunctionWatchOff();
				BrakeMotor();
    2b6a:	86 e0       	ldi	r24, 0x06	; 6
				where = inLZ2;
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    2b72:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
    2b76:	88 e0       	ldi	r24, 0x08	; 8
				robotState = notmoving;
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2b7e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2b82:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2b86:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2b8a:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2b8e:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
    2b92:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <ShuttleCockGiven>
				encoderX.resetCount();
				encoderY.resetCount();
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2b96:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2b9a:	66 cd       	rjmp	.-1332   	; 0x2668 <_Z18gorockthegamefieldv+0x3da>
    2b9c:	83 e0       	ldi	r24, 0x03	; 3

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
				//uart0_puts("Reached tz2 \r\n");
				where = inTZ2;
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    2ba4:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
    2ba8:	ed e6       	ldi	r30, 0x6D	; 109
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	8f 77       	andi	r24, 0x7F	; 127
    2bb0:	80 83       	st	Z, r24
    2bb2:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2bb6:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2bba:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2bbe:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
    2bc2:	88 e0       	ldi	r24, 0x08	; 8
				linetrackerYjunctionWatchOff();
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2bca:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				BrakeMotor();
    2bce:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
			if(where == inTZ2 && robotState == notmoving){
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				velocity_robot[0] =0;
    2bd2:	a7 cd       	rjmp	.-1202   	; 0x2722 <_Z18gorockthegamefieldv+0x494>
    2bd4:	e8 ea       	ldi	r30, 0xA8	; 168
    2bd6:	f3 e0       	ldi	r31, 0x03	; 3
    2bd8:	11 82       	std	Z+1, r1	; 0x01
				velocity_robot[1]=0;
    2bda:	10 82       	st	Z, r1
    2bdc:	13 82       	std	Z+3, r1	; 0x03
				Hold_Position();
    2bde:	12 82       	std	Z+2, r1	; 0x02
    2be0:	76 da       	rcall	.-2836   	; 0x20ce <_Z13Hold_Positionv>
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
    2be2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_b_Transmit_once>
    2be6:	88 23       	and	r24, r24
    2be8:	09 f4       	brne	.+2      	; 0x2bec <_Z18gorockthegamefieldv+0x95e>
    2bea:	b5 cd       	rjmp	.-1174   	; 0x2756 <_Z18gorockthegamefieldv+0x4c8>
    2bec:	a7 cd       	rjmp	.-1202   	; 0x273c <_Z18gorockthegamefieldv+0x4ae>
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
				Hold_Position();
    2bee:	6f da       	rcall	.-2850   	; 0x20ce <_Z13Hold_Positionv>
    2bf0:	ed e6       	ldi	r30, 0x6D	; 109
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	8f 77       	andi	r24, 0x7F	; 127
    2bf8:	80 83       	st	Z, r24
    2bfa:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
				//uart0_puts("reached loading zone 2 \r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2bfe:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2c02:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2c06:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2c0a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
    2c0e:	86 e0       	ldi	r24, 0x06	; 6
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    2c16:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
    2c1a:	88 e0       	ldi	r24, 0x08	; 8
				robotState = notmoving;
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2c22:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c26:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <ShuttleCockGiven>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2c2a:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2c2e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <backtoLZ2>
				backtoLZ2 = false;
    2c32:	fe cd       	rjmp	.-1028   	; 0x2830 <_Z18gorockthegamefieldv+0x5a2>
    2c34:	ed e6       	ldi	r30, 0x6D	; 109
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8f 77       	andi	r24, 0x7F	; 127
    2c3c:	80 83       	st	Z, r24
    2c3e:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
				//uart0_puts("reached tz3\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2c42:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2c46:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2c4a:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2c4e:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2c52:	88 e0       	ldi	r24, 0x08	; 8
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2c5a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				GoThrowingZone3 = false;
    2c5e:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <GoThrowingZone3>
				where = inTZ3;
    2c62:	84 e0       	ldi	r24, 0x04	; 4
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    2c6a:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
				//velocity_robot[0] = velocity_robot[1] = velocity_robot[2] = 0;
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
    2c6e:	5e ce       	rjmp	.-836    	; 0x292c <_Z18gorockthegamefieldv+0x69e>
    2c70:	2e da       	rcall	.-2980   	; 0x20ce <_Z13Hold_Positionv>
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2c72:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z21Goto_Fence_And_Detectv>
    2c76:	81 11       	cpse	r24, r1
    2c78:	46 ce       	rjmp	.-884    	; 0x2906 <_Z18gorockthegamefieldv+0x678>
    2c7a:	49 ce       	rjmp	.-878    	; 0x290e <_Z18gorockthegamefieldv+0x680>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
    2c7c:	83 e3       	ldi	r24, 0x33	; 51
    2c7e:	ef d7       	rcall	.+4062   	; 0x3c5e <_Z10uart3_putch>
    2c80:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <_b_Transmit_once>
					_b_Transmit_once = false;
    2c84:	44 ce       	rjmp	.-888    	; 0x290e <_Z18gorockthegamefieldv+0x680>
    2c86:	ed e6       	ldi	r30, 0x6D	; 109
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8f 77       	andi	r24, 0x7F	; 127
    2c8e:	80 83       	st	Z, r24
    2c90:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
				////uart0_puts("reached loading zone 2\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2c94:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2c98:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2c9c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2ca0:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
    2ca4:	86 e0       	ldi	r24, 0x06	; 6
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <where+0x1>
    2cac:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <where>
    2cb0:	88 e0       	ldi	r24, 0x08	; 8
				robotState = notmoving;
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2cb8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2cbc:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <ShuttleCockGiven>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2cc0:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    2cc4:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <backtoLZ2>
				backtoLZ2 = false;
    2cc8:	08 95       	ret
    2cca:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <where>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2cce:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <where+0x1>
    2cd2:	04 97       	sbiw	r24, 0x04	; 4
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <_Z18gorockthegamefieldv+0xa4a>
    2cd6:	2a ce       	rjmp	.-940    	; 0x292c <_Z18gorockthegamefieldv+0x69e>
    2cd8:	0f ce       	rjmp	.-994    	; 0x28f8 <_Z18gorockthegamefieldv+0x66a>
    2cda:	08 95       	ret

00002cdc <__vector_9>:
    2cdc:	1f 92       	push	r1
}


/*When Junction on Linetracker X is deteced*/
ISR(PCINT0_vect)		
{
    2cde:	0f 92       	push	r0
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	0f 92       	push	r0
    2ce4:	11 24       	eor	r1, r1
    2ce6:	0b b6       	in	r0, 0x3b	; 59
    2ce8:	0f 92       	push	r0
    2cea:	2f 93       	push	r18
    2cec:	3f 93       	push	r19
    2cee:	4f 93       	push	r20
    2cf0:	5f 93       	push	r21
    2cf2:	6f 93       	push	r22
    2cf4:	7f 93       	push	r23
    2cf6:	8f 93       	push	r24
    2cf8:	9f 93       	push	r25
    2cfa:	af 93       	push	r26
    2cfc:	bf 93       	push	r27
    2cfe:	ef 93       	push	r30
    2d00:	ff 93       	push	r31
	if(!task1){
    2d02:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <task1>
    2d06:	81 11       	cpse	r24, r1
    2d08:	06 c0       	rjmp	.+12     	; 0x2d16 <__vector_9+0x3a>
		task1 = true;			//reached to corner of loading zone1
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <task1>
		FlagChangeSetpointCompass = true;
    2d10:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <FlagChangeSetpointCompass>
    2d14:	22 c0       	rjmp	.+68     	; 0x2d5a <__vector_9+0x7e>
	}
	else if(!task5){
    2d16:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <task5>
    2d1a:	81 11       	cpse	r24, r1
    2d1c:	08 c0       	rjmp	.+16     	; 0x2d2e <__vector_9+0x52>
		task5 = true;			//reached loading zone 2 from loading zone 1
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <task5>
		FlagChangeSetpointCompass = true;
    2d24:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <FlagChangeSetpointCompass>
		BrakeMotor();
    2d28:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
    2d2c:	16 c0       	rjmp	.+44     	; 0x2d5a <__vector_9+0x7e>
	}
	else if(!xJunctionMeetFromTZ2){
    2d2e:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <xJunctionMeetFromTZ2>
    2d32:	81 11       	cpse	r24, r1
    2d34:	12 c0       	rjmp	.+36     	; 0x2d5a <__vector_9+0x7e>
		xJunctionMeetFromTZ2 = true;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <xJunctionMeetFromTZ2>
		BrakeMotor();
    2d3c:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2d40:	eb e6       	ldi	r30, 0x6B	; 107
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	8f 7e       	andi	r24, 0xEF	; 239
    2d48:	80 83       	st	Z, r24
    2d4a:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2d4e:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
    2d52:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2d56:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
		linetrackerXjunctionWatchOff();
		encoderX.resetCount();
		encoderY.resetCount();
	}
}
    2d5a:	ff 91       	pop	r31
    2d5c:	ef 91       	pop	r30
    2d5e:	bf 91       	pop	r27
    2d60:	af 91       	pop	r26
    2d62:	9f 91       	pop	r25
    2d64:	8f 91       	pop	r24
    2d66:	7f 91       	pop	r23
    2d68:	6f 91       	pop	r22
    2d6a:	5f 91       	pop	r21
    2d6c:	4f 91       	pop	r20
    2d6e:	3f 91       	pop	r19
    2d70:	2f 91       	pop	r18
    2d72:	0f 90       	pop	r0
    2d74:	0b be       	out	0x3b, r0	; 59
    2d76:	0f 90       	pop	r0
    2d78:	0f be       	out	0x3f, r0	; 63
    2d7a:	0f 90       	pop	r0
    2d7c:	1f 90       	pop	r1
    2d7e:	18 95       	reti

00002d80 <__vector_11>:


/*When Junction on Linetracker Y is detected*/
ISR(PCINT2_vect)
{
    2d80:	1f 92       	push	r1
    2d82:	0f 92       	push	r0
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	0f 92       	push	r0
    2d88:	11 24       	eor	r1, r1
    2d8a:	0b b6       	in	r0, 0x3b	; 59
    2d8c:	0f 92       	push	r0
    2d8e:	2f 93       	push	r18
    2d90:	3f 93       	push	r19
    2d92:	4f 93       	push	r20
    2d94:	5f 93       	push	r21
    2d96:	6f 93       	push	r22
    2d98:	7f 93       	push	r23
    2d9a:	8f 93       	push	r24
    2d9c:	9f 93       	push	r25
    2d9e:	af 93       	push	r26
    2da0:	bf 93       	push	r27
    2da2:	ef 93       	push	r30
    2da4:	ff 93       	push	r31
	if(!task2){
    2da6:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <task2>
    2daa:	81 11       	cpse	r24, r1
    2dac:	06 c0       	rjmp	.+12     	; 0x2dba <__vector_11+0x3a>
		BrakeMotor();
    2dae:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
		task2 = true;		//reached to loading zone 1
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <task2>
    2db8:	41 c0       	rjmp	.+130    	; 0x2e3c <__vector_11+0xbc>
	}
	else if(!task3){
    2dba:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <task3>
    2dbe:	81 11       	cpse	r24, r1
    2dc0:	08 c0       	rjmp	.+16     	; 0x2dd2 <__vector_11+0x52>
		_b_Transmit_once = true;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_b_Transmit_once>
		task3 = true;		//reached throwing zone 1
    2dc8:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <task3>
		BrakeMotor();
    2dcc:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
    2dd0:	35 c0       	rjmp	.+106    	; 0x2e3c <__vector_11+0xbc>
	}
		
	else if(!task4){
    2dd2:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <task4>
    2dd6:	81 11       	cpse	r24, r1
    2dd8:	06 c0       	rjmp	.+12     	; 0x2de6 <__vector_11+0x66>
		task4 = true;		//reached loading zone 1 from throwing zone 1
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <task4>
		 BrakeMotor();
    2de0:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
    2de4:	2b c0       	rjmp	.+86     	; 0x2e3c <__vector_11+0xbc>
	}
	else if(!task6){
    2de6:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <task6>
    2dea:	81 11       	cpse	r24, r1
    2dec:	08 c0       	rjmp	.+16     	; 0x2dfe <__vector_11+0x7e>
		_b_Transmit_once = true;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_b_Transmit_once>
		task6 = true;		//reached throwing zone 2
    2df4:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <task6>
		BrakeMotor();
    2df8:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
    2dfc:	1f c0       	rjmp	.+62     	; 0x2e3c <__vector_11+0xbc>
	}
		
	else if(!task7){
    2dfe:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <task7>
    2e02:	81 11       	cpse	r24, r1
    2e04:	06 c0       	rjmp	.+12     	; 0x2e12 <__vector_11+0x92>
		task7 = true;		//reached loading zone 2 from throwing zone 2
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <task7>
		BrakeMotor();
    2e0c:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
    2e10:	15 c0       	rjmp	.+42     	; 0x2e3c <__vector_11+0xbc>
	}
	else if(!task8){
    2e12:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <task8>
    2e16:	81 11       	cpse	r24, r1
    2e18:	08 c0       	rjmp	.+16     	; 0x2e2a <__vector_11+0xaa>
		_b_Transmit_once = true;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_b_Transmit_once>
		task8 = true;		//reached throwing zone 3
    2e20:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <task8>
		BrakeMotor();
    2e24:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
    2e28:	09 c0       	rjmp	.+18     	; 0x2e3c <__vector_11+0xbc>
	}
	else if(!task9){
    2e2a:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <task9>
    2e2e:	81 11       	cpse	r24, r1
    2e30:	05 c0       	rjmp	.+10     	; 0x2e3c <__vector_11+0xbc>
		task9 = true;		//reached loading zone 2 from throwing zone 3
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <task9>
		BrakeMotor();
    2e38:	0e 94 d6 05 	call	0xbac	; 0xbac <_Z10BrakeMotorv>
	}
}
    2e3c:	ff 91       	pop	r31
    2e3e:	ef 91       	pop	r30
    2e40:	bf 91       	pop	r27
    2e42:	af 91       	pop	r26
    2e44:	9f 91       	pop	r25
    2e46:	8f 91       	pop	r24
    2e48:	7f 91       	pop	r23
    2e4a:	6f 91       	pop	r22
    2e4c:	5f 91       	pop	r21
    2e4e:	4f 91       	pop	r20
    2e50:	3f 91       	pop	r19
    2e52:	2f 91       	pop	r18
    2e54:	0f 90       	pop	r0
    2e56:	0b be       	out	0x3b, r0	; 59
    2e58:	0f 90       	pop	r0
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	0f 90       	pop	r0
    2e5e:	1f 90       	pop	r1
    2e60:	18 95       	reti

00002e62 <main>:
////////////////////////////////////////////

int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
	INPUT(SHUTTLECOCKPIN);
    2e62:	ea e0       	ldi	r30, 0x0A	; 10
    2e64:	f1 e0       	ldi	r31, 0x01	; 1
    2e66:	80 81       	ld	r24, Z
    2e68:	8f 7e       	andi	r24, 0xEF	; 239
    2e6a:	80 83       	st	Z, r24
	INPUT(ZONEPIN);
    2e6c:	80 81       	ld	r24, Z
    2e6e:	8f 7b       	andi	r24, 0xBF	; 191
    2e70:	80 83       	st	Z, r24
 	SET(SHUTTLECOCKPIN);
    2e72:	eb e0       	ldi	r30, 0x0B	; 11
    2e74:	f1 e0       	ldi	r31, 0x01	; 1
    2e76:	80 81       	ld	r24, Z
    2e78:	80 61       	ori	r24, 0x10	; 16
    2e7a:	80 83       	st	Z, r24
 	SET(ZONEPIN);
    2e7c:	80 81       	ld	r24, Z
    2e7e:	80 64       	ori	r24, 0x40	; 64
    2e80:	80 83       	st	Z, r24
	///////PULL DOWN RACK PIN 
	INPUT(RACKPIN);
    2e82:	85 98       	cbi	0x10, 5	; 16
	CLEAR(RACKPIN);
    2e84:	8d 98       	cbi	0x11, 5	; 17
	
	///Turn internal pullup for limit switch pin
	INPUT(RIGHT_LIMIT_SW);
    2e86:	81 98       	cbi	0x10, 1	; 16
	INPUT(LEFT_LIMIT_SW);
    2e88:	82 98       	cbi	0x10, 2	; 16
	SET(RIGHT_LIMIT_SW);
    2e8a:	89 9a       	sbi	0x11, 1	; 17
	SET(LEFT_LIMIT_SW);
    2e8c:	8a 9a       	sbi	0x11, 2	; 17
	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
	DDRK |= (1<<PK0);
    2e8e:	e7 e0       	ldi	r30, 0x07	; 7
    2e90:	f1 e0       	ldi	r31, 0x01	; 1
    2e92:	80 81       	ld	r24, Z
    2e94:	81 60       	ori	r24, 0x01	; 1
    2e96:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK0); 
    2e98:	e8 e0       	ldi	r30, 0x08	; 8
    2e9a:	f1 e0       	ldi	r31, 0x01	; 1
    2e9c:	80 81       	ld	r24, Z
    2e9e:	8e 7f       	andi	r24, 0xFE	; 254
    2ea0:	80 83       	st	Z, r24
	/// INITIALIZE ALL THE UART
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    2ea2:	87 e6       	ldi	r24, 0x67	; 103
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	41 d5       	rcall	.+2690   	; 0x392a <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
    2ea8:	89 e1       	ldi	r24, 0x19	; 25
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	15 d6       	rcall	.+3114   	; 0x3ad8 <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(38400,F_CPU));
    2eae:	89 e1       	ldi	r24, 0x19	; 25
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	a1 d6       	rcall	.+3394   	; 0x3bf6 <_Z10uart3_initj>
	//INITIALIZE EVERYTHING ELSE
	initializeAll();
    2eb4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13initializeAllv>
		
// 		rcvdata = uart0_getc();
// 		uart3_putc(rcvdata);
	//	uart0_putc(rcvdata);

 		gorockthegamefield();
    2eb8:	78 94       	sei
    2eba:	e9 d9       	rcall	.-3118   	; 0x228e <_Z18gorockthegamefieldv>
// 		
// 		reactConditionOfLineLeftFront();
// 		reactConditionOfLineLeftBack();
// 		
// 		
 		calculatevel();
    2ebc:	0e 94 41 08 	call	0x1082	; 0x1082 <_Z12calculatevelv>
    2ec0:	fc cf       	rjmp	.-8      	; 0x2eba <main+0x58>

00002ec2 <_GLOBAL__sub_I_compassPID>:
#include "hmccompass.h"
#include "MPU6050.h"
#include "General-function.h"


static MPU6050 mpu;
    2ec2:	8a ee       	ldi	r24, 0xEA	; 234
    2ec4:	93 e0       	ldi	r25, 0x03	; 3
    2ec6:	3d d0       	rcall	.+122    	; 0x2f42 <_ZN7MPU6050C1Ev>
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    2ec8:	e3 e6       	ldi	r30, 0x63	; 99
    2eca:	f3 e0       	ldi	r31, 0x03	; 3
    2ecc:	10 86       	std	Z+8, r1	; 0x08
    2ece:	11 86       	std	Z+9, r1	; 0x09
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	80 8b       	std	Z+16, r24	; 0x10
    2ed4:	e2 e4       	ldi	r30, 0x42	; 66
    2ed6:	f3 e0       	ldi	r31, 0x03	; 3
    2ed8:	10 86       	std	Z+8, r1	; 0x08
    2eda:	11 86       	std	Z+9, r1	; 0x09
    2edc:	80 8b       	std	Z+16, r24	; 0x10
    2ede:	e1 e2       	ldi	r30, 0x21	; 33
    2ee0:	f3 e0       	ldi	r31, 0x03	; 3
    2ee2:	10 86       	std	Z+8, r1	; 0x08
    2ee4:	11 86       	std	Z+9, r1	; 0x09
    2ee6:	80 8b       	std	Z+16, r24	; 0x10
    2ee8:	e0 e0       	ldi	r30, 0x00	; 0
    2eea:	f3 e0       	ldi	r31, 0x03	; 3
    2eec:	10 86       	std	Z+8, r1	; 0x08
    2eee:	11 86       	std	Z+9, r1	; 0x09
    2ef0:	80 8b       	std	Z+16, r24	; 0x10
    2ef2:	ef ed       	ldi	r30, 0xDF	; 223
    2ef4:	f2 e0       	ldi	r31, 0x02	; 2
    2ef6:	10 86       	std	Z+8, r1	; 0x08
    2ef8:	11 86       	std	Z+9, r1	; 0x09
    2efa:	80 8b       	std	Z+16, r24	; 0x10
    2efc:	ee eb       	ldi	r30, 0xBE	; 190
    2efe:	f2 e0       	ldi	r31, 0x02	; 2
    2f00:	10 86       	std	Z+8, r1	; 0x08
    2f02:	11 86       	std	Z+9, r1	; 0x09
    2f04:	80 8b       	std	Z+16, r24	; 0x10
    2f06:	ed e9       	ldi	r30, 0x9D	; 157
    2f08:	f2 e0       	ldi	r31, 0x02	; 2
    2f0a:	10 86       	std	Z+8, r1	; 0x08
    2f0c:	11 86       	std	Z+9, r1	; 0x09
    2f0e:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    2f10:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <encoderX+0x1>
    2f14:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <encoderX>
			Init_encoder_interrupt();
    2f18:	8e e7       	ldi	r24, 0x7E	; 126
    2f1a:	92 e0       	ldi	r25, 0x02	; 2
    2f1c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    2f20:	8e e7       	ldi	r24, 0x7E	; 126
    2f22:	92 e0       	ldi	r25, 0x02	; 2
    2f24:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    2f28:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
    2f2c:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
			Init_encoder_interrupt();
    2f30:	86 e7       	ldi	r24, 0x76	; 118
    2f32:	92 e0       	ldi	r25, 0x02	; 2
    2f34:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    2f38:	86 e7       	ldi	r24, 0x76	; 118
    2f3a:	92 e0       	ldi	r25, 0x02	; 2
    2f3c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
    2f40:	08 95       	ret

00002f42 <_ZN7MPU6050C1Ev>:

// Get current threshold value
uint8_t MPU6050::getThreshold(void)
{
	return actualThreshold;
}
    2f42:	fc 01       	movw	r30, r24
    2f44:	14 ae       	std	Z+60, r1	; 0x3c
    2f46:	15 ae       	std	Z+61, r1	; 0x3d
    2f48:	16 ae       	std	Z+62, r1	; 0x3e
    2f4a:	17 ae       	std	Z+63, r1	; 0x3f
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	a0 5c       	subi	r26, 0xC0	; 192
    2f50:	bf 4f       	sbci	r27, 0xFF	; 255
    2f52:	1d 92       	st	X+, r1
    2f54:	1d 92       	st	X+, r1
    2f56:	1d 92       	st	X+, r1
    2f58:	1c 92       	st	X, r1
    2f5a:	13 97       	sbiw	r26, 0x03	; 3
    2f5c:	14 96       	adiw	r26, 0x04	; 4
    2f5e:	1d 92       	st	X+, r1
    2f60:	1d 92       	st	X+, r1
    2f62:	1d 92       	st	X+, r1
    2f64:	1c 92       	st	X, r1
    2f66:	13 97       	sbiw	r26, 0x03	; 3
    2f68:	d4 96       	adiw	r26, 0x34	; 52
    2f6a:	1c 92       	st	X, r1
    2f6c:	d0 97       	sbiw	r26, 0x30	; 48
    2f6e:	1d 92       	st	X+, r1
    2f70:	1d 92       	st	X+, r1
    2f72:	1d 92       	st	X+, r1
    2f74:	1c 92       	st	X, r1
    2f76:	13 97       	sbiw	r26, 0x03	; 3
    2f78:	14 96       	adiw	r26, 0x04	; 4
    2f7a:	1d 92       	st	X+, r1
    2f7c:	1d 92       	st	X+, r1
    2f7e:	1d 92       	st	X+, r1
    2f80:	1c 92       	st	X, r1
    2f82:	13 97       	sbiw	r26, 0x03	; 3
    2f84:	14 96       	adiw	r26, 0x04	; 4
    2f86:	1d 92       	st	X+, r1
    2f88:	1d 92       	st	X+, r1
    2f8a:	1d 92       	st	X+, r1
    2f8c:	1c 92       	st	X, r1
    2f8e:	13 97       	sbiw	r26, 0x03	; 3
    2f90:	10 aa       	std	Z+48, r1	; 0x30
    2f92:	11 aa       	std	Z+49, r1	; 0x31
    2f94:	12 aa       	std	Z+50, r1	; 0x32
    2f96:	13 aa       	std	Z+51, r1	; 0x33
    2f98:	14 aa       	std	Z+52, r1	; 0x34
    2f9a:	15 aa       	std	Z+53, r1	; 0x35
    2f9c:	16 aa       	std	Z+54, r1	; 0x36
    2f9e:	17 aa       	std	Z+55, r1	; 0x37
    2fa0:	10 ae       	std	Z+56, r1	; 0x38
    2fa2:	11 ae       	std	Z+57, r1	; 0x39
    2fa4:	12 ae       	std	Z+58, r1	; 0x3a
    2fa6:	13 ae       	std	Z+59, r1	; 0x3b
    2fa8:	94 96       	adiw	r26, 0x24	; 36
    2faa:	1d 92       	st	X+, r1
    2fac:	1d 92       	st	X+, r1
    2fae:	1d 92       	st	X+, r1
    2fb0:	1c 92       	st	X, r1
    2fb2:	13 97       	sbiw	r26, 0x03	; 3
    2fb4:	18 97       	sbiw	r26, 0x08	; 8
    2fb6:	4f e3       	ldi	r20, 0x3F	; 63
    2fb8:	5e e1       	ldi	r21, 0x1E	; 30
    2fba:	6a ef       	ldi	r22, 0xFA	; 250
    2fbc:	7b e3       	ldi	r23, 0x3B	; 59
    2fbe:	4d 93       	st	X+, r20
    2fc0:	5d 93       	st	X+, r21
    2fc2:	6d 93       	st	X+, r22
    2fc4:	7c 93       	st	X, r23
    2fc6:	13 97       	sbiw	r26, 0x03	; 3
    2fc8:	e0 59       	subi	r30, 0x90	; 144
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 e4       	ldi	r24, 0x40	; 64
    2fce:	9a ed       	ldi	r25, 0xDA	; 218
    2fd0:	af e7       	ldi	r26, 0x7F	; 127
    2fd2:	b8 e3       	ldi	r27, 0x38	; 56
    2fd4:	80 83       	st	Z, r24
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	a2 83       	std	Z+2, r26	; 0x02
    2fda:	b3 83       	std	Z+3, r27	; 0x03
    2fdc:	08 95       	ret

00002fde <_ZN7MPU60504InitEv>:
    2fde:	2f ef       	ldi	r18, 0xFF	; 255
    2fe0:	82 e5       	ldi	r24, 0x52	; 82
    2fe2:	97 e0       	ldi	r25, 0x07	; 7
    2fe4:	21 50       	subi	r18, 0x01	; 1
    2fe6:	80 40       	sbci	r24, 0x00	; 0
    2fe8:	90 40       	sbci	r25, 0x00	; 0
    2fea:	e1 f7       	brne	.-8      	; 0x2fe4 <_ZN7MPU60504InitEv+0x6>
    2fec:	00 c0       	rjmp	.+0      	; 0x2fee <_ZN7MPU60504InitEv+0x10>
    2fee:	00 00       	nop
    2ff0:	80 ed       	ldi	r24, 0xD0	; 208
    2ff2:	a9 d3       	rcall	.+1874   	; 0x3746 <_Z9i2c_starth>
    2ff4:	8b e6       	ldi	r24, 0x6B	; 107
    2ff6:	14 d4       	rcall	.+2088   	; 0x3820 <_Z9i2c_writeh>
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	12 d4       	rcall	.+2084   	; 0x3820 <_Z9i2c_writeh>
    2ffc:	cd d3       	rcall	.+1946   	; 0x3798 <_Z8i2c_stopv>
    2ffe:	80 ed       	ldi	r24, 0xD0	; 208
    3000:	a2 d3       	rcall	.+1860   	; 0x3746 <_Z9i2c_starth>
    3002:	89 e1       	ldi	r24, 0x19	; 25
    3004:	0d d4       	rcall	.+2074   	; 0x3820 <_Z9i2c_writeh>
    3006:	89 e1       	ldi	r24, 0x19	; 25
    3008:	0b d4       	rcall	.+2070   	; 0x3820 <_Z9i2c_writeh>
    300a:	c6 d3       	rcall	.+1932   	; 0x3798 <_Z8i2c_stopv>
    300c:	80 ed       	ldi	r24, 0xD0	; 208
    300e:	9b d3       	rcall	.+1846   	; 0x3746 <_Z9i2c_starth>
    3010:	8a e1       	ldi	r24, 0x1A	; 26
    3012:	06 d4       	rcall	.+2060   	; 0x3820 <_Z9i2c_writeh>
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	04 d4       	rcall	.+2056   	; 0x3820 <_Z9i2c_writeh>
    3018:	bf d3       	rcall	.+1918   	; 0x3798 <_Z8i2c_stopv>
    301a:	80 ed       	ldi	r24, 0xD0	; 208
    301c:	94 d3       	rcall	.+1832   	; 0x3746 <_Z9i2c_starth>
    301e:	8b e1       	ldi	r24, 0x1B	; 27
    3020:	ff d3       	rcall	.+2046   	; 0x3820 <_Z9i2c_writeh>
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	fd d3       	rcall	.+2042   	; 0x3820 <_Z9i2c_writeh>
    3026:	b8 d3       	rcall	.+1904   	; 0x3798 <_Z8i2c_stopv>
    3028:	80 ed       	ldi	r24, 0xD0	; 208
    302a:	8d d3       	rcall	.+1818   	; 0x3746 <_Z9i2c_starth>
    302c:	88 e3       	ldi	r24, 0x38	; 56
    302e:	f8 d3       	rcall	.+2032   	; 0x3820 <_Z9i2c_writeh>
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	f6 d3       	rcall	.+2028   	; 0x3820 <_Z9i2c_writeh>
    3034:	b1 d3       	rcall	.+1890   	; 0x3798 <_Z8i2c_stopv>
    3036:	80 ed       	ldi	r24, 0xD0	; 208
    3038:	86 d3       	rcall	.+1804   	; 0x3746 <_Z9i2c_starth>
    303a:	8c e1       	ldi	r24, 0x1C	; 28
    303c:	f1 d3       	rcall	.+2018   	; 0x3820 <_Z9i2c_writeh>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	ef d3       	rcall	.+2014   	; 0x3820 <_Z9i2c_writeh>
    3042:	aa c3       	rjmp	.+1876   	; 0x3798 <_Z8i2c_stopv>
    3044:	08 95       	ret

00003046 <_ZN7MPU605017startReadLocationEh>:
    3046:	cf 93       	push	r28
    3048:	c6 2f       	mov	r28, r22
    304a:	80 ed       	ldi	r24, 0xD0	; 208
    304c:	ae d3       	rcall	.+1884   	; 0x37aa <_Z14i2c_start_waith>
    304e:	8c 2f       	mov	r24, r28
    3050:	e7 d3       	rcall	.+1998   	; 0x3820 <_Z9i2c_writeh>
    3052:	81 ed       	ldi	r24, 0xD1	; 209
    3054:	9f d3       	rcall	.+1854   	; 0x3794 <_Z13i2c_rep_starth>
    3056:	cf 91       	pop	r28
    3058:	08 95       	ret

0000305a <_ZN7MPU605012readRawAccelEv>:
    305a:	af 92       	push	r10
    305c:	bf 92       	push	r11
    305e:	cf 92       	push	r12
    3060:	df 92       	push	r13
    3062:	ef 92       	push	r14
    3064:	ff 92       	push	r15
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	8c 01       	movw	r16, r24
    3070:	eb 01       	movw	r28, r22
    3072:	6b e3       	ldi	r22, 0x3B	; 59
    3074:	ce 01       	movw	r24, r28
    3076:	e7 df       	rcall	.-50     	; 0x3046 <_ZN7MPU605017startReadLocationEh>
    3078:	e5 d3       	rcall	.+1994   	; 0x3844 <_Z11i2c_readAckv>
    307a:	a8 2e       	mov	r10, r24
    307c:	e3 d3       	rcall	.+1990   	; 0x3844 <_Z11i2c_readAckv>
    307e:	b8 2e       	mov	r11, r24
    3080:	e1 d3       	rcall	.+1986   	; 0x3844 <_Z11i2c_readAckv>
    3082:	c8 2e       	mov	r12, r24
    3084:	df d3       	rcall	.+1982   	; 0x3844 <_Z11i2c_readAckv>
    3086:	e8 2e       	mov	r14, r24
    3088:	dd d3       	rcall	.+1978   	; 0x3844 <_Z11i2c_readAckv>
    308a:	d8 2e       	mov	r13, r24
    308c:	e6 d3       	rcall	.+1996   	; 0x385a <_Z11i2c_readNakv>
    308e:	f8 2e       	mov	r15, r24
    3090:	6b 2d       	mov	r22, r11
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	7a 29       	or	r23, r10
    3096:	07 2e       	mov	r0, r23
    3098:	00 0c       	add	r0, r0
    309a:	88 0b       	sbc	r24, r24
    309c:	99 0b       	sbc	r25, r25
    309e:	5d d7       	rcall	.+3770   	; 0x3f5a <__floatsisf>
    30a0:	fe 01       	movw	r30, r28
    30a2:	e8 5b       	subi	r30, 0xB8	; 184
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	20 81       	ld	r18, Z
    30a8:	31 81       	ldd	r19, Z+1	; 0x01
    30aa:	42 81       	ldd	r20, Z+2	; 0x02
    30ac:	53 81       	ldd	r21, Z+3	; 0x03
    30ae:	ec d5       	rcall	.+3032   	; 0x3c88 <__subsf3>
    30b0:	68 83       	st	Y, r22
    30b2:	79 83       	std	Y+1, r23	; 0x01
    30b4:	8a 83       	std	Y+2, r24	; 0x02
    30b6:	9b 83       	std	Y+3, r25	; 0x03
    30b8:	6e 2d       	mov	r22, r14
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	7c 29       	or	r23, r12
    30be:	07 2e       	mov	r0, r23
    30c0:	00 0c       	add	r0, r0
    30c2:	88 0b       	sbc	r24, r24
    30c4:	99 0b       	sbc	r25, r25
    30c6:	49 d7       	rcall	.+3730   	; 0x3f5a <__floatsisf>
    30c8:	fe 01       	movw	r30, r28
    30ca:	e4 5b       	subi	r30, 0xB4	; 180
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	20 81       	ld	r18, Z
    30d0:	31 81       	ldd	r19, Z+1	; 0x01
    30d2:	42 81       	ldd	r20, Z+2	; 0x02
    30d4:	53 81       	ldd	r21, Z+3	; 0x03
    30d6:	d8 d5       	rcall	.+2992   	; 0x3c88 <__subsf3>
    30d8:	6c 83       	std	Y+4, r22	; 0x04
    30da:	7d 83       	std	Y+5, r23	; 0x05
    30dc:	8e 83       	std	Y+6, r24	; 0x06
    30de:	9f 83       	std	Y+7, r25	; 0x07
    30e0:	6f 2d       	mov	r22, r15
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	7d 29       	or	r23, r13
    30e6:	07 2e       	mov	r0, r23
    30e8:	00 0c       	add	r0, r0
    30ea:	88 0b       	sbc	r24, r24
    30ec:	99 0b       	sbc	r25, r25
    30ee:	35 d7       	rcall	.+3690   	; 0x3f5a <__floatsisf>
    30f0:	68 87       	std	Y+8, r22	; 0x08
    30f2:	79 87       	std	Y+9, r23	; 0x09
    30f4:	8a 87       	std	Y+10, r24	; 0x0a
    30f6:	9b 87       	std	Y+11, r25	; 0x0b
    30f8:	4f d3       	rcall	.+1694   	; 0x3798 <_Z8i2c_stopv>
    30fa:	8c e0       	ldi	r24, 0x0C	; 12
    30fc:	fe 01       	movw	r30, r28
    30fe:	d8 01       	movw	r26, r16
    3100:	01 90       	ld	r0, Z+
    3102:	0d 92       	st	X+, r0
    3104:	8a 95       	dec	r24
    3106:	e1 f7       	brne	.-8      	; 0x3100 <_ZN7MPU605012readRawAccelEv+0xa6>
    3108:	c8 01       	movw	r24, r16
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	df 90       	pop	r13
    3118:	cf 90       	pop	r12
    311a:	bf 90       	pop	r11
    311c:	af 90       	pop	r10
    311e:	08 95       	ret

00003120 <_ZN7MPU605018readNormalizeAccelEv>:
    3120:	af 92       	push	r10
    3122:	bf 92       	push	r11
    3124:	cf 92       	push	r12
    3126:	df 92       	push	r13
    3128:	ef 92       	push	r14
    312a:	ff 92       	push	r15
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	2c 97       	sbiw	r28, 0x0c	; 12
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	5c 01       	movw	r10, r24
    3146:	8b 01       	movw	r16, r22
    3148:	ce 01       	movw	r24, r28
    314a:	01 96       	adiw	r24, 0x01	; 1
    314c:	86 df       	rcall	.-244    	; 0x305a <_ZN7MPU605012readRawAccelEv>
    314e:	f8 01       	movw	r30, r16
    3150:	e0 59       	subi	r30, 0x90	; 144
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	c0 80       	ld	r12, Z
    3156:	d1 80       	ldd	r13, Z+1	; 0x01
    3158:	e2 80       	ldd	r14, Z+2	; 0x02
    315a:	f3 80       	ldd	r15, Z+3	; 0x03
    315c:	a7 01       	movw	r20, r14
    315e:	96 01       	movw	r18, r12
    3160:	f8 01       	movw	r30, r16
    3162:	60 81       	ld	r22, Z
    3164:	71 81       	ldd	r23, Z+1	; 0x01
    3166:	82 81       	ldd	r24, Z+2	; 0x02
    3168:	93 81       	ldd	r25, Z+3	; 0x03
    316a:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    316e:	f8 01       	movw	r30, r16
    3170:	60 8f       	std	Z+24, r22	; 0x18
    3172:	71 8f       	std	Z+25, r23	; 0x19
    3174:	82 8f       	std	Z+26, r24	; 0x1a
    3176:	93 8f       	std	Z+27, r25	; 0x1b
    3178:	a7 01       	movw	r20, r14
    317a:	96 01       	movw	r18, r12
    317c:	64 81       	ldd	r22, Z+4	; 0x04
    317e:	75 81       	ldd	r23, Z+5	; 0x05
    3180:	86 81       	ldd	r24, Z+6	; 0x06
    3182:	97 81       	ldd	r25, Z+7	; 0x07
    3184:	0e 94 c6 20 	call	0x418c	; 0x418c <__mulsf3>
    3188:	f8 01       	movw	r30, r16
    318a:	64 8f       	std	Z+28, r22	; 0x1c
    318c:	75 8f       	std	Z+29, r23	; 0x1d
    318e:	86 8f       	std	Z+30, r24	; 0x1e
    3190:	97 8f       	std	Z+31, r25	; 0x1f
    3192:	a7 01       	movw	r20, r14
    3194:	96 01       	movw	r18, r12
    3196:	60 85       	ldd	r22, Z+8	; 0x08
    3198:	71 85       	ldd	r23, Z+9	; 0x09
    319a:	82 85       	ldd	r24, Z+10	; 0x0a
    319c:	93 85       	ldd	r25, Z+11	; 0x0b
    319e:	f6 d7       	rcall	.+4076   	; 0x418c <__mulsf3>
    31a0:	f8 01       	movw	r30, r16
    31a2:	60 a3       	std	Z+32, r22	; 0x20
    31a4:	71 a3       	std	Z+33, r23	; 0x21
    31a6:	82 a3       	std	Z+34, r24	; 0x22
    31a8:	93 a3       	std	Z+35, r25	; 0x23
    31aa:	8c e0       	ldi	r24, 0x0C	; 12
    31ac:	78 96       	adiw	r30, 0x18	; 24
    31ae:	d5 01       	movw	r26, r10
    31b0:	01 90       	ld	r0, Z+
    31b2:	0d 92       	st	X+, r0
    31b4:	8a 95       	dec	r24
    31b6:	e1 f7       	brne	.-8      	; 0x31b0 <_ZN7MPU605018readNormalizeAccelEv+0x90>
    31b8:	c5 01       	movw	r24, r10
    31ba:	2c 96       	adiw	r28, 0x0c	; 12
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ff 90       	pop	r15
    31d0:	ef 90       	pop	r14
    31d2:	df 90       	pop	r13
    31d4:	cf 90       	pop	r12
    31d6:	bf 90       	pop	r11
    31d8:	af 90       	pop	r10
    31da:	08 95       	ret

000031dc <_ZN7MPU605011readRawGyroEv>:
    31dc:	ff 92       	push	r15
    31de:	0f 93       	push	r16
    31e0:	1f 93       	push	r17
    31e2:	cf 93       	push	r28
    31e4:	df 93       	push	r29
    31e6:	8c 01       	movw	r16, r24
    31e8:	eb 01       	movw	r28, r22
    31ea:	63 e4       	ldi	r22, 0x43	; 67
    31ec:	ce 01       	movw	r24, r28
    31ee:	2b df       	rcall	.-426    	; 0x3046 <_ZN7MPU605017startReadLocationEh>
    31f0:	29 d3       	rcall	.+1618   	; 0x3844 <_Z11i2c_readAckv>
    31f2:	f8 2e       	mov	r15, r24
    31f4:	27 d3       	rcall	.+1614   	; 0x3844 <_Z11i2c_readAckv>
    31f6:	6f 2d       	mov	r22, r15
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	76 2f       	mov	r23, r22
    31fc:	66 27       	eor	r22, r22
    31fe:	68 2b       	or	r22, r24
    3200:	07 2e       	mov	r0, r23
    3202:	00 0c       	add	r0, r0
    3204:	88 0b       	sbc	r24, r24
    3206:	99 0b       	sbc	r25, r25
    3208:	a8 d6       	rcall	.+3408   	; 0x3f5a <__floatsisf>
    320a:	6c 87       	std	Y+12, r22	; 0x0c
    320c:	7d 87       	std	Y+13, r23	; 0x0d
    320e:	8e 87       	std	Y+14, r24	; 0x0e
    3210:	9f 87       	std	Y+15, r25	; 0x0f
    3212:	18 d3       	rcall	.+1584   	; 0x3844 <_Z11i2c_readAckv>
    3214:	f8 2e       	mov	r15, r24
    3216:	16 d3       	rcall	.+1580   	; 0x3844 <_Z11i2c_readAckv>
    3218:	6f 2d       	mov	r22, r15
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	76 2f       	mov	r23, r22
    321e:	66 27       	eor	r22, r22
    3220:	68 2b       	or	r22, r24
    3222:	07 2e       	mov	r0, r23
    3224:	00 0c       	add	r0, r0
    3226:	88 0b       	sbc	r24, r24
    3228:	99 0b       	sbc	r25, r25
    322a:	97 d6       	rcall	.+3374   	; 0x3f5a <__floatsisf>
    322c:	68 8b       	std	Y+16, r22	; 0x10
    322e:	79 8b       	std	Y+17, r23	; 0x11
    3230:	8a 8b       	std	Y+18, r24	; 0x12
    3232:	9b 8b       	std	Y+19, r25	; 0x13
    3234:	07 d3       	rcall	.+1550   	; 0x3844 <_Z11i2c_readAckv>
    3236:	f8 2e       	mov	r15, r24
    3238:	10 d3       	rcall	.+1568   	; 0x385a <_Z11i2c_readNakv>
    323a:	6f 2d       	mov	r22, r15
    323c:	70 e0       	ldi	r23, 0x00	; 0
    323e:	76 2f       	mov	r23, r22
    3240:	66 27       	eor	r22, r22
    3242:	68 2b       	or	r22, r24
    3244:	07 2e       	mov	r0, r23
    3246:	00 0c       	add	r0, r0
    3248:	88 0b       	sbc	r24, r24
    324a:	99 0b       	sbc	r25, r25
    324c:	86 d6       	rcall	.+3340   	; 0x3f5a <__floatsisf>
    324e:	6c 8b       	std	Y+20, r22	; 0x14
    3250:	7d 8b       	std	Y+21, r23	; 0x15
    3252:	8e 8b       	std	Y+22, r24	; 0x16
    3254:	9f 8b       	std	Y+23, r25	; 0x17
    3256:	a0 d2       	rcall	.+1344   	; 0x3798 <_Z8i2c_stopv>
    3258:	8c e0       	ldi	r24, 0x0C	; 12
    325a:	fe 01       	movw	r30, r28
    325c:	3c 96       	adiw	r30, 0x0c	; 12
    325e:	d8 01       	movw	r26, r16
    3260:	01 90       	ld	r0, Z+
    3262:	0d 92       	st	X+, r0
    3264:	8a 95       	dec	r24
    3266:	e1 f7       	brne	.-8      	; 0x3260 <_ZN7MPU605011readRawGyroEv+0x84>
    3268:	c8 01       	movw	r24, r16
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	ff 90       	pop	r15
    3274:	08 95       	ret

00003276 <_ZN7MPU605012setThresholdEh>:

// Set treshold value
void MPU6050::setThreshold(uint8_t multiple)
{
    3276:	cf 92       	push	r12
    3278:	df 92       	push	r13
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	1f 93       	push	r17
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	ec 01       	movw	r28, r24
    3286:	16 2f       	mov	r17, r22
	if (multiple > 0)
    3288:	66 23       	and	r22, r22
    328a:	09 f4       	brne	.+2      	; 0x328e <_ZN7MPU605012setThresholdEh+0x18>
    328c:	3b c0       	rjmp	.+118    	; 0x3304 <_ZN7MPU605012setThresholdEh+0x8e>
	{
		// If not calibrated, need calibrate
		if (!useCalibrate)
    328e:	fc 01       	movw	r30, r24
    3290:	e8 58       	subi	r30, 0x88	; 136
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	81 11       	cpse	r24, r1
    3298:	03 c0       	rjmp	.+6      	; 0x32a0 <_ZN7MPU605012setThresholdEh+0x2a>
		{
			calibrateGyro();
    329a:	62 e3       	ldi	r22, 0x32	; 50
    329c:	ce 01       	movw	r24, r28
    329e:	51 d0       	rcall	.+162    	; 0x3342 <_ZN7MPU605013calibrateGyroEh>
		}

		// Calculate threshold vectors
		tg.XAxis = th.XAxis * multiple;
    32a0:	61 2f       	mov	r22, r17
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	58 d6       	rcall	.+3248   	; 0x3f5a <__floatsisf>
    32aa:	6b 01       	movw	r12, r22
    32ac:	7c 01       	movw	r14, r24
    32ae:	9b 01       	movw	r18, r22
    32b0:	ac 01       	movw	r20, r24
    32b2:	fe 01       	movw	r30, r28
    32b4:	ec 5a       	subi	r30, 0xAC	; 172
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	60 81       	ld	r22, Z
    32ba:	71 81       	ldd	r23, Z+1	; 0x01
    32bc:	82 81       	ldd	r24, Z+2	; 0x02
    32be:	93 81       	ldd	r25, Z+3	; 0x03
    32c0:	65 d7       	rcall	.+3786   	; 0x418c <__mulsf3>
    32c2:	68 ab       	std	Y+48, r22	; 0x30
    32c4:	79 ab       	std	Y+49, r23	; 0x31
    32c6:	8a ab       	std	Y+50, r24	; 0x32
    32c8:	9b ab       	std	Y+51, r25	; 0x33
		tg.YAxis = th.YAxis * multiple;
    32ca:	a7 01       	movw	r20, r14
    32cc:	96 01       	movw	r18, r12
    32ce:	fe 01       	movw	r30, r28
    32d0:	e8 5a       	subi	r30, 0xA8	; 168
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	60 81       	ld	r22, Z
    32d6:	71 81       	ldd	r23, Z+1	; 0x01
    32d8:	82 81       	ldd	r24, Z+2	; 0x02
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	57 d7       	rcall	.+3758   	; 0x418c <__mulsf3>
    32de:	6c ab       	std	Y+52, r22	; 0x34
    32e0:	7d ab       	std	Y+53, r23	; 0x35
    32e2:	8e ab       	std	Y+54, r24	; 0x36
    32e4:	9f ab       	std	Y+55, r25	; 0x37
		tg.ZAxis = th.ZAxis * multiple;
    32e6:	a7 01       	movw	r20, r14
    32e8:	96 01       	movw	r18, r12
    32ea:	fe 01       	movw	r30, r28
    32ec:	e4 5a       	subi	r30, 0xA4	; 164
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	49 d7       	rcall	.+3730   	; 0x418c <__mulsf3>
    32fa:	68 af       	std	Y+56, r22	; 0x38
    32fc:	79 af       	std	Y+57, r23	; 0x39
    32fe:	8a af       	std	Y+58, r24	; 0x3a
    3300:	9b af       	std	Y+59, r25	; 0x3b
    3302:	0c c0       	rjmp	.+24     	; 0x331c <_ZN7MPU605012setThresholdEh+0xa6>
	} else
	{
		// No threshold
		tg.XAxis = 0;
    3304:	18 aa       	std	Y+48, r1	; 0x30
    3306:	19 aa       	std	Y+49, r1	; 0x31
    3308:	1a aa       	std	Y+50, r1	; 0x32
    330a:	1b aa       	std	Y+51, r1	; 0x33
		tg.YAxis = 0;
    330c:	1c aa       	std	Y+52, r1	; 0x34
    330e:	1d aa       	std	Y+53, r1	; 0x35
    3310:	1e aa       	std	Y+54, r1	; 0x36
    3312:	1f aa       	std	Y+55, r1	; 0x37
		tg.ZAxis = 0;
    3314:	18 ae       	std	Y+56, r1	; 0x38
    3316:	19 ae       	std	Y+57, r1	; 0x39
    3318:	1a ae       	std	Y+58, r1	; 0x3a
    331a:	1b ae       	std	Y+59, r1	; 0x3b
	}

	// Remember old threshold value
	actualThreshold = multiple;
    331c:	cc 58       	subi	r28, 0x8C	; 140
    331e:	df 4f       	sbci	r29, 0xFF	; 255
    3320:	61 2f       	mov	r22, r17
    3322:	70 e0       	ldi	r23, 0x00	; 0
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	16 d6       	rcall	.+3116   	; 0x3f56 <__floatunsisf>
    332a:	68 83       	st	Y, r22
    332c:	79 83       	std	Y+1, r23	; 0x01
    332e:	8a 83       	std	Y+2, r24	; 0x02
    3330:	9b 83       	std	Y+3, r25	; 0x03
}
    3332:	df 91       	pop	r29
    3334:	cf 91       	pop	r28
    3336:	1f 91       	pop	r17
    3338:	ff 90       	pop	r15
    333a:	ef 90       	pop	r14
    333c:	df 90       	pop	r13
    333e:	cf 90       	pop	r12
    3340:	08 95       	ret

00003342 <_ZN7MPU605013calibrateGyroEh>:
	offsetAccelero.XAxis = sumX / samples;
	offsetAccelero.YAxis = sumY / samples;
}

void MPU6050::calibrateGyro(uint8_t samples)
{
    3342:	2f 92       	push	r2
    3344:	3f 92       	push	r3
    3346:	4f 92       	push	r4
    3348:	5f 92       	push	r5
    334a:	6f 92       	push	r6
    334c:	7f 92       	push	r7
    334e:	8f 92       	push	r8
    3350:	9f 92       	push	r9
    3352:	af 92       	push	r10
    3354:	bf 92       	push	r11
    3356:	cf 92       	push	r12
    3358:	df 92       	push	r13
    335a:	ef 92       	push	r14
    335c:	ff 92       	push	r15
    335e:	0f 93       	push	r16
    3360:	1f 93       	push	r17
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	a4 97       	sbiw	r28, 0x24	; 36
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	1c 01       	movw	r2, r24
    3378:	06 2f       	mov	r16, r22
	// Set calibrate
	useCalibrate = true;
    337a:	fc 01       	movw	r30, r24
    337c:	e8 58       	subi	r30, 0x88	; 136
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	80 83       	st	Z, r24
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    3384:	66 23       	and	r22, r22
    3386:	09 f4       	brne	.+2      	; 0x338a <_ZN7MPU605013calibrateGyroEh+0x48>
    3388:	87 c0       	rjmp	.+270    	; 0x3498 <_ZN7MPU605013calibrateGyroEh+0x156>
    338a:	10 e0       	ldi	r17, 0x00	; 0
    338c:	19 8e       	std	Y+25, r1	; 0x19
    338e:	1a 8e       	std	Y+26, r1	; 0x1a
    3390:	1b 8e       	std	Y+27, r1	; 0x1b
    3392:	1c 8e       	std	Y+28, r1	; 0x1c
    3394:	1d 8a       	std	Y+21, r1	; 0x15
    3396:	1e 8a       	std	Y+22, r1	; 0x16
    3398:	1f 8a       	std	Y+23, r1	; 0x17
    339a:	18 8e       	std	Y+24, r1	; 0x18
    339c:	1d 86       	std	Y+13, r1	; 0x0d
    339e:	1e 86       	std	Y+14, r1	; 0x0e
    33a0:	1f 86       	std	Y+15, r1	; 0x0f
    33a2:	18 8a       	std	Y+16, r1	; 0x10
    33a4:	19 a2       	std	Y+33, r1	; 0x21
    33a6:	1a a2       	std	Y+34, r1	; 0x22
    33a8:	1b a2       	std	Y+35, r1	; 0x23
    33aa:	1c a2       	std	Y+36, r1	; 0x24
    33ac:	1d 8e       	std	Y+29, r1	; 0x1d
    33ae:	1e 8e       	std	Y+30, r1	; 0x1e
    33b0:	1f 8e       	std	Y+31, r1	; 0x1f
    33b2:	18 a2       	std	Y+32, r1	; 0x20
    33b4:	19 8a       	std	Y+17, r1	; 0x11
    33b6:	1a 8a       	std	Y+18, r1	; 0x12
    33b8:	1b 8a       	std	Y+19, r1	; 0x13
    33ba:	1c 8a       	std	Y+20, r1	; 0x14
	{
		readRawGyro();
    33bc:	b1 01       	movw	r22, r2
    33be:	ce 01       	movw	r24, r28
    33c0:	01 96       	adiw	r24, 0x01	; 1
    33c2:	0c df       	rcall	.-488    	; 0x31dc <_ZN7MPU605011readRawGyroEv>
		sumX += rg.XAxis;
    33c4:	f1 01       	movw	r30, r2
    33c6:	44 84       	ldd	r4, Z+12	; 0x0c
    33c8:	55 84       	ldd	r5, Z+13	; 0x0d
    33ca:	66 84       	ldd	r6, Z+14	; 0x0e
    33cc:	77 84       	ldd	r7, Z+15	; 0x0f
    33ce:	a3 01       	movw	r20, r6
    33d0:	92 01       	movw	r18, r4
    33d2:	69 89       	ldd	r22, Y+17	; 0x11
    33d4:	7a 89       	ldd	r23, Y+18	; 0x12
    33d6:	8b 89       	ldd	r24, Y+19	; 0x13
    33d8:	9c 89       	ldd	r25, Y+20	; 0x14
    33da:	57 d4       	rcall	.+2222   	; 0x3c8a <__addsf3>
    33dc:	69 8b       	std	Y+17, r22	; 0x11
    33de:	7a 8b       	std	Y+18, r23	; 0x12
    33e0:	8b 8b       	std	Y+19, r24	; 0x13
    33e2:	9c 8b       	std	Y+20, r25	; 0x14
		sumY += rg.YAxis;
    33e4:	f1 01       	movw	r30, r2
    33e6:	80 88       	ldd	r8, Z+16	; 0x10
    33e8:	91 88       	ldd	r9, Z+17	; 0x11
    33ea:	a2 88       	ldd	r10, Z+18	; 0x12
    33ec:	b3 88       	ldd	r11, Z+19	; 0x13
    33ee:	a5 01       	movw	r20, r10
    33f0:	94 01       	movw	r18, r8
    33f2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    33f4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    33f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33f8:	98 a1       	ldd	r25, Y+32	; 0x20
    33fa:	47 d4       	rcall	.+2190   	; 0x3c8a <__addsf3>
    33fc:	6d 8f       	std	Y+29, r22	; 0x1d
    33fe:	7e 8f       	std	Y+30, r23	; 0x1e
    3400:	8f 8f       	std	Y+31, r24	; 0x1f
    3402:	98 a3       	std	Y+32, r25	; 0x20
		sumZ += rg.ZAxis;
    3404:	f1 01       	movw	r30, r2
    3406:	c4 88       	ldd	r12, Z+20	; 0x14
    3408:	d5 88       	ldd	r13, Z+21	; 0x15
    340a:	e6 88       	ldd	r14, Z+22	; 0x16
    340c:	f7 88       	ldd	r15, Z+23	; 0x17
    340e:	a7 01       	movw	r20, r14
    3410:	96 01       	movw	r18, r12
    3412:	69 a1       	ldd	r22, Y+33	; 0x21
    3414:	7a a1       	ldd	r23, Y+34	; 0x22
    3416:	8b a1       	ldd	r24, Y+35	; 0x23
    3418:	9c a1       	ldd	r25, Y+36	; 0x24
    341a:	37 d4       	rcall	.+2158   	; 0x3c8a <__addsf3>
    341c:	69 a3       	std	Y+33, r22	; 0x21
    341e:	7a a3       	std	Y+34, r23	; 0x22
    3420:	8b a3       	std	Y+35, r24	; 0x23
    3422:	9c a3       	std	Y+36, r25	; 0x24

		sigmaX += rg.XAxis * rg.XAxis;
    3424:	a3 01       	movw	r20, r6
    3426:	92 01       	movw	r18, r4
    3428:	c3 01       	movw	r24, r6
    342a:	b2 01       	movw	r22, r4
    342c:	af d6       	rcall	.+3422   	; 0x418c <__mulsf3>
    342e:	9b 01       	movw	r18, r22
    3430:	ac 01       	movw	r20, r24
    3432:	6d 85       	ldd	r22, Y+13	; 0x0d
    3434:	7e 85       	ldd	r23, Y+14	; 0x0e
    3436:	8f 85       	ldd	r24, Y+15	; 0x0f
    3438:	98 89       	ldd	r25, Y+16	; 0x10
    343a:	27 d4       	rcall	.+2126   	; 0x3c8a <__addsf3>
    343c:	6d 87       	std	Y+13, r22	; 0x0d
    343e:	7e 87       	std	Y+14, r23	; 0x0e
    3440:	8f 87       	std	Y+15, r24	; 0x0f
    3442:	98 8b       	std	Y+16, r25	; 0x10
		sigmaY += rg.YAxis * rg.YAxis;
    3444:	a5 01       	movw	r20, r10
    3446:	94 01       	movw	r18, r8
    3448:	c5 01       	movw	r24, r10
    344a:	b4 01       	movw	r22, r8
    344c:	9f d6       	rcall	.+3390   	; 0x418c <__mulsf3>
    344e:	9b 01       	movw	r18, r22
    3450:	ac 01       	movw	r20, r24
    3452:	6d 89       	ldd	r22, Y+21	; 0x15
    3454:	7e 89       	ldd	r23, Y+22	; 0x16
    3456:	8f 89       	ldd	r24, Y+23	; 0x17
    3458:	98 8d       	ldd	r25, Y+24	; 0x18
    345a:	17 d4       	rcall	.+2094   	; 0x3c8a <__addsf3>
    345c:	6d 8b       	std	Y+21, r22	; 0x15
    345e:	7e 8b       	std	Y+22, r23	; 0x16
    3460:	8f 8b       	std	Y+23, r24	; 0x17
    3462:	98 8f       	std	Y+24, r25	; 0x18
		sigmaZ += rg.ZAxis * rg.ZAxis;
    3464:	a7 01       	movw	r20, r14
    3466:	96 01       	movw	r18, r12
    3468:	c7 01       	movw	r24, r14
    346a:	b6 01       	movw	r22, r12
    346c:	8f d6       	rcall	.+3358   	; 0x418c <__mulsf3>
    346e:	9b 01       	movw	r18, r22
    3470:	ac 01       	movw	r20, r24
    3472:	69 8d       	ldd	r22, Y+25	; 0x19
    3474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    347a:	07 d4       	rcall	.+2062   	; 0x3c8a <__addsf3>
    347c:	69 8f       	std	Y+25, r22	; 0x19
    347e:	7a 8f       	std	Y+26, r23	; 0x1a
    3480:	8b 8f       	std	Y+27, r24	; 0x1b
    3482:	9c 8f       	std	Y+28, r25	; 0x1c
    3484:	8f e1       	ldi	r24, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3486:	9e e4       	ldi	r25, 0x4E	; 78
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	f1 f7       	brne	.-4      	; 0x3488 <_ZN7MPU605013calibrateGyroEh+0x146>
    348c:	00 c0       	rjmp	.+0      	; 0x348e <_ZN7MPU605013calibrateGyroEh+0x14c>
    348e:	00 00       	nop
    3490:	1f 5f       	subi	r17, 0xFF	; 255
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    3492:	01 13       	cpse	r16, r17
    3494:	93 cf       	rjmp	.-218    	; 0x33bc <_ZN7MPU605013calibrateGyroEh+0x7a>
    3496:	18 c0       	rjmp	.+48     	; 0x34c8 <_ZN7MPU605013calibrateGyroEh+0x186>
    3498:	19 8e       	std	Y+25, r1	; 0x19
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;
    349a:	1a 8e       	std	Y+26, r1	; 0x1a
    349c:	1b 8e       	std	Y+27, r1	; 0x1b
    349e:	1c 8e       	std	Y+28, r1	; 0x1c
    34a0:	1d 8a       	std	Y+21, r1	; 0x15
	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
    34a2:	1e 8a       	std	Y+22, r1	; 0x16
    34a4:	1f 8a       	std	Y+23, r1	; 0x17
    34a6:	18 8e       	std	Y+24, r1	; 0x18
    34a8:	1d 86       	std	Y+13, r1	; 0x0d

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
    34aa:	1e 86       	std	Y+14, r1	; 0x0e
    34ac:	1f 86       	std	Y+15, r1	; 0x0f
    34ae:	18 8a       	std	Y+16, r1	; 0x10
    34b0:	19 a2       	std	Y+33, r1	; 0x21
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
    34b2:	1a a2       	std	Y+34, r1	; 0x22
    34b4:	1b a2       	std	Y+35, r1	; 0x23
    34b6:	1c a2       	std	Y+36, r1	; 0x24
    34b8:	1d 8e       	std	Y+29, r1	; 0x1d
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
    34ba:	1e 8e       	std	Y+30, r1	; 0x1e
    34bc:	1f 8e       	std	Y+31, r1	; 0x1f
    34be:	18 a2       	std	Y+32, r1	; 0x20
{
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
    34c0:	19 8a       	std	Y+17, r1	; 0x11
    34c2:	1a 8a       	std	Y+18, r1	; 0x12
    34c4:	1b 8a       	std	Y+19, r1	; 0x13
    34c6:	1c 8a       	std	Y+20, r1	; 0x14

		_delay_ms(5);
	}

	// Calculate delta vectors
	dg.XAxis = sumX / samples;
    34c8:	60 2f       	mov	r22, r16
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	44 d5       	rcall	.+2696   	; 0x3f5a <__floatsisf>
    34d2:	4b 01       	movw	r8, r22
    34d4:	5c 01       	movw	r10, r24
    34d6:	9b 01       	movw	r18, r22
    34d8:	ac 01       	movw	r20, r24
    34da:	69 89       	ldd	r22, Y+17	; 0x11
    34dc:	7a 89       	ldd	r23, Y+18	; 0x12
    34de:	8b 89       	ldd	r24, Y+19	; 0x13
    34e0:	9c 89       	ldd	r25, Y+20	; 0x14
    34e2:	a0 d4       	rcall	.+2368   	; 0x3e24 <__divsf3>
    34e4:	6b 01       	movw	r12, r22
    34e6:	7c 01       	movw	r14, r24
    34e8:	f1 01       	movw	r30, r2
    34ea:	64 af       	std	Z+60, r22	; 0x3c
    34ec:	75 af       	std	Z+61, r23	; 0x3d
    34ee:	86 af       	std	Z+62, r24	; 0x3e
    34f0:	97 af       	std	Z+63, r25	; 0x3f
	dg.YAxis = sumY / samples;
    34f2:	a5 01       	movw	r20, r10
    34f4:	94 01       	movw	r18, r8
    34f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    34f8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    34fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34fc:	98 a1       	ldd	r25, Y+32	; 0x20
    34fe:	92 d4       	rcall	.+2340   	; 0x3e24 <__divsf3>
    3500:	2b 01       	movw	r4, r22
    3502:	3c 01       	movw	r6, r24
    3504:	f1 01       	movw	r30, r2
    3506:	e0 5c       	subi	r30, 0xC0	; 192
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 83       	st	Z, r22
    350c:	71 83       	std	Z+1, r23	; 0x01
    350e:	82 83       	std	Z+2, r24	; 0x02
    3510:	93 83       	std	Z+3, r25	; 0x03
	dg.ZAxis = sumZ / samples;
    3512:	a5 01       	movw	r20, r10
    3514:	94 01       	movw	r18, r8
    3516:	69 a1       	ldd	r22, Y+33	; 0x21
    3518:	7a a1       	ldd	r23, Y+34	; 0x22
    351a:	8b a1       	ldd	r24, Y+35	; 0x23
    351c:	9c a1       	ldd	r25, Y+36	; 0x24
    351e:	82 d4       	rcall	.+2308   	; 0x3e24 <__divsf3>
    3520:	4b 01       	movw	r8, r22
    3522:	5c 01       	movw	r10, r24
    3524:	f1 01       	movw	r30, r2
    3526:	ec 5b       	subi	r30, 0xBC	; 188
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	60 83       	st	Z, r22
    352c:	71 83       	std	Z+1, r23	; 0x01
    352e:	82 83       	std	Z+2, r24	; 0x02
    3530:	93 83       	std	Z+3, r25	; 0x03

	// Calculate threshold vectors
	th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	48 e4       	ldi	r20, 0x48	; 72
    3538:	52 e4       	ldi	r21, 0x42	; 66
    353a:	6d 85       	ldd	r22, Y+13	; 0x0d
    353c:	7e 85       	ldd	r23, Y+14	; 0x0e
    353e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3540:	98 89       	ldd	r25, Y+16	; 0x10
    3542:	70 d4       	rcall	.+2272   	; 0x3e24 <__divsf3>
    3544:	69 8b       	std	Y+17, r22	; 0x11
    3546:	7a 8b       	std	Y+18, r23	; 0x12
    3548:	8b 8b       	std	Y+19, r24	; 0x13
    354a:	9c 8b       	std	Y+20, r25	; 0x14
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	48 e4       	ldi	r20, 0x48	; 72
    3552:	52 e4       	ldi	r21, 0x42	; 66
    3554:	6d 85       	ldd	r22, Y+13	; 0x0d
    3556:	7e 85       	ldd	r23, Y+14	; 0x0e
    3558:	8f 85       	ldd	r24, Y+15	; 0x0f
    355a:	98 89       	ldd	r25, Y+16	; 0x10
    355c:	63 d4       	rcall	.+2246   	; 0x3e24 <__divsf3>
    355e:	6d 87       	std	Y+13, r22	; 0x0d
    3560:	7e 87       	std	Y+14, r23	; 0x0e
    3562:	8f 87       	std	Y+15, r24	; 0x0f
    3564:	98 8b       	std	Y+16, r25	; 0x10
    3566:	a7 01       	movw	r20, r14
    3568:	96 01       	movw	r18, r12
    356a:	c7 01       	movw	r24, r14
    356c:	b6 01       	movw	r22, r12
    356e:	0e d6       	rcall	.+3100   	; 0x418c <__mulsf3>
    3570:	9b 01       	movw	r18, r22
    3572:	ac 01       	movw	r20, r24
    3574:	6d 85       	ldd	r22, Y+13	; 0x0d
    3576:	7e 85       	ldd	r23, Y+14	; 0x0e
    3578:	8f 85       	ldd	r24, Y+15	; 0x0f
    357a:	98 89       	ldd	r25, Y+16	; 0x10
    357c:	85 d3       	rcall	.+1802   	; 0x3c88 <__subsf3>
    357e:	73 d6       	rcall	.+3302   	; 0x4266 <sqrt>
    3580:	f1 01       	movw	r30, r2
    3582:	ec 5a       	subi	r30, 0xAC	; 172
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	60 83       	st	Z, r22
    3588:	71 83       	std	Z+1, r23	; 0x01
    358a:	82 83       	std	Z+2, r24	; 0x02
    358c:	93 83       	std	Z+3, r25	; 0x03
	th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	48 e4       	ldi	r20, 0x48	; 72
    3594:	52 e4       	ldi	r21, 0x42	; 66
    3596:	6d 89       	ldd	r22, Y+21	; 0x15
    3598:	7e 89       	ldd	r23, Y+22	; 0x16
    359a:	8f 89       	ldd	r24, Y+23	; 0x17
    359c:	98 8d       	ldd	r25, Y+24	; 0x18
    359e:	42 d4       	rcall	.+2180   	; 0x3e24 <__divsf3>
    35a0:	6b 01       	movw	r12, r22
    35a2:	7c 01       	movw	r14, r24
    35a4:	a3 01       	movw	r20, r6
    35a6:	92 01       	movw	r18, r4
    35a8:	c3 01       	movw	r24, r6
    35aa:	b2 01       	movw	r22, r4
    35ac:	ef d5       	rcall	.+3038   	; 0x418c <__mulsf3>
    35ae:	9b 01       	movw	r18, r22
    35b0:	ac 01       	movw	r20, r24
    35b2:	c7 01       	movw	r24, r14
    35b4:	b6 01       	movw	r22, r12
    35b6:	68 d3       	rcall	.+1744   	; 0x3c88 <__subsf3>
    35b8:	56 d6       	rcall	.+3244   	; 0x4266 <sqrt>
    35ba:	f1 01       	movw	r30, r2
    35bc:	e8 5a       	subi	r30, 0xA8	; 168
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	60 83       	st	Z, r22
    35c2:	71 83       	std	Z+1, r23	; 0x01
    35c4:	82 83       	std	Z+2, r24	; 0x02
    35c6:	93 83       	std	Z+3, r25	; 0x03
	th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	48 e4       	ldi	r20, 0x48	; 72
    35ce:	52 e4       	ldi	r21, 0x42	; 66
    35d0:	69 8d       	ldd	r22, Y+25	; 0x19
    35d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35d8:	25 d4       	rcall	.+2122   	; 0x3e24 <__divsf3>
    35da:	6b 01       	movw	r12, r22
    35dc:	7c 01       	movw	r14, r24
    35de:	a5 01       	movw	r20, r10
    35e0:	94 01       	movw	r18, r8
    35e2:	c5 01       	movw	r24, r10
    35e4:	b4 01       	movw	r22, r8
    35e6:	d2 d5       	rcall	.+2980   	; 0x418c <__mulsf3>
    35e8:	9b 01       	movw	r18, r22
    35ea:	ac 01       	movw	r20, r24
    35ec:	c7 01       	movw	r24, r14
    35ee:	b6 01       	movw	r22, r12
    35f0:	4b d3       	rcall	.+1686   	; 0x3c88 <__subsf3>
    35f2:	39 d6       	rcall	.+3186   	; 0x4266 <sqrt>
    35f4:	f1 01       	movw	r30, r2
    35f6:	e4 5a       	subi	r30, 0xA4	; 164
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	60 83       	st	Z, r22
    35fc:	71 83       	std	Z+1, r23	; 0x01
    35fe:	82 83       	std	Z+2, r24	; 0x02
    3600:	93 83       	std	Z+3, r25	; 0x03
    3602:	78 96       	adiw	r30, 0x18	; 24

	// If already set threshold, recalculate threshold vectors
	if (actualThreshold > 0)
    3604:	c0 80       	ld	r12, Z
    3606:	d1 80       	ldd	r13, Z+1	; 0x01
    3608:	e2 80       	ldd	r14, Z+2	; 0x02
    360a:	f3 80       	ldd	r15, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	a9 01       	movw	r20, r18
    3612:	c7 01       	movw	r24, r14
    3614:	b6 01       	movw	r22, r12
    3616:	af d5       	rcall	.+2910   	; 0x4176 <__gesf2>
    3618:	18 16       	cp	r1, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <_ZN7MPU605013calibrateGyroEh+0x2e4>
    361c:	c7 01       	movw	r24, r14
    361e:	b6 01       	movw	r22, r12
	{
		setThreshold(actualThreshold);
    3620:	6e d4       	rcall	.+2268   	; 0x3efe <__fixunssfsi>
    3622:	c1 01       	movw	r24, r2
    3624:	28 de       	rcall	.-944    	; 0x3276 <_ZN7MPU605012setThresholdEh>
    3626:	a4 96       	adiw	r28, 0x24	; 36
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
	}
}
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	ff 90       	pop	r15
    363c:	ef 90       	pop	r14
    363e:	df 90       	pop	r13
    3640:	cf 90       	pop	r12
    3642:	bf 90       	pop	r11
    3644:	af 90       	pop	r10
    3646:	9f 90       	pop	r9
    3648:	8f 90       	pop	r8
    364a:	7f 90       	pop	r7
    364c:	6f 90       	pop	r6
    364e:	5f 90       	pop	r5
    3650:	4f 90       	pop	r4
    3652:	3f 90       	pop	r3
    3654:	2f 90       	pop	r2
    3656:	08 95       	ret

00003658 <_ZN7MPU60508rateGyroEv>:
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17

	// Remember old threshold value
	actualThreshold = multiple;
}

void MPU6050::rateGyro(){
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	2c 97       	sbiw	r28, 0x0c	; 12
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	8c 01       	movw	r16, r24
	readRawGyro();
    3676:	bc 01       	movw	r22, r24
    3678:	ce 01       	movw	r24, r28
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	af dd       	rcall	.-1186   	; 0x31dc <_ZN7MPU605011readRawGyroEv>
	gyroRateX = (rg.XAxis)/131;
    367e:	78 01       	movw	r14, r16
    3680:	80 e6       	ldi	r24, 0x60	; 96
    3682:	e8 0e       	add	r14, r24
    3684:	f1 1c       	adc	r15, r1
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	43 e0       	ldi	r20, 0x03	; 3
    368c:	53 e4       	ldi	r21, 0x43	; 67
    368e:	f8 01       	movw	r30, r16
    3690:	64 85       	ldd	r22, Z+12	; 0x0c
    3692:	75 85       	ldd	r23, Z+13	; 0x0d
    3694:	86 85       	ldd	r24, Z+14	; 0x0e
    3696:	97 85       	ldd	r25, Z+15	; 0x0f
    3698:	c5 d3       	rcall	.+1930   	; 0x3e24 <__divsf3>
    369a:	f7 01       	movw	r30, r14
    369c:	60 83       	st	Z, r22
    369e:	71 83       	std	Z+1, r23	; 0x01
    36a0:	82 83       	std	Z+2, r24	; 0x02
    36a2:	93 83       	std	Z+3, r25	; 0x03
	gyroRateY = (rg.YAxis)/131;
    36a4:	78 01       	movw	r14, r16
    36a6:	f4 e6       	ldi	r31, 0x64	; 100
    36a8:	ef 0e       	add	r14, r31
    36aa:	f1 1c       	adc	r15, r1
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	43 e0       	ldi	r20, 0x03	; 3
    36b2:	53 e4       	ldi	r21, 0x43	; 67
    36b4:	f8 01       	movw	r30, r16
    36b6:	60 89       	ldd	r22, Z+16	; 0x10
    36b8:	71 89       	ldd	r23, Z+17	; 0x11
    36ba:	82 89       	ldd	r24, Z+18	; 0x12
    36bc:	93 89       	ldd	r25, Z+19	; 0x13
    36be:	b2 d3       	rcall	.+1892   	; 0x3e24 <__divsf3>
    36c0:	f7 01       	movw	r30, r14
    36c2:	60 83       	st	Z, r22
    36c4:	71 83       	std	Z+1, r23	; 0x01
    36c6:	82 83       	std	Z+2, r24	; 0x02
    36c8:	93 83       	std	Z+3, r25	; 0x03
	gyroRateZ = (rg.ZAxis)/131;
    36ca:	78 01       	movw	r14, r16
    36cc:	f8 e6       	ldi	r31, 0x68	; 104
    36ce:	ef 0e       	add	r14, r31
    36d0:	f1 1c       	adc	r15, r1
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	43 e0       	ldi	r20, 0x03	; 3
    36d8:	53 e4       	ldi	r21, 0x43	; 67
    36da:	f8 01       	movw	r30, r16
    36dc:	64 89       	ldd	r22, Z+20	; 0x14
    36de:	75 89       	ldd	r23, Z+21	; 0x15
    36e0:	86 89       	ldd	r24, Z+22	; 0x16
    36e2:	97 89       	ldd	r25, Z+23	; 0x17
    36e4:	9f d3       	rcall	.+1854   	; 0x3e24 <__divsf3>
    36e6:	f7 01       	movw	r30, r14
    36e8:	60 83       	st	Z, r22
    36ea:	71 83       	std	Z+1, r23	; 0x01
    36ec:	82 83       	std	Z+2, r24	; 0x02
    36ee:	93 83       	std	Z+3, r25	; 0x03
}
    36f0:	2c 96       	adiw	r28, 0x0c	; 12
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
    3704:	ff 90       	pop	r15
    3706:	ef 90       	pop	r14
    3708:	08 95       	ret

0000370a <_ZN7MPU605012getGyroRateXEv>:

float MPU6050::getGyroRateX(){
	return gyroRateX;
    370a:	80 5a       	subi	r24, 0xA0	; 160
    370c:	9f 4f       	sbci	r25, 0xFF	; 255
    370e:	fc 01       	movw	r30, r24
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
}
    3718:	08 95       	ret

0000371a <_ZN7MPU605012getGyroRateYEv>:
float MPU6050::getGyroRateY(){
	return gyroRateY;
    371a:	8c 59       	subi	r24, 0x9C	; 156
    371c:	9f 4f       	sbci	r25, 0xFF	; 255
    371e:	fc 01       	movw	r30, r24
    3720:	60 81       	ld	r22, Z
    3722:	71 81       	ldd	r23, Z+1	; 0x01
    3724:	82 81       	ldd	r24, Z+2	; 0x02
    3726:	93 81       	ldd	r25, Z+3	; 0x03
}
    3728:	08 95       	ret

0000372a <_ZN7MPU605012getGyroRateZEv>:
float MPU6050::getGyroRateZ(){
	return gyroRateZ;
    372a:	88 59       	subi	r24, 0x98	; 152
    372c:	9f 4f       	sbci	r25, 0xFF	; 255
    372e:	fc 01       	movw	r30, r24
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	08 95       	ret

0000373a <_Z8i2c_initv>:
uint8_t i2c_write_array(uint8_t *data, uint8_t count){
	while(count--){
		if(i2c_write(*data++) != 0)		return count;
	}
	return 0;
}
    373a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    373e:	88 e4       	ldi	r24, 0x48	; 72
    3740:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3744:	08 95       	ret

00003746 <_Z9i2c_starth>:
    3746:	94 ea       	ldi	r25, 0xA4	; 164
    3748:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    374c:	ec eb       	ldi	r30, 0xBC	; 188
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	90 81       	ld	r25, Z
    3752:	99 23       	and	r25, r25
    3754:	ec f7       	brge	.-6      	; 0x3750 <_Z9i2c_starth+0xa>
    3756:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    375a:	98 7f       	andi	r25, 0xF8	; 248
    375c:	98 30       	cpi	r25, 0x08	; 8
    375e:	11 f0       	breq	.+4      	; 0x3764 <_Z9i2c_starth+0x1e>
    3760:	90 31       	cpi	r25, 0x10	; 16
    3762:	a1 f4       	brne	.+40     	; 0x378c <_Z9i2c_starth+0x46>
    3764:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3768:	84 e8       	ldi	r24, 0x84	; 132
    376a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    376e:	ec eb       	ldi	r30, 0xBC	; 188
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	88 23       	and	r24, r24
    3776:	ec f7       	brge	.-6      	; 0x3772 <_Z9i2c_starth+0x2c>
    3778:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    377c:	98 7f       	andi	r25, 0xF8	; 248
    377e:	98 31       	cpi	r25, 0x18	; 24
    3780:	39 f0       	breq	.+14     	; 0x3790 <_Z9i2c_starth+0x4a>
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	90 34       	cpi	r25, 0x40	; 64
    3786:	29 f4       	brne	.+10     	; 0x3792 <_Z9i2c_starth+0x4c>
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	08 95       	ret
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	08 95       	ret
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	08 95       	ret

00003794 <_Z13i2c_rep_starth>:
    3794:	d8 cf       	rjmp	.-80     	; 0x3746 <_Z9i2c_starth>
    3796:	08 95       	ret

00003798 <_Z8i2c_stopv>:
    3798:	84 e9       	ldi	r24, 0x94	; 148
    379a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    379e:	ec eb       	ldi	r30, 0xBC	; 188
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	84 fd       	sbrc	r24, 4
    37a6:	fd cf       	rjmp	.-6      	; 0x37a2 <_Z8i2c_stopv+0xa>
    37a8:	08 95       	ret

000037aa <_Z14i2c_start_waith>:
    37aa:	bf 92       	push	r11
    37ac:	cf 92       	push	r12
    37ae:	df 92       	push	r13
    37b0:	ef 92       	push	r14
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	b8 2e       	mov	r11, r24
    37be:	cc eb       	ldi	r28, 0xBC	; 188
    37c0:	d0 e0       	ldi	r29, 0x00	; 0
    37c2:	09 eb       	ldi	r16, 0xB9	; 185
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	0f 2e       	mov	r0, r31
    37c8:	f4 ea       	ldi	r31, 0xA4	; 164
    37ca:	df 2e       	mov	r13, r31
    37cc:	f0 2d       	mov	r31, r0
    37ce:	0f 2e       	mov	r0, r31
    37d0:	fb eb       	ldi	r31, 0xBB	; 187
    37d2:	ef 2e       	mov	r14, r31
    37d4:	f1 2c       	mov	r15, r1
    37d6:	f0 2d       	mov	r31, r0
    37d8:	0f 2e       	mov	r0, r31
    37da:	f4 e8       	ldi	r31, 0x84	; 132
    37dc:	cf 2e       	mov	r12, r31
    37de:	f0 2d       	mov	r31, r0
    37e0:	d8 82       	st	Y, r13
    37e2:	88 81       	ld	r24, Y
    37e4:	88 23       	and	r24, r24
    37e6:	ec f7       	brge	.-6      	; 0x37e2 <_Z14i2c_start_waith+0x38>
    37e8:	f8 01       	movw	r30, r16
    37ea:	80 81       	ld	r24, Z
    37ec:	88 7f       	andi	r24, 0xF8	; 248
    37ee:	88 30       	cpi	r24, 0x08	; 8
    37f0:	b9 f7       	brne	.-18     	; 0x37e0 <_Z14i2c_start_waith+0x36>
    37f2:	f7 01       	movw	r30, r14
    37f4:	b0 82       	st	Z, r11
    37f6:	c8 82       	st	Y, r12
    37f8:	88 81       	ld	r24, Y
    37fa:	88 23       	and	r24, r24
    37fc:	ec f7       	brge	.-6      	; 0x37f8 <_Z14i2c_start_waith+0x4e>
    37fe:	f8 01       	movw	r30, r16
    3800:	80 81       	ld	r24, Z
    3802:	88 7f       	andi	r24, 0xF8	; 248
    3804:	88 31       	cpi	r24, 0x18	; 24
    3806:	11 f0       	breq	.+4      	; 0x380c <_Z14i2c_start_waith+0x62>
    3808:	c7 df       	rcall	.-114    	; 0x3798 <_Z8i2c_stopv>
    380a:	ea cf       	rjmp	.-44     	; 0x37e0 <_Z14i2c_start_waith+0x36>
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	ff 90       	pop	r15
    3816:	ef 90       	pop	r14
    3818:	df 90       	pop	r13
    381a:	cf 90       	pop	r12
    381c:	bf 90       	pop	r11
    381e:	08 95       	ret

00003820 <_Z9i2c_writeh>:
    3820:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3824:	84 e8       	ldi	r24, 0x84	; 132
    3826:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    382a:	ec eb       	ldi	r30, 0xBC	; 188
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	88 23       	and	r24, r24
    3832:	ec f7       	brge	.-6      	; 0x382e <_Z9i2c_writeh+0xe>
    3834:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3838:	98 7f       	andi	r25, 0xF8	; 248
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	98 32       	cpi	r25, 0x28	; 40
    383e:	09 f4       	brne	.+2      	; 0x3842 <_Z9i2c_writeh+0x22>
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	08 95       	ret

00003844 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3844:	84 ec       	ldi	r24, 0xC4	; 196
    3846:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
    384a:	ec eb       	ldi	r30, 0xBC	; 188
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	80 81       	ld	r24, Z
    3850:	88 23       	and	r24, r24
    3852:	ec f7       	brge	.-6      	; 0x384e <_Z11i2c_readAckv+0xa>

    return TWDR;
    3854:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readAck */
    3858:	08 95       	ret

0000385a <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    385a:	84 e8       	ldi	r24, 0x84	; 132
    385c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
    3860:	ec eb       	ldi	r30, 0xBC	; 188
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	80 81       	ld	r24, Z
    3866:	88 23       	and	r24, r24
    3868:	ec f7       	brge	.-6      	; 0x3864 <_Z11i2c_readNakv+0xa>
	
    return TWDR;
    386a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

    386e:	08 95       	ret

00003870 <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    3870:	1f 92       	push	r1
    3872:	0f 92       	push	r0
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	0f 92       	push	r0
    3878:	11 24       	eor	r1, r1
    387a:	0b b6       	in	r0, 0x3b	; 59
    387c:	0f 92       	push	r0
    387e:	2f 93       	push	r18
    3880:	8f 93       	push	r24
    3882:	9f 93       	push	r25
    3884:	ef 93       	push	r30
    3886:	ff 93       	push	r31
    3888:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    388c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3890:	88 71       	andi	r24, 0x18	; 24
    3892:	e0 91 22 05 	lds	r30, 0x0522	; 0x800522 <_ZL12UART0_RxHead>
    3896:	ef 5f       	subi	r30, 0xFF	; 255
    3898:	ef 71       	andi	r30, 0x1F	; 31
    389a:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <_ZL12UART0_RxTail>
    389e:	e9 17       	cp	r30, r25
    38a0:	39 f0       	breq	.+14     	; 0x38b0 <__vector_25+0x40>
    38a2:	e0 93 22 05 	sts	0x0522, r30	; 0x800522 <_ZL12UART0_RxHead>
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	eb 5d       	subi	r30, 0xDB	; 219
    38aa:	fa 4f       	sbci	r31, 0xFA	; 250
    38ac:	20 83       	st	Z, r18
    38ae:	01 c0       	rjmp	.+2      	; 0x38b2 <__vector_25+0x42>
    38b0:	82 e0       	ldi	r24, 0x02	; 2
    38b2:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <_ZL17UART0_LastRxError>
    38b6:	ff 91       	pop	r31
    38b8:	ef 91       	pop	r30
    38ba:	9f 91       	pop	r25
    38bc:	8f 91       	pop	r24
    38be:	2f 91       	pop	r18
    38c0:	0f 90       	pop	r0
    38c2:	0b be       	out	0x3b, r0	; 59
    38c4:	0f 90       	pop	r0
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	0f 90       	pop	r0
    38ca:	1f 90       	pop	r1
    38cc:	18 95       	reti

000038ce <__vector_26>:
    38ce:	1f 92       	push	r1
    38d0:	0f 92       	push	r0
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	0f 92       	push	r0
    38d6:	11 24       	eor	r1, r1
    38d8:	0b b6       	in	r0, 0x3b	; 59
    38da:	0f 92       	push	r0
    38dc:	8f 93       	push	r24
    38de:	9f 93       	push	r25
    38e0:	ef 93       	push	r30
    38e2:	ff 93       	push	r31
    38e4:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <_ZL12UART0_TxHead>
    38e8:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <_ZL12UART0_TxTail>
    38ec:	98 17       	cp	r25, r24
    38ee:	69 f0       	breq	.+26     	; 0x390a <__vector_26+0x3c>
    38f0:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <_ZL12UART0_TxTail>
    38f4:	ef 5f       	subi	r30, 0xFF	; 255
    38f6:	ef 71       	andi	r30, 0x1F	; 31
    38f8:	e0 93 23 05 	sts	0x0523, r30	; 0x800523 <_ZL12UART0_TxTail>
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	eb 5b       	subi	r30, 0xBB	; 187
    3900:	fa 4f       	sbci	r31, 0xFA	; 250
    3902:	80 81       	ld	r24, Z
    3904:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3908:	05 c0       	rjmp	.+10     	; 0x3914 <__vector_26+0x46>
    390a:	e1 ec       	ldi	r30, 0xC1	; 193
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	8f 7d       	andi	r24, 0xDF	; 223
    3912:	80 83       	st	Z, r24
    3914:	ff 91       	pop	r31
    3916:	ef 91       	pop	r30
    3918:	9f 91       	pop	r25
    391a:	8f 91       	pop	r24
    391c:	0f 90       	pop	r0
    391e:	0b be       	out	0x3b, r0	; 59
    3920:	0f 90       	pop	r0
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	0f 90       	pop	r0
    3926:	1f 90       	pop	r1
    3928:	18 95       	reti

0000392a <_Z10uart0_initj>:
    392a:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <_ZL12UART0_TxHead>
    392e:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <_ZL12UART0_TxTail>
    3932:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <_ZL12UART0_RxHead>
    3936:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_ZL12UART0_RxTail>
    393a:	99 23       	and	r25, r25
    393c:	24 f4       	brge	.+8      	; 0x3946 <_Z10uart0_initj+0x1c>
    393e:	22 e0       	ldi	r18, 0x02	; 2
    3940:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    3944:	9f 77       	andi	r25, 0x7F	; 127
    3946:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    394a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    394e:	88 e9       	ldi	r24, 0x98	; 152
    3950:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    3954:	86 e0       	ldi	r24, 0x06	; 6
    3956:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    395a:	08 95       	ret

0000395c <_Z10uart0_putch>:
    395c:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <_ZL12UART0_TxHead>
    3960:	2f 5f       	subi	r18, 0xFF	; 255
    3962:	2f 71       	andi	r18, 0x1F	; 31
    3964:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <_ZL12UART0_TxTail>
    3968:	29 17       	cp	r18, r25
    396a:	e1 f3       	breq	.-8      	; 0x3964 <_Z10uart0_putch+0x8>
    396c:	e2 2f       	mov	r30, r18
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	eb 5b       	subi	r30, 0xBB	; 187
    3972:	fa 4f       	sbci	r31, 0xFA	; 250
    3974:	80 83       	st	Z, r24
    3976:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <_ZL12UART0_TxHead>
    397a:	e1 ec       	ldi	r30, 0xC1	; 193
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	80 81       	ld	r24, Z
    3980:	80 62       	ori	r24, 0x20	; 32
    3982:	80 83       	st	Z, r24
    3984:	08 95       	ret

00003986 <_Z10uart0_putsPKc>:
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	ec 01       	movw	r28, r24
    398c:	88 81       	ld	r24, Y
    398e:	88 23       	and	r24, r24
    3990:	29 f0       	breq	.+10     	; 0x399c <_Z10uart0_putsPKc+0x16>
    3992:	21 96       	adiw	r28, 0x01	; 1
    3994:	e3 df       	rcall	.-58     	; 0x395c <_Z10uart0_putch>
    3996:	89 91       	ld	r24, Y+
    3998:	81 11       	cpse	r24, r1
    399a:	fc cf       	rjmp	.-8      	; 0x3994 <_Z10uart0_putsPKc+0xe>
    399c:	df 91       	pop	r29
    399e:	cf 91       	pop	r28
    39a0:	08 95       	ret

000039a2 <__vector_36>:
    39a2:	1f 92       	push	r1
    39a4:	0f 92       	push	r0
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	0f 92       	push	r0
    39aa:	11 24       	eor	r1, r1
    39ac:	0b b6       	in	r0, 0x3b	; 59
    39ae:	0f 92       	push	r0
    39b0:	2f 93       	push	r18
    39b2:	8f 93       	push	r24
    39b4:	9f 93       	push	r25
    39b6:	ef 93       	push	r30
    39b8:	ff 93       	push	r31
    39ba:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    39be:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    39c2:	88 71       	andi	r24, 0x18	; 24
    39c4:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <_ZL12UART1_RxHead>
    39c8:	ef 5f       	subi	r30, 0xFF	; 255
    39ca:	ef 71       	andi	r30, 0x1F	; 31
    39cc:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <_ZL12UART1_RxTail>
    39d0:	e9 17       	cp	r30, r25
    39d2:	39 f0       	breq	.+14     	; 0x39e2 <__vector_36+0x40>
    39d4:	e0 93 dd 04 	sts	0x04DD, r30	; 0x8004dd <_ZL12UART1_RxHead>
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	e0 52       	subi	r30, 0x20	; 32
    39dc:	fb 4f       	sbci	r31, 0xFB	; 251
    39de:	20 83       	st	Z, r18
    39e0:	01 c0       	rjmp	.+2      	; 0x39e4 <__vector_36+0x42>
    39e2:	82 e0       	ldi	r24, 0x02	; 2
    39e4:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <_ZL17UART1_LastRxError>
    39e8:	ff 91       	pop	r31
    39ea:	ef 91       	pop	r30
    39ec:	9f 91       	pop	r25
    39ee:	8f 91       	pop	r24
    39f0:	2f 91       	pop	r18
    39f2:	0f 90       	pop	r0
    39f4:	0b be       	out	0x3b, r0	; 59
    39f6:	0f 90       	pop	r0
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	0f 90       	pop	r0
    39fc:	1f 90       	pop	r1
    39fe:	18 95       	reti

00003a00 <__vector_37>:
    3a00:	1f 92       	push	r1
    3a02:	0f 92       	push	r0
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	0f 92       	push	r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	0b b6       	in	r0, 0x3b	; 59
    3a0c:	0f 92       	push	r0
    3a0e:	8f 93       	push	r24
    3a10:	9f 93       	push	r25
    3a12:	ef 93       	push	r30
    3a14:	ff 93       	push	r31
    3a16:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <_ZL12UART1_TxHead>
    3a1a:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZL12UART1_TxTail>
    3a1e:	98 17       	cp	r25, r24
    3a20:	69 f0       	breq	.+26     	; 0x3a3c <__vector_37+0x3c>
    3a22:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <_ZL12UART1_TxTail>
    3a26:	ef 5f       	subi	r30, 0xFF	; 255
    3a28:	ef 71       	andi	r30, 0x1F	; 31
    3a2a:	e0 93 de 04 	sts	0x04DE, r30	; 0x8004de <_ZL12UART1_TxTail>
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	e0 50       	subi	r30, 0x00	; 0
    3a32:	fb 4f       	sbci	r31, 0xFB	; 251
    3a34:	80 81       	ld	r24, Z
    3a36:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3a3a:	05 c0       	rjmp	.+10     	; 0x3a46 <__vector_37+0x46>
    3a3c:	e9 ec       	ldi	r30, 0xC9	; 201
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	80 81       	ld	r24, Z
    3a42:	8f 7d       	andi	r24, 0xDF	; 223
    3a44:	80 83       	st	Z, r24
    3a46:	ff 91       	pop	r31
    3a48:	ef 91       	pop	r30
    3a4a:	9f 91       	pop	r25
    3a4c:	8f 91       	pop	r24
    3a4e:	0f 90       	pop	r0
    3a50:	0b be       	out	0x3b, r0	; 59
    3a52:	0f 90       	pop	r0
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	0f 90       	pop	r0
    3a58:	1f 90       	pop	r1
    3a5a:	18 95       	reti

00003a5c <__vector_51>:
    3a5c:	1f 92       	push	r1
    3a5e:	0f 92       	push	r0
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	0f 92       	push	r0
    3a64:	11 24       	eor	r1, r1
    3a66:	8f 93       	push	r24
    3a68:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3a6c:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <buffer2>
    3a70:	8f 91       	pop	r24
    3a72:	0f 90       	pop	r0
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	0f 90       	pop	r0
    3a78:	1f 90       	pop	r1
    3a7a:	18 95       	reti

00003a7c <__vector_52>:
    3a7c:	1f 92       	push	r1
    3a7e:	0f 92       	push	r0
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	0f 92       	push	r0
    3a84:	11 24       	eor	r1, r1
    3a86:	0b b6       	in	r0, 0x3b	; 59
    3a88:	0f 92       	push	r0
    3a8a:	8f 93       	push	r24
    3a8c:	9f 93       	push	r25
    3a8e:	ef 93       	push	r30
    3a90:	ff 93       	push	r31
    3a92:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <_ZL12UART2_TxHead>
    3a96:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <_ZL12UART2_TxTail>
    3a9a:	98 17       	cp	r25, r24
    3a9c:	69 f0       	breq	.+26     	; 0x3ab8 <__vector_52+0x3c>
    3a9e:	e0 91 b9 04 	lds	r30, 0x04B9	; 0x8004b9 <_ZL12UART2_TxTail>
    3aa2:	ef 5f       	subi	r30, 0xFF	; 255
    3aa4:	ef 71       	andi	r30, 0x1F	; 31
    3aa6:	e0 93 b9 04 	sts	0x04B9, r30	; 0x8004b9 <_ZL12UART2_TxTail>
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	e5 54       	subi	r30, 0x45	; 69
    3aae:	fb 4f       	sbci	r31, 0xFB	; 251
    3ab0:	80 81       	ld	r24, Z
    3ab2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3ab6:	05 c0       	rjmp	.+10     	; 0x3ac2 <__vector_52+0x46>
    3ab8:	e1 ed       	ldi	r30, 0xD1	; 209
    3aba:	f0 e0       	ldi	r31, 0x00	; 0
    3abc:	80 81       	ld	r24, Z
    3abe:	8f 7d       	andi	r24, 0xDF	; 223
    3ac0:	80 83       	st	Z, r24
    3ac2:	ff 91       	pop	r31
    3ac4:	ef 91       	pop	r30
    3ac6:	9f 91       	pop	r25
    3ac8:	8f 91       	pop	r24
    3aca:	0f 90       	pop	r0
    3acc:	0b be       	out	0x3b, r0	; 59
    3ace:	0f 90       	pop	r0
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	0f 90       	pop	r0
    3ad4:	1f 90       	pop	r1
    3ad6:	18 95       	reti

00003ad8 <_Z10uart2_initj>:
    3ad8:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <_ZL12UART2_TxHead>
    3adc:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <_ZL12UART2_TxTail>
    3ae0:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <_ZL12UART2_RxHead>
    3ae4:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <_ZL12UART2_RxTail>
    3ae8:	99 23       	and	r25, r25
    3aea:	24 f4       	brge	.+8      	; 0x3af4 <_Z10uart2_initj+0x1c>
    3aec:	22 e0       	ldi	r18, 0x02	; 2
    3aee:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    3af2:	9f 77       	andi	r25, 0x7F	; 127
    3af4:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    3af8:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    3afc:	88 e9       	ldi	r24, 0x98	; 152
    3afe:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    3b02:	86 e0       	ldi	r24, 0x06	; 6
    3b04:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    3b08:	08 95       	ret

00003b0a <_Z10uart2_getcv>:
    3b0a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <buffer2>
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	08 95       	ret

00003b12 <_Z10uart2_putch>:
    3b12:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <_ZL12UART2_TxHead>
    3b16:	2f 5f       	subi	r18, 0xFF	; 255
    3b18:	2f 71       	andi	r18, 0x1F	; 31
    3b1a:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <_ZL12UART2_TxTail>
    3b1e:	29 17       	cp	r18, r25
    3b20:	e1 f3       	breq	.-8      	; 0x3b1a <_Z10uart2_putch+0x8>
    3b22:	e2 2f       	mov	r30, r18
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	e5 54       	subi	r30, 0x45	; 69
    3b28:	fb 4f       	sbci	r31, 0xFB	; 251
    3b2a:	80 83       	st	Z, r24
    3b2c:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <_ZL12UART2_TxHead>
    3b30:	e1 ed       	ldi	r30, 0xD1	; 209
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	80 81       	ld	r24, Z
    3b36:	80 62       	ori	r24, 0x20	; 32
    3b38:	80 83       	st	Z, r24
    3b3a:	08 95       	ret

00003b3c <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    3b3c:	1f 92       	push	r1
    3b3e:	0f 92       	push	r0
    3b40:	0f b6       	in	r0, 0x3f	; 63
    3b42:	0f 92       	push	r0
    3b44:	11 24       	eor	r1, r1
    3b46:	0b b6       	in	r0, 0x3b	; 59
    3b48:	0f 92       	push	r0
    3b4a:	2f 93       	push	r18
    3b4c:	8f 93       	push	r24
    3b4e:	9f 93       	push	r25
    3b50:	ef 93       	push	r30
    3b52:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    3b54:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    3b58:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    3b5c:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    3b5e:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <_ZL12UART3_RxHead>
    3b62:	ef 5f       	subi	r30, 0xFF	; 255
    3b64:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    3b66:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <_ZL12UART3_RxTail>
    3b6a:	e9 17       	cp	r30, r25
    3b6c:	39 f0       	breq	.+14     	; 0x3b7c <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    3b6e:	e0 93 74 04 	sts	0x0474, r30	; 0x800474 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	e9 58       	subi	r30, 0x89	; 137
    3b76:	fb 4f       	sbci	r31, 0xFB	; 251
    3b78:	20 83       	st	Z, r18
    3b7a:	01 c0       	rjmp	.+2      	; 0x3b7e <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3b7c:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    3b7e:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <_ZL17UART3_LastRxError>
}
    3b82:	ff 91       	pop	r31
    3b84:	ef 91       	pop	r30
    3b86:	9f 91       	pop	r25
    3b88:	8f 91       	pop	r24
    3b8a:	2f 91       	pop	r18
    3b8c:	0f 90       	pop	r0
    3b8e:	0b be       	out	0x3b, r0	; 59
    3b90:	0f 90       	pop	r0
    3b92:	0f be       	out	0x3f, r0	; 63
    3b94:	0f 90       	pop	r0
    3b96:	1f 90       	pop	r1
    3b98:	18 95       	reti

00003b9a <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    3b9a:	1f 92       	push	r1
    3b9c:	0f 92       	push	r0
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	0f 92       	push	r0
    3ba2:	11 24       	eor	r1, r1
    3ba4:	0b b6       	in	r0, 0x3b	; 59
    3ba6:	0f 92       	push	r0
    3ba8:	8f 93       	push	r24
    3baa:	9f 93       	push	r25
    3bac:	ef 93       	push	r30
    3bae:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    3bb0:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <_ZL12UART3_TxHead>
    3bb4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZL12UART3_TxTail>
    3bb8:	98 17       	cp	r25, r24
    3bba:	69 f0       	breq	.+26     	; 0x3bd6 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    3bbc:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <_ZL12UART3_TxTail>
    3bc0:	ef 5f       	subi	r30, 0xFF	; 255
    3bc2:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    3bc4:	e0 93 75 04 	sts	0x0475, r30	; 0x800475 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    3bc8:	f0 e0       	ldi	r31, 0x00	; 0
    3bca:	e9 56       	subi	r30, 0x69	; 105
    3bcc:	fb 4f       	sbci	r31, 0xFB	; 251
    3bce:	80 81       	ld	r24, Z
    3bd0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3bd4:	05 c0       	rjmp	.+10     	; 0x3be0 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    3bd6:	e1 e3       	ldi	r30, 0x31	; 49
    3bd8:	f1 e0       	ldi	r31, 0x01	; 1
    3bda:	80 81       	ld	r24, Z
    3bdc:	8f 7d       	andi	r24, 0xDF	; 223
    3bde:	80 83       	st	Z, r24
	}
}
    3be0:	ff 91       	pop	r31
    3be2:	ef 91       	pop	r30
    3be4:	9f 91       	pop	r25
    3be6:	8f 91       	pop	r24
    3be8:	0f 90       	pop	r0
    3bea:	0b be       	out	0x3b, r0	; 59
    3bec:	0f 90       	pop	r0
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	0f 90       	pop	r0
    3bf2:	1f 90       	pop	r1
    3bf4:	18 95       	reti

00003bf6 <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    3bf6:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    3bfa:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    3bfe:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    3c02:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    3c06:	99 23       	and	r25, r25
    3c08:	24 f4       	brge	.+8      	; 0x3c12 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    3c0a:	26 e0       	ldi	r18, 0x06	; 6
    3c0c:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    3c10:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    3c12:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    3c16:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    3c1a:	88 e9       	ldi	r24, 0x98	; 152
    3c1c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    3c20:	86 e0       	ldi	r24, 0x06	; 6
    3c22:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    3c26:	08 95       	ret

00003c28 <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    3c28:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZL12UART3_RxHead>
    3c2c:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZL12UART3_RxTail>
    3c30:	98 17       	cp	r25, r24
    3c32:	91 f0       	breq	.+36     	; 0x3c58 <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    3c34:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <_ZL12UART3_RxTail>
    3c38:	ef 5f       	subi	r30, 0xFF	; 255
    3c3a:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    3c3c:	e0 93 73 04 	sts	0x0473, r30	; 0x800473 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    3c40:	f0 e0       	ldi	r31, 0x00	; 0
    3c42:	e9 58       	subi	r30, 0x89	; 137
    3c44:	fb 4f       	sbci	r31, 0xFB	; 251
    3c46:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    3c48:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <_ZL17UART3_LastRxError>
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	98 2f       	mov	r25, r24
    3c50:	88 27       	eor	r24, r24
    3c52:	82 0f       	add	r24, r18
    3c54:	91 1d       	adc	r25, r1
    3c56:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    3c5c:	08 95       	ret

00003c5e <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    3c5e:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <_ZL12UART3_TxHead>
    3c62:	2f 5f       	subi	r18, 0xFF	; 255
    3c64:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    3c66:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <_ZL12UART3_TxTail>
    3c6a:	29 17       	cp	r18, r25
    3c6c:	e1 f3       	breq	.-8      	; 0x3c66 <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    3c6e:	e2 2f       	mov	r30, r18
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	e9 56       	subi	r30, 0x69	; 105
    3c74:	fb 4f       	sbci	r31, 0xFB	; 251
    3c76:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    3c78:	20 93 76 04 	sts	0x0476, r18	; 0x800476 <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    3c7c:	e1 e3       	ldi	r30, 0x31	; 49
    3c7e:	f1 e0       	ldi	r31, 0x01	; 1
    3c80:	80 81       	ld	r24, Z
    3c82:	80 62       	ori	r24, 0x20	; 32
    3c84:	80 83       	st	Z, r24
    3c86:	08 95       	ret

00003c88 <__subsf3>:
    3c88:	50 58       	subi	r21, 0x80	; 128

00003c8a <__addsf3>:
    3c8a:	bb 27       	eor	r27, r27
    3c8c:	aa 27       	eor	r26, r26
    3c8e:	0e d0       	rcall	.+28     	; 0x3cac <__addsf3x>
    3c90:	27 c2       	rjmp	.+1102   	; 0x40e0 <__fp_round>
    3c92:	f0 d1       	rcall	.+992    	; 0x4074 <__fp_pscA>
    3c94:	30 f0       	brcs	.+12     	; 0x3ca2 <__addsf3+0x18>
    3c96:	f5 d1       	rcall	.+1002   	; 0x4082 <__fp_pscB>
    3c98:	20 f0       	brcs	.+8      	; 0x3ca2 <__addsf3+0x18>
    3c9a:	31 f4       	brne	.+12     	; 0x3ca8 <__addsf3+0x1e>
    3c9c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c9e:	11 f4       	brne	.+4      	; 0x3ca4 <__addsf3+0x1a>
    3ca0:	1e f4       	brtc	.+6      	; 0x3ca8 <__addsf3+0x1e>
    3ca2:	c0 c1       	rjmp	.+896    	; 0x4024 <__fp_nan>
    3ca4:	0e f4       	brtc	.+2      	; 0x3ca8 <__addsf3+0x1e>
    3ca6:	e0 95       	com	r30
    3ca8:	e7 fb       	bst	r30, 7
    3caa:	b6 c1       	rjmp	.+876    	; 0x4018 <__fp_inf>

00003cac <__addsf3x>:
    3cac:	e9 2f       	mov	r30, r25
    3cae:	3a d2       	rcall	.+1140   	; 0x4124 <__fp_split3>
    3cb0:	80 f3       	brcs	.-32     	; 0x3c92 <__addsf3+0x8>
    3cb2:	ba 17       	cp	r27, r26
    3cb4:	62 07       	cpc	r22, r18
    3cb6:	73 07       	cpc	r23, r19
    3cb8:	84 07       	cpc	r24, r20
    3cba:	95 07       	cpc	r25, r21
    3cbc:	18 f0       	brcs	.+6      	; 0x3cc4 <__addsf3x+0x18>
    3cbe:	71 f4       	brne	.+28     	; 0x3cdc <__addsf3x+0x30>
    3cc0:	9e f5       	brtc	.+102    	; 0x3d28 <__addsf3x+0x7c>
    3cc2:	52 c2       	rjmp	.+1188   	; 0x4168 <__fp_zero>
    3cc4:	0e f4       	brtc	.+2      	; 0x3cc8 <__addsf3x+0x1c>
    3cc6:	e0 95       	com	r30
    3cc8:	0b 2e       	mov	r0, r27
    3cca:	ba 2f       	mov	r27, r26
    3ccc:	a0 2d       	mov	r26, r0
    3cce:	0b 01       	movw	r0, r22
    3cd0:	b9 01       	movw	r22, r18
    3cd2:	90 01       	movw	r18, r0
    3cd4:	0c 01       	movw	r0, r24
    3cd6:	ca 01       	movw	r24, r20
    3cd8:	a0 01       	movw	r20, r0
    3cda:	11 24       	eor	r1, r1
    3cdc:	ff 27       	eor	r31, r31
    3cde:	59 1b       	sub	r21, r25
    3ce0:	99 f0       	breq	.+38     	; 0x3d08 <__addsf3x+0x5c>
    3ce2:	59 3f       	cpi	r21, 0xF9	; 249
    3ce4:	50 f4       	brcc	.+20     	; 0x3cfa <__addsf3x+0x4e>
    3ce6:	50 3e       	cpi	r21, 0xE0	; 224
    3ce8:	68 f1       	brcs	.+90     	; 0x3d44 <__addsf3x+0x98>
    3cea:	1a 16       	cp	r1, r26
    3cec:	f0 40       	sbci	r31, 0x00	; 0
    3cee:	a2 2f       	mov	r26, r18
    3cf0:	23 2f       	mov	r18, r19
    3cf2:	34 2f       	mov	r19, r20
    3cf4:	44 27       	eor	r20, r20
    3cf6:	58 5f       	subi	r21, 0xF8	; 248
    3cf8:	f3 cf       	rjmp	.-26     	; 0x3ce0 <__addsf3x+0x34>
    3cfa:	46 95       	lsr	r20
    3cfc:	37 95       	ror	r19
    3cfe:	27 95       	ror	r18
    3d00:	a7 95       	ror	r26
    3d02:	f0 40       	sbci	r31, 0x00	; 0
    3d04:	53 95       	inc	r21
    3d06:	c9 f7       	brne	.-14     	; 0x3cfa <__addsf3x+0x4e>
    3d08:	7e f4       	brtc	.+30     	; 0x3d28 <__addsf3x+0x7c>
    3d0a:	1f 16       	cp	r1, r31
    3d0c:	ba 0b       	sbc	r27, r26
    3d0e:	62 0b       	sbc	r22, r18
    3d10:	73 0b       	sbc	r23, r19
    3d12:	84 0b       	sbc	r24, r20
    3d14:	ba f0       	brmi	.+46     	; 0x3d44 <__addsf3x+0x98>
    3d16:	91 50       	subi	r25, 0x01	; 1
    3d18:	a1 f0       	breq	.+40     	; 0x3d42 <__addsf3x+0x96>
    3d1a:	ff 0f       	add	r31, r31
    3d1c:	bb 1f       	adc	r27, r27
    3d1e:	66 1f       	adc	r22, r22
    3d20:	77 1f       	adc	r23, r23
    3d22:	88 1f       	adc	r24, r24
    3d24:	c2 f7       	brpl	.-16     	; 0x3d16 <__addsf3x+0x6a>
    3d26:	0e c0       	rjmp	.+28     	; 0x3d44 <__addsf3x+0x98>
    3d28:	ba 0f       	add	r27, r26
    3d2a:	62 1f       	adc	r22, r18
    3d2c:	73 1f       	adc	r23, r19
    3d2e:	84 1f       	adc	r24, r20
    3d30:	48 f4       	brcc	.+18     	; 0x3d44 <__addsf3x+0x98>
    3d32:	87 95       	ror	r24
    3d34:	77 95       	ror	r23
    3d36:	67 95       	ror	r22
    3d38:	b7 95       	ror	r27
    3d3a:	f7 95       	ror	r31
    3d3c:	9e 3f       	cpi	r25, 0xFE	; 254
    3d3e:	08 f0       	brcs	.+2      	; 0x3d42 <__addsf3x+0x96>
    3d40:	b3 cf       	rjmp	.-154    	; 0x3ca8 <__addsf3+0x1e>
    3d42:	93 95       	inc	r25
    3d44:	88 0f       	add	r24, r24
    3d46:	08 f0       	brcs	.+2      	; 0x3d4a <__addsf3x+0x9e>
    3d48:	99 27       	eor	r25, r25
    3d4a:	ee 0f       	add	r30, r30
    3d4c:	97 95       	ror	r25
    3d4e:	87 95       	ror	r24
    3d50:	08 95       	ret
    3d52:	90 d1       	rcall	.+800    	; 0x4074 <__fp_pscA>
    3d54:	58 f0       	brcs	.+22     	; 0x3d6c <__addsf3x+0xc0>
    3d56:	80 e8       	ldi	r24, 0x80	; 128
    3d58:	91 e0       	ldi	r25, 0x01	; 1
    3d5a:	09 f4       	brne	.+2      	; 0x3d5e <__addsf3x+0xb2>
    3d5c:	9e ef       	ldi	r25, 0xFE	; 254
    3d5e:	91 d1       	rcall	.+802    	; 0x4082 <__fp_pscB>
    3d60:	28 f0       	brcs	.+10     	; 0x3d6c <__addsf3x+0xc0>
    3d62:	40 e8       	ldi	r20, 0x80	; 128
    3d64:	51 e0       	ldi	r21, 0x01	; 1
    3d66:	59 f4       	brne	.+22     	; 0x3d7e <atan2+0xe>
    3d68:	5e ef       	ldi	r21, 0xFE	; 254
    3d6a:	09 c0       	rjmp	.+18     	; 0x3d7e <atan2+0xe>
    3d6c:	5b c1       	rjmp	.+694    	; 0x4024 <__fp_nan>
    3d6e:	fc c1       	rjmp	.+1016   	; 0x4168 <__fp_zero>

00003d70 <atan2>:
    3d70:	e9 2f       	mov	r30, r25
    3d72:	e0 78       	andi	r30, 0x80	; 128
    3d74:	d7 d1       	rcall	.+942    	; 0x4124 <__fp_split3>
    3d76:	68 f3       	brcs	.-38     	; 0x3d52 <__addsf3x+0xa6>
    3d78:	09 2e       	mov	r0, r25
    3d7a:	05 2a       	or	r0, r21
    3d7c:	c1 f3       	breq	.-16     	; 0x3d6e <__addsf3x+0xc2>
    3d7e:	26 17       	cp	r18, r22
    3d80:	37 07       	cpc	r19, r23
    3d82:	48 07       	cpc	r20, r24
    3d84:	59 07       	cpc	r21, r25
    3d86:	38 f0       	brcs	.+14     	; 0x3d96 <atan2+0x26>
    3d88:	0e 2e       	mov	r0, r30
    3d8a:	07 f8       	bld	r0, 7
    3d8c:	e0 25       	eor	r30, r0
    3d8e:	69 f0       	breq	.+26     	; 0x3daa <atan2+0x3a>
    3d90:	e0 25       	eor	r30, r0
    3d92:	e0 64       	ori	r30, 0x40	; 64
    3d94:	0a c0       	rjmp	.+20     	; 0x3daa <atan2+0x3a>
    3d96:	ef 63       	ori	r30, 0x3F	; 63
    3d98:	07 f8       	bld	r0, 7
    3d9a:	00 94       	com	r0
    3d9c:	07 fa       	bst	r0, 7
    3d9e:	db 01       	movw	r26, r22
    3da0:	b9 01       	movw	r22, r18
    3da2:	9d 01       	movw	r18, r26
    3da4:	dc 01       	movw	r26, r24
    3da6:	ca 01       	movw	r24, r20
    3da8:	ad 01       	movw	r20, r26
    3daa:	ef 93       	push	r30
    3dac:	4a d0       	rcall	.+148    	; 0x3e42 <__divsf3_pse>
    3dae:	98 d1       	rcall	.+816    	; 0x40e0 <__fp_round>
    3db0:	0a d0       	rcall	.+20     	; 0x3dc6 <atan>
    3db2:	5f 91       	pop	r21
    3db4:	55 23       	and	r21, r21
    3db6:	31 f0       	breq	.+12     	; 0x3dc4 <atan2+0x54>
    3db8:	2b ed       	ldi	r18, 0xDB	; 219
    3dba:	3f e0       	ldi	r19, 0x0F	; 15
    3dbc:	49 e4       	ldi	r20, 0x49	; 73
    3dbe:	50 fd       	sbrc	r21, 0
    3dc0:	49 ec       	ldi	r20, 0xC9	; 201
    3dc2:	63 cf       	rjmp	.-314    	; 0x3c8a <__addsf3>
    3dc4:	08 95       	ret

00003dc6 <atan>:
    3dc6:	df 93       	push	r29
    3dc8:	dd 27       	eor	r29, r29
    3dca:	b9 2f       	mov	r27, r25
    3dcc:	bf 77       	andi	r27, 0x7F	; 127
    3dce:	40 e8       	ldi	r20, 0x80	; 128
    3dd0:	5f e3       	ldi	r21, 0x3F	; 63
    3dd2:	16 16       	cp	r1, r22
    3dd4:	17 06       	cpc	r1, r23
    3dd6:	48 07       	cpc	r20, r24
    3dd8:	5b 07       	cpc	r21, r27
    3dda:	10 f4       	brcc	.+4      	; 0x3de0 <atan+0x1a>
    3ddc:	d9 2f       	mov	r29, r25
    3dde:	cf d1       	rcall	.+926    	; 0x417e <inverse>
    3de0:	9f 93       	push	r25
    3de2:	8f 93       	push	r24
    3de4:	7f 93       	push	r23
    3de6:	6f 93       	push	r22
    3de8:	7c d2       	rcall	.+1272   	; 0x42e2 <square>
    3dea:	e4 ee       	ldi	r30, 0xE4	; 228
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	1d d1       	rcall	.+570    	; 0x402a <__fp_powser>
    3df0:	77 d1       	rcall	.+750    	; 0x40e0 <__fp_round>
    3df2:	2f 91       	pop	r18
    3df4:	3f 91       	pop	r19
    3df6:	4f 91       	pop	r20
    3df8:	5f 91       	pop	r21
    3dfa:	d4 d1       	rcall	.+936    	; 0x41a4 <__mulsf3x>
    3dfc:	dd 23       	and	r29, r29
    3dfe:	49 f0       	breq	.+18     	; 0x3e12 <atan+0x4c>
    3e00:	90 58       	subi	r25, 0x80	; 128
    3e02:	a2 ea       	ldi	r26, 0xA2	; 162
    3e04:	2a ed       	ldi	r18, 0xDA	; 218
    3e06:	3f e0       	ldi	r19, 0x0F	; 15
    3e08:	49 ec       	ldi	r20, 0xC9	; 201
    3e0a:	5f e3       	ldi	r21, 0x3F	; 63
    3e0c:	d0 78       	andi	r29, 0x80	; 128
    3e0e:	5d 27       	eor	r21, r29
    3e10:	4d df       	rcall	.-358    	; 0x3cac <__addsf3x>
    3e12:	df 91       	pop	r29
    3e14:	65 c1       	rjmp	.+714    	; 0x40e0 <__fp_round>

00003e16 <__cmpsf2>:
    3e16:	dc d0       	rcall	.+440    	; 0x3fd0 <__fp_cmp>
    3e18:	08 f4       	brcc	.+2      	; 0x3e1c <__cmpsf2+0x6>
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	08 95       	ret

00003e1e <cos>:
    3e1e:	39 d1       	rcall	.+626    	; 0x4092 <__fp_rempio2>
    3e20:	e3 95       	inc	r30
    3e22:	6f c1       	rjmp	.+734    	; 0x4102 <__fp_sinus>

00003e24 <__divsf3>:
    3e24:	0c d0       	rcall	.+24     	; 0x3e3e <__divsf3x>
    3e26:	5c c1       	rjmp	.+696    	; 0x40e0 <__fp_round>
    3e28:	2c d1       	rcall	.+600    	; 0x4082 <__fp_pscB>
    3e2a:	40 f0       	brcs	.+16     	; 0x3e3c <__divsf3+0x18>
    3e2c:	23 d1       	rcall	.+582    	; 0x4074 <__fp_pscA>
    3e2e:	30 f0       	brcs	.+12     	; 0x3e3c <__divsf3+0x18>
    3e30:	21 f4       	brne	.+8      	; 0x3e3a <__divsf3+0x16>
    3e32:	5f 3f       	cpi	r21, 0xFF	; 255
    3e34:	19 f0       	breq	.+6      	; 0x3e3c <__divsf3+0x18>
    3e36:	f0 c0       	rjmp	.+480    	; 0x4018 <__fp_inf>
    3e38:	51 11       	cpse	r21, r1
    3e3a:	97 c1       	rjmp	.+814    	; 0x416a <__fp_szero>
    3e3c:	f3 c0       	rjmp	.+486    	; 0x4024 <__fp_nan>

00003e3e <__divsf3x>:
    3e3e:	72 d1       	rcall	.+740    	; 0x4124 <__fp_split3>
    3e40:	98 f3       	brcs	.-26     	; 0x3e28 <__divsf3+0x4>

00003e42 <__divsf3_pse>:
    3e42:	99 23       	and	r25, r25
    3e44:	c9 f3       	breq	.-14     	; 0x3e38 <__divsf3+0x14>
    3e46:	55 23       	and	r21, r21
    3e48:	b1 f3       	breq	.-20     	; 0x3e36 <__divsf3+0x12>
    3e4a:	95 1b       	sub	r25, r21
    3e4c:	55 0b       	sbc	r21, r21
    3e4e:	bb 27       	eor	r27, r27
    3e50:	aa 27       	eor	r26, r26
    3e52:	62 17       	cp	r22, r18
    3e54:	73 07       	cpc	r23, r19
    3e56:	84 07       	cpc	r24, r20
    3e58:	38 f0       	brcs	.+14     	; 0x3e68 <__divsf3_pse+0x26>
    3e5a:	9f 5f       	subi	r25, 0xFF	; 255
    3e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5e:	22 0f       	add	r18, r18
    3e60:	33 1f       	adc	r19, r19
    3e62:	44 1f       	adc	r20, r20
    3e64:	aa 1f       	adc	r26, r26
    3e66:	a9 f3       	breq	.-22     	; 0x3e52 <__divsf3_pse+0x10>
    3e68:	33 d0       	rcall	.+102    	; 0x3ed0 <__divsf3_pse+0x8e>
    3e6a:	0e 2e       	mov	r0, r30
    3e6c:	3a f0       	brmi	.+14     	; 0x3e7c <__divsf3_pse+0x3a>
    3e6e:	e0 e8       	ldi	r30, 0x80	; 128
    3e70:	30 d0       	rcall	.+96     	; 0x3ed2 <__divsf3_pse+0x90>
    3e72:	91 50       	subi	r25, 0x01	; 1
    3e74:	50 40       	sbci	r21, 0x00	; 0
    3e76:	e6 95       	lsr	r30
    3e78:	00 1c       	adc	r0, r0
    3e7a:	ca f7       	brpl	.-14     	; 0x3e6e <__divsf3_pse+0x2c>
    3e7c:	29 d0       	rcall	.+82     	; 0x3ed0 <__divsf3_pse+0x8e>
    3e7e:	fe 2f       	mov	r31, r30
    3e80:	27 d0       	rcall	.+78     	; 0x3ed0 <__divsf3_pse+0x8e>
    3e82:	66 0f       	add	r22, r22
    3e84:	77 1f       	adc	r23, r23
    3e86:	88 1f       	adc	r24, r24
    3e88:	bb 1f       	adc	r27, r27
    3e8a:	26 17       	cp	r18, r22
    3e8c:	37 07       	cpc	r19, r23
    3e8e:	48 07       	cpc	r20, r24
    3e90:	ab 07       	cpc	r26, r27
    3e92:	b0 e8       	ldi	r27, 0x80	; 128
    3e94:	09 f0       	breq	.+2      	; 0x3e98 <__divsf3_pse+0x56>
    3e96:	bb 0b       	sbc	r27, r27
    3e98:	80 2d       	mov	r24, r0
    3e9a:	bf 01       	movw	r22, r30
    3e9c:	ff 27       	eor	r31, r31
    3e9e:	93 58       	subi	r25, 0x83	; 131
    3ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ea2:	2a f0       	brmi	.+10     	; 0x3eae <__divsf3_pse+0x6c>
    3ea4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ea6:	51 05       	cpc	r21, r1
    3ea8:	68 f0       	brcs	.+26     	; 0x3ec4 <__divsf3_pse+0x82>
    3eaa:	b6 c0       	rjmp	.+364    	; 0x4018 <__fp_inf>
    3eac:	5e c1       	rjmp	.+700    	; 0x416a <__fp_szero>
    3eae:	5f 3f       	cpi	r21, 0xFF	; 255
    3eb0:	ec f3       	brlt	.-6      	; 0x3eac <__divsf3_pse+0x6a>
    3eb2:	98 3e       	cpi	r25, 0xE8	; 232
    3eb4:	dc f3       	brlt	.-10     	; 0x3eac <__divsf3_pse+0x6a>
    3eb6:	86 95       	lsr	r24
    3eb8:	77 95       	ror	r23
    3eba:	67 95       	ror	r22
    3ebc:	b7 95       	ror	r27
    3ebe:	f7 95       	ror	r31
    3ec0:	9f 5f       	subi	r25, 0xFF	; 255
    3ec2:	c9 f7       	brne	.-14     	; 0x3eb6 <__divsf3_pse+0x74>
    3ec4:	88 0f       	add	r24, r24
    3ec6:	91 1d       	adc	r25, r1
    3ec8:	96 95       	lsr	r25
    3eca:	87 95       	ror	r24
    3ecc:	97 f9       	bld	r25, 7
    3ece:	08 95       	ret
    3ed0:	e1 e0       	ldi	r30, 0x01	; 1
    3ed2:	66 0f       	add	r22, r22
    3ed4:	77 1f       	adc	r23, r23
    3ed6:	88 1f       	adc	r24, r24
    3ed8:	bb 1f       	adc	r27, r27
    3eda:	62 17       	cp	r22, r18
    3edc:	73 07       	cpc	r23, r19
    3ede:	84 07       	cpc	r24, r20
    3ee0:	ba 07       	cpc	r27, r26
    3ee2:	20 f0       	brcs	.+8      	; 0x3eec <__divsf3_pse+0xaa>
    3ee4:	62 1b       	sub	r22, r18
    3ee6:	73 0b       	sbc	r23, r19
    3ee8:	84 0b       	sbc	r24, r20
    3eea:	ba 0b       	sbc	r27, r26
    3eec:	ee 1f       	adc	r30, r30
    3eee:	88 f7       	brcc	.-30     	; 0x3ed2 <__divsf3_pse+0x90>
    3ef0:	e0 95       	com	r30
    3ef2:	08 95       	ret

00003ef4 <__fixsfsi>:
    3ef4:	04 d0       	rcall	.+8      	; 0x3efe <__fixunssfsi>
    3ef6:	68 94       	set
    3ef8:	b1 11       	cpse	r27, r1
    3efa:	37 c1       	rjmp	.+622    	; 0x416a <__fp_szero>
    3efc:	08 95       	ret

00003efe <__fixunssfsi>:
    3efe:	1a d1       	rcall	.+564    	; 0x4134 <__fp_splitA>
    3f00:	88 f0       	brcs	.+34     	; 0x3f24 <__fixunssfsi+0x26>
    3f02:	9f 57       	subi	r25, 0x7F	; 127
    3f04:	90 f0       	brcs	.+36     	; 0x3f2a <__fixunssfsi+0x2c>
    3f06:	b9 2f       	mov	r27, r25
    3f08:	99 27       	eor	r25, r25
    3f0a:	b7 51       	subi	r27, 0x17	; 23
    3f0c:	a0 f0       	brcs	.+40     	; 0x3f36 <__fixunssfsi+0x38>
    3f0e:	d1 f0       	breq	.+52     	; 0x3f44 <__fixunssfsi+0x46>
    3f10:	66 0f       	add	r22, r22
    3f12:	77 1f       	adc	r23, r23
    3f14:	88 1f       	adc	r24, r24
    3f16:	99 1f       	adc	r25, r25
    3f18:	1a f0       	brmi	.+6      	; 0x3f20 <__fixunssfsi+0x22>
    3f1a:	ba 95       	dec	r27
    3f1c:	c9 f7       	brne	.-14     	; 0x3f10 <__fixunssfsi+0x12>
    3f1e:	12 c0       	rjmp	.+36     	; 0x3f44 <__fixunssfsi+0x46>
    3f20:	b1 30       	cpi	r27, 0x01	; 1
    3f22:	81 f0       	breq	.+32     	; 0x3f44 <__fixunssfsi+0x46>
    3f24:	21 d1       	rcall	.+578    	; 0x4168 <__fp_zero>
    3f26:	b1 e0       	ldi	r27, 0x01	; 1
    3f28:	08 95       	ret
    3f2a:	1e c1       	rjmp	.+572    	; 0x4168 <__fp_zero>
    3f2c:	67 2f       	mov	r22, r23
    3f2e:	78 2f       	mov	r23, r24
    3f30:	88 27       	eor	r24, r24
    3f32:	b8 5f       	subi	r27, 0xF8	; 248
    3f34:	39 f0       	breq	.+14     	; 0x3f44 <__fixunssfsi+0x46>
    3f36:	b9 3f       	cpi	r27, 0xF9	; 249
    3f38:	cc f3       	brlt	.-14     	; 0x3f2c <__fixunssfsi+0x2e>
    3f3a:	86 95       	lsr	r24
    3f3c:	77 95       	ror	r23
    3f3e:	67 95       	ror	r22
    3f40:	b3 95       	inc	r27
    3f42:	d9 f7       	brne	.-10     	; 0x3f3a <__fixunssfsi+0x3c>
    3f44:	3e f4       	brtc	.+14     	; 0x3f54 <__fixunssfsi+0x56>
    3f46:	90 95       	com	r25
    3f48:	80 95       	com	r24
    3f4a:	70 95       	com	r23
    3f4c:	61 95       	neg	r22
    3f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f50:	8f 4f       	sbci	r24, 0xFF	; 255
    3f52:	9f 4f       	sbci	r25, 0xFF	; 255
    3f54:	08 95       	ret

00003f56 <__floatunsisf>:
    3f56:	e8 94       	clt
    3f58:	09 c0       	rjmp	.+18     	; 0x3f6c <__floatsisf+0x12>

00003f5a <__floatsisf>:
    3f5a:	97 fb       	bst	r25, 7
    3f5c:	3e f4       	brtc	.+14     	; 0x3f6c <__floatsisf+0x12>
    3f5e:	90 95       	com	r25
    3f60:	80 95       	com	r24
    3f62:	70 95       	com	r23
    3f64:	61 95       	neg	r22
    3f66:	7f 4f       	sbci	r23, 0xFF	; 255
    3f68:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6c:	99 23       	and	r25, r25
    3f6e:	a9 f0       	breq	.+42     	; 0x3f9a <__floatsisf+0x40>
    3f70:	f9 2f       	mov	r31, r25
    3f72:	96 e9       	ldi	r25, 0x96	; 150
    3f74:	bb 27       	eor	r27, r27
    3f76:	93 95       	inc	r25
    3f78:	f6 95       	lsr	r31
    3f7a:	87 95       	ror	r24
    3f7c:	77 95       	ror	r23
    3f7e:	67 95       	ror	r22
    3f80:	b7 95       	ror	r27
    3f82:	f1 11       	cpse	r31, r1
    3f84:	f8 cf       	rjmp	.-16     	; 0x3f76 <__floatsisf+0x1c>
    3f86:	fa f4       	brpl	.+62     	; 0x3fc6 <__floatsisf+0x6c>
    3f88:	bb 0f       	add	r27, r27
    3f8a:	11 f4       	brne	.+4      	; 0x3f90 <__floatsisf+0x36>
    3f8c:	60 ff       	sbrs	r22, 0
    3f8e:	1b c0       	rjmp	.+54     	; 0x3fc6 <__floatsisf+0x6c>
    3f90:	6f 5f       	subi	r22, 0xFF	; 255
    3f92:	7f 4f       	sbci	r23, 0xFF	; 255
    3f94:	8f 4f       	sbci	r24, 0xFF	; 255
    3f96:	9f 4f       	sbci	r25, 0xFF	; 255
    3f98:	16 c0       	rjmp	.+44     	; 0x3fc6 <__floatsisf+0x6c>
    3f9a:	88 23       	and	r24, r24
    3f9c:	11 f0       	breq	.+4      	; 0x3fa2 <__floatsisf+0x48>
    3f9e:	96 e9       	ldi	r25, 0x96	; 150
    3fa0:	11 c0       	rjmp	.+34     	; 0x3fc4 <__floatsisf+0x6a>
    3fa2:	77 23       	and	r23, r23
    3fa4:	21 f0       	breq	.+8      	; 0x3fae <__floatsisf+0x54>
    3fa6:	9e e8       	ldi	r25, 0x8E	; 142
    3fa8:	87 2f       	mov	r24, r23
    3faa:	76 2f       	mov	r23, r22
    3fac:	05 c0       	rjmp	.+10     	; 0x3fb8 <__floatsisf+0x5e>
    3fae:	66 23       	and	r22, r22
    3fb0:	71 f0       	breq	.+28     	; 0x3fce <__floatsisf+0x74>
    3fb2:	96 e8       	ldi	r25, 0x86	; 134
    3fb4:	86 2f       	mov	r24, r22
    3fb6:	70 e0       	ldi	r23, 0x00	; 0
    3fb8:	60 e0       	ldi	r22, 0x00	; 0
    3fba:	2a f0       	brmi	.+10     	; 0x3fc6 <__floatsisf+0x6c>
    3fbc:	9a 95       	dec	r25
    3fbe:	66 0f       	add	r22, r22
    3fc0:	77 1f       	adc	r23, r23
    3fc2:	88 1f       	adc	r24, r24
    3fc4:	da f7       	brpl	.-10     	; 0x3fbc <__floatsisf+0x62>
    3fc6:	88 0f       	add	r24, r24
    3fc8:	96 95       	lsr	r25
    3fca:	87 95       	ror	r24
    3fcc:	97 f9       	bld	r25, 7
    3fce:	08 95       	ret

00003fd0 <__fp_cmp>:
    3fd0:	99 0f       	add	r25, r25
    3fd2:	00 08       	sbc	r0, r0
    3fd4:	55 0f       	add	r21, r21
    3fd6:	aa 0b       	sbc	r26, r26
    3fd8:	e0 e8       	ldi	r30, 0x80	; 128
    3fda:	fe ef       	ldi	r31, 0xFE	; 254
    3fdc:	16 16       	cp	r1, r22
    3fde:	17 06       	cpc	r1, r23
    3fe0:	e8 07       	cpc	r30, r24
    3fe2:	f9 07       	cpc	r31, r25
    3fe4:	c0 f0       	brcs	.+48     	; 0x4016 <__fp_cmp+0x46>
    3fe6:	12 16       	cp	r1, r18
    3fe8:	13 06       	cpc	r1, r19
    3fea:	e4 07       	cpc	r30, r20
    3fec:	f5 07       	cpc	r31, r21
    3fee:	98 f0       	brcs	.+38     	; 0x4016 <__fp_cmp+0x46>
    3ff0:	62 1b       	sub	r22, r18
    3ff2:	73 0b       	sbc	r23, r19
    3ff4:	84 0b       	sbc	r24, r20
    3ff6:	95 0b       	sbc	r25, r21
    3ff8:	39 f4       	brne	.+14     	; 0x4008 <__fp_cmp+0x38>
    3ffa:	0a 26       	eor	r0, r26
    3ffc:	61 f0       	breq	.+24     	; 0x4016 <__fp_cmp+0x46>
    3ffe:	23 2b       	or	r18, r19
    4000:	24 2b       	or	r18, r20
    4002:	25 2b       	or	r18, r21
    4004:	21 f4       	brne	.+8      	; 0x400e <__fp_cmp+0x3e>
    4006:	08 95       	ret
    4008:	0a 26       	eor	r0, r26
    400a:	09 f4       	brne	.+2      	; 0x400e <__fp_cmp+0x3e>
    400c:	a1 40       	sbci	r26, 0x01	; 1
    400e:	a6 95       	lsr	r26
    4010:	8f ef       	ldi	r24, 0xFF	; 255
    4012:	81 1d       	adc	r24, r1
    4014:	81 1d       	adc	r24, r1
    4016:	08 95       	ret

00004018 <__fp_inf>:
    4018:	97 f9       	bld	r25, 7
    401a:	9f 67       	ori	r25, 0x7F	; 127
    401c:	80 e8       	ldi	r24, 0x80	; 128
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	08 95       	ret

00004024 <__fp_nan>:
    4024:	9f ef       	ldi	r25, 0xFF	; 255
    4026:	80 ec       	ldi	r24, 0xC0	; 192
    4028:	08 95       	ret

0000402a <__fp_powser>:
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	1f 93       	push	r17
    4030:	0f 93       	push	r16
    4032:	ff 92       	push	r15
    4034:	ef 92       	push	r14
    4036:	df 92       	push	r13
    4038:	7b 01       	movw	r14, r22
    403a:	8c 01       	movw	r16, r24
    403c:	68 94       	set
    403e:	05 c0       	rjmp	.+10     	; 0x404a <__fp_powser+0x20>
    4040:	da 2e       	mov	r13, r26
    4042:	ef 01       	movw	r28, r30
    4044:	af d0       	rcall	.+350    	; 0x41a4 <__mulsf3x>
    4046:	fe 01       	movw	r30, r28
    4048:	e8 94       	clt
    404a:	a5 91       	lpm	r26, Z+
    404c:	25 91       	lpm	r18, Z+
    404e:	35 91       	lpm	r19, Z+
    4050:	45 91       	lpm	r20, Z+
    4052:	55 91       	lpm	r21, Z+
    4054:	ae f3       	brts	.-22     	; 0x4040 <__fp_powser+0x16>
    4056:	ef 01       	movw	r28, r30
    4058:	29 de       	rcall	.-942    	; 0x3cac <__addsf3x>
    405a:	fe 01       	movw	r30, r28
    405c:	97 01       	movw	r18, r14
    405e:	a8 01       	movw	r20, r16
    4060:	da 94       	dec	r13
    4062:	79 f7       	brne	.-34     	; 0x4042 <__fp_powser+0x18>
    4064:	df 90       	pop	r13
    4066:	ef 90       	pop	r14
    4068:	ff 90       	pop	r15
    406a:	0f 91       	pop	r16
    406c:	1f 91       	pop	r17
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	08 95       	ret

00004074 <__fp_pscA>:
    4074:	00 24       	eor	r0, r0
    4076:	0a 94       	dec	r0
    4078:	16 16       	cp	r1, r22
    407a:	17 06       	cpc	r1, r23
    407c:	18 06       	cpc	r1, r24
    407e:	09 06       	cpc	r0, r25
    4080:	08 95       	ret

00004082 <__fp_pscB>:
    4082:	00 24       	eor	r0, r0
    4084:	0a 94       	dec	r0
    4086:	12 16       	cp	r1, r18
    4088:	13 06       	cpc	r1, r19
    408a:	14 06       	cpc	r1, r20
    408c:	05 06       	cpc	r0, r21
    408e:	08 95       	ret
    4090:	c9 cf       	rjmp	.-110    	; 0x4024 <__fp_nan>

00004092 <__fp_rempio2>:
    4092:	50 d0       	rcall	.+160    	; 0x4134 <__fp_splitA>
    4094:	e8 f3       	brcs	.-6      	; 0x4090 <__fp_pscB+0xe>
    4096:	e8 94       	clt
    4098:	e0 e0       	ldi	r30, 0x00	; 0
    409a:	bb 27       	eor	r27, r27
    409c:	9f 57       	subi	r25, 0x7F	; 127
    409e:	f0 f0       	brcs	.+60     	; 0x40dc <__fp_rempio2+0x4a>
    40a0:	2a ed       	ldi	r18, 0xDA	; 218
    40a2:	3f e0       	ldi	r19, 0x0F	; 15
    40a4:	49 ec       	ldi	r20, 0xC9	; 201
    40a6:	06 c0       	rjmp	.+12     	; 0x40b4 <__fp_rempio2+0x22>
    40a8:	ee 0f       	add	r30, r30
    40aa:	bb 0f       	add	r27, r27
    40ac:	66 1f       	adc	r22, r22
    40ae:	77 1f       	adc	r23, r23
    40b0:	88 1f       	adc	r24, r24
    40b2:	28 f0       	brcs	.+10     	; 0x40be <__fp_rempio2+0x2c>
    40b4:	b2 3a       	cpi	r27, 0xA2	; 162
    40b6:	62 07       	cpc	r22, r18
    40b8:	73 07       	cpc	r23, r19
    40ba:	84 07       	cpc	r24, r20
    40bc:	28 f0       	brcs	.+10     	; 0x40c8 <__fp_rempio2+0x36>
    40be:	b2 5a       	subi	r27, 0xA2	; 162
    40c0:	62 0b       	sbc	r22, r18
    40c2:	73 0b       	sbc	r23, r19
    40c4:	84 0b       	sbc	r24, r20
    40c6:	e3 95       	inc	r30
    40c8:	9a 95       	dec	r25
    40ca:	72 f7       	brpl	.-36     	; 0x40a8 <__fp_rempio2+0x16>
    40cc:	80 38       	cpi	r24, 0x80	; 128
    40ce:	30 f4       	brcc	.+12     	; 0x40dc <__fp_rempio2+0x4a>
    40d0:	9a 95       	dec	r25
    40d2:	bb 0f       	add	r27, r27
    40d4:	66 1f       	adc	r22, r22
    40d6:	77 1f       	adc	r23, r23
    40d8:	88 1f       	adc	r24, r24
    40da:	d2 f7       	brpl	.-12     	; 0x40d0 <__fp_rempio2+0x3e>
    40dc:	90 48       	sbci	r25, 0x80	; 128
    40de:	06 c1       	rjmp	.+524    	; 0x42ec <__fp_mpack_finite>

000040e0 <__fp_round>:
    40e0:	09 2e       	mov	r0, r25
    40e2:	03 94       	inc	r0
    40e4:	00 0c       	add	r0, r0
    40e6:	11 f4       	brne	.+4      	; 0x40ec <__fp_round+0xc>
    40e8:	88 23       	and	r24, r24
    40ea:	52 f0       	brmi	.+20     	; 0x4100 <__fp_round+0x20>
    40ec:	bb 0f       	add	r27, r27
    40ee:	40 f4       	brcc	.+16     	; 0x4100 <__fp_round+0x20>
    40f0:	bf 2b       	or	r27, r31
    40f2:	11 f4       	brne	.+4      	; 0x40f8 <__fp_round+0x18>
    40f4:	60 ff       	sbrs	r22, 0
    40f6:	04 c0       	rjmp	.+8      	; 0x4100 <__fp_round+0x20>
    40f8:	6f 5f       	subi	r22, 0xFF	; 255
    40fa:	7f 4f       	sbci	r23, 0xFF	; 255
    40fc:	8f 4f       	sbci	r24, 0xFF	; 255
    40fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4100:	08 95       	ret

00004102 <__fp_sinus>:
    4102:	ef 93       	push	r30
    4104:	e0 ff       	sbrs	r30, 0
    4106:	06 c0       	rjmp	.+12     	; 0x4114 <__fp_sinus+0x12>
    4108:	a2 ea       	ldi	r26, 0xA2	; 162
    410a:	2a ed       	ldi	r18, 0xDA	; 218
    410c:	3f e0       	ldi	r19, 0x0F	; 15
    410e:	49 ec       	ldi	r20, 0xC9	; 201
    4110:	5f eb       	ldi	r21, 0xBF	; 191
    4112:	cc dd       	rcall	.-1128   	; 0x3cac <__addsf3x>
    4114:	e5 df       	rcall	.-54     	; 0x40e0 <__fp_round>
    4116:	0f 90       	pop	r0
    4118:	03 94       	inc	r0
    411a:	01 fc       	sbrc	r0, 1
    411c:	90 58       	subi	r25, 0x80	; 128
    411e:	e1 e1       	ldi	r30, 0x11	; 17
    4120:	f1 e0       	ldi	r31, 0x01	; 1
    4122:	f7 c0       	rjmp	.+494    	; 0x4312 <__fp_powsodd>

00004124 <__fp_split3>:
    4124:	57 fd       	sbrc	r21, 7
    4126:	90 58       	subi	r25, 0x80	; 128
    4128:	44 0f       	add	r20, r20
    412a:	55 1f       	adc	r21, r21
    412c:	59 f0       	breq	.+22     	; 0x4144 <__fp_splitA+0x10>
    412e:	5f 3f       	cpi	r21, 0xFF	; 255
    4130:	71 f0       	breq	.+28     	; 0x414e <__fp_splitA+0x1a>
    4132:	47 95       	ror	r20

00004134 <__fp_splitA>:
    4134:	88 0f       	add	r24, r24
    4136:	97 fb       	bst	r25, 7
    4138:	99 1f       	adc	r25, r25
    413a:	61 f0       	breq	.+24     	; 0x4154 <__fp_splitA+0x20>
    413c:	9f 3f       	cpi	r25, 0xFF	; 255
    413e:	79 f0       	breq	.+30     	; 0x415e <__fp_splitA+0x2a>
    4140:	87 95       	ror	r24
    4142:	08 95       	ret
    4144:	12 16       	cp	r1, r18
    4146:	13 06       	cpc	r1, r19
    4148:	14 06       	cpc	r1, r20
    414a:	55 1f       	adc	r21, r21
    414c:	f2 cf       	rjmp	.-28     	; 0x4132 <__fp_split3+0xe>
    414e:	46 95       	lsr	r20
    4150:	f1 df       	rcall	.-30     	; 0x4134 <__fp_splitA>
    4152:	08 c0       	rjmp	.+16     	; 0x4164 <__fp_splitA+0x30>
    4154:	16 16       	cp	r1, r22
    4156:	17 06       	cpc	r1, r23
    4158:	18 06       	cpc	r1, r24
    415a:	99 1f       	adc	r25, r25
    415c:	f1 cf       	rjmp	.-30     	; 0x4140 <__fp_splitA+0xc>
    415e:	86 95       	lsr	r24
    4160:	71 05       	cpc	r23, r1
    4162:	61 05       	cpc	r22, r1
    4164:	08 94       	sec
    4166:	08 95       	ret

00004168 <__fp_zero>:
    4168:	e8 94       	clt

0000416a <__fp_szero>:
    416a:	bb 27       	eor	r27, r27
    416c:	66 27       	eor	r22, r22
    416e:	77 27       	eor	r23, r23
    4170:	cb 01       	movw	r24, r22
    4172:	97 f9       	bld	r25, 7
    4174:	08 95       	ret

00004176 <__gesf2>:
    4176:	2c df       	rcall	.-424    	; 0x3fd0 <__fp_cmp>
    4178:	08 f4       	brcc	.+2      	; 0x417c <__gesf2+0x6>
    417a:	8f ef       	ldi	r24, 0xFF	; 255
    417c:	08 95       	ret

0000417e <inverse>:
    417e:	9b 01       	movw	r18, r22
    4180:	ac 01       	movw	r20, r24
    4182:	60 e0       	ldi	r22, 0x00	; 0
    4184:	70 e0       	ldi	r23, 0x00	; 0
    4186:	80 e8       	ldi	r24, 0x80	; 128
    4188:	9f e3       	ldi	r25, 0x3F	; 63
    418a:	4c ce       	rjmp	.-872    	; 0x3e24 <__divsf3>

0000418c <__mulsf3>:
    418c:	0b d0       	rcall	.+22     	; 0x41a4 <__mulsf3x>
    418e:	a8 cf       	rjmp	.-176    	; 0x40e0 <__fp_round>
    4190:	71 df       	rcall	.-286    	; 0x4074 <__fp_pscA>
    4192:	28 f0       	brcs	.+10     	; 0x419e <__mulsf3+0x12>
    4194:	76 df       	rcall	.-276    	; 0x4082 <__fp_pscB>
    4196:	18 f0       	brcs	.+6      	; 0x419e <__mulsf3+0x12>
    4198:	95 23       	and	r25, r21
    419a:	09 f0       	breq	.+2      	; 0x419e <__mulsf3+0x12>
    419c:	3d cf       	rjmp	.-390    	; 0x4018 <__fp_inf>
    419e:	42 cf       	rjmp	.-380    	; 0x4024 <__fp_nan>
    41a0:	11 24       	eor	r1, r1
    41a2:	e3 cf       	rjmp	.-58     	; 0x416a <__fp_szero>

000041a4 <__mulsf3x>:
    41a4:	bf df       	rcall	.-130    	; 0x4124 <__fp_split3>
    41a6:	a0 f3       	brcs	.-24     	; 0x4190 <__mulsf3+0x4>

000041a8 <__mulsf3_pse>:
    41a8:	95 9f       	mul	r25, r21
    41aa:	d1 f3       	breq	.-12     	; 0x41a0 <__mulsf3+0x14>
    41ac:	95 0f       	add	r25, r21
    41ae:	50 e0       	ldi	r21, 0x00	; 0
    41b0:	55 1f       	adc	r21, r21
    41b2:	62 9f       	mul	r22, r18
    41b4:	f0 01       	movw	r30, r0
    41b6:	72 9f       	mul	r23, r18
    41b8:	bb 27       	eor	r27, r27
    41ba:	f0 0d       	add	r31, r0
    41bc:	b1 1d       	adc	r27, r1
    41be:	63 9f       	mul	r22, r19
    41c0:	aa 27       	eor	r26, r26
    41c2:	f0 0d       	add	r31, r0
    41c4:	b1 1d       	adc	r27, r1
    41c6:	aa 1f       	adc	r26, r26
    41c8:	64 9f       	mul	r22, r20
    41ca:	66 27       	eor	r22, r22
    41cc:	b0 0d       	add	r27, r0
    41ce:	a1 1d       	adc	r26, r1
    41d0:	66 1f       	adc	r22, r22
    41d2:	82 9f       	mul	r24, r18
    41d4:	22 27       	eor	r18, r18
    41d6:	b0 0d       	add	r27, r0
    41d8:	a1 1d       	adc	r26, r1
    41da:	62 1f       	adc	r22, r18
    41dc:	73 9f       	mul	r23, r19
    41de:	b0 0d       	add	r27, r0
    41e0:	a1 1d       	adc	r26, r1
    41e2:	62 1f       	adc	r22, r18
    41e4:	83 9f       	mul	r24, r19
    41e6:	a0 0d       	add	r26, r0
    41e8:	61 1d       	adc	r22, r1
    41ea:	22 1f       	adc	r18, r18
    41ec:	74 9f       	mul	r23, r20
    41ee:	33 27       	eor	r19, r19
    41f0:	a0 0d       	add	r26, r0
    41f2:	61 1d       	adc	r22, r1
    41f4:	23 1f       	adc	r18, r19
    41f6:	84 9f       	mul	r24, r20
    41f8:	60 0d       	add	r22, r0
    41fa:	21 1d       	adc	r18, r1
    41fc:	82 2f       	mov	r24, r18
    41fe:	76 2f       	mov	r23, r22
    4200:	6a 2f       	mov	r22, r26
    4202:	11 24       	eor	r1, r1
    4204:	9f 57       	subi	r25, 0x7F	; 127
    4206:	50 40       	sbci	r21, 0x00	; 0
    4208:	8a f0       	brmi	.+34     	; 0x422c <__mulsf3_pse+0x84>
    420a:	e1 f0       	breq	.+56     	; 0x4244 <__mulsf3_pse+0x9c>
    420c:	88 23       	and	r24, r24
    420e:	4a f0       	brmi	.+18     	; 0x4222 <__mulsf3_pse+0x7a>
    4210:	ee 0f       	add	r30, r30
    4212:	ff 1f       	adc	r31, r31
    4214:	bb 1f       	adc	r27, r27
    4216:	66 1f       	adc	r22, r22
    4218:	77 1f       	adc	r23, r23
    421a:	88 1f       	adc	r24, r24
    421c:	91 50       	subi	r25, 0x01	; 1
    421e:	50 40       	sbci	r21, 0x00	; 0
    4220:	a9 f7       	brne	.-22     	; 0x420c <__mulsf3_pse+0x64>
    4222:	9e 3f       	cpi	r25, 0xFE	; 254
    4224:	51 05       	cpc	r21, r1
    4226:	70 f0       	brcs	.+28     	; 0x4244 <__mulsf3_pse+0x9c>
    4228:	f7 ce       	rjmp	.-530    	; 0x4018 <__fp_inf>
    422a:	9f cf       	rjmp	.-194    	; 0x416a <__fp_szero>
    422c:	5f 3f       	cpi	r21, 0xFF	; 255
    422e:	ec f3       	brlt	.-6      	; 0x422a <__mulsf3_pse+0x82>
    4230:	98 3e       	cpi	r25, 0xE8	; 232
    4232:	dc f3       	brlt	.-10     	; 0x422a <__mulsf3_pse+0x82>
    4234:	86 95       	lsr	r24
    4236:	77 95       	ror	r23
    4238:	67 95       	ror	r22
    423a:	b7 95       	ror	r27
    423c:	f7 95       	ror	r31
    423e:	e7 95       	ror	r30
    4240:	9f 5f       	subi	r25, 0xFF	; 255
    4242:	c1 f7       	brne	.-16     	; 0x4234 <__mulsf3_pse+0x8c>
    4244:	fe 2b       	or	r31, r30
    4246:	88 0f       	add	r24, r24
    4248:	91 1d       	adc	r25, r1
    424a:	96 95       	lsr	r25
    424c:	87 95       	ror	r24
    424e:	97 f9       	bld	r25, 7
    4250:	08 95       	ret

00004252 <sin>:
    4252:	9f 93       	push	r25
    4254:	1e df       	rcall	.-452    	; 0x4092 <__fp_rempio2>
    4256:	0f 90       	pop	r0
    4258:	07 fc       	sbrc	r0, 7
    425a:	ee 5f       	subi	r30, 0xFE	; 254
    425c:	52 cf       	rjmp	.-348    	; 0x4102 <__fp_sinus>
    425e:	11 f4       	brne	.+4      	; 0x4264 <sin+0x12>
    4260:	0e f4       	brtc	.+2      	; 0x4264 <sin+0x12>
    4262:	e0 ce       	rjmp	.-576    	; 0x4024 <__fp_nan>
    4264:	41 c0       	rjmp	.+130    	; 0x42e8 <__fp_mpack>

00004266 <sqrt>:
    4266:	66 df       	rcall	.-308    	; 0x4134 <__fp_splitA>
    4268:	d0 f3       	brcs	.-12     	; 0x425e <sin+0xc>
    426a:	99 23       	and	r25, r25
    426c:	d9 f3       	breq	.-10     	; 0x4264 <sin+0x12>
    426e:	ce f3       	brts	.-14     	; 0x4262 <sin+0x10>
    4270:	9f 57       	subi	r25, 0x7F	; 127
    4272:	55 0b       	sbc	r21, r21
    4274:	87 ff       	sbrs	r24, 7
    4276:	46 d0       	rcall	.+140    	; 0x4304 <__fp_norm2>
    4278:	00 24       	eor	r0, r0
    427a:	a0 e6       	ldi	r26, 0x60	; 96
    427c:	40 ea       	ldi	r20, 0xA0	; 160
    427e:	90 01       	movw	r18, r0
    4280:	80 58       	subi	r24, 0x80	; 128
    4282:	56 95       	lsr	r21
    4284:	97 95       	ror	r25
    4286:	28 f4       	brcc	.+10     	; 0x4292 <sqrt+0x2c>
    4288:	80 5c       	subi	r24, 0xC0	; 192
    428a:	66 0f       	add	r22, r22
    428c:	77 1f       	adc	r23, r23
    428e:	88 1f       	adc	r24, r24
    4290:	20 f0       	brcs	.+8      	; 0x429a <sqrt+0x34>
    4292:	26 17       	cp	r18, r22
    4294:	37 07       	cpc	r19, r23
    4296:	48 07       	cpc	r20, r24
    4298:	30 f4       	brcc	.+12     	; 0x42a6 <sqrt+0x40>
    429a:	62 1b       	sub	r22, r18
    429c:	73 0b       	sbc	r23, r19
    429e:	84 0b       	sbc	r24, r20
    42a0:	20 29       	or	r18, r0
    42a2:	31 29       	or	r19, r1
    42a4:	4a 2b       	or	r20, r26
    42a6:	a6 95       	lsr	r26
    42a8:	17 94       	ror	r1
    42aa:	07 94       	ror	r0
    42ac:	20 25       	eor	r18, r0
    42ae:	31 25       	eor	r19, r1
    42b0:	4a 27       	eor	r20, r26
    42b2:	58 f7       	brcc	.-42     	; 0x428a <sqrt+0x24>
    42b4:	66 0f       	add	r22, r22
    42b6:	77 1f       	adc	r23, r23
    42b8:	88 1f       	adc	r24, r24
    42ba:	20 f0       	brcs	.+8      	; 0x42c4 <sqrt+0x5e>
    42bc:	26 17       	cp	r18, r22
    42be:	37 07       	cpc	r19, r23
    42c0:	48 07       	cpc	r20, r24
    42c2:	30 f4       	brcc	.+12     	; 0x42d0 <sqrt+0x6a>
    42c4:	62 0b       	sbc	r22, r18
    42c6:	73 0b       	sbc	r23, r19
    42c8:	84 0b       	sbc	r24, r20
    42ca:	20 0d       	add	r18, r0
    42cc:	31 1d       	adc	r19, r1
    42ce:	41 1d       	adc	r20, r1
    42d0:	a0 95       	com	r26
    42d2:	81 f7       	brne	.-32     	; 0x42b4 <sqrt+0x4e>
    42d4:	b9 01       	movw	r22, r18
    42d6:	84 2f       	mov	r24, r20
    42d8:	91 58       	subi	r25, 0x81	; 129
    42da:	88 0f       	add	r24, r24
    42dc:	96 95       	lsr	r25
    42de:	87 95       	ror	r24
    42e0:	08 95       	ret

000042e2 <square>:
    42e2:	9b 01       	movw	r18, r22
    42e4:	ac 01       	movw	r20, r24
    42e6:	52 cf       	rjmp	.-348    	; 0x418c <__mulsf3>

000042e8 <__fp_mpack>:
    42e8:	9f 3f       	cpi	r25, 0xFF	; 255
    42ea:	31 f0       	breq	.+12     	; 0x42f8 <__fp_mpack_finite+0xc>

000042ec <__fp_mpack_finite>:
    42ec:	91 50       	subi	r25, 0x01	; 1
    42ee:	20 f4       	brcc	.+8      	; 0x42f8 <__fp_mpack_finite+0xc>
    42f0:	87 95       	ror	r24
    42f2:	77 95       	ror	r23
    42f4:	67 95       	ror	r22
    42f6:	b7 95       	ror	r27
    42f8:	88 0f       	add	r24, r24
    42fa:	91 1d       	adc	r25, r1
    42fc:	96 95       	lsr	r25
    42fe:	87 95       	ror	r24
    4300:	97 f9       	bld	r25, 7
    4302:	08 95       	ret

00004304 <__fp_norm2>:
    4304:	91 50       	subi	r25, 0x01	; 1
    4306:	50 40       	sbci	r21, 0x00	; 0
    4308:	66 0f       	add	r22, r22
    430a:	77 1f       	adc	r23, r23
    430c:	88 1f       	adc	r24, r24
    430e:	d2 f7       	brpl	.-12     	; 0x4304 <__fp_norm2>
    4310:	08 95       	ret

00004312 <__fp_powsodd>:
    4312:	9f 93       	push	r25
    4314:	8f 93       	push	r24
    4316:	7f 93       	push	r23
    4318:	6f 93       	push	r22
    431a:	ff 93       	push	r31
    431c:	ef 93       	push	r30
    431e:	9b 01       	movw	r18, r22
    4320:	ac 01       	movw	r20, r24
    4322:	34 df       	rcall	.-408    	; 0x418c <__mulsf3>
    4324:	ef 91       	pop	r30
    4326:	ff 91       	pop	r31
    4328:	80 de       	rcall	.-768    	; 0x402a <__fp_powser>
    432a:	2f 91       	pop	r18
    432c:	3f 91       	pop	r19
    432e:	4f 91       	pop	r20
    4330:	5f 91       	pop	r21
    4332:	2c cf       	rjmp	.-424    	; 0x418c <__mulsf3>

00004334 <__divmodhi4>:
    4334:	97 fb       	bst	r25, 7
    4336:	07 2e       	mov	r0, r23
    4338:	16 f4       	brtc	.+4      	; 0x433e <__divmodhi4+0xa>
    433a:	00 94       	com	r0
    433c:	06 d0       	rcall	.+12     	; 0x434a <__divmodhi4_neg1>
    433e:	77 fd       	sbrc	r23, 7
    4340:	08 d0       	rcall	.+16     	; 0x4352 <__divmodhi4_neg2>
    4342:	0b d0       	rcall	.+22     	; 0x435a <__udivmodhi4>
    4344:	07 fc       	sbrc	r0, 7
    4346:	05 d0       	rcall	.+10     	; 0x4352 <__divmodhi4_neg2>
    4348:	3e f4       	brtc	.+14     	; 0x4358 <__divmodhi4_exit>

0000434a <__divmodhi4_neg1>:
    434a:	90 95       	com	r25
    434c:	81 95       	neg	r24
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	08 95       	ret

00004352 <__divmodhi4_neg2>:
    4352:	70 95       	com	r23
    4354:	61 95       	neg	r22
    4356:	7f 4f       	sbci	r23, 0xFF	; 255

00004358 <__divmodhi4_exit>:
    4358:	08 95       	ret

0000435a <__udivmodhi4>:
    435a:	aa 1b       	sub	r26, r26
    435c:	bb 1b       	sub	r27, r27
    435e:	51 e1       	ldi	r21, 0x11	; 17
    4360:	07 c0       	rjmp	.+14     	; 0x4370 <__udivmodhi4_ep>

00004362 <__udivmodhi4_loop>:
    4362:	aa 1f       	adc	r26, r26
    4364:	bb 1f       	adc	r27, r27
    4366:	a6 17       	cp	r26, r22
    4368:	b7 07       	cpc	r27, r23
    436a:	10 f0       	brcs	.+4      	; 0x4370 <__udivmodhi4_ep>
    436c:	a6 1b       	sub	r26, r22
    436e:	b7 0b       	sbc	r27, r23

00004370 <__udivmodhi4_ep>:
    4370:	88 1f       	adc	r24, r24
    4372:	99 1f       	adc	r25, r25
    4374:	5a 95       	dec	r21
    4376:	a9 f7       	brne	.-22     	; 0x4362 <__udivmodhi4_loop>
    4378:	80 95       	com	r24
    437a:	90 95       	com	r25
    437c:	bc 01       	movw	r22, r24
    437e:	cd 01       	movw	r24, r26
    4380:	08 95       	ret

00004382 <__tablejump2__>:
    4382:	ee 0f       	add	r30, r30
    4384:	ff 1f       	adc	r31, r31
    4386:	88 1f       	adc	r24, r24
    4388:	8b bf       	out	0x3b, r24	; 59
    438a:	07 90       	elpm	r0, Z+
    438c:	f6 91       	elpm	r31, Z
    438e:	e0 2d       	mov	r30, r0
    4390:	19 94       	eijmp

00004392 <_exit>:
    4392:	f8 94       	cli

00004394 <__stop_program>:
    4394:	ff cf       	rjmp	.-2      	; 0x4394 <__stop_program>
