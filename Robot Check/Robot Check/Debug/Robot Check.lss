
Robot Check.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800200  000020da  0000216e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  00800256  00800256  000021c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000330c  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a0  00000000  00000000  00005750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001461  00000000  00000000  00006af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c4  00000000  00000000  00007f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e0  00000000  00000000  00008718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001627  00000000  00000000  000097f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000ae1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	d3 c0       	rjmp	.+422    	; 0x1ac <__vector_1>
       6:	00 00       	nop
       8:	f8 c0       	rjmp	.+496    	; 0x1fa <__vector_2>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__vector_3>
       e:	00 00       	nop
      10:	42 c1       	rjmp	.+644    	; 0x296 <__vector_4>
      12:	00 00       	nop
      14:	67 c1       	rjmp	.+718    	; 0x2e4 <__vector_5>
      16:	00 00       	nop
      18:	8c c1       	rjmp	.+792    	; 0x332 <__vector_6>
      1a:	00 00       	nop
      1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
      32:	00 00       	nop
      34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	91 c1       	rjmp	.+802    	; 0x380 <__vector_23>
      5e:	00 00       	nop
      60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__vector_25>
      68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c0       	rjmp	.+186    	; 0x148 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__vector_36>
      94:	59 c0       	rjmp	.+178    	; 0x148 <__bad_interrupt>
      96:	00 00       	nop
      98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	55 c0       	rjmp	.+170    	; 0x148 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	51 c0       	rjmp	.+162    	; 0x148 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4f c0       	rjmp	.+158    	; 0x148 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c0       	rjmp	.+146    	; 0x148 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c0       	rjmp	.+138    	; 0x148 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__vector_51>
      d0:	3b c0       	rjmp	.+118    	; 0x148 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__vector_54>
      dc:	35 c0       	rjmp	.+106    	; 0x148 <__bad_interrupt>
      de:	00 00       	nop
      e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	86 0b       	sbc	r24, r22

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ea ed       	ldi	r30, 0xDA	; 218
      fe:	f0 e2       	ldi	r31, 0x20	; 32
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a6 35       	cpi	r26, 0x56	; 86
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	23 e0       	ldi	r18, 0x03	; 3
     112:	a6 e5       	ldi	r26, 0x56	; 86
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 31       	cpi	r26, 0x1B	; 27
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 30 10 	call	0x2060	; 0x2060 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	0e 94 8d 0a 	call	0x151a	; 0x151a <main>
     144:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <_exit>

00000148 <__bad_interrupt>:
     148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <_ZN7encoder22Init_encoder_interruptEv>:
extern encoder encoderX,encoderY,e1,e2,e3,e4;


void encoder::Init_encoder_interrupt()
{
	sei();
     14a:	78 94       	sei
	EICRA = 0b11111111;
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	80 93 69 00 	sts	0x0069, r24
	EICRB = 0b00001111;
     152:	8f e0       	ldi	r24, 0x0F	; 15
     154:	80 93 6a 00 	sts	0x006A, r24
	EIMSK |= (1<<INT0) | (1<<INT1) | (1<<INT2) | (1<<INT3) | (1<<INT4) | (1<<INT5) ;
     158:	8d b3       	in	r24, 0x1d	; 29
     15a:	8f 63       	ori	r24, 0x3F	; 63
     15c:	8d bb       	out	0x1d, r24	; 29
     15e:	08 95       	ret

00000160 <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     160:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     162:	85 b5       	in	r24, 0x25	; 37
     164:	85 60       	ori	r24, 0x05	; 5
     166:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	80 93 6e 00 	sts	0x006E, r24
     16e:	08 95       	ret

00000170 <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
{
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     176:	68 81       	ld	r22, Y
     178:	79 81       	ldd	r23, Y+1	; 0x01
     17a:	07 2e       	mov	r0, r23
     17c:	00 0c       	add	r0, r0
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     186:	2e ef       	ldi	r18, 0xFE	; 254
     188:	34 e3       	ldi	r19, 0x34	; 52
     18a:	46 e3       	ldi	r20, 0x36	; 54
     18c:	53 e4       	ldi	r21, 0x43	; 67
     18e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	48 e4       	ldi	r20, 0x48	; 72
     198:	53 e4       	ldi	r21, 0x43	; 67
     19a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__divsf3>
     19e:	6c 83       	std	Y+4, r22	; 0x04
     1a0:	7d 83       	std	Y+5, r23	; 0x05
     1a2:	8e 83       	std	Y+6, r24	; 0x06
     1a4:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <__vector_1>:

ISR(INT0_vect)	//for x -axis
{
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	0b b6       	in	r0, 0x3b	; 59
     1b8:	0f 92       	push	r0
     1ba:	8f 93       	push	r24
     1bc:	9f 93       	push	r25
     1be:	ef 93       	push	r30
     1c0:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     1c2:	00 9b       	sbis	0x00, 0	; 0
     1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <__vector_1+0x2a>
			Init_timer();
		}

		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1c6:	eb e7       	ldi	r30, 0x7B	; 123
     1c8:	f2 e0       	ldi	r31, 0x02	; 2
     1ca:	80 81       	ld	r24, Z
     1cc:	91 81       	ldd	r25, Z+1	; 0x01
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	91 83       	std	Z+1, r25	; 0x01
     1d2:	80 83       	st	Z, r24
     1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <__vector_1+0x38>
		inline void dcr_count(){count_encoder--;};
     1d6:	eb e7       	ldi	r30, 0x7B	; 123
     1d8:	f2 e0       	ldi	r31, 0x02	; 2
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	91 83       	std	Z+1, r25	; 0x01
     1e2:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}	 
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	0f 90       	pop	r0
     1ee:	0b be       	out	0x3b, r0	; 59
     1f0:	0f 90       	pop	r0
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	0f 90       	pop	r0
     1f6:	1f 90       	pop	r1
     1f8:	18 95       	reti

000001fa <__vector_2>:
ISR(INT1_vect)
{
     1fa:	1f 92       	push	r1
     1fc:	0f 92       	push	r0
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	0b b6       	in	r0, 0x3b	; 59
     206:	0f 92       	push	r0
     208:	8f 93       	push	r24
     20a:	9f 93       	push	r25
     20c:	ef 93       	push	r30
     20e:	ff 93       	push	r31
	if((bit_is_set(PINA,PA1)))
     210:	01 9b       	sbis	0x00, 1	; 0
     212:	08 c0       	rjmp	.+16     	; 0x224 <__vector_2+0x2a>
			Init_timer();
		}

		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     214:	e3 e7       	ldi	r30, 0x73	; 115
     216:	f2 e0       	ldi	r31, 0x02	; 2
     218:	80 81       	ld	r24, Z
     21a:	91 81       	ldd	r25, Z+1	; 0x01
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	91 83       	std	Z+1, r25	; 0x01
     220:	80 83       	st	Z, r24
     222:	07 c0       	rjmp	.+14     	; 0x232 <__vector_2+0x38>
		inline void dcr_count(){count_encoder--;};
     224:	e3 e7       	ldi	r30, 0x73	; 115
     226:	f2 e0       	ldi	r31, 0x02	; 2
     228:	80 81       	ld	r24, Z
     22a:	91 81       	ldd	r25, Z+1	; 0x01
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	91 83       	std	Z+1, r25	; 0x01
     230:	80 83       	st	Z, r24
		e1.inc_count();
	}
	else
	e1.dcr_count();

}
     232:	ff 91       	pop	r31
     234:	ef 91       	pop	r30
     236:	9f 91       	pop	r25
     238:	8f 91       	pop	r24
     23a:	0f 90       	pop	r0
     23c:	0b be       	out	0x3b, r0	; 59
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <__vector_3>:
ISR(INT2_vect)
{
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	0b b6       	in	r0, 0x3b	; 59
     254:	0f 92       	push	r0
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	ef 93       	push	r30
     25c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA2)))
     25e:	02 9b       	sbis	0x00, 2	; 0
     260:	08 c0       	rjmp	.+16     	; 0x272 <__vector_3+0x2a>
			Init_timer();
		}

		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     262:	eb e6       	ldi	r30, 0x6B	; 107
     264:	f2 e0       	ldi	r31, 0x02	; 2
     266:	80 81       	ld	r24, Z
     268:	91 81       	ldd	r25, Z+1	; 0x01
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	91 83       	std	Z+1, r25	; 0x01
     26e:	80 83       	st	Z, r24
     270:	07 c0       	rjmp	.+14     	; 0x280 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     272:	eb e6       	ldi	r30, 0x6B	; 107
     274:	f2 e0       	ldi	r31, 0x02	; 2
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	91 83       	std	Z+1, r25	; 0x01
     27e:	80 83       	st	Z, r24
	{
		e2.inc_count();
	}
	else
	e2.dcr_count();
}
     280:	ff 91       	pop	r31
     282:	ef 91       	pop	r30
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	0f 90       	pop	r0
     28a:	0b be       	out	0x3b, r0	; 59
     28c:	0f 90       	pop	r0
     28e:	0f be       	out	0x3f, r0	; 63
     290:	0f 90       	pop	r0
     292:	1f 90       	pop	r1
     294:	18 95       	reti

00000296 <__vector_4>:
ISR(INT3_vect)
{
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
     2a0:	0b b6       	in	r0, 0x3b	; 59
     2a2:	0f 92       	push	r0
     2a4:	8f 93       	push	r24
     2a6:	9f 93       	push	r25
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
	if((bit_is_set(PINA,PA3)))
     2ac:	03 9b       	sbis	0x00, 3	; 0
     2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <__vector_4+0x2a>
			Init_timer();
		}

		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     2b0:	e3 e6       	ldi	r30, 0x63	; 99
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	91 83       	std	Z+1, r25	; 0x01
     2bc:	80 83       	st	Z, r24
     2be:	07 c0       	rjmp	.+14     	; 0x2ce <__vector_4+0x38>
		inline void dcr_count(){count_encoder--;};
     2c0:	e3 e6       	ldi	r30, 0x63	; 99
     2c2:	f2 e0       	ldi	r31, 0x02	; 2
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	91 83       	std	Z+1, r25	; 0x01
     2cc:	80 83       	st	Z, r24
	{
		e3.inc_count();
	}
	else
		e3.dcr_count();
}
     2ce:	ff 91       	pop	r31
     2d0:	ef 91       	pop	r30
     2d2:	9f 91       	pop	r25
     2d4:	8f 91       	pop	r24
     2d6:	0f 90       	pop	r0
     2d8:	0b be       	out	0x3b, r0	; 59
     2da:	0f 90       	pop	r0
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	0f 90       	pop	r0
     2e0:	1f 90       	pop	r1
     2e2:	18 95       	reti

000002e4 <__vector_5>:
ISR(INT4_vect)
{
     2e4:	1f 92       	push	r1
     2e6:	0f 92       	push	r0
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	0f 92       	push	r0
     2ec:	11 24       	eor	r1, r1
     2ee:	0b b6       	in	r0, 0x3b	; 59
     2f0:	0f 92       	push	r0
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
     2f6:	ef 93       	push	r30
     2f8:	ff 93       	push	r31
	if((bit_is_set(PINA,PA4)))
     2fa:	04 9b       	sbis	0x00, 4	; 0
     2fc:	08 c0       	rjmp	.+16     	; 0x30e <__vector_5+0x2a>
			Init_timer();
		}

		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     2fe:	eb e5       	ldi	r30, 0x5B	; 91
     300:	f2 e0       	ldi	r31, 0x02	; 2
     302:	80 81       	ld	r24, Z
     304:	91 81       	ldd	r25, Z+1	; 0x01
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	07 c0       	rjmp	.+14     	; 0x31c <__vector_5+0x38>
		inline void dcr_count(){count_encoder--;};
     30e:	eb e5       	ldi	r30, 0x5B	; 91
     310:	f2 e0       	ldi	r31, 0x02	; 2
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
	{
		e4.inc_count();
	}
	else
	e4.dcr_count();
}
     31c:	ff 91       	pop	r31
     31e:	ef 91       	pop	r30
     320:	9f 91       	pop	r25
     322:	8f 91       	pop	r24
     324:	0f 90       	pop	r0
     326:	0b be       	out	0x3b, r0	; 59
     328:	0f 90       	pop	r0
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	0f 90       	pop	r0
     32e:	1f 90       	pop	r1
     330:	18 95       	reti

00000332 <__vector_6>:
ISR(INT5_vect)	//for y-axis
{
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	11 24       	eor	r1, r1
     33c:	0b b6       	in	r0, 0x3b	; 59
     33e:	0f 92       	push	r0
     340:	8f 93       	push	r24
     342:	9f 93       	push	r25
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
	if((bit_is_set(PINA,PA6)))
     348:	06 9b       	sbis	0x00, 6	; 0
     34a:	08 c0       	rjmp	.+16     	; 0x35c <__vector_6+0x2a>
			Init_timer();
		}

		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     34c:	e3 e8       	ldi	r30, 0x83	; 131
     34e:	f2 e0       	ldi	r31, 0x02	; 2
     350:	80 81       	ld	r24, Z
     352:	91 81       	ldd	r25, Z+1	; 0x01
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	91 83       	std	Z+1, r25	; 0x01
     358:	80 83       	st	Z, r24
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     35c:	e3 e8       	ldi	r30, 0x83	; 131
     35e:	f2 e0       	ldi	r31, 0x02	; 2
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	91 83       	std	Z+1, r25	; 0x01
     368:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     36a:	ff 91       	pop	r31
     36c:	ef 91       	pop	r30
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	0f 90       	pop	r0
     374:	0b be       	out	0x3b, r0	; 59
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     380:	1f 92       	push	r1
     382:	0f 92       	push	r0
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	0f 92       	push	r0
     388:	11 24       	eor	r1, r1
     38a:	0b b6       	in	r0, 0x3b	; 59
     38c:	0f 92       	push	r0
     38e:	8f 93       	push	r24
     390:	9f 93       	push	r25
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     396:	e3 e7       	ldi	r30, 0x73	; 115
     398:	f2 e0       	ldi	r31, 0x02	; 2
     39a:	80 81       	ld	r24, Z
     39c:	91 81       	ldd	r25, Z+1	; 0x01
     39e:	93 83       	std	Z+3, r25	; 0x03
     3a0:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     3a2:	11 82       	std	Z+1, r1	; 0x01
     3a4:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     3a6:	eb e6       	ldi	r30, 0x6B	; 107
     3a8:	f2 e0       	ldi	r31, 0x02	; 2
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	93 83       	std	Z+3, r25	; 0x03
     3b0:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     3b2:	11 82       	std	Z+1, r1	; 0x01
     3b4:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     3b6:	e3 e6       	ldi	r30, 0x63	; 99
     3b8:	f2 e0       	ldi	r31, 0x02	; 2
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	93 83       	std	Z+3, r25	; 0x03
     3c0:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     3c2:	11 82       	std	Z+1, r1	; 0x01
     3c4:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     3c6:	eb e5       	ldi	r30, 0x5B	; 91
     3c8:	f2 e0       	ldi	r31, 0x02	; 2
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	93 83       	std	Z+3, r25	; 0x03
     3d0:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     3d2:	11 82       	std	Z+1, r1	; 0x01
     3d4:	10 82       	st	Z, r1
	e1.setspeed();
	e2.setspeed();
	e3.setspeed();
	e4.setspeed();
	
     3d6:	ff 91       	pop	r31
     3d8:	ef 91       	pop	r30
     3da:	9f 91       	pop	r25
     3dc:	8f 91       	pop	r24
     3de:	0f 90       	pop	r0
     3e0:	0b be       	out	0x3b, r0	; 59
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <_ZN5MotorC1Eh>:

     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	ec 01       	movw	r28, r24
			num = no;
     3f2:	68 83       	st	Y, r22
			InitPWM();
     3f4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN5Motor7InitPWMEv>
			StopMotor();
     3f8:	ce 01       	movw	r24, r28
     3fa:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN5Motor9StopMotorEv>
			SetOcrValue(0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	ce 01       	movw	r24, r28
     404:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN5Motor11SetOcrValueEi>
			
		}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <_Z4rampii>:
bodyPid encoderx, encodery;

/////////////////////////////////////////////////////////

void ramp(int axis,int direction)
{
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	eb 01       	movw	r28, r22
	if(axis == X_Axis){	
     418:	00 97       	sbiw	r24, 0x00	; 0
     41a:	09 f0       	breq	.+2      	; 0x41e <_Z4rampii+0x10>
     41c:	75 c0       	rjmp	.+234    	; 0x508 <_Z4rampii+0xfa>
		currentDistance = abs(encoderX.getdistance());
     41e:	83 e8       	ldi	r24, 0x83	; 131
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	a6 de       	rcall	.-692    	; 0x170 <_ZN7encoder11getdistanceEv>
     424:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     428:	9b 01       	movw	r18, r22
     42a:	77 23       	and	r23, r23
     42c:	24 f4       	brge	.+8      	; 0x436 <_Z4rampii+0x28>
     42e:	22 27       	eor	r18, r18
     430:	33 27       	eor	r19, r19
     432:	26 1b       	sub	r18, r22
     434:	37 0b       	sbc	r19, r23
     436:	b9 01       	movw	r22, r18
     438:	30 93 f3 02 	sts	0x02F3, r19
     43c:	20 93 f2 02 	sts	0x02F2, r18
		difference = distanceX - currentDistance;
     440:	00 91 f6 02 	lds	r16, 0x02F6
     444:	10 91 f7 02 	lds	r17, 0x02F7
     448:	02 1b       	sub	r16, r18
     44a:	13 0b       	sbc	r17, r19
     44c:	10 93 f1 02 	sts	0x02F1, r17
     450:	00 93 f0 02 	sts	0x02F0, r16
		if(difference > 0){
     454:	10 16       	cp	r1, r16
     456:	11 06       	cpc	r1, r17
     458:	0c f0       	brlt	.+2      	; 0x45c <_Z4rampii+0x4e>
     45a:	d1 c0       	rjmp	.+418    	; 0x5fe <_Z4rampii+0x1f0>
			if(currentDistance < 1000)		//ramp up
     45c:	28 3e       	cpi	r18, 0xE8	; 232
     45e:	33 40       	sbci	r19, 0x03	; 3
     460:	ec f4       	brge	.+58     	; 0x49c <_Z4rampii+0x8e>
			{
				velocity_robot[0] = 30 + 0.12*currentDistance;
     462:	07 2e       	mov	r0, r23
     464:	00 0c       	add	r0, r0
     466:	88 0b       	sbc	r24, r24
     468:	99 0b       	sbc	r25, r25
     46a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     46e:	2f e8       	ldi	r18, 0x8F	; 143
     470:	32 ec       	ldi	r19, 0xC2	; 194
     472:	45 ef       	ldi	r20, 0xF5	; 245
     474:	5d e3       	ldi	r21, 0x3D	; 61
     476:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 ef       	ldi	r20, 0xF0	; 240
     480:	51 e4       	ldi	r21, 0x41	; 65
     482:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     486:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     48a:	70 93 f9 02 	sts	0x02F9, r23
     48e:	60 93 f8 02 	sts	0x02F8, r22
			{
				velocity_robot[0] = 150;
				fullspeed = true;
			}
		
			if(fullspeed && difference < 1500)//ramp down
     492:	80 91 ef 02 	lds	r24, 0x02EF
     496:	88 23       	and	r24, r24
     498:	51 f1       	breq	.+84     	; 0x4ee <_Z4rampii+0xe0>
     49a:	09 c0       	rjmp	.+18     	; 0x4ae <_Z4rampii+0xa0>
				velocity_robot[0] = 30 + 0.12*currentDistance;
			}
		
			else if(currentDistance >= 1000)		//same speed
			{
				velocity_robot[0] = 150;
     49c:	86 e9       	ldi	r24, 0x96	; 150
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	90 93 f9 02 	sts	0x02F9, r25
     4a4:	80 93 f8 02 	sts	0x02F8, r24
				fullspeed = true;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 ef 02 	sts	0x02EF, r24
			}
		
			if(fullspeed && difference < 1500)//ramp down
     4ae:	0c 3d       	cpi	r16, 0xDC	; 220
     4b0:	85 e0       	ldi	r24, 0x05	; 5
     4b2:	18 07       	cpc	r17, r24
     4b4:	e4 f4       	brge	.+56     	; 0x4ee <_Z4rampii+0xe0>
			{
				velocity_robot[0] =  0.1*difference ;
     4b6:	b8 01       	movw	r22, r16
     4b8:	11 0f       	add	r17, r17
     4ba:	88 0b       	sbc	r24, r24
     4bc:	99 0b       	sbc	r25, r25
     4be:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     4c2:	2d ec       	ldi	r18, 0xCD	; 205
     4c4:	3c ec       	ldi	r19, 0xCC	; 204
     4c6:	4c ec       	ldi	r20, 0xCC	; 204
     4c8:	5d e3       	ldi	r21, 0x3D	; 61
     4ca:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     4ce:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
				if(velocity_robot[0] < 40)
     4d2:	68 32       	cpi	r22, 0x28	; 40
     4d4:	71 05       	cpc	r23, r1
     4d6:	2c f0       	brlt	.+10     	; 0x4e2 <_Z4rampii+0xd4>
				fullspeed = true;
			}
		
			if(fullspeed && difference < 1500)//ramp down
			{
				velocity_robot[0] =  0.1*difference ;
     4d8:	70 93 f9 02 	sts	0x02F9, r23
     4dc:	60 93 f8 02 	sts	0x02F8, r22
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <_Z4rampii+0xe0>
				if(velocity_robot[0] < 40)
					velocity_robot[0] = 40;
     4e2:	88 e2       	ldi	r24, 0x28	; 40
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	90 93 f9 02 	sts	0x02F9, r25
     4ea:	80 93 f8 02 	sts	0x02F8, r24
			}
			if(direction == Front)	velocity_robot[0] = velocity_robot[0];
     4ee:	22 97       	sbiw	r28, 0x02	; 2
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <_Z4rampii+0xe6>
     4f2:	85 c0       	rjmp	.+266    	; 0x5fe <_Z4rampii+0x1f0>
			else					velocity_robot[0] = -velocity_robot[0];
     4f4:	e8 ef       	ldi	r30, 0xF8	; 248
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	91 95       	neg	r25
     4fe:	81 95       	neg	r24
     500:	91 09       	sbc	r25, r1
     502:	91 83       	std	Z+1, r25	; 0x01
     504:	80 83       	st	Z, r24
     506:	7b c0       	rjmp	.+246    	; 0x5fe <_Z4rampii+0x1f0>
		}
	}
	else if(axis == Y_Axis){ 
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	09 f0       	breq	.+2      	; 0x50e <_Z4rampii+0x100>
     50c:	78 c0       	rjmp	.+240    	; 0x5fe <_Z4rampii+0x1f0>
		currentDistance = abs(encoderY.getdistance());
     50e:	8b e7       	ldi	r24, 0x7B	; 123
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	2e de       	rcall	.-932    	; 0x170 <_ZN7encoder11getdistanceEv>
     514:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     518:	9b 01       	movw	r18, r22
     51a:	77 23       	and	r23, r23
     51c:	24 f4       	brge	.+8      	; 0x526 <_Z4rampii+0x118>
     51e:	22 27       	eor	r18, r18
     520:	33 27       	eor	r19, r19
     522:	26 1b       	sub	r18, r22
     524:	37 0b       	sbc	r19, r23
     526:	b9 01       	movw	r22, r18
     528:	30 93 f3 02 	sts	0x02F3, r19
     52c:	20 93 f2 02 	sts	0x02F2, r18
		difference = distanceY - currentDistance;
     530:	00 91 f4 02 	lds	r16, 0x02F4
     534:	10 91 f5 02 	lds	r17, 0x02F5
     538:	02 1b       	sub	r16, r18
     53a:	13 0b       	sbc	r17, r19
     53c:	10 93 f1 02 	sts	0x02F1, r17
     540:	00 93 f0 02 	sts	0x02F0, r16
		if(difference > 0){
     544:	10 16       	cp	r1, r16
     546:	11 06       	cpc	r1, r17
     548:	0c f0       	brlt	.+2      	; 0x54c <_Z4rampii+0x13e>
     54a:	59 c0       	rjmp	.+178    	; 0x5fe <_Z4rampii+0x1f0>
			if(currentDistance < 1000)		//ramp up
     54c:	28 3e       	cpi	r18, 0xE8	; 232
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	38 07       	cpc	r19, r24
     552:	cc f4       	brge	.+50     	; 0x586 <_Z4rampii+0x178>
			{
				velocity_robot[1] = 30 + 0.12*currentDistance;	//0.15 because in 800mm it reach 150 ocr
     554:	07 2e       	mov	r0, r23
     556:	00 0c       	add	r0, r0
     558:	88 0b       	sbc	r24, r24
     55a:	99 0b       	sbc	r25, r25
     55c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     560:	2f e8       	ldi	r18, 0x8F	; 143
     562:	32 ec       	ldi	r19, 0xC2	; 194
     564:	45 ef       	ldi	r20, 0xF5	; 245
     566:	5d e3       	ldi	r21, 0x3D	; 61
     568:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 ef       	ldi	r20, 0xF0	; 240
     572:	51 e4       	ldi	r21, 0x41	; 65
     574:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     578:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     57c:	70 93 fb 02 	sts	0x02FB, r23
     580:	60 93 fa 02 	sts	0x02FA, r22
     584:	0d c0       	rjmp	.+26     	; 0x5a0 <_Z4rampii+0x192>
			}
		
			else if(currentDistance > 1000)		//same speed
     586:	29 3e       	cpi	r18, 0xE9	; 233
     588:	33 40       	sbci	r19, 0x03	; 3
     58a:	54 f0       	brlt	.+20     	; 0x5a0 <_Z4rampii+0x192>
			{
				velocity_robot[1] = 150;
     58c:	86 e9       	ldi	r24, 0x96	; 150
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	90 93 fb 02 	sts	0x02FB, r25
     594:	80 93 fa 02 	sts	0x02FA, r24
				fullspeed = true;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 ef 02 	sts	0x02EF, r24
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <_Z4rampii+0x19a>
			}
		
			if(fullspeed && difference < 1500)//ramp down
     5a0:	80 91 ef 02 	lds	r24, 0x02EF
     5a4:	88 23       	and	r24, r24
     5a6:	01 f1       	breq	.+64     	; 0x5e8 <_Z4rampii+0x1da>
     5a8:	0c 3d       	cpi	r16, 0xDC	; 220
     5aa:	85 e0       	ldi	r24, 0x05	; 5
     5ac:	18 07       	cpc	r17, r24
     5ae:	e4 f4       	brge	.+56     	; 0x5e8 <_Z4rampii+0x1da>
			{
				velocity_robot[1] =  0.1*difference; //0.1 because in 1500mm it reach 0 ocr
     5b0:	b8 01       	movw	r22, r16
     5b2:	11 0f       	add	r17, r17
     5b4:	88 0b       	sbc	r24, r24
     5b6:	99 0b       	sbc	r25, r25
     5b8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     5bc:	2d ec       	ldi	r18, 0xCD	; 205
     5be:	3c ec       	ldi	r19, 0xCC	; 204
     5c0:	4c ec       	ldi	r20, 0xCC	; 204
     5c2:	5d e3       	ldi	r21, 0x3D	; 61
     5c4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     5c8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
				if(velocity_robot[1] < 40)
     5cc:	68 32       	cpi	r22, 0x28	; 40
     5ce:	71 05       	cpc	r23, r1
     5d0:	2c f0       	brlt	.+10     	; 0x5dc <_Z4rampii+0x1ce>
				fullspeed = true;
			}
		
			if(fullspeed && difference < 1500)//ramp down
			{
				velocity_robot[1] =  0.1*difference; //0.1 because in 1500mm it reach 0 ocr
     5d2:	70 93 fb 02 	sts	0x02FB, r23
     5d6:	60 93 fa 02 	sts	0x02FA, r22
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <_Z4rampii+0x1da>
				if(velocity_robot[1] < 40)
					velocity_robot[1] = 40;
     5dc:	88 e2       	ldi	r24, 0x28	; 40
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	90 93 fb 02 	sts	0x02FB, r25
     5e4:	80 93 fa 02 	sts	0x02FA, r24
			}
			if(direction == Front)	velocity_robot[1] = velocity_robot[1];
     5e8:	22 97       	sbiw	r28, 0x02	; 2
     5ea:	49 f0       	breq	.+18     	; 0x5fe <_Z4rampii+0x1f0>
			else					velocity_robot[1] = -velocity_robot[1];
     5ec:	e8 ef       	ldi	r30, 0xF8	; 248
     5ee:	f2 e0       	ldi	r31, 0x02	; 2
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
     5f4:	91 95       	neg	r25
     5f6:	81 95       	neg	r24
     5f8:	91 09       	sbc	r25, r1
     5fa:	93 83       	std	Z+3, r25	; 0x03
     5fc:	82 83       	std	Z+2, r24	; 0x02
			
		}
	}
	
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <_Z12calculatevelv>:

void calculatevel()
{
     608:	2f 92       	push	r2
     60a:	3f 92       	push	r3
     60c:	4f 92       	push	r4
     60e:	5f 92       	push	r5
     610:	6f 92       	push	r6
     612:	7f 92       	push	r7
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	00 d0       	rcall	.+0      	; 0x62e <_Z12calculatevelv+0x26>
     62e:	1f 92       	push	r1
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	0f 2e       	mov	r0, r31
     636:	fe ef       	ldi	r31, 0xFE	; 254
     638:	8f 2e       	mov	r8, r31
     63a:	f2 e0       	ldi	r31, 0x02	; 2
     63c:	9f 2e       	mov	r9, r31
     63e:	f0 2d       	mov	r31, r0
     640:	0f 2e       	mov	r0, r31
     642:	f2 e1       	ldi	r31, 0x12	; 18
     644:	ef 2e       	mov	r14, r31
     646:	f2 e0       	ldi	r31, 0x02	; 2
     648:	ff 2e       	mov	r15, r31
     64a:	f0 2d       	mov	r31, r0
     64c:	0f 2e       	mov	r0, r31
     64e:	fe ef       	ldi	r31, 0xFE	; 254
     650:	2f 2e       	mov	r2, r31
     652:	f2 e0       	ldi	r31, 0x02	; 2
     654:	3f 2e       	mov	r3, r31
     656:	f0 2d       	mov	r31, r0
     658:	34 01       	movw	r6, r8
     65a:	27 01       	movw	r4, r14
     65c:	7a 82       	std	Y+2, r7	; 0x02
     65e:	69 82       	std	Y+1, r6	; 0x01
     660:	0f 2e       	mov	r0, r31
     662:	f8 ef       	ldi	r31, 0xF8	; 248
     664:	af 2e       	mov	r10, r31
     666:	f2 e0       	ldi	r31, 0x02	; 2
     668:	bf 2e       	mov	r11, r31
     66a:	f0 2d       	mov	r31, r0
     66c:	82 01       	movw	r16, r4
     66e:	c1 2c       	mov	r12, r1
     670:	d1 2c       	mov	r13, r1
     672:	e1 2c       	mov	r14, r1
     674:	f1 2c       	mov	r15, r1
     676:	bc 82       	std	Y+4, r11	; 0x04
     678:	ab 82       	std	Y+3, r10	; 0x03
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
		for(int j=0;j<3;j++)
		{
			velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
     67a:	eb 81       	ldd	r30, Y+3	; 0x03
     67c:	fc 81       	ldd	r31, Y+4	; 0x04
     67e:	61 91       	ld	r22, Z+
     680:	71 91       	ld	r23, Z+
     682:	fc 83       	std	Y+4, r31	; 0x04
     684:	eb 83       	std	Y+3, r30	; 0x03
     686:	f8 01       	movw	r30, r16
     688:	81 90       	ld	r8, Z+
     68a:	91 90       	ld	r9, Z+
     68c:	a1 90       	ld	r10, Z+
     68e:	b1 90       	ld	r11, Z+
     690:	8f 01       	movw	r16, r30
     692:	07 2e       	mov	r0, r23
     694:	00 0c       	add	r0, r0
     696:	88 0b       	sbc	r24, r24
     698:	99 0b       	sbc	r25, r25
     69a:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     69e:	a5 01       	movw	r20, r10
     6a0:	94 01       	movw	r18, r8
     6a2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     6a6:	9b 01       	movw	r18, r22
     6a8:	ac 01       	movw	r20, r24
     6aa:	6c 2d       	mov	r22, r12
     6ac:	7d 2d       	mov	r23, r13
     6ae:	8e 2d       	mov	r24, r14
     6b0:	9f 2d       	mov	r25, r15
     6b2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     6b6:	c6 2e       	mov	r12, r22
     6b8:	d7 2e       	mov	r13, r23
     6ba:	e8 2e       	mov	r14, r24
     6bc:	f9 2e       	mov	r15, r25
void calculatevel()
{
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
		for(int j=0;j<3;j++)
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	82 15       	cp	r24, r2
     6c4:	93 05       	cpc	r25, r3
     6c6:	c9 f6       	brne	.-78     	; 0x67a <_Z12calculatevelv+0x72>
     6c8:	8c 2d       	mov	r24, r12
     6ca:	9d 2d       	mov	r25, r13
     6cc:	ae 2d       	mov	r26, r14
     6ce:	bf 2d       	mov	r27, r15
     6d0:	e9 81       	ldd	r30, Y+1	; 0x01
     6d2:	fa 81       	ldd	r31, Y+2	; 0x02
     6d4:	80 83       	st	Z, r24
     6d6:	91 83       	std	Z+1, r25	; 0x01
     6d8:	a2 83       	std	Z+2, r26	; 0x02
     6da:	b3 83       	std	Z+3, r27	; 0x03
     6dc:	f4 e0       	ldi	r31, 0x04	; 4
     6de:	6f 0e       	add	r6, r31
     6e0:	71 1c       	adc	r7, r1
     6e2:	8c e0       	ldi	r24, 0x0C	; 12
     6e4:	48 0e       	add	r4, r24
     6e6:	51 1c       	adc	r5, r1
	
}

void calculatevel()
{
	for(int i=0;i<4;i++)
     6e8:	9e e0       	ldi	r25, 0x0E	; 14
     6ea:	69 16       	cp	r6, r25
     6ec:	93 e0       	ldi	r25, 0x03	; 3
     6ee:	79 06       	cpc	r7, r25
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <_Z12calculatevelv+0xec>
     6f2:	b4 cf       	rjmp	.-152    	; 0x65c <_Z12calculatevelv+0x54>
		{
			velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
			
		}
	}
	SETPOINT1 = (velocity_motor[0] * 23)/249;	  
     6f4:	0e ef       	ldi	r16, 0xFE	; 254
     6f6:	12 e0       	ldi	r17, 0x02	; 2
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	48 eb       	ldi	r20, 0xB8	; 184
     6fe:	51 e4       	ldi	r21, 0x41	; 65
     700:	f8 01       	movw	r30, r16
     702:	60 81       	ld	r22, Z
     704:	71 81       	ldd	r23, Z+1	; 0x01
     706:	82 81       	ldd	r24, Z+2	; 0x02
     708:	93 81       	ldd	r25, Z+3	; 0x03
     70a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	49 e7       	ldi	r20, 0x79	; 121
     714:	53 e4       	ldi	r21, 0x43	; 67
     716:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__divsf3>
     71a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     71e:	70 93 15 03 	sts	0x0315, r23
     722:	60 93 14 03 	sts	0x0314, r22
	SETPOINT2 = (velocity_motor[1] * 23)/249;	  
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	48 eb       	ldi	r20, 0xB8	; 184
     72c:	51 e4       	ldi	r21, 0x41	; 65
     72e:	f8 01       	movw	r30, r16
     730:	64 81       	ldd	r22, Z+4	; 0x04
     732:	75 81       	ldd	r23, Z+5	; 0x05
     734:	86 81       	ldd	r24, Z+6	; 0x06
     736:	97 81       	ldd	r25, Z+7	; 0x07
     738:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	49 e7       	ldi	r20, 0x79	; 121
     742:	53 e4       	ldi	r21, 0x43	; 67
     744:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__divsf3>
     748:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     74c:	70 93 13 03 	sts	0x0313, r23
     750:	60 93 12 03 	sts	0x0312, r22
	SETPOINT3 = (velocity_motor[2] * 23)/249;	  
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	48 eb       	ldi	r20, 0xB8	; 184
     75a:	51 e4       	ldi	r21, 0x41	; 65
     75c:	f8 01       	movw	r30, r16
     75e:	60 85       	ldd	r22, Z+8	; 0x08
     760:	71 85       	ldd	r23, Z+9	; 0x09
     762:	82 85       	ldd	r24, Z+10	; 0x0a
     764:	93 85       	ldd	r25, Z+11	; 0x0b
     766:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	49 e7       	ldi	r20, 0x79	; 121
     770:	53 e4       	ldi	r21, 0x43	; 67
     772:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__divsf3>
     776:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     77a:	70 93 11 03 	sts	0x0311, r23
     77e:	60 93 10 03 	sts	0x0310, r22
	SETPOINT4 = (velocity_motor[3] * 23)/249 ;  
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	48 eb       	ldi	r20, 0xB8	; 184
     788:	51 e4       	ldi	r21, 0x41	; 65
     78a:	f8 01       	movw	r30, r16
     78c:	64 85       	ldd	r22, Z+12	; 0x0c
     78e:	75 85       	ldd	r23, Z+13	; 0x0d
     790:	86 85       	ldd	r24, Z+14	; 0x0e
     792:	97 85       	ldd	r25, Z+15	; 0x0f
     794:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	49 e7       	ldi	r20, 0x79	; 121
     79e:	53 e4       	ldi	r21, 0x43	; 67
     7a0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__divsf3>
     7a4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     7a8:	70 93 0f 03 	sts	0x030F, r23
     7ac:	60 93 0e 03 	sts	0x030E, r22
}		//use matrix to find setpoint
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	bf 90       	pop	r11
     7ca:	af 90       	pop	r10
     7cc:	9f 90       	pop	r9
     7ce:	8f 90       	pop	r8
     7d0:	7f 90       	pop	r7
     7d2:	6f 90       	pop	r6
     7d4:	5f 90       	pop	r5
     7d6:	4f 90       	pop	r4
     7d8:	3f 90       	pop	r3
     7da:	2f 90       	pop	r2
     7dc:	08 95       	ret

000007de <_Z4movxii>:

void movx(int distance,int direction)
{
     7de:	4f 92       	push	r4
     7e0:	5f 92       	push	r5
     7e2:	6f 92       	push	r6
     7e4:	7f 92       	push	r7
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	8b 01       	movw	r16, r22

		distanceX = distance;
     800:	90 93 f7 02 	sts	0x02F7, r25
     804:	80 93 f6 02 	sts	0x02F6, r24
		if(BodyPidFlag){
     808:	80 91 42 02 	lds	r24, 0x0242
     80c:	88 23       	and	r24, r24
     80e:	09 f4       	brne	.+2      	; 0x812 <_Z4movxii+0x34>
     810:	87 c0       	rjmp	.+270    	; 0x920 <_Z4movxii+0x142>
			encodery.SETPOINT = 0;
     812:	cf ec       	ldi	r28, 0xCF	; 207
     814:	d2 e0       	ldi	r29, 0x02	; 2
     816:	1d 86       	std	Y+13, r1	; 0x0d
     818:	1c 86       	std	Y+12, r1	; 0x0c
			encodery.input = encoderY.getdistance();
     81a:	8b e7       	ldi	r24, 0x7B	; 123
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	a8 dc       	rcall	.-1712   	; 0x170 <_ZN7encoder11getdistanceEv>
     820:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     824:	6b 01       	movw	r12, r22
     826:	7c 01       	movw	r14, r24
     828:	79 83       	std	Y+1, r23	; 0x01
     82a:	68 83       	st	Y, r22
			encodery.error = encodery.SETPOINT - encodery.input;
     82c:	6c 85       	ldd	r22, Y+12	; 0x0c
     82e:	7d 85       	ldd	r23, Y+13	; 0x0d
     830:	6c 19       	sub	r22, r12
     832:	7d 09       	sbc	r23, r13
     834:	7b 83       	std	Y+3, r23	; 0x03
     836:	6a 83       	std	Y+2, r22	; 0x02
			encodery.Iterm += kii * encodery.error;
     838:	07 2e       	mov	r0, r23
     83a:	00 0c       	add	r0, r0
     83c:	88 0b       	sbc	r24, r24
     83e:	99 0b       	sbc	r25, r25
     840:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     844:	2b 01       	movw	r4, r22
     846:	3c 01       	movw	r6, r24
     848:	20 91 eb 02 	lds	r18, 0x02EB
     84c:	30 91 ec 02 	lds	r19, 0x02EC
     850:	40 91 ed 02 	lds	r20, 0x02ED
     854:	50 91 ee 02 	lds	r21, 0x02EE
     858:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     85c:	28 85       	ldd	r18, Y+8	; 0x08
     85e:	39 85       	ldd	r19, Y+9	; 0x09
     860:	4a 85       	ldd	r20, Y+10	; 0x0a
     862:	5b 85       	ldd	r21, Y+11	; 0x0b
     864:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     868:	4b 01       	movw	r8, r22
     86a:	5c 01       	movw	r10, r24
     86c:	68 87       	std	Y+8, r22	; 0x08
     86e:	79 87       	std	Y+9, r23	; 0x09
     870:	8a 87       	std	Y+10, r24	; 0x0a
     872:	9b 87       	std	Y+11, r25	; 0x0b
			encodery.output = kpp * encodery.error + encodery.Iterm -kdd *(encodery.input - encodery.prevInput);
     874:	20 91 0e 02 	lds	r18, 0x020E
     878:	30 91 0f 02 	lds	r19, 0x020F
     87c:	40 91 10 02 	lds	r20, 0x0210
     880:	50 91 11 02 	lds	r21, 0x0211
     884:	c3 01       	movw	r24, r6
     886:	b2 01       	movw	r22, r4
     888:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	c5 01       	movw	r24, r10
     892:	b4 01       	movw	r22, r8
     894:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     898:	4b 01       	movw	r8, r22
     89a:	5c 01       	movw	r10, r24
     89c:	8c 81       	ldd	r24, Y+4	; 0x04
     89e:	9d 81       	ldd	r25, Y+5	; 0x05
     8a0:	b6 01       	movw	r22, r12
     8a2:	68 1b       	sub	r22, r24
     8a4:	79 0b       	sbc	r23, r25
     8a6:	07 2e       	mov	r0, r23
     8a8:	00 0c       	add	r0, r0
     8aa:	88 0b       	sbc	r24, r24
     8ac:	99 0b       	sbc	r25, r25
     8ae:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     8b2:	20 91 0a 02 	lds	r18, 0x020A
     8b6:	30 91 0b 02 	lds	r19, 0x020B
     8ba:	40 91 0c 02 	lds	r20, 0x020C
     8be:	50 91 0d 02 	lds	r21, 0x020D
     8c2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	c5 01       	movw	r24, r10
     8cc:	b4 01       	movw	r22, r8
     8ce:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__subsf3>
     8d2:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     8d6:	7f 83       	std	Y+7, r23	; 0x07
     8d8:	6e 83       	std	Y+6, r22	; 0x06
	
			velocity_robot[1] = -encodery.output;	
     8da:	71 95       	neg	r23
     8dc:	61 95       	neg	r22
     8de:	71 09       	sbc	r23, r1
     8e0:	70 93 fb 02 	sts	0x02FB, r23
     8e4:	60 93 fa 02 	sts	0x02FA, r22
						//for reverse y compensation, -ve sign
			if(abs(velocity_robot[1]) > 40 ){
     8e8:	cb 01       	movw	r24, r22
     8ea:	77 23       	and	r23, r23
     8ec:	24 f4       	brge	.+8      	; 0x8f6 <_Z4movxii+0x118>
     8ee:	88 27       	eor	r24, r24
     8f0:	99 27       	eor	r25, r25
     8f2:	86 1b       	sub	r24, r22
     8f4:	97 0b       	sbc	r25, r23
     8f6:	89 97       	sbiw	r24, 0x29	; 41
     8f8:	bc f0       	brlt	.+46     	; 0x928 <_Z4movxii+0x14a>
				if(velocity_robot[1] < 0)	velocity_robot[1] = -40;
     8fa:	77 23       	and	r23, r23
     8fc:	3c f4       	brge	.+14     	; 0x90c <_Z4movxii+0x12e>
     8fe:	88 ed       	ldi	r24, 0xD8	; 216
     900:	9f ef       	ldi	r25, 0xFF	; 255
     902:	90 93 fb 02 	sts	0x02FB, r25
     906:	80 93 fa 02 	sts	0x02FA, r24
     90a:	0e c0       	rjmp	.+28     	; 0x928 <_Z4movxii+0x14a>
				else if(velocity_robot[1] > 0)	velocity_robot[1] = 40;
     90c:	16 16       	cp	r1, r22
     90e:	17 06       	cpc	r1, r23
     910:	5c f4       	brge	.+22     	; 0x928 <_Z4movxii+0x14a>
     912:	88 e2       	ldi	r24, 0x28	; 40
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 fb 02 	sts	0x02FB, r25
     91a:	80 93 fa 02 	sts	0x02FA, r24
     91e:	04 c0       	rjmp	.+8      	; 0x928 <_Z4movxii+0x14a>
			}
		}
		else
			velocity_robot[1] = 0;
     920:	10 92 fb 02 	sts	0x02FB, r1
     924:	10 92 fa 02 	sts	0x02FA, r1
		ramp(X_Axis,direction);
     928:	b8 01       	movw	r22, r16
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	6f dd       	rcall	.-1314   	; 0x40e <_Z4rampii>
		velocity_robot[2] = 0;
     930:	10 92 fd 02 	sts	0x02FD, r1
     934:	10 92 fc 02 	sts	0x02FC, r1
		calculatevel();	
     938:	67 de       	rcall	.-818    	; 0x608 <_Z12calculatevelv>
	
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	df 90       	pop	r13
     948:	cf 90       	pop	r12
     94a:	bf 90       	pop	r11
     94c:	af 90       	pop	r10
     94e:	9f 90       	pop	r9
     950:	8f 90       	pop	r8
     952:	7f 90       	pop	r7
     954:	6f 90       	pop	r6
     956:	5f 90       	pop	r5
     958:	4f 90       	pop	r4
     95a:	08 95       	ret

0000095c <_Z4movyii>:

void movy(int distance,int direction)
{
     95c:	4f 92       	push	r4
     95e:	5f 92       	push	r5
     960:	6f 92       	push	r6
     962:	7f 92       	push	r7
     964:	8f 92       	push	r8
     966:	9f 92       	push	r9
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	8b 01       	movw	r16, r22
		distanceY = distance;
     97e:	90 93 f5 02 	sts	0x02F5, r25
     982:	80 93 f4 02 	sts	0x02F4, r24
		if(BodyPidFlag){
     986:	80 91 42 02 	lds	r24, 0x0242
     98a:	88 23       	and	r24, r24
     98c:	09 f4       	brne	.+2      	; 0x990 <_Z4movyii+0x34>
     98e:	86 c0       	rjmp	.+268    	; 0xa9c <_Z4movyii+0x140>
			encoderx.SETPOINT = 0;
     990:	cd ed       	ldi	r28, 0xDD	; 221
     992:	d2 e0       	ldi	r29, 0x02	; 2
     994:	1d 86       	std	Y+13, r1	; 0x0d
     996:	1c 86       	std	Y+12, r1	; 0x0c
			encoderx.input = encoderX.getdistance();
     998:	83 e8       	ldi	r24, 0x83	; 131
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	e9 db       	rcall	.-2094   	; 0x170 <_ZN7encoder11getdistanceEv>
     99e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     9a2:	6b 01       	movw	r12, r22
     9a4:	7c 01       	movw	r14, r24
     9a6:	79 83       	std	Y+1, r23	; 0x01
     9a8:	68 83       	st	Y, r22
			encoderx.error = encoderx.SETPOINT - encoderx.input;
     9aa:	6c 85       	ldd	r22, Y+12	; 0x0c
     9ac:	7d 85       	ldd	r23, Y+13	; 0x0d
     9ae:	6c 19       	sub	r22, r12
     9b0:	7d 09       	sbc	r23, r13
     9b2:	7b 83       	std	Y+3, r23	; 0x03
     9b4:	6a 83       	std	Y+2, r22	; 0x02
			encoderx.Iterm += kii * encoderx.error;
     9b6:	07 2e       	mov	r0, r23
     9b8:	00 0c       	add	r0, r0
     9ba:	88 0b       	sbc	r24, r24
     9bc:	99 0b       	sbc	r25, r25
     9be:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     9c2:	2b 01       	movw	r4, r22
     9c4:	3c 01       	movw	r6, r24
     9c6:	20 91 eb 02 	lds	r18, 0x02EB
     9ca:	30 91 ec 02 	lds	r19, 0x02EC
     9ce:	40 91 ed 02 	lds	r20, 0x02ED
     9d2:	50 91 ee 02 	lds	r21, 0x02EE
     9d6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     9da:	28 85       	ldd	r18, Y+8	; 0x08
     9dc:	39 85       	ldd	r19, Y+9	; 0x09
     9de:	4a 85       	ldd	r20, Y+10	; 0x0a
     9e0:	5b 85       	ldd	r21, Y+11	; 0x0b
     9e2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     9e6:	4b 01       	movw	r8, r22
     9e8:	5c 01       	movw	r10, r24
     9ea:	68 87       	std	Y+8, r22	; 0x08
     9ec:	79 87       	std	Y+9, r23	; 0x09
     9ee:	8a 87       	std	Y+10, r24	; 0x0a
     9f0:	9b 87       	std	Y+11, r25	; 0x0b
			encoderx.output = kpp * encoderx.error + encoderx.Iterm -kdd*(encoderx.input - encoderx.prevInput);
     9f2:	20 91 0e 02 	lds	r18, 0x020E
     9f6:	30 91 0f 02 	lds	r19, 0x020F
     9fa:	40 91 10 02 	lds	r20, 0x0210
     9fe:	50 91 11 02 	lds	r21, 0x0211
     a02:	c3 01       	movw	r24, r6
     a04:	b2 01       	movw	r22, r4
     a06:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	c5 01       	movw	r24, r10
     a10:	b4 01       	movw	r22, r8
     a12:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     a16:	4b 01       	movw	r8, r22
     a18:	5c 01       	movw	r10, r24
     a1a:	8c 81       	ldd	r24, Y+4	; 0x04
     a1c:	9d 81       	ldd	r25, Y+5	; 0x05
     a1e:	b6 01       	movw	r22, r12
     a20:	68 1b       	sub	r22, r24
     a22:	79 0b       	sbc	r23, r25
     a24:	07 2e       	mov	r0, r23
     a26:	00 0c       	add	r0, r0
     a28:	88 0b       	sbc	r24, r24
     a2a:	99 0b       	sbc	r25, r25
     a2c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     a30:	20 91 0a 02 	lds	r18, 0x020A
     a34:	30 91 0b 02 	lds	r19, 0x020B
     a38:	40 91 0c 02 	lds	r20, 0x020C
     a3c:	50 91 0d 02 	lds	r21, 0x020D
     a40:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	c5 01       	movw	r24, r10
     a4a:	b4 01       	movw	r22, r8
     a4c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__subsf3>
     a50:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     a54:	9b 01       	movw	r18, r22
     a56:	7f 83       	std	Y+7, r23	; 0x07
     a58:	6e 83       	std	Y+6, r22	; 0x06
			velocity_robot[0] = encoderx.output;			//for reverse x compensation, +ve sign
     a5a:	70 93 f9 02 	sts	0x02F9, r23
     a5e:	60 93 f8 02 	sts	0x02F8, r22
			if(abs(velocity_robot[0]) > 40){
     a62:	ab 01       	movw	r20, r22
     a64:	77 23       	and	r23, r23
     a66:	24 f4       	brge	.+8      	; 0xa70 <_Z4movyii+0x114>
     a68:	44 27       	eor	r20, r20
     a6a:	55 27       	eor	r21, r21
     a6c:	46 1b       	sub	r20, r22
     a6e:	57 0b       	sbc	r21, r23
     a70:	49 32       	cpi	r20, 0x29	; 41
     a72:	51 05       	cpc	r21, r1
     a74:	bc f0       	brlt	.+46     	; 0xaa4 <_Z4movyii+0x148>
				if(velocity_robot[0] < 0)	velocity_robot[0] = -40;
     a76:	33 23       	and	r19, r19
     a78:	3c f4       	brge	.+14     	; 0xa88 <_Z4movyii+0x12c>
     a7a:	88 ed       	ldi	r24, 0xD8	; 216
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	90 93 f9 02 	sts	0x02F9, r25
     a82:	80 93 f8 02 	sts	0x02F8, r24
     a86:	0e c0       	rjmp	.+28     	; 0xaa4 <_Z4movyii+0x148>
				else if (velocity_robot[0] > 0)	velocity_robot[0] = 40;
     a88:	12 16       	cp	r1, r18
     a8a:	13 06       	cpc	r1, r19
     a8c:	5c f4       	brge	.+22     	; 0xaa4 <_Z4movyii+0x148>
     a8e:	88 e2       	ldi	r24, 0x28	; 40
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	90 93 f9 02 	sts	0x02F9, r25
     a96:	80 93 f8 02 	sts	0x02F8, r24
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <_Z4movyii+0x148>
			}
		}
		else
			velocity_robot[0] = 0;
     a9c:	10 92 f9 02 	sts	0x02F9, r1
     aa0:	10 92 f8 02 	sts	0x02F8, r1
		ramp(Y_Axis,direction);
     aa4:	b8 01       	movw	r22, r16
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	b1 dc       	rcall	.-1694   	; 0x40e <_Z4rampii>
		velocity_robot[2] = 0;
     aac:	10 92 fd 02 	sts	0x02FD, r1
     ab0:	10 92 fc 02 	sts	0x02FC, r1
		calculatevel();
     ab4:	a9 dd       	rcall	.-1198   	; 0x608 <_Z12calculatevelv>
		
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	8f 90       	pop	r8
     ace:	7f 90       	pop	r7
     ad0:	6f 90       	pop	r6
     ad2:	5f 90       	pop	r5
     ad4:	4f 90       	pop	r4
     ad6:	08 95       	ret

00000ad8 <_Z12setTuningsM1v>:
pid ma,mb,mc,md;



void setTuningsM1(void)
{
     ad8:	8f 92       	push	r8
     ada:	9f 92       	push	r9
     adc:	af 92       	push	r10
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
			};
		float getdistance();
		float getinstdistance();
		int getcount(){return count_encoder;};
		inline int getspeed(){return speed;};
     af0:	00 91 75 02 	lds	r16, 0x0275
     af4:	10 91 76 02 	lds	r17, 0x0276
	ma.input = e1.getspeed();
     af8:	cd eb       	ldi	r28, 0xBD	; 189
     afa:	d2 e0       	ldi	r29, 0x02	; 2
     afc:	19 83       	std	Y+1, r17	; 0x01
     afe:	08 83       	st	Y, r16
	
		ma.error = SETPOINT1 - ma.input;
     b00:	60 91 14 03 	lds	r22, 0x0314
     b04:	70 91 15 03 	lds	r23, 0x0315
     b08:	60 1b       	sub	r22, r16
     b0a:	71 0b       	sbc	r23, r17
     b0c:	7d 83       	std	Y+5, r23	; 0x05
     b0e:	6c 83       	std	Y+4, r22	; 0x04
	
		ma.Iterm += ki * ma.error;
     b10:	07 2e       	mov	r0, r23
     b12:	00 0c       	add	r0, r0
     b14:	88 0b       	sbc	r24, r24
     b16:	99 0b       	sbc	r25, r25
     b18:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     b1c:	4b 01       	movw	r8, r22
     b1e:	5c 01       	movw	r10, r24
     b20:	20 91 cb 02 	lds	r18, 0x02CB
     b24:	30 91 cc 02 	lds	r19, 0x02CC
     b28:	40 91 cd 02 	lds	r20, 0x02CD
     b2c:	50 91 ce 02 	lds	r21, 0x02CE
     b30:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     b34:	2e 81       	ldd	r18, Y+6	; 0x06
     b36:	3f 81       	ldd	r19, Y+7	; 0x07
     b38:	48 85       	ldd	r20, Y+8	; 0x08
     b3a:	59 85       	ldd	r21, Y+9	; 0x09
     b3c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     b40:	6b 01       	movw	r12, r22
     b42:	7c 01       	movw	r14, r24
     b44:	6e 83       	std	Y+6, r22	; 0x06
     b46:	7f 83       	std	Y+7, r23	; 0x07
     b48:	88 87       	std	Y+8, r24	; 0x08
     b4a:	99 87       	std	Y+9, r25	; 0x09
	
		ma.output = kp * ma.error + ma.Iterm - kd * (ma.input - ma.previnput) ;
     b4c:	20 91 06 02 	lds	r18, 0x0206
     b50:	30 91 07 02 	lds	r19, 0x0207
     b54:	40 91 08 02 	lds	r20, 0x0208
     b58:	50 91 09 02 	lds	r21, 0x0209
     b5c:	c5 01       	movw	r24, r10
     b5e:	b4 01       	movw	r22, r8
     b60:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	c7 01       	movw	r24, r14
     b6a:	b6 01       	movw	r22, r12
     b6c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__addsf3>
     b70:	6b 01       	movw	r12, r22
     b72:	7c 01       	movw	r14, r24
     b74:	8a 85       	ldd	r24, Y+10	; 0x0a
     b76:	9b 85       	ldd	r25, Y+11	; 0x0b
     b78:	98 01       	movw	r18, r16
     b7a:	28 1b       	sub	r18, r24
     b7c:	39 0b       	sbc	r19, r25
     b7e:	b9 01       	movw	r22, r18
     b80:	33 0f       	add	r19, r19
     b82:	88 0b       	sbc	r24, r24
     b84:	99 0b       	sbc	r25, r25
     b86:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     b8a:	20 91 02 02 	lds	r18, 0x0202
     b8e:	30 91 03 02 	lds	r19, 0x0203
     b92:	40 91 04 02 	lds	r20, 0x0204
     b96:	50 91 05 02 	lds	r21, 0x0205
     b9a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     b9e:	9b 01       	movw	r18, r22
     ba0:	ac 01       	movw	r20, r24
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__subsf3>
     baa:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     bae:	7b 83       	std	Y+3, r23	; 0x03
     bb0:	6a 83       	std	Y+2, r22	; 0x02
	
		ma.previnput = ma.input;
     bb2:	1b 87       	std	Y+11, r17	; 0x0b
     bb4:	0a 87       	std	Y+10, r16	; 0x0a
		ma.MOTOR_OCR_VALUE = ma.MOTOR_OCR_VALUE + ma.output;
     bb6:	2c 85       	ldd	r18, Y+12	; 0x0c
     bb8:	3d 85       	ldd	r19, Y+13	; 0x0d
     bba:	62 0f       	add	r22, r18
     bbc:	73 1f       	adc	r23, r19
	
		if (abs(ma.MOTOR_OCR_VALUE) > ICR_TOP){
     bbe:	cb 01       	movw	r24, r22
     bc0:	77 23       	and	r23, r23
     bc2:	24 f4       	brge	.+8      	; 0xbcc <_Z12setTuningsM1v+0xf4>
     bc4:	88 27       	eor	r24, r24
     bc6:	99 27       	eor	r25, r25
     bc8:	86 1b       	sub	r24, r22
     bca:	97 0b       	sbc	r25, r23
     bcc:	8a 3f       	cpi	r24, 0xFA	; 250
     bce:	91 05       	cpc	r25, r1
     bd0:	2c f4       	brge	.+10     	; 0xbdc <_Z12setTuningsM1v+0x104>
		ma.Iterm += ki * ma.error;
	
		ma.output = kp * ma.error + ma.Iterm - kd * (ma.input - ma.previnput) ;
	
		ma.previnput = ma.input;
		ma.MOTOR_OCR_VALUE = ma.MOTOR_OCR_VALUE + ma.output;
     bd2:	70 93 ca 02 	sts	0x02CA, r23
     bd6:	60 93 c9 02 	sts	0x02C9, r22
     bda:	10 c0       	rjmp	.+32     	; 0xbfc <_Z12setTuningsM1v+0x124>
	
		if (abs(ma.MOTOR_OCR_VALUE) > ICR_TOP){
			if(ma.MOTOR_OCR_VALUE > 0)
     bdc:	16 16       	cp	r1, r22
     bde:	17 06       	cpc	r1, r23
     be0:	3c f4       	brge	.+14     	; 0xbf0 <_Z12setTuningsM1v+0x118>
				ma.MOTOR_OCR_VALUE = ICR_TOP;
     be2:	89 ef       	ldi	r24, 0xF9	; 249
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 ca 02 	sts	0x02CA, r25
     bea:	80 93 c9 02 	sts	0x02C9, r24
     bee:	06 c0       	rjmp	.+12     	; 0xbfc <_Z12setTuningsM1v+0x124>
			else 
				ma.MOTOR_OCR_VALUE = -ICR_TOP;
     bf0:	87 e0       	ldi	r24, 0x07	; 7
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	90 93 ca 02 	sts	0x02CA, r25
     bf8:	80 93 c9 02 	sts	0x02C9, r24
		}
		m1.SetOcrValue(ma.MOTOR_OCR_VALUE);
     bfc:	60 91 c9 02 	lds	r22, 0x02C9
     c00:	70 91 ca 02 	lds	r23, 0x02CA
     c04:	8a e5       	ldi	r24, 0x5A	; 90
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	03 d7       	rcall	.+3590   	; 0x1a10 <_ZN5Motor11SetOcrValueEi>
	
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	9f 90       	pop	r9
     c20:	8f 90       	pop	r8
     c22:	08 95       	ret

00000c24 <_Z12setTuningsM2v>:
void setTuningsM2(void)
{
     c24:	8f 92       	push	r8
     c26:	9f 92       	push	r9
     c28:	af 92       	push	r10
     c2a:	bf 92       	push	r11
     c2c:	cf 92       	push	r12
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	00 91 6d 02 	lds	r16, 0x026D
     c40:	10 91 6e 02 	lds	r17, 0x026E
	mb.input = e2.getspeed();
     c44:	cf ea       	ldi	r28, 0xAF	; 175
     c46:	d2 e0       	ldi	r29, 0x02	; 2
     c48:	19 83       	std	Y+1, r17	; 0x01
     c4a:	08 83       	st	Y, r16
		mb.error = SETPOINT2 - mb.input;
     c4c:	60 91 12 03 	lds	r22, 0x0312
     c50:	70 91 13 03 	lds	r23, 0x0313
     c54:	60 1b       	sub	r22, r16
     c56:	71 0b       	sbc	r23, r17
     c58:	7d 83       	std	Y+5, r23	; 0x05
     c5a:	6c 83       	std	Y+4, r22	; 0x04

		mb.Iterm += ki * mb.error;
     c5c:	07 2e       	mov	r0, r23
     c5e:	00 0c       	add	r0, r0
     c60:	88 0b       	sbc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     c68:	4b 01       	movw	r8, r22
     c6a:	5c 01       	movw	r10, r24
     c6c:	20 91 cb 02 	lds	r18, 0x02CB
     c70:	30 91 cc 02 	lds	r19, 0x02CC
     c74:	40 91 cd 02 	lds	r20, 0x02CD
     c78:	50 91 ce 02 	lds	r21, 0x02CE
     c7c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     c80:	2e 81       	ldd	r18, Y+6	; 0x06
     c82:	3f 81       	ldd	r19, Y+7	; 0x07
     c84:	48 85       	ldd	r20, Y+8	; 0x08
     c86:	59 85       	ldd	r21, Y+9	; 0x09
     c88:	fd d7       	rcall	.+4090   	; 0x1c84 <__addsf3>
     c8a:	6b 01       	movw	r12, r22
     c8c:	7c 01       	movw	r14, r24
     c8e:	6e 83       	std	Y+6, r22	; 0x06
     c90:	7f 83       	std	Y+7, r23	; 0x07
     c92:	88 87       	std	Y+8, r24	; 0x08
     c94:	99 87       	std	Y+9, r25	; 0x09
	
		mb.output = kp * mb.error + mb.Iterm - kd * (mb.input - mb.previnput) ;
     c96:	20 91 06 02 	lds	r18, 0x0206
     c9a:	30 91 07 02 	lds	r19, 0x0207
     c9e:	40 91 08 02 	lds	r20, 0x0208
     ca2:	50 91 09 02 	lds	r21, 0x0209
     ca6:	c5 01       	movw	r24, r10
     ca8:	b4 01       	movw	r22, r8
     caa:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     cae:	9b 01       	movw	r18, r22
     cb0:	ac 01       	movw	r20, r24
     cb2:	c7 01       	movw	r24, r14
     cb4:	b6 01       	movw	r22, r12
     cb6:	e6 d7       	rcall	.+4044   	; 0x1c84 <__addsf3>
     cb8:	6b 01       	movw	r12, r22
     cba:	7c 01       	movw	r14, r24
     cbc:	8a 85       	ldd	r24, Y+10	; 0x0a
     cbe:	9b 85       	ldd	r25, Y+11	; 0x0b
     cc0:	98 01       	movw	r18, r16
     cc2:	28 1b       	sub	r18, r24
     cc4:	39 0b       	sbc	r19, r25
     cc6:	b9 01       	movw	r22, r18
     cc8:	33 0f       	add	r19, r19
     cca:	88 0b       	sbc	r24, r24
     ccc:	99 0b       	sbc	r25, r25
     cce:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     cd2:	20 91 02 02 	lds	r18, 0x0202
     cd6:	30 91 03 02 	lds	r19, 0x0203
     cda:	40 91 04 02 	lds	r20, 0x0204
     cde:	50 91 05 02 	lds	r21, 0x0205
     ce2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	c7 01       	movw	r24, r14
     cec:	b6 01       	movw	r22, r12
     cee:	c9 d7       	rcall	.+3986   	; 0x1c82 <__subsf3>
     cf0:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__fixsfsi>
     cf4:	7b 83       	std	Y+3, r23	; 0x03
     cf6:	6a 83       	std	Y+2, r22	; 0x02
	
		mb.previnput = mb.input;
     cf8:	1b 87       	std	Y+11, r17	; 0x0b
     cfa:	0a 87       	std	Y+10, r16	; 0x0a
		mb.MOTOR_OCR_VALUE = mb.MOTOR_OCR_VALUE + mb.output;
     cfc:	2c 85       	ldd	r18, Y+12	; 0x0c
     cfe:	3d 85       	ldd	r19, Y+13	; 0x0d
     d00:	62 0f       	add	r22, r18
     d02:	73 1f       	adc	r23, r19
	
		if (abs(mb.MOTOR_OCR_VALUE) > ICR_TOP){
     d04:	cb 01       	movw	r24, r22
     d06:	77 23       	and	r23, r23
     d08:	24 f4       	brge	.+8      	; 0xd12 <_Z12setTuningsM2v+0xee>
     d0a:	88 27       	eor	r24, r24
     d0c:	99 27       	eor	r25, r25
     d0e:	86 1b       	sub	r24, r22
     d10:	97 0b       	sbc	r25, r23
     d12:	8a 3f       	cpi	r24, 0xFA	; 250
     d14:	91 05       	cpc	r25, r1
     d16:	2c f4       	brge	.+10     	; 0xd22 <_Z12setTuningsM2v+0xfe>
		mb.Iterm += ki * mb.error;
	
		mb.output = kp * mb.error + mb.Iterm - kd * (mb.input - mb.previnput) ;
	
		mb.previnput = mb.input;
		mb.MOTOR_OCR_VALUE = mb.MOTOR_OCR_VALUE + mb.output;
     d18:	70 93 bc 02 	sts	0x02BC, r23
     d1c:	60 93 bb 02 	sts	0x02BB, r22
     d20:	10 c0       	rjmp	.+32     	; 0xd42 <_Z12setTuningsM2v+0x11e>
	
		if (abs(mb.MOTOR_OCR_VALUE) > ICR_TOP){
			if(mb.MOTOR_OCR_VALUE > 0)
     d22:	16 16       	cp	r1, r22
     d24:	17 06       	cpc	r1, r23
     d26:	3c f4       	brge	.+14     	; 0xd36 <_Z12setTuningsM2v+0x112>
				mb.MOTOR_OCR_VALUE = ICR_TOP;
     d28:	89 ef       	ldi	r24, 0xF9	; 249
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	90 93 bc 02 	sts	0x02BC, r25
     d30:	80 93 bb 02 	sts	0x02BB, r24
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <_Z12setTuningsM2v+0x11e>
			else
				mb.MOTOR_OCR_VALUE = -ICR_TOP;
     d36:	87 e0       	ldi	r24, 0x07	; 7
     d38:	9f ef       	ldi	r25, 0xFF	; 255
     d3a:	90 93 bc 02 	sts	0x02BC, r25
     d3e:	80 93 bb 02 	sts	0x02BB, r24
		}
		m2.SetOcrValue(mb.MOTOR_OCR_VALUE);
     d42:	60 91 bb 02 	lds	r22, 0x02BB
     d46:	70 91 bc 02 	lds	r23, 0x02BC
     d4a:	89 e5       	ldi	r24, 0x59	; 89
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	60 d6       	rcall	.+3264   	; 0x1a10 <_ZN5Motor11SetOcrValueEi>

}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	bf 90       	pop	r11
     d62:	af 90       	pop	r10
     d64:	9f 90       	pop	r9
     d66:	8f 90       	pop	r8
     d68:	08 95       	ret

00000d6a <_Z12setTuningsM3v>:

void setTuningsM3(void)
{
     d6a:	8f 92       	push	r8
     d6c:	9f 92       	push	r9
     d6e:	af 92       	push	r10
     d70:	bf 92       	push	r11
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	00 91 65 02 	lds	r16, 0x0265
     d86:	10 91 66 02 	lds	r17, 0x0266
	mc.input = e3.getspeed();
     d8a:	c1 ea       	ldi	r28, 0xA1	; 161
     d8c:	d2 e0       	ldi	r29, 0x02	; 2
     d8e:	19 83       	std	Y+1, r17	; 0x01
     d90:	08 83       	st	Y, r16

		mc.error = SETPOINT3 - mc.input;
     d92:	60 91 10 03 	lds	r22, 0x0310
     d96:	70 91 11 03 	lds	r23, 0x0311
     d9a:	60 1b       	sub	r22, r16
     d9c:	71 0b       	sbc	r23, r17
     d9e:	7d 83       	std	Y+5, r23	; 0x05
     da0:	6c 83       	std	Y+4, r22	; 0x04
		mc.Iterm += ki * mc.error;
     da2:	07 2e       	mov	r0, r23
     da4:	00 0c       	add	r0, r0
     da6:	88 0b       	sbc	r24, r24
     da8:	99 0b       	sbc	r25, r25
     daa:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     dae:	4b 01       	movw	r8, r22
     db0:	5c 01       	movw	r10, r24
     db2:	20 91 cb 02 	lds	r18, 0x02CB
     db6:	30 91 cc 02 	lds	r19, 0x02CC
     dba:	40 91 cd 02 	lds	r20, 0x02CD
     dbe:	50 91 ce 02 	lds	r21, 0x02CE
     dc2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     dc6:	2e 81       	ldd	r18, Y+6	; 0x06
     dc8:	3f 81       	ldd	r19, Y+7	; 0x07
     dca:	48 85       	ldd	r20, Y+8	; 0x08
     dcc:	59 85       	ldd	r21, Y+9	; 0x09
     dce:	5a d7       	rcall	.+3764   	; 0x1c84 <__addsf3>
     dd0:	6b 01       	movw	r12, r22
     dd2:	7c 01       	movw	r14, r24
     dd4:	6e 83       	std	Y+6, r22	; 0x06
     dd6:	7f 83       	std	Y+7, r23	; 0x07
     dd8:	88 87       	std	Y+8, r24	; 0x08
     dda:	99 87       	std	Y+9, r25	; 0x09
	
		mc.output = kp * mc.error + mc.Iterm - kd * (mc.input - mc.previnput) ;
     ddc:	20 91 06 02 	lds	r18, 0x0206
     de0:	30 91 07 02 	lds	r19, 0x0207
     de4:	40 91 08 02 	lds	r20, 0x0208
     de8:	50 91 09 02 	lds	r21, 0x0209
     dec:	c5 01       	movw	r24, r10
     dee:	b4 01       	movw	r22, r8
     df0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     df4:	9b 01       	movw	r18, r22
     df6:	ac 01       	movw	r20, r24
     df8:	c7 01       	movw	r24, r14
     dfa:	b6 01       	movw	r22, r12
     dfc:	43 d7       	rcall	.+3718   	; 0x1c84 <__addsf3>
     dfe:	6b 01       	movw	r12, r22
     e00:	7c 01       	movw	r14, r24
     e02:	8a 85       	ldd	r24, Y+10	; 0x0a
     e04:	9b 85       	ldd	r25, Y+11	; 0x0b
     e06:	98 01       	movw	r18, r16
     e08:	28 1b       	sub	r18, r24
     e0a:	39 0b       	sbc	r19, r25
     e0c:	b9 01       	movw	r22, r18
     e0e:	33 0f       	add	r19, r19
     e10:	88 0b       	sbc	r24, r24
     e12:	99 0b       	sbc	r25, r25
     e14:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__floatsisf>
     e18:	20 91 02 02 	lds	r18, 0x0202
     e1c:	30 91 03 02 	lds	r19, 0x0203
     e20:	40 91 04 02 	lds	r20, 0x0204
     e24:	50 91 05 02 	lds	r21, 0x0205
     e28:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     e2c:	9b 01       	movw	r18, r22
     e2e:	ac 01       	movw	r20, r24
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	26 d7       	rcall	.+3660   	; 0x1c82 <__subsf3>
     e36:	f2 d7       	rcall	.+4068   	; 0x1e1c <__fixsfsi>
     e38:	7b 83       	std	Y+3, r23	; 0x03
     e3a:	6a 83       	std	Y+2, r22	; 0x02
	
		mc.previnput = mc.input;
     e3c:	1b 87       	std	Y+11, r17	; 0x0b
     e3e:	0a 87       	std	Y+10, r16	; 0x0a
		mc.MOTOR_OCR_VALUE = mc.MOTOR_OCR_VALUE + mc.output;
     e40:	2c 85       	ldd	r18, Y+12	; 0x0c
     e42:	3d 85       	ldd	r19, Y+13	; 0x0d
     e44:	62 0f       	add	r22, r18
     e46:	73 1f       	adc	r23, r19
	
		if (abs(mc.MOTOR_OCR_VALUE) > ICR_TOP){
     e48:	cb 01       	movw	r24, r22
     e4a:	77 23       	and	r23, r23
     e4c:	24 f4       	brge	.+8      	; 0xe56 <_Z12setTuningsM3v+0xec>
     e4e:	88 27       	eor	r24, r24
     e50:	99 27       	eor	r25, r25
     e52:	86 1b       	sub	r24, r22
     e54:	97 0b       	sbc	r25, r23
     e56:	8a 3f       	cpi	r24, 0xFA	; 250
     e58:	91 05       	cpc	r25, r1
     e5a:	2c f4       	brge	.+10     	; 0xe66 <_Z12setTuningsM3v+0xfc>
		mc.Iterm += ki * mc.error;
	
		mc.output = kp * mc.error + mc.Iterm - kd * (mc.input - mc.previnput) ;
	
		mc.previnput = mc.input;
		mc.MOTOR_OCR_VALUE = mc.MOTOR_OCR_VALUE + mc.output;
     e5c:	70 93 ae 02 	sts	0x02AE, r23
     e60:	60 93 ad 02 	sts	0x02AD, r22
     e64:	10 c0       	rjmp	.+32     	; 0xe86 <_Z12setTuningsM3v+0x11c>
	
		if (abs(mc.MOTOR_OCR_VALUE) > ICR_TOP){
			if(mc.MOTOR_OCR_VALUE > 0)
     e66:	16 16       	cp	r1, r22
     e68:	17 06       	cpc	r1, r23
     e6a:	3c f4       	brge	.+14     	; 0xe7a <_Z12setTuningsM3v+0x110>
				mc.MOTOR_OCR_VALUE = ICR_TOP;
     e6c:	89 ef       	ldi	r24, 0xF9	; 249
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	90 93 ae 02 	sts	0x02AE, r25
     e74:	80 93 ad 02 	sts	0x02AD, r24
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <_Z12setTuningsM3v+0x11c>
			else
				mc.MOTOR_OCR_VALUE = -ICR_TOP;
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	9f ef       	ldi	r25, 0xFF	; 255
     e7e:	90 93 ae 02 	sts	0x02AE, r25
     e82:	80 93 ad 02 	sts	0x02AD, r24
		}
		m3.SetOcrValue(mc.MOTOR_OCR_VALUE);
     e86:	60 91 ad 02 	lds	r22, 0x02AD
     e8a:	70 91 ae 02 	lds	r23, 0x02AE
     e8e:	88 e5       	ldi	r24, 0x58	; 88
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	be d5       	rcall	.+2940   	; 0x1a10 <_ZN5Motor11SetOcrValueEi>
	
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	bf 90       	pop	r11
     ea6:	af 90       	pop	r10
     ea8:	9f 90       	pop	r9
     eaa:	8f 90       	pop	r8
     eac:	08 95       	ret

00000eae <_Z12setTuningsM4v>:
void setTuningsM4(void)
{
     eae:	8f 92       	push	r8
     eb0:	9f 92       	push	r9
     eb2:	af 92       	push	r10
     eb4:	bf 92       	push	r11
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	00 91 5d 02 	lds	r16, 0x025D
     eca:	10 91 5e 02 	lds	r17, 0x025E
	
	md.input = e4.getspeed();
     ece:	c3 e9       	ldi	r28, 0x93	; 147
     ed0:	d2 e0       	ldi	r29, 0x02	; 2
     ed2:	19 83       	std	Y+1, r17	; 0x01
     ed4:	08 83       	st	Y, r16

	
		md.error = SETPOINT4 - md.input;
     ed6:	60 91 0e 03 	lds	r22, 0x030E
     eda:	70 91 0f 03 	lds	r23, 0x030F
     ede:	60 1b       	sub	r22, r16
     ee0:	71 0b       	sbc	r23, r17
     ee2:	7d 83       	std	Y+5, r23	; 0x05
     ee4:	6c 83       	std	Y+4, r22	; 0x04
		md.Iterm += ki * md.error;
     ee6:	07 2e       	mov	r0, r23
     ee8:	00 0c       	add	r0, r0
     eea:	88 0b       	sbc	r24, r24
     eec:	99 0b       	sbc	r25, r25
     eee:	c9 d7       	rcall	.+3986   	; 0x1e82 <__floatsisf>
     ef0:	4b 01       	movw	r8, r22
     ef2:	5c 01       	movw	r10, r24
     ef4:	20 91 cb 02 	lds	r18, 0x02CB
     ef8:	30 91 cc 02 	lds	r19, 0x02CC
     efc:	40 91 cd 02 	lds	r20, 0x02CD
     f00:	50 91 ce 02 	lds	r21, 0x02CE
     f04:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     f08:	2e 81       	ldd	r18, Y+6	; 0x06
     f0a:	3f 81       	ldd	r19, Y+7	; 0x07
     f0c:	48 85       	ldd	r20, Y+8	; 0x08
     f0e:	59 85       	ldd	r21, Y+9	; 0x09
     f10:	b9 d6       	rcall	.+3442   	; 0x1c84 <__addsf3>
     f12:	6b 01       	movw	r12, r22
     f14:	7c 01       	movw	r14, r24
     f16:	6e 83       	std	Y+6, r22	; 0x06
     f18:	7f 83       	std	Y+7, r23	; 0x07
     f1a:	88 87       	std	Y+8, r24	; 0x08
     f1c:	99 87       	std	Y+9, r25	; 0x09
	
		md.output = kp * md.error + md.Iterm - kd * (md.input - md.previnput) ;
     f1e:	20 91 06 02 	lds	r18, 0x0206
     f22:	30 91 07 02 	lds	r19, 0x0207
     f26:	40 91 08 02 	lds	r20, 0x0208
     f2a:	50 91 09 02 	lds	r21, 0x0209
     f2e:	c5 01       	movw	r24, r10
     f30:	b4 01       	movw	r22, r8
     f32:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24
     f3a:	c7 01       	movw	r24, r14
     f3c:	b6 01       	movw	r22, r12
     f3e:	a2 d6       	rcall	.+3396   	; 0x1c84 <__addsf3>
     f40:	6b 01       	movw	r12, r22
     f42:	7c 01       	movw	r14, r24
     f44:	8a 85       	ldd	r24, Y+10	; 0x0a
     f46:	9b 85       	ldd	r25, Y+11	; 0x0b
     f48:	98 01       	movw	r18, r16
     f4a:	28 1b       	sub	r18, r24
     f4c:	39 0b       	sbc	r19, r25
     f4e:	b9 01       	movw	r22, r18
     f50:	33 0f       	add	r19, r19
     f52:	88 0b       	sbc	r24, r24
     f54:	99 0b       	sbc	r25, r25
     f56:	95 d7       	rcall	.+3882   	; 0x1e82 <__floatsisf>
     f58:	20 91 02 02 	lds	r18, 0x0202
     f5c:	30 91 03 02 	lds	r19, 0x0203
     f60:	40 91 04 02 	lds	r20, 0x0204
     f64:	50 91 05 02 	lds	r21, 0x0205
     f68:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__mulsf3>
     f6c:	9b 01       	movw	r18, r22
     f6e:	ac 01       	movw	r20, r24
     f70:	c7 01       	movw	r24, r14
     f72:	b6 01       	movw	r22, r12
     f74:	86 d6       	rcall	.+3340   	; 0x1c82 <__subsf3>
     f76:	52 d7       	rcall	.+3748   	; 0x1e1c <__fixsfsi>
     f78:	7b 83       	std	Y+3, r23	; 0x03
     f7a:	6a 83       	std	Y+2, r22	; 0x02
	
		md.previnput = md.input;
     f7c:	1b 87       	std	Y+11, r17	; 0x0b
     f7e:	0a 87       	std	Y+10, r16	; 0x0a
		md.MOTOR_OCR_VALUE = md.MOTOR_OCR_VALUE + md.output;
     f80:	2c 85       	ldd	r18, Y+12	; 0x0c
     f82:	3d 85       	ldd	r19, Y+13	; 0x0d
     f84:	62 0f       	add	r22, r18
     f86:	73 1f       	adc	r23, r19

		if (abs(md.MOTOR_OCR_VALUE) > ICR_TOP){
     f88:	cb 01       	movw	r24, r22
     f8a:	77 23       	and	r23, r23
     f8c:	24 f4       	brge	.+8      	; 0xf96 <_Z12setTuningsM4v+0xe8>
     f8e:	88 27       	eor	r24, r24
     f90:	99 27       	eor	r25, r25
     f92:	86 1b       	sub	r24, r22
     f94:	97 0b       	sbc	r25, r23
     f96:	8a 3f       	cpi	r24, 0xFA	; 250
     f98:	91 05       	cpc	r25, r1
     f9a:	2c f4       	brge	.+10     	; 0xfa6 <_Z12setTuningsM4v+0xf8>
		md.Iterm += ki * md.error;
	
		md.output = kp * md.error + md.Iterm - kd * (md.input - md.previnput) ;
	
		md.previnput = md.input;
		md.MOTOR_OCR_VALUE = md.MOTOR_OCR_VALUE + md.output;
     f9c:	70 93 a0 02 	sts	0x02A0, r23
     fa0:	60 93 9f 02 	sts	0x029F, r22
     fa4:	10 c0       	rjmp	.+32     	; 0xfc6 <_Z12setTuningsM4v+0x118>

		if (abs(md.MOTOR_OCR_VALUE) > ICR_TOP){
			if(md.MOTOR_OCR_VALUE > 0)
     fa6:	16 16       	cp	r1, r22
     fa8:	17 06       	cpc	r1, r23
     faa:	3c f4       	brge	.+14     	; 0xfba <_Z12setTuningsM4v+0x10c>
				md.MOTOR_OCR_VALUE = ICR_TOP;
     fac:	89 ef       	ldi	r24, 0xF9	; 249
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	90 93 a0 02 	sts	0x02A0, r25
     fb4:	80 93 9f 02 	sts	0x029F, r24
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <_Z12setTuningsM4v+0x118>
			else
				md.MOTOR_OCR_VALUE = -ICR_TOP;
     fba:	87 e0       	ldi	r24, 0x07	; 7
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
     fbe:	90 93 a0 02 	sts	0x02A0, r25
     fc2:	80 93 9f 02 	sts	0x029F, r24
		}
		m4.SetOcrValue(md.MOTOR_OCR_VALUE);
     fc6:	60 91 9f 02 	lds	r22, 0x029F
     fca:	70 91 a0 02 	lds	r23, 0x02A0
     fce:	87 e5       	ldi	r24, 0x57	; 87
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	1e d5       	rcall	.+2620   	; 0x1a10 <_ZN5Motor11SetOcrValueEi>

}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	9f 90       	pop	r9
     fea:	8f 90       	pop	r8
     fec:	08 95       	ret

00000fee <_Z10computePidv>:

void computePid()
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
	if(MotorPidFlag){
     ff2:	80 91 43 02 	lds	r24, 0x0243
     ff6:	88 23       	and	r24, r24
     ff8:	29 f0       	breq	.+10     	; 0x1004 <_Z10computePidv+0x16>
		setTuningsM1();
     ffa:	6e dd       	rcall	.-1316   	; 0xad8 <_Z12setTuningsM1v>
		setTuningsM2();
     ffc:	13 de       	rcall	.-986    	; 0xc24 <_Z12setTuningsM2v>
		setTuningsM3();
     ffe:	b5 de       	rcall	.-662    	; 0xd6a <_Z12setTuningsM3v>
		setTuningsM4();
    1000:	56 df       	rcall	.-340    	; 0xeae <_Z12setTuningsM4v>
    1002:	22 c0       	rjmp	.+68     	; 0x1048 <_Z10computePidv+0x5a>
	}
	else{
		m1.SetOcrValue(velocity_motor[0]);
    1004:	ce ef       	ldi	r28, 0xFE	; 254
    1006:	d2 e0       	ldi	r29, 0x02	; 2
    1008:	68 81       	ld	r22, Y
    100a:	79 81       	ldd	r23, Y+1	; 0x01
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	05 d7       	rcall	.+3594   	; 0x1e1c <__fixsfsi>
    1012:	8a e5       	ldi	r24, 0x5A	; 90
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	fc d4       	rcall	.+2552   	; 0x1a10 <_ZN5Motor11SetOcrValueEi>
		m2.SetOcrValue(velocity_motor[1]);
    1018:	6c 81       	ldd	r22, Y+4	; 0x04
    101a:	7d 81       	ldd	r23, Y+5	; 0x05
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	9f 81       	ldd	r25, Y+7	; 0x07
    1020:	fd d6       	rcall	.+3578   	; 0x1e1c <__fixsfsi>
    1022:	89 e5       	ldi	r24, 0x59	; 89
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	f4 d4       	rcall	.+2536   	; 0x1a10 <_ZN5Motor11SetOcrValueEi>
		m3.SetOcrValue(velocity_motor[2]);
    1028:	68 85       	ldd	r22, Y+8	; 0x08
    102a:	79 85       	ldd	r23, Y+9	; 0x09
    102c:	8a 85       	ldd	r24, Y+10	; 0x0a
    102e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1030:	f5 d6       	rcall	.+3562   	; 0x1e1c <__fixsfsi>
    1032:	88 e5       	ldi	r24, 0x58	; 88
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	ec d4       	rcall	.+2520   	; 0x1a10 <_ZN5Motor11SetOcrValueEi>
		m4.SetOcrValue(velocity_motor[3]);
    1038:	6c 85       	ldd	r22, Y+12	; 0x0c
    103a:	7d 85       	ldd	r23, Y+13	; 0x0d
    103c:	8e 85       	ldd	r24, Y+14	; 0x0e
    103e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1040:	ed d6       	rcall	.+3546   	; 0x1e1c <__fixsfsi>
    1042:	87 e5       	ldi	r24, 0x57	; 87
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	e4 d4       	rcall	.+2504   	; 0x1a10 <_ZN5Motor11SetOcrValueEi>
	}
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <_Z9stopDrivev>:

void stopDrive()
{
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
	m1.StopMotor();
    1052:	8a e5       	ldi	r24, 0x5A	; 90
    1054:	92 e0       	ldi	r25, 0x02	; 2
    1056:	9b d4       	rcall	.+2358   	; 0x198e <_ZN5Motor9StopMotorEv>
	m2.StopMotor();
    1058:	89 e5       	ldi	r24, 0x59	; 89
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	98 d4       	rcall	.+2352   	; 0x198e <_ZN5Motor9StopMotorEv>
	m3.StopMotor();
    105e:	88 e5       	ldi	r24, 0x58	; 88
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	95 d4       	rcall	.+2346   	; 0x198e <_ZN5Motor9StopMotorEv>
	m4.StopMotor();
    1064:	87 e5       	ldi	r24, 0x57	; 87
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	92 d4       	rcall	.+2340   	; 0x198e <_ZN5Motor9StopMotorEv>
	SETPOINT1 = SETPOINT2 = SETPOINT3 = SETPOINT4 = 0;
    106a:	10 92 0f 03 	sts	0x030F, r1
    106e:	10 92 0e 03 	sts	0x030E, r1
    1072:	10 92 11 03 	sts	0x0311, r1
    1076:	10 92 10 03 	sts	0x0310, r1
    107a:	10 92 13 03 	sts	0x0313, r1
    107e:	10 92 12 03 	sts	0x0312, r1
    1082:	10 92 15 03 	sts	0x0315, r1
    1086:	10 92 14 03 	sts	0x0314, r1
	ma.MOTOR_OCR_VALUE = 0;
    108a:	8d eb       	ldi	r24, 0xBD	; 189
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	fc 01       	movw	r30, r24
    1090:	15 86       	std	Z+13, r1	; 0x0d
    1092:	14 86       	std	Z+12, r1	; 0x0c
	mb.MOTOR_OCR_VALUE = 0;
    1094:	cf ea       	ldi	r28, 0xAF	; 175
    1096:	d2 e0       	ldi	r29, 0x02	; 2
    1098:	1d 86       	std	Y+13, r1	; 0x0d
    109a:	1c 86       	std	Y+12, r1	; 0x0c
	mc.MOTOR_OCR_VALUE = 0;
    109c:	a1 ea       	ldi	r26, 0xA1	; 161
    109e:	b2 e0       	ldi	r27, 0x02	; 2
    10a0:	1d 96       	adiw	r26, 0x0d	; 13
    10a2:	1c 92       	st	X, r1
    10a4:	1e 92       	st	-X, r1
    10a6:	1c 97       	sbiw	r26, 0x0c	; 12
	md.MOTOR_OCR_VALUE = 0;
    10a8:	23 e9       	ldi	r18, 0x93	; 147
    10aa:	32 e0       	ldi	r19, 0x02	; 2
    10ac:	f9 01       	movw	r30, r18
    10ae:	15 86       	std	Z+13, r1	; 0x0d
    10b0:	14 86       	std	Z+12, r1	; 0x0c
	ma.Iterm = 0;
    10b2:	fc 01       	movw	r30, r24
    10b4:	16 82       	std	Z+6, r1	; 0x06
    10b6:	17 82       	std	Z+7, r1	; 0x07
    10b8:	10 86       	std	Z+8, r1	; 0x08
    10ba:	11 86       	std	Z+9, r1	; 0x09
	mb.Iterm = 0;
    10bc:	1e 82       	std	Y+6, r1	; 0x06
    10be:	1f 82       	std	Y+7, r1	; 0x07
    10c0:	18 86       	std	Y+8, r1	; 0x08
    10c2:	19 86       	std	Y+9, r1	; 0x09
	mc.Iterm = 0;
    10c4:	16 96       	adiw	r26, 0x06	; 6
    10c6:	1d 92       	st	X+, r1
    10c8:	1d 92       	st	X+, r1
    10ca:	1d 92       	st	X+, r1
    10cc:	1c 92       	st	X, r1
    10ce:	19 97       	sbiw	r26, 0x09	; 9
	md.Iterm = 0;
    10d0:	f9 01       	movw	r30, r18
    10d2:	16 82       	std	Z+6, r1	; 0x06
    10d4:	17 82       	std	Z+7, r1	; 0x07
    10d6:	10 86       	std	Z+8, r1	; 0x08
    10d8:	11 86       	std	Z+9, r1	; 0x09
	ma.previnput = 0;
    10da:	fc 01       	movw	r30, r24
    10dc:	13 86       	std	Z+11, r1	; 0x0b
    10de:	12 86       	std	Z+10, r1	; 0x0a
	mb.previnput = 0;
    10e0:	1b 86       	std	Y+11, r1	; 0x0b
    10e2:	1a 86       	std	Y+10, r1	; 0x0a
	mc.previnput = 0;
    10e4:	1b 96       	adiw	r26, 0x0b	; 11
    10e6:	1c 92       	st	X, r1
    10e8:	1e 92       	st	-X, r1
    10ea:	1a 97       	sbiw	r26, 0x0a	; 10
	md.previnput = 0;
    10ec:	f9 01       	movw	r30, r18
    10ee:	13 86       	std	Z+11, r1	; 0x0b
    10f0:	12 86       	std	Z+10, r1	; 0x0a
	UART0TransmitString("message print\r\n");
    10f2:	84 e4       	ldi	r24, 0x44	; 68
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	5b d5       	rcall	.+2742   	; 0x1bae <_Z19UART0TransmitStringPKc>
}
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <_Z14updateZoneflagv>:
	}
}

void updateZoneflag(void)
{
	INPUT(SHUTTLECOCKPIN);
    10fe:	80 98       	cbi	0x10, 0	; 16
	INPUT(ZONEPIN);
    1100:	81 98       	cbi	0x10, 1	; 16
	SET(SHUTTLECOCKPIN);
    1102:	88 9a       	sbi	0x11, 0	; 17
	SET(ZONEPIN);
    1104:	89 9a       	sbi	0x11, 1	; 17
	
	////if low on shuttlecock pin then shuttlecock received///////////////
	///i.e if obstacle on shuttlecock IR ////////////////////////////////	
	if((SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) && (where == inLZ2 || where == inLZ1) ){
    1106:	78 9b       	sbis	0x0f, 0	; 15
    1108:	26 c0       	rjmp	.+76     	; 0x1156 <_Z14updateZoneflagv+0x58>
    110a:	80 91 8b 02 	lds	r24, 0x028B
    110e:	90 91 8c 02 	lds	r25, 0x028C
    1112:	04 97       	sbiw	r24, 0x04	; 4
    1114:	02 97       	sbiw	r24, 0x02	; 2
    1116:	f8 f4       	brcc	.+62     	; 0x1156 <_Z14updateZoneflagv+0x58>
    1118:	22 c0       	rjmp	.+68     	; 0x115e <_Z14updateZoneflagv+0x60>
	else{
		ShuttleCockGiven = true;
	}
	
	/////if low on zone pin then go to the next zone//////////////////////
	if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && (where == inLZ1) ){			//if low on zone signal go next throwingzone2	
    111a:	79 9b       	sbis	0x0f, 1	; 15
    111c:	29 c0       	rjmp	.+82     	; 0x1170 <_Z14updateZoneflagv+0x72>
    111e:	80 91 8b 02 	lds	r24, 0x028B
    1122:	90 91 8c 02 	lds	r25, 0x028C
    1126:	04 97       	sbiw	r24, 0x04	; 4
    1128:	f1 f5       	brne	.+124    	; 0x11a6 <_Z14updateZoneflagv+0xa8>
    112a:	1c c0       	rjmp	.+56     	; 0x1164 <_Z14updateZoneflagv+0x66>
		GoThrowingZone1 = true;
		GoThrowingZone2 = false;
	}
	else if((!(ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))) && (where == inLZ1)){	//if high on zone signal repeat throwingzone1
    112c:	80 91 8b 02 	lds	r24, 0x028B
    1130:	90 91 8c 02 	lds	r25, 0x028C
    1134:	04 97       	sbiw	r24, 0x04	; 4
    1136:	29 f5       	brne	.+74     	; 0x1182 <_Z14updateZoneflagv+0x84>
    1138:	1e c0       	rjmp	.+60     	; 0x1176 <_Z14updateZoneflagv+0x78>
		GoThrowingZone1 = false;
		GoThrowingZone2 = true;
	}
	else if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && (where == inLZ2)){		//if low on zone signal next go throwing zone 3
    113a:	80 91 8b 02 	lds	r24, 0x028B
    113e:	90 91 8c 02 	lds	r25, 0x028C
    1142:	05 97       	sbiw	r24, 0x05	; 5
    1144:	91 f5       	brne	.+100    	; 0x11aa <_Z14updateZoneflagv+0xac>
    1146:	20 c0       	rjmp	.+64     	; 0x1188 <_Z14updateZoneflagv+0x8a>
		GoThrowingZone2 = true;
		GoThrowingZone3 = false;
	}
	else if((!(ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))) && (where == inLZ2)){
    1148:	80 91 8b 02 	lds	r24, 0x028B
    114c:	90 91 8c 02 	lds	r25, 0x028C
    1150:	05 97       	sbiw	r24, 0x05	; 5
    1152:	61 f5       	brne	.+88     	; 0x11ac <_Z14updateZoneflagv+0xae>
    1154:	22 c0       	rjmp	.+68     	; 0x119a <_Z14updateZoneflagv+0x9c>
	///i.e if obstacle on shuttlecock IR ////////////////////////////////	
	if((SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) && (where == inLZ2 || where == inLZ1) ){
		ShuttleCockGiven = false;
		}	//shuttlecock given
	else{
		ShuttleCockGiven = true;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 92 02 	sts	0x0292, r24
    115c:	de cf       	rjmp	.-68     	; 0x111a <_Z14updateZoneflagv+0x1c>
	SET(ZONEPIN);
	
	////if low on shuttlecock pin then shuttlecock received///////////////
	///i.e if obstacle on shuttlecock IR ////////////////////////////////	
	if((SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) && (where == inLZ2 || where == inLZ1) ){
		ShuttleCockGiven = false;
    115e:	10 92 92 02 	sts	0x0292, r1
    1162:	db cf       	rjmp	.-74     	; 0x111a <_Z14updateZoneflagv+0x1c>
		ShuttleCockGiven = true;
	}
	
	/////if low on zone pin then go to the next zone//////////////////////
	if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && (where == inLZ1) ){			//if low on zone signal go next throwingzone2	
		GoThrowingZone1 = true;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	80 93 91 02 	sts	0x0291, r24
		GoThrowingZone2 = false;
    116a:	10 92 90 02 	sts	0x0290, r1
    116e:	08 95       	ret
	}
	else if((!(ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))) && (where == inLZ1)){	//if high on zone signal repeat throwingzone1
    1170:	79 9b       	sbis	0x0f, 1	; 15
    1172:	dc cf       	rjmp	.-72     	; 0x112c <_Z14updateZoneflagv+0x2e>
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <_Z14updateZoneflagv+0x84>
		GoThrowingZone1 = false;
    1176:	10 92 91 02 	sts	0x0291, r1
		GoThrowingZone2 = true;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 90 02 	sts	0x0290, r24
    1180:	08 95       	ret
	}
	else if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && (where == inLZ2)){		//if low on zone signal next go throwing zone 3
    1182:	79 99       	sbic	0x0f, 1	; 15
    1184:	da cf       	rjmp	.-76     	; 0x113a <_Z14updateZoneflagv+0x3c>
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <_Z14updateZoneflagv+0x96>
		GoThrowingZone2 = true;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 93 90 02 	sts	0x0290, r24
		GoThrowingZone3 = false;
    118e:	10 92 8f 02 	sts	0x028F, r1
    1192:	08 95       	ret
	}
	else if((!(ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))) && (where == inLZ2)){
    1194:	79 9b       	sbis	0x0f, 1	; 15
    1196:	d8 cf       	rjmp	.-80     	; 0x1148 <_Z14updateZoneflagv+0x4a>
    1198:	08 95       	ret
		GoThrowingZone2 = false;
    119a:	10 92 90 02 	sts	0x0290, r1
		GoThrowingZone3 = true;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 8f 02 	sts	0x028F, r24
    11a4:	08 95       	ret
	/////if low on zone pin then go to the next zone//////////////////////
	if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && (where == inLZ1) ){			//if low on zone signal go next throwingzone2	
		GoThrowingZone1 = true;
		GoThrowingZone2 = false;
	}
	else if((!(ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))) && (where == inLZ1)){	//if high on zone signal repeat throwingzone1
    11a6:	8f b1       	in	r24, 0x0f	; 15
    11a8:	ec cf       	rjmp	.-40     	; 0x1182 <_Z14updateZoneflagv+0x84>
	}
	else if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && (where == inLZ2)){		//if low on zone signal next go throwing zone 3
		GoThrowingZone2 = true;
		GoThrowingZone3 = false;
	}
	else if((!(ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))) && (where == inLZ2)){
    11aa:	8f b1       	in	r24, 0x0f	; 15
    11ac:	08 95       	ret

000011ae <_Z18gorockthegamefieldv>:
unsigned int robotState = notmoving;
void updateZoneflag();

void gorockthegamefield(void)
{
	if((where == inLZ1 || where == inLZ2) && (robotState == notmoving))
    11ae:	80 91 8b 02 	lds	r24, 0x028B
    11b2:	90 91 8c 02 	lds	r25, 0x028C
    11b6:	04 97       	sbiw	r24, 0x04	; 4
    11b8:	02 97       	sbiw	r24, 0x02	; 2
    11ba:	38 f4       	brcc	.+14     	; 0x11ca <_Z18gorockthegamefieldv+0x1c>
    11bc:	80 91 00 02 	lds	r24, 0x0200
    11c0:	90 91 01 02 	lds	r25, 0x0201
    11c4:	07 97       	sbiw	r24, 0x07	; 7
    11c6:	09 f4       	brne	.+2      	; 0x11ca <_Z18gorockthegamefieldv+0x1c>
		updateZoneflag();
    11c8:	9a df       	rcall	.-204    	; 0x10fe <_Z14updateZoneflagv>
	//////////////AT START GO TO LOADING ZONE 1/////////////////////////
	if(where == inStart_point){
    11ca:	80 91 8b 02 	lds	r24, 0x028B
    11ce:	90 91 8c 02 	lds	r25, 0x028C
    11d2:	89 2b       	or	r24, r25
    11d4:	79 f5       	brne	.+94     	; 0x1234 <_Z18gorockthegamefieldv+0x86>
		movx(Throwingzone1.x,Front);
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	84 e9       	ldi	r24, 0x94	; 148
    11dc:	91 e1       	ldi	r25, 0x11	; 17
    11de:	ff da       	rcall	.-2562   	; 0x7de <_Z4movxii>
		robotState = moving;
    11e0:	86 e0       	ldi	r24, 0x06	; 6
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	90 93 01 02 	sts	0x0201, r25
    11e8:	80 93 00 02 	sts	0x0200, r24
		if(abs(encoderX.getdistance()) >= Throwingzone1.x){
    11ec:	83 e8       	ldi	r24, 0x83	; 131
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder11getdistanceEv>
    11f4:	13 d6       	rcall	.+3110   	; 0x1e1c <__fixsfsi>
    11f6:	9b 01       	movw	r18, r22
    11f8:	77 23       	and	r23, r23
    11fa:	24 f4       	brge	.+8      	; 0x1204 <_Z18gorockthegamefieldv+0x56>
    11fc:	22 27       	eor	r18, r18
    11fe:	33 27       	eor	r19, r19
    1200:	26 1b       	sub	r18, r22
    1202:	37 0b       	sbc	r19, r23
    1204:	24 39       	cpi	r18, 0x94	; 148
    1206:	31 41       	sbci	r19, 0x11	; 17
    1208:	ac f0       	brlt	.+42     	; 0x1234 <_Z18gorockthegamefieldv+0x86>
			stopDrive();
    120a:	21 df       	rcall	.-446    	; 0x104e <_Z9stopDrivev>
			robotState = notmoving;
    120c:	87 e0       	ldi	r24, 0x07	; 7
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	90 93 01 02 	sts	0x0201, r25
    1214:	80 93 00 02 	sts	0x0200, r24
			where = inLZ1;
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	90 93 8c 02 	sts	0x028C, r25
    1220:	80 93 8b 02 	sts	0x028B, r24

		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
    1224:	10 92 84 02 	sts	0x0284, r1
    1228:	10 92 83 02 	sts	0x0283, r1
    122c:	10 92 7c 02 	sts	0x027C, r1
    1230:	10 92 7b 02 	sts	0x027B, r1
			encoderX.resetCount();
			encoderY.resetCount();
		}
	}
	///////////// REACHED LOADING ZONE 1///////////////////////////////
	if(ShuttleCockGiven)
    1234:	80 91 92 02 	lds	r24, 0x0292
    1238:	88 23       	and	r24, r24
    123a:	09 f4       	brne	.+2      	; 0x123e <_Z18gorockthegamefieldv+0x90>
    123c:	6d c1       	rjmp	.+730    	; 0x1518 <_Z18gorockthegamefieldv+0x36a>
	{
		if(GoThrowingZone1)
    123e:	80 91 91 02 	lds	r24, 0x0291
    1242:	88 23       	and	r24, r24
    1244:	09 f4       	brne	.+2      	; 0x1248 <_Z18gorockthegamefieldv+0x9a>
    1246:	3d c0       	rjmp	.+122    	; 0x12c2 <_Z18gorockthegamefieldv+0x114>
		{
			movy(Throwingzone1.y,Front);
    1248:	62 e0       	ldi	r22, 0x02	; 2
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	88 eb       	ldi	r24, 0xB8	; 184
    124e:	9b e0       	ldi	r25, 0x0B	; 11
    1250:	85 db       	rcall	.-2294   	; 0x95c <_Z4movyii>
			robotState = moving;
    1252:	86 e0       	ldi	r24, 0x06	; 6
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	90 93 01 02 	sts	0x0201, r25
    125a:	80 93 00 02 	sts	0x0200, r24
			if(abs(encoderY.getdistance()) >= Throwingzone1.y){
    125e:	8b e7       	ldi	r24, 0x7B	; 123
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder11getdistanceEv>
    1266:	da d5       	rcall	.+2996   	; 0x1e1c <__fixsfsi>
    1268:	9b 01       	movw	r18, r22
    126a:	77 23       	and	r23, r23
    126c:	24 f4       	brge	.+8      	; 0x1276 <_Z18gorockthegamefieldv+0xc8>
    126e:	22 27       	eor	r18, r18
    1270:	33 27       	eor	r19, r19
    1272:	26 1b       	sub	r18, r22
    1274:	37 0b       	sbc	r19, r23
    1276:	28 3b       	cpi	r18, 0xB8	; 184
    1278:	3b 40       	sbci	r19, 0x0B	; 11
    127a:	1c f1       	brlt	.+70     	; 0x12c2 <_Z18gorockthegamefieldv+0x114>
				stopDrive();
    127c:	e8 de       	rcall	.-560    	; 0x104e <_Z9stopDrivev>
				robotState = notmoving;
    127e:	87 e0       	ldi	r24, 0x07	; 7
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	90 93 01 02 	sts	0x0201, r25
    1286:	80 93 00 02 	sts	0x0200, r24
				backtoLZ1 = true;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 8e 02 	sts	0x028E, r24
				where = inTZ1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	90 93 8c 02 	sts	0x028C, r25
    1298:	80 93 8b 02 	sts	0x028B, r24
    129c:	10 92 84 02 	sts	0x0284, r1
    12a0:	10 92 83 02 	sts	0x0283, r1
    12a4:	10 92 7c 02 	sts	0x027C, r1
    12a8:	10 92 7b 02 	sts	0x027B, r1
				encoderX.resetCount();
				encoderY.resetCount();
				GoThrowingZone1 = false;
    12ac:	10 92 91 02 	sts	0x0291, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12b0:	2f ef       	ldi	r18, 0xFF	; 255
    12b2:	89 e6       	ldi	r24, 0x69	; 105
    12b4:	98 e1       	ldi	r25, 0x18	; 24
    12b6:	21 50       	subi	r18, 0x01	; 1
    12b8:	80 40       	sbci	r24, 0x00	; 0
    12ba:	90 40       	sbci	r25, 0x00	; 0
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <_Z18gorockthegamefieldv+0x108>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <_Z18gorockthegamefieldv+0x112>
    12c0:	00 00       	nop
				_delay_ms(500);
			}
		}
		if(backtoLZ1 && where == inTZ1)
    12c2:	80 91 8e 02 	lds	r24, 0x028E
    12c6:	88 23       	and	r24, r24
    12c8:	c9 f1       	breq	.+114    	; 0x133c <_Z18gorockthegamefieldv+0x18e>
    12ca:	80 91 8b 02 	lds	r24, 0x028B
    12ce:	90 91 8c 02 	lds	r25, 0x028C
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	99 f5       	brne	.+102    	; 0x133c <_Z18gorockthegamefieldv+0x18e>
		{
			movy(Throwingzone1.y,Back);
    12d6:	63 e0       	ldi	r22, 0x03	; 3
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	88 eb       	ldi	r24, 0xB8	; 184
    12dc:	9b e0       	ldi	r25, 0x0B	; 11
    12de:	3e db       	rcall	.-2436   	; 0x95c <_Z4movyii>
			robotState = moving;
    12e0:	86 e0       	ldi	r24, 0x06	; 6
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 01 02 	sts	0x0201, r25
    12e8:	80 93 00 02 	sts	0x0200, r24
			if(abs(encoderY.getdistance()) >= Throwingzone1.y){
    12ec:	8b e7       	ldi	r24, 0x7B	; 123
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder11getdistanceEv>
    12f4:	93 d5       	rcall	.+2854   	; 0x1e1c <__fixsfsi>
    12f6:	9b 01       	movw	r18, r22
    12f8:	77 23       	and	r23, r23
    12fa:	24 f4       	brge	.+8      	; 0x1304 <_Z18gorockthegamefieldv+0x156>
    12fc:	22 27       	eor	r18, r18
    12fe:	33 27       	eor	r19, r19
    1300:	26 1b       	sub	r18, r22
    1302:	37 0b       	sbc	r19, r23
    1304:	28 3b       	cpi	r18, 0xB8	; 184
    1306:	3b 40       	sbci	r19, 0x0B	; 11
    1308:	cc f0       	brlt	.+50     	; 0x133c <_Z18gorockthegamefieldv+0x18e>
				stopDrive();
    130a:	a1 de       	rcall	.-702    	; 0x104e <_Z9stopDrivev>
				robotState = notmoving;
    130c:	87 e0       	ldi	r24, 0x07	; 7
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	90 93 01 02 	sts	0x0201, r25
    1314:	80 93 00 02 	sts	0x0200, r24
				ShuttleCockGiven = false;
    1318:	10 92 92 02 	sts	0x0292, r1
				backtoLZ1 = false;
    131c:	10 92 8e 02 	sts	0x028E, r1
				where = inLZ1;
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	90 93 8c 02 	sts	0x028C, r25
    1328:	80 93 8b 02 	sts	0x028B, r24
    132c:	10 92 84 02 	sts	0x0284, r1
    1330:	10 92 83 02 	sts	0x0283, r1
    1334:	10 92 7c 02 	sts	0x027C, r1
    1338:	10 92 7b 02 	sts	0x027B, r1
				encoderX.resetCount();
				encoderY.resetCount();
			}
		}
		if(GoThrowingZone2)
    133c:	80 91 90 02 	lds	r24, 0x0290
    1340:	88 23       	and	r24, r24
    1342:	09 f4       	brne	.+2      	; 0x1346 <_Z18gorockthegamefieldv+0x198>
    1344:	72 c0       	rjmp	.+228    	; 0x142a <_Z18gorockthegamefieldv+0x27c>
		{
			if(where == inLZ1){
    1346:	80 91 8b 02 	lds	r24, 0x028B
    134a:	90 91 8c 02 	lds	r25, 0x028C
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	91 05       	cpc	r25, r1
    1352:	59 f5       	brne	.+86     	; 0x13aa <_Z18gorockthegamefieldv+0x1fc>
				movx((Throwingzone2.x - Throwingzone1.x),Front);
    1354:	62 e0       	ldi	r22, 0x02	; 2
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	80 ed       	ldi	r24, 0xD0	; 208
    135a:	97 e0       	ldi	r25, 0x07	; 7
    135c:	40 da       	rcall	.-2944   	; 0x7de <_Z4movxii>
				robotState = moving;
    135e:	86 e0       	ldi	r24, 0x06	; 6
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	90 93 01 02 	sts	0x0201, r25
    1366:	80 93 00 02 	sts	0x0200, r24
				if(abs(encoderX.getdistance()) >= (Throwingzone2.x - Throwingzone1.x)){
    136a:	83 e8       	ldi	r24, 0x83	; 131
    136c:	92 e0       	ldi	r25, 0x02	; 2
    136e:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder11getdistanceEv>
    1372:	54 d5       	rcall	.+2728   	; 0x1e1c <__fixsfsi>
    1374:	9b 01       	movw	r18, r22
    1376:	77 23       	and	r23, r23
    1378:	24 f4       	brge	.+8      	; 0x1382 <_Z18gorockthegamefieldv+0x1d4>
    137a:	22 27       	eor	r18, r18
    137c:	33 27       	eor	r19, r19
    137e:	26 1b       	sub	r18, r22
    1380:	37 0b       	sbc	r19, r23
    1382:	20 3d       	cpi	r18, 0xD0	; 208
    1384:	37 40       	sbci	r19, 0x07	; 7
    1386:	0c f4       	brge	.+2      	; 0x138a <_Z18gorockthegamefieldv+0x1dc>
    1388:	50 c0       	rjmp	.+160    	; 0x142a <_Z18gorockthegamefieldv+0x27c>
					stopDrive();
    138a:	61 de       	rcall	.-830    	; 0x104e <_Z9stopDrivev>
					where = inLZ2;
    138c:	85 e0       	ldi	r24, 0x05	; 5
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	90 93 8c 02 	sts	0x028C, r25
    1394:	80 93 8b 02 	sts	0x028B, r24
    1398:	10 92 84 02 	sts	0x0284, r1
    139c:	10 92 83 02 	sts	0x0283, r1
    13a0:	10 92 7c 02 	sts	0x027C, r1
    13a4:	10 92 7b 02 	sts	0x027B, r1
    13a8:	40 c0       	rjmp	.+128    	; 0x142a <_Z18gorockthegamefieldv+0x27c>
					encoderX.resetCount();
					encoderY.resetCount();
				}
			}
			else if(where == inLZ2)
    13aa:	05 97       	sbiw	r24, 0x05	; 5
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <_Z18gorockthegamefieldv+0x202>
    13ae:	3d c0       	rjmp	.+122    	; 0x142a <_Z18gorockthegamefieldv+0x27c>
			{
				movy(Throwingzone2.y,Front);
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	88 eb       	ldi	r24, 0xB8	; 184
    13b6:	9b e0       	ldi	r25, 0x0B	; 11
    13b8:	d1 da       	rcall	.-2654   	; 0x95c <_Z4movyii>
				robotState = moving;
    13ba:	86 e0       	ldi	r24, 0x06	; 6
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	90 93 01 02 	sts	0x0201, r25
    13c2:	80 93 00 02 	sts	0x0200, r24
				if(abs(encoderY.getdistance()) >= Throwingzone2.y){
    13c6:	8b e7       	ldi	r24, 0x7B	; 123
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder11getdistanceEv>
    13ce:	26 d5       	rcall	.+2636   	; 0x1e1c <__fixsfsi>
    13d0:	9b 01       	movw	r18, r22
    13d2:	77 23       	and	r23, r23
    13d4:	24 f4       	brge	.+8      	; 0x13de <_Z18gorockthegamefieldv+0x230>
    13d6:	22 27       	eor	r18, r18
    13d8:	33 27       	eor	r19, r19
    13da:	26 1b       	sub	r18, r22
    13dc:	37 0b       	sbc	r19, r23
    13de:	28 3b       	cpi	r18, 0xB8	; 184
    13e0:	3b 40       	sbci	r19, 0x0B	; 11
    13e2:	1c f1       	brlt	.+70     	; 0x142a <_Z18gorockthegamefieldv+0x27c>
					stopDrive();
    13e4:	34 de       	rcall	.-920    	; 0x104e <_Z9stopDrivev>
					robotState = notmoving;
    13e6:	87 e0       	ldi	r24, 0x07	; 7
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	90 93 01 02 	sts	0x0201, r25
    13ee:	80 93 00 02 	sts	0x0200, r24
					where = inTZ2;
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	90 93 8c 02 	sts	0x028C, r25
    13fa:	80 93 8b 02 	sts	0x028B, r24
					backtoLZ2 = true;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 8d 02 	sts	0x028D, r24
    1404:	10 92 84 02 	sts	0x0284, r1
    1408:	10 92 83 02 	sts	0x0283, r1
    140c:	10 92 7c 02 	sts	0x027C, r1
    1410:	10 92 7b 02 	sts	0x027B, r1
					encoderX.resetCount();
					encoderY.resetCount();
					GoThrowingZone2 = false;
    1414:	10 92 90 02 	sts	0x0290, r1
    1418:	9f ef       	ldi	r25, 0xFF	; 255
    141a:	29 e6       	ldi	r18, 0x69	; 105
    141c:	88 e1       	ldi	r24, 0x18	; 24
    141e:	91 50       	subi	r25, 0x01	; 1
    1420:	20 40       	sbci	r18, 0x00	; 0
    1422:	80 40       	sbci	r24, 0x00	; 0
    1424:	e1 f7       	brne	.-8      	; 0x141e <_Z18gorockthegamefieldv+0x270>
    1426:	00 c0       	rjmp	.+0      	; 0x1428 <_Z18gorockthegamefieldv+0x27a>
    1428:	00 00       	nop
					_delay_ms(500);
				}
			}
		}
		if(backtoLZ2 && where == inTZ2)
    142a:	80 91 8d 02 	lds	r24, 0x028D
    142e:	88 23       	and	r24, r24
    1430:	b9 f1       	breq	.+110    	; 0x14a0 <_Z18gorockthegamefieldv+0x2f2>
    1432:	80 91 8b 02 	lds	r24, 0x028B
    1436:	90 91 8c 02 	lds	r25, 0x028C
    143a:	02 97       	sbiw	r24, 0x02	; 2
    143c:	89 f5       	brne	.+98     	; 0x14a0 <_Z18gorockthegamefieldv+0x2f2>
		{
			movy(Throwingzone2.y,Back);
    143e:	63 e0       	ldi	r22, 0x03	; 3
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	88 eb       	ldi	r24, 0xB8	; 184
    1444:	9b e0       	ldi	r25, 0x0B	; 11
    1446:	8a da       	rcall	.-2796   	; 0x95c <_Z4movyii>
			robotState = moving;
    1448:	86 e0       	ldi	r24, 0x06	; 6
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	90 93 01 02 	sts	0x0201, r25
    1450:	80 93 00 02 	sts	0x0200, r24
			if(abs(encoderY.getdistance()) >= Throwingzone2.y){
    1454:	8b e7       	ldi	r24, 0x7B	; 123
    1456:	92 e0       	ldi	r25, 0x02	; 2
    1458:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder11getdistanceEv>
    145c:	df d4       	rcall	.+2494   	; 0x1e1c <__fixsfsi>
    145e:	9b 01       	movw	r18, r22
    1460:	77 23       	and	r23, r23
    1462:	24 f4       	brge	.+8      	; 0x146c <_Z18gorockthegamefieldv+0x2be>
    1464:	22 27       	eor	r18, r18
    1466:	33 27       	eor	r19, r19
    1468:	26 1b       	sub	r18, r22
    146a:	37 0b       	sbc	r19, r23
    146c:	28 3b       	cpi	r18, 0xB8	; 184
    146e:	3b 40       	sbci	r19, 0x0B	; 11
    1470:	bc f0       	brlt	.+46     	; 0x14a0 <_Z18gorockthegamefieldv+0x2f2>
				stopDrive();
    1472:	ed dd       	rcall	.-1062   	; 0x104e <_Z9stopDrivev>
				robotState = notmoving;
    1474:	87 e0       	ldi	r24, 0x07	; 7
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	90 93 01 02 	sts	0x0201, r25
    147c:	80 93 00 02 	sts	0x0200, r24
				where = inLZ2;
    1480:	85 e0       	ldi	r24, 0x05	; 5
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	90 93 8c 02 	sts	0x028C, r25
    1488:	80 93 8b 02 	sts	0x028B, r24
    148c:	10 92 84 02 	sts	0x0284, r1
    1490:	10 92 83 02 	sts	0x0283, r1
    1494:	10 92 7c 02 	sts	0x027C, r1
    1498:	10 92 7b 02 	sts	0x027B, r1
				encoderX.resetCount();
				encoderY.resetCount();
				ShuttleCockGiven = false;
    149c:	10 92 92 02 	sts	0x0292, r1
			}
		}
	
		 if(GoThrowingZone3)
    14a0:	80 91 8f 02 	lds	r24, 0x028F
    14a4:	88 23       	and	r24, r24
    14a6:	c1 f1       	breq	.+112    	; 0x1518 <_Z18gorockthegamefieldv+0x36a>
		 {
			movy(Throwingzone3.y,Front);
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	84 e7       	ldi	r24, 0x74	; 116
    14ae:	98 e1       	ldi	r25, 0x18	; 24
    14b0:	55 da       	rcall	.-2902   	; 0x95c <_Z4movyii>
			robotState = moving;
    14b2:	86 e0       	ldi	r24, 0x06	; 6
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	90 93 01 02 	sts	0x0201, r25
    14ba:	80 93 00 02 	sts	0x0200, r24
			if(abs(encoderY.getdistance()) >= Throwingzone3.y){
    14be:	8b e7       	ldi	r24, 0x7B	; 123
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder11getdistanceEv>
    14c6:	aa d4       	rcall	.+2388   	; 0x1e1c <__fixsfsi>
    14c8:	9b 01       	movw	r18, r22
    14ca:	77 23       	and	r23, r23
    14cc:	24 f4       	brge	.+8      	; 0x14d6 <_Z18gorockthegamefieldv+0x328>
    14ce:	22 27       	eor	r18, r18
    14d0:	33 27       	eor	r19, r19
    14d2:	26 1b       	sub	r18, r22
    14d4:	37 0b       	sbc	r19, r23
    14d6:	24 37       	cpi	r18, 0x74	; 116
    14d8:	38 41       	sbci	r19, 0x18	; 24
    14da:	f4 f0       	brlt	.+60     	; 0x1518 <_Z18gorockthegamefieldv+0x36a>
				stopDrive();
    14dc:	b8 dd       	rcall	.-1168   	; 0x104e <_Z9stopDrivev>
				robotState = notmoving;
    14de:	87 e0       	ldi	r24, 0x07	; 7
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	90 93 01 02 	sts	0x0201, r25
    14e6:	80 93 00 02 	sts	0x0200, r24
				where = inTZ3;
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	90 93 8c 02 	sts	0x028C, r25
    14f2:	80 93 8b 02 	sts	0x028B, r24
    14f6:	10 92 84 02 	sts	0x0284, r1
    14fa:	10 92 83 02 	sts	0x0283, r1
    14fe:	10 92 7c 02 	sts	0x027C, r1
    1502:	10 92 7b 02 	sts	0x027B, r1
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    1508:	29 e6       	ldi	r18, 0x69	; 105
    150a:	88 e1       	ldi	r24, 0x18	; 24
    150c:	91 50       	subi	r25, 0x01	; 1
    150e:	20 40       	sbci	r18, 0x00	; 0
    1510:	80 40       	sbci	r24, 0x00	; 0
    1512:	e1 f7       	brne	.-8      	; 0x150c <_Z18gorockthegamefieldv+0x35e>
    1514:	00 c0       	rjmp	.+0      	; 0x1516 <_Z18gorockthegamefieldv+0x368>
    1516:	00 00       	nop
    1518:	08 95       	ret

0000151a <main>:
Motor m1(1) , m2(2) , m3(3) , m4(4);
extern bodyPid encoderx,encodery;
/////////////////////////////////////////
char rcvdata;
int main(void)
{
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
	INPUT(SHUTTLECOCKPIN);
    151e:	80 98       	cbi	0x10, 0	; 16
	INPUT(ZONEPIN);
    1520:	81 98       	cbi	0x10, 1	; 16
	SET(SHUTTLECOCKPIN);
    1522:	88 9a       	sbi	0x11, 0	; 17
	SET(ZONEPIN);
    1524:	89 9a       	sbi	0x11, 1	; 17
	sei();
    1526:	78 94       	sei
	initUART0();
    1528:	af d2       	rcall	.+1374   	; 0x1a88 <_Z9initUART0v>
	initUART2();
    152a:	ba d2       	rcall	.+1396   	; 0x1aa0 <_Z9initUART2v>
	initUART3();
    152c:	c7 d2       	rcall	.+1422   	; 0x1abc <_Z9initUART3v>
		computePid();
		if(where == inTZ3)	return 0;
		
		UART2TransmitData(encoderX.getdistance());
		UART2TransmitString("\t");
		UART2TransmitData(encoderx.SETPOINT);
    152e:	cd ed       	ldi	r28, 0xDD	; 221
    1530:	d2 e0       	ldi	r29, 0x02	; 2
	initUART0();
	initUART2();
	initUART3();
    while (1) 
    {	
		rcvdata = UART3Receive();
    1532:	e8 d2       	rcall	.+1488   	; 0x1b04 <_Z12UART3Receivev>
    1534:	80 93 56 02 	sts	0x0256, r24
		if(rcvdata == 'p')	incrkpp();
    1538:	80 37       	cpi	r24, 0x70	; 112
    153a:	b1 f4       	brne	.+44     	; 0x1568 <main+0x4e>

inline void incrkpp(){kpp += 0.01;}
    153c:	2a e0       	ldi	r18, 0x0A	; 10
    153e:	37 ed       	ldi	r19, 0xD7	; 215
    1540:	43 e2       	ldi	r20, 0x23	; 35
    1542:	5c e3       	ldi	r21, 0x3C	; 60
    1544:	60 91 0e 02 	lds	r22, 0x020E
    1548:	70 91 0f 02 	lds	r23, 0x020F
    154c:	80 91 10 02 	lds	r24, 0x0210
    1550:	90 91 11 02 	lds	r25, 0x0211
    1554:	97 d3       	rcall	.+1838   	; 0x1c84 <__addsf3>
    1556:	60 93 0e 02 	sts	0x020E, r22
    155a:	70 93 0f 02 	sts	0x020F, r23
    155e:	80 93 10 02 	sts	0x0210, r24
    1562:	90 93 11 02 	sts	0x0211, r25
    1566:	77 c0       	rjmp	.+238    	; 0x1656 <main+0x13c>
		else if(rcvdata == 'o')	dcrkpp();
    1568:	8f 36       	cpi	r24, 0x6F	; 111
    156a:	b1 f4       	brne	.+44     	; 0x1598 <main+0x7e>
inline void dcrkpp(){kpp -= 0.01;}
    156c:	2a e0       	ldi	r18, 0x0A	; 10
    156e:	37 ed       	ldi	r19, 0xD7	; 215
    1570:	43 e2       	ldi	r20, 0x23	; 35
    1572:	5c e3       	ldi	r21, 0x3C	; 60
    1574:	60 91 0e 02 	lds	r22, 0x020E
    1578:	70 91 0f 02 	lds	r23, 0x020F
    157c:	80 91 10 02 	lds	r24, 0x0210
    1580:	90 91 11 02 	lds	r25, 0x0211
    1584:	7e d3       	rcall	.+1788   	; 0x1c82 <__subsf3>
    1586:	60 93 0e 02 	sts	0x020E, r22
    158a:	70 93 0f 02 	sts	0x020F, r23
    158e:	80 93 10 02 	sts	0x0210, r24
    1592:	90 93 11 02 	sts	0x0211, r25
    1596:	5f c0       	rjmp	.+190    	; 0x1656 <main+0x13c>
		else if(rcvdata == 'i')	incrkii();
    1598:	89 36       	cpi	r24, 0x69	; 105
    159a:	b1 f4       	brne	.+44     	; 0x15c8 <main+0xae>
inline void incrkii(){kii += 0.005;}
    159c:	2a e0       	ldi	r18, 0x0A	; 10
    159e:	37 ed       	ldi	r19, 0xD7	; 215
    15a0:	43 ea       	ldi	r20, 0xA3	; 163
    15a2:	5b e3       	ldi	r21, 0x3B	; 59
    15a4:	60 91 eb 02 	lds	r22, 0x02EB
    15a8:	70 91 ec 02 	lds	r23, 0x02EC
    15ac:	80 91 ed 02 	lds	r24, 0x02ED
    15b0:	90 91 ee 02 	lds	r25, 0x02EE
    15b4:	67 d3       	rcall	.+1742   	; 0x1c84 <__addsf3>
    15b6:	60 93 eb 02 	sts	0x02EB, r22
    15ba:	70 93 ec 02 	sts	0x02EC, r23
    15be:	80 93 ed 02 	sts	0x02ED, r24
    15c2:	90 93 ee 02 	sts	0x02EE, r25
    15c6:	47 c0       	rjmp	.+142    	; 0x1656 <main+0x13c>
		else if(rcvdata == 'd')	incrkdd();
    15c8:	84 36       	cpi	r24, 0x64	; 100
    15ca:	b1 f4       	brne	.+44     	; 0x15f8 <main+0xde>
inline void dcrkii(){kii -= 0.005;}
inline void incrkdd(){kdd += 0.01;}
    15cc:	2a e0       	ldi	r18, 0x0A	; 10
    15ce:	37 ed       	ldi	r19, 0xD7	; 215
    15d0:	43 e2       	ldi	r20, 0x23	; 35
    15d2:	5c e3       	ldi	r21, 0x3C	; 60
    15d4:	60 91 0a 02 	lds	r22, 0x020A
    15d8:	70 91 0b 02 	lds	r23, 0x020B
    15dc:	80 91 0c 02 	lds	r24, 0x020C
    15e0:	90 91 0d 02 	lds	r25, 0x020D
    15e4:	4f d3       	rcall	.+1694   	; 0x1c84 <__addsf3>
    15e6:	60 93 0a 02 	sts	0x020A, r22
    15ea:	70 93 0b 02 	sts	0x020B, r23
    15ee:	80 93 0c 02 	sts	0x020C, r24
    15f2:	90 93 0d 02 	sts	0x020D, r25
    15f6:	2f c0       	rjmp	.+94     	; 0x1656 <main+0x13c>
		else if(rcvdata == 'u')	dcrkii();
    15f8:	85 37       	cpi	r24, 0x75	; 117
    15fa:	b1 f4       	brne	.+44     	; 0x1628 <main+0x10e>
}

inline void incrkpp(){kpp += 0.01;}
inline void dcrkpp(){kpp -= 0.01;}
inline void incrkii(){kii += 0.005;}
inline void dcrkii(){kii -= 0.005;}
    15fc:	2a e0       	ldi	r18, 0x0A	; 10
    15fe:	37 ed       	ldi	r19, 0xD7	; 215
    1600:	43 ea       	ldi	r20, 0xA3	; 163
    1602:	5b e3       	ldi	r21, 0x3B	; 59
    1604:	60 91 eb 02 	lds	r22, 0x02EB
    1608:	70 91 ec 02 	lds	r23, 0x02EC
    160c:	80 91 ed 02 	lds	r24, 0x02ED
    1610:	90 91 ee 02 	lds	r25, 0x02EE
    1614:	36 d3       	rcall	.+1644   	; 0x1c82 <__subsf3>
    1616:	60 93 eb 02 	sts	0x02EB, r22
    161a:	70 93 ec 02 	sts	0x02EC, r23
    161e:	80 93 ed 02 	sts	0x02ED, r24
    1622:	90 93 ee 02 	sts	0x02EE, r25
    1626:	17 c0       	rjmp	.+46     	; 0x1656 <main+0x13c>
		else if(rcvdata == 's')	dcrkdd();
    1628:	83 37       	cpi	r24, 0x73	; 115
    162a:	a9 f4       	brne	.+42     	; 0x1656 <main+0x13c>
inline void incrkdd(){kdd += 0.01;}
inline void dcrkdd(){kdd -= 0.01;}
    162c:	2a e0       	ldi	r18, 0x0A	; 10
    162e:	37 ed       	ldi	r19, 0xD7	; 215
    1630:	43 e2       	ldi	r20, 0x23	; 35
    1632:	5c e3       	ldi	r21, 0x3C	; 60
    1634:	60 91 0a 02 	lds	r22, 0x020A
    1638:	70 91 0b 02 	lds	r23, 0x020B
    163c:	80 91 0c 02 	lds	r24, 0x020C
    1640:	90 91 0d 02 	lds	r25, 0x020D
    1644:	1e d3       	rcall	.+1596   	; 0x1c82 <__subsf3>
    1646:	60 93 0a 02 	sts	0x020A, r22
    164a:	70 93 0b 02 	sts	0x020B, r23
    164e:	80 93 0c 02 	sts	0x020C, r24
    1652:	90 93 0d 02 	sts	0x020D, r25
		gorockthegamefield();
    1656:	ab dd       	rcall	.-1194   	; 0x11ae <_Z18gorockthegamefieldv>
		computePid();
    1658:	ca dc       	rcall	.-1644   	; 0xfee <_Z10computePidv>
		if(where == inTZ3)	return 0;
    165a:	80 91 8b 02 	lds	r24, 0x028B
    165e:	90 91 8c 02 	lds	r25, 0x028C
    1662:	03 97       	sbiw	r24, 0x03	; 3
    1664:	09 f4       	brne	.+2      	; 0x1668 <main+0x14e>
    1666:	4d c0       	rjmp	.+154    	; 0x1702 <main+0x1e8>
		
		UART2TransmitData(encoderX.getdistance());
    1668:	83 e8       	ldi	r24, 0x83	; 131
    166a:	92 e0       	ldi	r25, 0x02	; 2
    166c:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder11getdistanceEv>
    1670:	d5 d3       	rcall	.+1962   	; 0x1e1c <__fixsfsi>
    1672:	cb 01       	movw	r24, r22
    1674:	4c d2       	rcall	.+1176   	; 0x1b0e <_Z17UART2TransmitDatai>
		UART2TransmitString("\t");
    1676:	84 e5       	ldi	r24, 0x54	; 84
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	a7 d2       	rcall	.+1358   	; 0x1bca <_Z19UART2TransmitStringPKc>
		UART2TransmitData(encoderx.SETPOINT);
    167c:	8c 85       	ldd	r24, Y+12	; 0x0c
    167e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1680:	46 d2       	rcall	.+1164   	; 0x1b0e <_Z17UART2TransmitDatai>
		//UART2TransmitString("\t");
		UART3TransmitData(kpp*100);
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	48 ec       	ldi	r20, 0xC8	; 200
    1688:	52 e4       	ldi	r21, 0x42	; 66
    168a:	60 91 0e 02 	lds	r22, 0x020E
    168e:	70 91 0f 02 	lds	r23, 0x020F
    1692:	80 91 10 02 	lds	r24, 0x0210
    1696:	90 91 11 02 	lds	r25, 0x0211
    169a:	7f d4       	rcall	.+2302   	; 0x1f9a <__mulsf3>
    169c:	bf d3       	rcall	.+1918   	; 0x1e1c <__fixsfsi>
    169e:	cb 01       	movw	r24, r22
    16a0:	5e d2       	rcall	.+1212   	; 0x1b5e <_Z17UART3TransmitDatai>
		UART3TransmitString("\t");
    16a2:	84 e5       	ldi	r24, 0x54	; 84
    16a4:	92 e0       	ldi	r25, 0x02	; 2
    16a6:	9f d2       	rcall	.+1342   	; 0x1be6 <_Z19UART3TransmitStringPKc>
		UART3TransmitData(kii * 100);
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	48 ec       	ldi	r20, 0xC8	; 200
    16ae:	52 e4       	ldi	r21, 0x42	; 66
    16b0:	60 91 eb 02 	lds	r22, 0x02EB
    16b4:	70 91 ec 02 	lds	r23, 0x02EC
    16b8:	80 91 ed 02 	lds	r24, 0x02ED
    16bc:	90 91 ee 02 	lds	r25, 0x02EE
    16c0:	6c d4       	rcall	.+2264   	; 0x1f9a <__mulsf3>
    16c2:	ac d3       	rcall	.+1880   	; 0x1e1c <__fixsfsi>
    16c4:	cb 01       	movw	r24, r22
    16c6:	4b d2       	rcall	.+1174   	; 0x1b5e <_Z17UART3TransmitDatai>
		UART3TransmitString("\t");
    16c8:	84 e5       	ldi	r24, 0x54	; 84
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	8c d2       	rcall	.+1304   	; 0x1be6 <_Z19UART3TransmitStringPKc>
		UART3TransmitData(kdd * 100);
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	48 ec       	ldi	r20, 0xC8	; 200
    16d4:	52 e4       	ldi	r21, 0x42	; 66
    16d6:	60 91 0a 02 	lds	r22, 0x020A
    16da:	70 91 0b 02 	lds	r23, 0x020B
    16de:	80 91 0c 02 	lds	r24, 0x020C
    16e2:	90 91 0d 02 	lds	r25, 0x020D
    16e6:	59 d4       	rcall	.+2226   	; 0x1f9a <__mulsf3>
    16e8:	99 d3       	rcall	.+1842   	; 0x1e1c <__fixsfsi>
    16ea:	cb 01       	movw	r24, r22
    16ec:	38 d2       	rcall	.+1136   	; 0x1b5e <_Z17UART3TransmitDatai>
		//UART0TransmitData();
		UART3TransmitString("\t");
    16ee:	84 e5       	ldi	r24, 0x54	; 84
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	79 d2       	rcall	.+1266   	; 0x1be6 <_Z19UART3TransmitStringPKc>
		//UART0TransmitData(velocity_motor[3]);
		//UART0TransmitString("\t");
		UART2TransmitString("\r\n");
    16f4:	81 e5       	ldi	r24, 0x51	; 81
    16f6:	92 e0       	ldi	r25, 0x02	; 2
    16f8:	68 d2       	rcall	.+1232   	; 0x1bca <_Z19UART2TransmitStringPKc>
		UART3TransmitString("\r\n");
    16fa:	81 e5       	ldi	r24, 0x51	; 81
    16fc:	92 e0       	ldi	r25, 0x02	; 2
    16fe:	73 d2       	rcall	.+1254   	; 0x1be6 <_Z19UART3TransmitStringPKc>
encoder encoderX,encoderY,e1,e2,e3,e4;
Motor m1(1) , m2(2) , m3(3) , m4(4);
extern bodyPid encoderx,encodery;
/////////////////////////////////////////
char rcvdata;
int main(void)
    1700:	18 cf       	rjmp	.-464    	; 0x1532 <main+0x18>
		//UART0TransmitData(velocity_motor[3]);
		//UART0TransmitString("\t");
		UART2TransmitString("\r\n");
		UART3TransmitString("\r\n");
    }
}
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <_GLOBAL__sub_I_MotorPidFlag>:
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
    170c:	10 92 84 02 	sts	0x0284, r1
    1710:	10 92 83 02 	sts	0x0283, r1
			Init_encoder_interrupt();
    1714:	83 e8       	ldi	r24, 0x83	; 131
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    171c:	83 e8       	ldi	r24, 0x83	; 131
    171e:	92 e0       	ldi	r25, 0x02	; 2
    1720:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
    1724:	10 92 7c 02 	sts	0x027C, r1
    1728:	10 92 7b 02 	sts	0x027B, r1
			Init_encoder_interrupt();
    172c:	8b e7       	ldi	r24, 0x7B	; 123
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1734:	8b e7       	ldi	r24, 0x7B	; 123
    1736:	92 e0       	ldi	r25, 0x02	; 2
    1738:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
    173c:	10 92 74 02 	sts	0x0274, r1
    1740:	10 92 73 02 	sts	0x0273, r1
			Init_encoder_interrupt();
    1744:	83 e7       	ldi	r24, 0x73	; 115
    1746:	92 e0       	ldi	r25, 0x02	; 2
    1748:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    174c:	83 e7       	ldi	r24, 0x73	; 115
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
    1754:	10 92 6c 02 	sts	0x026C, r1
    1758:	10 92 6b 02 	sts	0x026B, r1
			Init_encoder_interrupt();
    175c:	8b e6       	ldi	r24, 0x6B	; 107
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1764:	8b e6       	ldi	r24, 0x6B	; 107
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
    176c:	10 92 64 02 	sts	0x0264, r1
    1770:	10 92 63 02 	sts	0x0263, r1
			Init_encoder_interrupt();
    1774:	83 e6       	ldi	r24, 0x63	; 99
    1776:	92 e0       	ldi	r25, 0x02	; 2
    1778:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    177c:	83 e6       	ldi	r24, 0x63	; 99
    177e:	92 e0       	ldi	r25, 0x02	; 2
    1780:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7encoder10Init_timerEv>
	public:
		float distance;
		encoder()
		{
			
			count_encoder= 0;
    1784:	10 92 5c 02 	sts	0x025C, r1
    1788:	10 92 5b 02 	sts	0x025B, r1
			Init_encoder_interrupt();
    178c:	8b e5       	ldi	r24, 0x5B	; 91
    178e:	92 e0       	ldi	r25, 0x02	; 2
    1790:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1794:	8b e5       	ldi	r24, 0x5B	; 91
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7encoder10Init_timerEv>
#include "uart.h"
#include "pid.h"
#include "zonedrive.h"
/////////////	Objects //////////////////
encoder encoderX,encoderY,e1,e2,e3,e4;
Motor m1(1) , m2(2) , m3(3) , m4(4);
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	8a e5       	ldi	r24, 0x5A	; 90
    17a0:	92 e0       	ldi	r25, 0x02	; 2
    17a2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN5MotorC1Eh>
    17a6:	62 e0       	ldi	r22, 0x02	; 2
    17a8:	89 e5       	ldi	r24, 0x59	; 89
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN5MotorC1Eh>
    17b0:	63 e0       	ldi	r22, 0x03	; 3
    17b2:	88 e5       	ldi	r24, 0x58	; 88
    17b4:	92 e0       	ldi	r25, 0x02	; 2
    17b6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN5MotorC1Eh>
    17ba:	64 e0       	ldi	r22, 0x04	; 4
    17bc:	87 e5       	ldi	r24, 0x57	; 87
    17be:	92 e0       	ldi	r25, 0x02	; 2
    17c0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_ZN5MotorC1Eh>
    17c4:	08 95       	ret

000017c6 <_ZN5Motor7InitPWMEv>:
#include "uart.h"


void Motor::InitPWM()
{
	if (num==1)
    17c6:	fc 01       	movw	r30, r24
    17c8:	80 81       	ld	r24, Z
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	f1 f4       	brne	.+60     	; 0x180a <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
    17ce:	e7 e0       	ldi	r30, 0x07	; 7
    17d0:	f1 e0       	ldi	r31, 0x01	; 1
    17d2:	80 81       	ld	r24, Z
    17d4:	80 64       	ori	r24, 0x40	; 64
    17d6:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
    17d8:	80 81       	ld	r24, Z
    17da:	80 68       	ori	r24, 0x80	; 128
    17dc:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
    17de:	ea e0       	ldi	r30, 0x0A	; 10
    17e0:	f1 e0       	ldi	r31, 0x01	; 1
    17e2:	80 81       	ld	r24, Z
    17e4:	80 62       	ori	r24, 0x20	; 32
    17e6:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
    17e8:	e0 e2       	ldi	r30, 0x20	; 32
    17ea:	f1 e0       	ldi	r31, 0x01	; 1
    17ec:	80 81       	ld	r24, Z
    17ee:	8a 60       	ori	r24, 0x0A	; 10
    17f0:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
    17f2:	e1 e2       	ldi	r30, 0x21	; 33
    17f4:	f1 e0       	ldi	r31, 0x01	; 1
    17f6:	80 81       	ld	r24, Z
    17f8:	8a 61       	ori	r24, 0x1A	; 26
    17fa:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
    17fc:	89 ef       	ldi	r24, 0xF9	; 249
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	90 93 27 01 	sts	0x0127, r25
    1804:	80 93 26 01 	sts	0x0126, r24
    1808:	08 95       	ret
	}
	else if(num==2)
    180a:	82 30       	cpi	r24, 0x02	; 2
    180c:	f1 f4       	brne	.+60     	; 0x184a <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
    180e:	e7 e0       	ldi	r30, 0x07	; 7
    1810:	f1 e0       	ldi	r31, 0x01	; 1
    1812:	80 81       	ld	r24, Z
    1814:	84 60       	ori	r24, 0x04	; 4
    1816:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
    1818:	80 81       	ld	r24, Z
    181a:	88 60       	ori	r24, 0x08	; 8
    181c:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
    181e:	ea e0       	ldi	r30, 0x0A	; 10
    1820:	f1 e0       	ldi	r31, 0x01	; 1
    1822:	80 81       	ld	r24, Z
    1824:	88 60       	ori	r24, 0x08	; 8
    1826:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
    1828:	e0 e2       	ldi	r30, 0x20	; 32
    182a:	f1 e0       	ldi	r31, 0x01	; 1
    182c:	80 81       	ld	r24, Z
    182e:	82 68       	ori	r24, 0x82	; 130
    1830:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
    1832:	e1 e2       	ldi	r30, 0x21	; 33
    1834:	f1 e0       	ldi	r31, 0x01	; 1
    1836:	80 81       	ld	r24, Z
    1838:	8a 61       	ori	r24, 0x1A	; 26
    183a:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
    183c:	89 ef       	ldi	r24, 0xF9	; 249
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	90 93 27 01 	sts	0x0127, r25
    1844:	80 93 26 01 	sts	0x0126, r24
    1848:	08 95       	ret
	}
	else if(num==3)
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	f1 f4       	brne	.+60     	; 0x188a <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
    184e:	e7 e0       	ldi	r30, 0x07	; 7
    1850:	f1 e0       	ldi	r31, 0x01	; 1
    1852:	80 81       	ld	r24, Z
    1854:	80 61       	ori	r24, 0x10	; 16
    1856:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
    1858:	80 81       	ld	r24, Z
    185a:	80 62       	ori	r24, 0x20	; 32
    185c:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
    185e:	ea e0       	ldi	r30, 0x0A	; 10
    1860:	f1 e0       	ldi	r31, 0x01	; 1
    1862:	80 81       	ld	r24, Z
    1864:	80 61       	ori	r24, 0x10	; 16
    1866:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
    1868:	e0 e2       	ldi	r30, 0x20	; 32
    186a:	f1 e0       	ldi	r31, 0x01	; 1
    186c:	80 81       	ld	r24, Z
    186e:	82 62       	ori	r24, 0x22	; 34
    1870:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
    1872:	e1 e2       	ldi	r30, 0x21	; 33
    1874:	f1 e0       	ldi	r31, 0x01	; 1
    1876:	80 81       	ld	r24, Z
    1878:	8a 61       	ori	r24, 0x1A	; 26
    187a:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
    187c:	89 ef       	ldi	r24, 0xF9	; 249
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	90 93 27 01 	sts	0x0127, r25
    1884:	80 93 26 01 	sts	0x0126, r24
    1888:	08 95       	ret
	} 
	else if(num==4)
    188a:	84 30       	cpi	r24, 0x04	; 4
    188c:	e9 f4       	brne	.+58     	; 0x18c8 <_ZN5Motor7InitPWMEv+0x102>
	{
		OUTPUT(DD_F4);
    188e:	e7 e0       	ldi	r30, 0x07	; 7
    1890:	f1 e0       	ldi	r31, 0x01	; 1
    1892:	80 81       	ld	r24, Z
    1894:	81 60       	ori	r24, 0x01	; 1
    1896:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
    1898:	80 81       	ld	r24, Z
    189a:	82 60       	ori	r24, 0x02	; 2
    189c:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
    189e:	e1 e0       	ldi	r30, 0x01	; 1
    18a0:	f1 e0       	ldi	r31, 0x01	; 1
    18a2:	80 81       	ld	r24, Z
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	80 83       	st	Z, r24

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
    18a8:	e0 ea       	ldi	r30, 0xA0	; 160
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	82 68       	ori	r24, 0x82	; 130
    18b0:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
    18b2:	e1 ea       	ldi	r30, 0xA1	; 161
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	8a 61       	ori	r24, 0x1A	; 26
    18ba:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
    18bc:	89 ef       	ldi	r24, 0xF9	; 249
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	90 93 a7 00 	sts	0x00A7, r25
    18c4:	80 93 a6 00 	sts	0x00A6, r24
    18c8:	08 95       	ret

000018ca <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
    18ca:	fc 01       	movw	r30, r24
    18cc:	80 81       	ld	r24, Z
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	91 f0       	breq	.+36     	; 0x18f6 <_ZN5Motor19SetForwardDirectionEv+0x2c>
    18d2:	18 f4       	brcc	.+6      	; 0x18da <_ZN5Motor19SetForwardDirectionEv+0x10>
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	31 f0       	breq	.+12     	; 0x18e4 <_ZN5Motor19SetForwardDirectionEv+0x1a>
    18d8:	08 95       	ret
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	a9 f0       	breq	.+42     	; 0x1908 <_ZN5Motor19SetForwardDirectionEv+0x3e>
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	e1 f0       	breq	.+56     	; 0x191a <_ZN5Motor19SetForwardDirectionEv+0x50>
    18e2:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
    18e4:	e8 e0       	ldi	r30, 0x08	; 8
    18e6:	f1 e0       	ldi	r31, 0x01	; 1
    18e8:	80 81       	ld	r24, Z
    18ea:	80 64       	ori	r24, 0x40	; 64
    18ec:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 77       	andi	r24, 0x7F	; 127
    18f2:	80 83       	st	Z, r24
			break;
    18f4:	08 95       	ret
		case 2:
			SET		(DD_F2);
    18f6:	e8 e0       	ldi	r30, 0x08	; 8
    18f8:	f1 e0       	ldi	r31, 0x01	; 1
    18fa:	80 81       	ld	r24, Z
    18fc:	84 60       	ori	r24, 0x04	; 4
    18fe:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
    1900:	80 81       	ld	r24, Z
    1902:	87 7f       	andi	r24, 0xF7	; 247
    1904:	80 83       	st	Z, r24
			break;
    1906:	08 95       	ret
		case 3:
			SET		(DD_F3);
    1908:	e8 e0       	ldi	r30, 0x08	; 8
    190a:	f1 e0       	ldi	r31, 0x01	; 1
    190c:	80 81       	ld	r24, Z
    190e:	80 61       	ori	r24, 0x10	; 16
    1910:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
    1912:	80 81       	ld	r24, Z
    1914:	8f 7d       	andi	r24, 0xDF	; 223
    1916:	80 83       	st	Z, r24
			break;
    1918:	08 95       	ret
		case 4:
			SET		(DD_F4);
    191a:	e8 e0       	ldi	r30, 0x08	; 8
    191c:	f1 e0       	ldi	r31, 0x01	; 1
    191e:	80 81       	ld	r24, Z
    1920:	81 60       	ori	r24, 0x01	; 1
    1922:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
    1924:	80 81       	ld	r24, Z
    1926:	8d 7f       	andi	r24, 0xFD	; 253
    1928:	80 83       	st	Z, r24
    192a:	08 95       	ret

0000192c <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
    192c:	fc 01       	movw	r30, r24
    192e:	80 81       	ld	r24, Z
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	91 f0       	breq	.+36     	; 0x1958 <_ZN5Motor19SetReverseDirectionEv+0x2c>
    1934:	18 f4       	brcc	.+6      	; 0x193c <_ZN5Motor19SetReverseDirectionEv+0x10>
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	31 f0       	breq	.+12     	; 0x1946 <_ZN5Motor19SetReverseDirectionEv+0x1a>
    193a:	08 95       	ret
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	a9 f0       	breq	.+42     	; 0x196a <_ZN5Motor19SetReverseDirectionEv+0x3e>
    1940:	84 30       	cpi	r24, 0x04	; 4
    1942:	e1 f0       	breq	.+56     	; 0x197c <_ZN5Motor19SetReverseDirectionEv+0x50>
    1944:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
    1946:	e8 e0       	ldi	r30, 0x08	; 8
    1948:	f1 e0       	ldi	r31, 0x01	; 1
    194a:	80 81       	ld	r24, Z
    194c:	8f 7b       	andi	r24, 0xBF	; 191
    194e:	80 83       	st	Z, r24
			SET		(DD_B1);
    1950:	80 81       	ld	r24, Z
    1952:	80 68       	ori	r24, 0x80	; 128
    1954:	80 83       	st	Z, r24
			break;
    1956:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
    1958:	e8 e0       	ldi	r30, 0x08	; 8
    195a:	f1 e0       	ldi	r31, 0x01	; 1
    195c:	80 81       	ld	r24, Z
    195e:	8b 7f       	andi	r24, 0xFB	; 251
    1960:	80 83       	st	Z, r24
			SET		(DD_B2);
    1962:	80 81       	ld	r24, Z
    1964:	88 60       	ori	r24, 0x08	; 8
    1966:	80 83       	st	Z, r24
			break;
    1968:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
    196a:	e8 e0       	ldi	r30, 0x08	; 8
    196c:	f1 e0       	ldi	r31, 0x01	; 1
    196e:	80 81       	ld	r24, Z
    1970:	8f 7e       	andi	r24, 0xEF	; 239
    1972:	80 83       	st	Z, r24
			SET		(DD_B3);
    1974:	80 81       	ld	r24, Z
    1976:	80 62       	ori	r24, 0x20	; 32
    1978:	80 83       	st	Z, r24
			break;
    197a:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
    197c:	e8 e0       	ldi	r30, 0x08	; 8
    197e:	f1 e0       	ldi	r31, 0x01	; 1
    1980:	80 81       	ld	r24, Z
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	80 83       	st	Z, r24
			SET		(DD_B4);
    1986:	80 81       	ld	r24, Z
    1988:	82 60       	ori	r24, 0x02	; 2
    198a:	80 83       	st	Z, r24
    198c:	08 95       	ret

0000198e <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
    198e:	fc 01       	movw	r30, r24
    1990:	80 81       	ld	r24, Z
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	b1 f0       	breq	.+44     	; 0x19c2 <_ZN5Motor9StopMotorEv+0x34>
    1996:	18 f4       	brcc	.+6      	; 0x199e <_ZN5Motor9StopMotorEv+0x10>
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	31 f0       	breq	.+12     	; 0x19a8 <_ZN5Motor9StopMotorEv+0x1a>
    199c:	08 95       	ret
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	e9 f0       	breq	.+58     	; 0x19dc <_ZN5Motor9StopMotorEv+0x4e>
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	41 f1       	breq	.+80     	; 0x19f6 <_ZN5Motor9StopMotorEv+0x68>
    19a6:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
    19a8:	e8 e0       	ldi	r30, 0x08	; 8
    19aa:	f1 e0       	ldi	r31, 0x01	; 1
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 7b       	andi	r24, 0xBF	; 191
    19b0:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
    19b2:	80 81       	ld	r24, Z
    19b4:	8f 77       	andi	r24, 0x7F	; 127
    19b6:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
    19b8:	10 92 2d 01 	sts	0x012D, r1
    19bc:	10 92 2c 01 	sts	0x012C, r1
			break;
    19c0:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
    19c2:	e8 e0       	ldi	r30, 0x08	; 8
    19c4:	f1 e0       	ldi	r31, 0x01	; 1
    19c6:	80 81       	ld	r24, Z
    19c8:	8b 7f       	andi	r24, 0xFB	; 251
    19ca:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
    19cc:	80 81       	ld	r24, Z
    19ce:	87 7f       	andi	r24, 0xF7	; 247
    19d0:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
    19d2:	10 92 29 01 	sts	0x0129, r1
    19d6:	10 92 28 01 	sts	0x0128, r1
			break;
    19da:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
    19dc:	e8 e0       	ldi	r30, 0x08	; 8
    19de:	f1 e0       	ldi	r31, 0x01	; 1
    19e0:	80 81       	ld	r24, Z
    19e2:	8f 7e       	andi	r24, 0xEF	; 239
    19e4:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
    19e6:	80 81       	ld	r24, Z
    19e8:	8f 7d       	andi	r24, 0xDF	; 223
    19ea:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
    19ec:	10 92 2b 01 	sts	0x012B, r1
    19f0:	10 92 2a 01 	sts	0x012A, r1
			break;
    19f4:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
    19f6:	e8 e0       	ldi	r30, 0x08	; 8
    19f8:	f1 e0       	ldi	r31, 0x01	; 1
    19fa:	80 81       	ld	r24, Z
    19fc:	8e 7f       	andi	r24, 0xFE	; 254
    19fe:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
    1a00:	80 81       	ld	r24, Z
    1a02:	8d 7f       	andi	r24, 0xFD	; 253
    1a04:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
    1a06:	10 92 a9 00 	sts	0x00A9, r1
    1a0a:	10 92 a8 00 	sts	0x00A8, r1
    1a0e:	08 95       	ret

00001a10 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	8c 01       	movw	r16, r24
    1a1a:	eb 01       	movw	r28, r22
    if (Ocr > 0)
    1a1c:	1c 16       	cp	r1, r28
    1a1e:	1d 06       	cpc	r1, r29
    1a20:	0c f4       	brge	.+2      	; 0x1a24 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
    1a22:	53 df       	rcall	.-346    	; 0x18ca <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
    1a24:	c9 3f       	cpi	r28, 0xF9	; 249
    1a26:	d1 05       	cpc	r29, r1
    1a28:	44 f4       	brge	.+16     	; 0x1a3a <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
    1a2a:	dd 23       	and	r29, r29
    1a2c:	44 f4       	brge	.+16     	; 0x1a3e <_ZN5Motor11SetOcrValueEi+0x2e>
	{
        Ocr = -Ocr;
    1a2e:	d1 95       	neg	r29
    1a30:	c1 95       	neg	r28
    1a32:	d1 09       	sbc	r29, r1
        SetReverseDirection();
    1a34:	c8 01       	movw	r24, r16
    1a36:	7a df       	rcall	.-268    	; 0x192c <_ZN5Motor19SetReverseDirectionEv>
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <_ZN5Motor11SetOcrValueEi+0x2e>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
    1a3a:	c9 ef       	ldi	r28, 0xF9	; 249
    1a3c:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
    1a3e:	f8 01       	movw	r30, r16
    1a40:	80 81       	ld	r24, Z
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	71 f0       	breq	.+28     	; 0x1a62 <_ZN5Motor11SetOcrValueEi+0x52>
    1a46:	18 f4       	brcc	.+6      	; 0x1a4e <_ZN5Motor11SetOcrValueEi+0x3e>
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	31 f0       	breq	.+12     	; 0x1a58 <_ZN5Motor11SetOcrValueEi+0x48>
    1a4c:	18 c0       	rjmp	.+48     	; 0x1a7e <_ZN5Motor11SetOcrValueEi+0x6e>
    1a4e:	83 30       	cpi	r24, 0x03	; 3
    1a50:	69 f0       	breq	.+26     	; 0x1a6c <_ZN5Motor11SetOcrValueEi+0x5c>
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	81 f0       	breq	.+32     	; 0x1a76 <_ZN5Motor11SetOcrValueEi+0x66>
    1a56:	13 c0       	rjmp	.+38     	; 0x1a7e <_ZN5Motor11SetOcrValueEi+0x6e>
	{
		case 1:
			PWM_OCR1	= Ocr;
    1a58:	d0 93 2d 01 	sts	0x012D, r29
    1a5c:	c0 93 2c 01 	sts	0x012C, r28
			break;
    1a60:	0e c0       	rjmp	.+28     	; 0x1a7e <_ZN5Motor11SetOcrValueEi+0x6e>
		case 2:
			PWM_OCR2	= Ocr;
    1a62:	d0 93 29 01 	sts	0x0129, r29
    1a66:	c0 93 28 01 	sts	0x0128, r28
			break;
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <_ZN5Motor11SetOcrValueEi+0x6e>
		case 3:
			PWM_OCR3	= Ocr;
    1a6c:	d0 93 2b 01 	sts	0x012B, r29
    1a70:	c0 93 2a 01 	sts	0x012A, r28
			break;
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <_ZN5Motor11SetOcrValueEi+0x6e>
		case 4:
			PWM_OCR4	= Ocr;
    1a76:	d0 93 a9 00 	sts	0x00A9, r29
    1a7a:	c0 93 a8 00 	sts	0x00A8, r28
			break;
	}
}
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	08 95       	ret

00001a88 <_Z9initUART0v>:

void UART1TransmitString(const char *s)
{
	while(*s)
	UART1Transmit(*s++);
}
    1a88:	10 92 c5 00 	sts	0x00C5, r1
    1a8c:	89 e1       	ldi	r24, 0x19	; 25
    1a8e:	80 93 c4 00 	sts	0x00C4, r24
    1a92:	88 e9       	ldi	r24, 0x98	; 152
    1a94:	80 93 c1 00 	sts	0x00C1, r24
    1a98:	86 e0       	ldi	r24, 0x06	; 6
    1a9a:	80 93 c2 00 	sts	0x00C2, r24
    1a9e:	08 95       	ret

00001aa0 <_Z9initUART2v>:
    1aa0:	10 92 16 03 	sts	0x0316, r1
    1aa4:	10 92 d5 00 	sts	0x00D5, r1
    1aa8:	89 e1       	ldi	r24, 0x19	; 25
    1aaa:	80 93 d4 00 	sts	0x00D4, r24
    1aae:	88 e9       	ldi	r24, 0x98	; 152
    1ab0:	80 93 d1 00 	sts	0x00D1, r24
    1ab4:	86 e0       	ldi	r24, 0x06	; 6
    1ab6:	80 93 d2 00 	sts	0x00D2, r24
    1aba:	08 95       	ret

00001abc <_Z9initUART3v>:
    1abc:	10 92 35 01 	sts	0x0135, r1
    1ac0:	87 e6       	ldi	r24, 0x67	; 103
    1ac2:	80 93 34 01 	sts	0x0134, r24
    1ac6:	88 e9       	ldi	r24, 0x98	; 152
    1ac8:	80 93 31 01 	sts	0x0131, r24
    1acc:	86 e0       	ldi	r24, 0x06	; 6
    1ace:	80 93 32 01 	sts	0x0132, r24
    1ad2:	08 95       	ret

00001ad4 <_Z13UART0Transmith>:
    1ad4:	e0 ec       	ldi	r30, 0xC0	; 192
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	90 81       	ld	r25, Z
    1ada:	95 ff       	sbrs	r25, 5
    1adc:	fd cf       	rjmp	.-6      	; 0x1ad8 <_Z13UART0Transmith+0x4>
    1ade:	80 93 c6 00 	sts	0x00C6, r24
    1ae2:	08 95       	ret

00001ae4 <_Z13UART2Transmith>:
    1ae4:	e0 ed       	ldi	r30, 0xD0	; 208
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	90 81       	ld	r25, Z
    1aea:	95 ff       	sbrs	r25, 5
    1aec:	fd cf       	rjmp	.-6      	; 0x1ae8 <_Z13UART2Transmith+0x4>
    1aee:	80 93 d6 00 	sts	0x00D6, r24
    1af2:	08 95       	ret

00001af4 <_Z13UART3Transmith>:
    1af4:	e0 e3       	ldi	r30, 0x30	; 48
    1af6:	f1 e0       	ldi	r31, 0x01	; 1
    1af8:	90 81       	ld	r25, Z
    1afa:	95 ff       	sbrs	r25, 5
    1afc:	fd cf       	rjmp	.-6      	; 0x1af8 <_Z13UART3Transmith+0x4>
    1afe:	80 93 36 01 	sts	0x0136, r24
    1b02:	08 95       	ret

00001b04 <_Z12UART3Receivev>:
    1b04:	80 91 18 03 	lds	r24, 0x0318
    1b08:	10 92 18 03 	sts	0x0318, r1
    1b0c:	08 95       	ret

00001b0e <_Z17UART2TransmitDatai>:
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	64 97       	sbiw	r28, 0x14	; 20
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	4a e0       	ldi	r20, 0x0A	; 10
    1b28:	be 01       	movw	r22, r28
    1b2a:	6f 5f       	subi	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	a0 d2       	rcall	.+1344   	; 0x2070 <__itoa_ncheck>
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	88 23       	and	r24, r24
    1b34:	49 f0       	breq	.+18     	; 0x1b48 <_Z17UART2TransmitDatai+0x3a>
    1b36:	8e 01       	movw	r16, r28
    1b38:	0e 5f       	subi	r16, 0xFE	; 254
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	d3 df       	rcall	.-90     	; 0x1ae4 <_Z13UART2Transmith>
    1b3e:	f8 01       	movw	r30, r16
    1b40:	81 91       	ld	r24, Z+
    1b42:	8f 01       	movw	r16, r30
    1b44:	81 11       	cpse	r24, r1
    1b46:	fa cf       	rjmp	.-12     	; 0x1b3c <_Z17UART2TransmitDatai+0x2e>
    1b48:	64 96       	adiw	r28, 0x14	; 20
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	08 95       	ret

00001b5e <_Z17UART3TransmitDatai>:
    1b5e:	0f 93       	push	r16
    1b60:	1f 93       	push	r17
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	64 97       	sbiw	r28, 0x14	; 20
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	4a e0       	ldi	r20, 0x0A	; 10
    1b78:	be 01       	movw	r22, r28
    1b7a:	6f 5f       	subi	r22, 0xFF	; 255
    1b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7e:	78 d2       	rcall	.+1264   	; 0x2070 <__itoa_ncheck>
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	88 23       	and	r24, r24
    1b84:	49 f0       	breq	.+18     	; 0x1b98 <_Z17UART3TransmitDatai+0x3a>
    1b86:	8e 01       	movw	r16, r28
    1b88:	0e 5f       	subi	r16, 0xFE	; 254
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	b3 df       	rcall	.-154    	; 0x1af4 <_Z13UART3Transmith>
    1b8e:	f8 01       	movw	r30, r16
    1b90:	81 91       	ld	r24, Z+
    1b92:	8f 01       	movw	r16, r30
    1b94:	81 11       	cpse	r24, r1
    1b96:	fa cf       	rjmp	.-12     	; 0x1b8c <_Z17UART3TransmitDatai+0x2e>
    1b98:	64 96       	adiw	r28, 0x14	; 20
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	08 95       	ret

00001bae <_Z19UART0TransmitStringPKc>:
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	ec 01       	movw	r28, r24
    1bb4:	88 81       	ld	r24, Y
    1bb6:	88 23       	and	r24, r24
    1bb8:	29 f0       	breq	.+10     	; 0x1bc4 <_Z19UART0TransmitStringPKc+0x16>
    1bba:	21 96       	adiw	r28, 0x01	; 1
    1bbc:	8b df       	rcall	.-234    	; 0x1ad4 <_Z13UART0Transmith>
    1bbe:	89 91       	ld	r24, Y+
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	fc cf       	rjmp	.-8      	; 0x1bbc <_Z19UART0TransmitStringPKc+0xe>
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <_Z19UART2TransmitStringPKc>:


void UART2TransmitString(const char *s)
{
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	ec 01       	movw	r28, r24
	while(*s)
    1bd0:	88 81       	ld	r24, Y
    1bd2:	88 23       	and	r24, r24
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <_Z19UART2TransmitStringPKc+0x16>
    1bd6:	21 96       	adiw	r28, 0x01	; 1
	UART2Transmit(*s++);
    1bd8:	85 df       	rcall	.-246    	; 0x1ae4 <_Z13UART2Transmith>
}


void UART2TransmitString(const char *s)
{
	while(*s)
    1bda:	89 91       	ld	r24, Y+
    1bdc:	81 11       	cpse	r24, r1
    1bde:	fc cf       	rjmp	.-8      	; 0x1bd8 <_Z19UART2TransmitStringPKc+0xe>
	UART2Transmit(*s++);
}
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <_Z19UART3TransmitStringPKc>:

void UART3TransmitString(const char *s)
{
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	ec 01       	movw	r28, r24
	while(*s)
    1bec:	88 81       	ld	r24, Y
    1bee:	88 23       	and	r24, r24
    1bf0:	29 f0       	breq	.+10     	; 0x1bfc <_Z19UART3TransmitStringPKc+0x16>
    1bf2:	21 96       	adiw	r28, 0x01	; 1
	UART3Transmit(*s++);
    1bf4:	7f df       	rcall	.-258    	; 0x1af4 <_Z13UART3Transmith>
	UART2Transmit(*s++);
}

void UART3TransmitString(const char *s)
{
	while(*s)
    1bf6:	89 91       	ld	r24, Y+
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	fc cf       	rjmp	.-8      	; 0x1bf4 <_Z19UART3TransmitStringPKc+0xe>
	UART3Transmit(*s++);
}
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <__vector_25>:

ISR(USART0_RX_vect)
{
    1c02:	1f 92       	push	r1
    1c04:	0f 92       	push	r0
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	0f 92       	push	r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	8f 93       	push	r24
	buffer=UDR0;
    1c0e:	80 91 c6 00 	lds	r24, 0x00C6
    1c12:	80 93 1a 03 	sts	0x031A, r24
}
    1c16:	8f 91       	pop	r24
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	0f 90       	pop	r0
    1c1e:	1f 90       	pop	r1
    1c20:	18 95       	reti

00001c22 <__vector_36>:

ISR(USART1_RX_vect)
{
    1c22:	1f 92       	push	r1
    1c24:	0f 92       	push	r0
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	0f 92       	push	r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	8f 93       	push	r24
	buffer1=UDR1;
    1c2e:	80 91 ce 00 	lds	r24, 0x00CE
    1c32:	80 93 19 03 	sts	0x0319, r24
	
}
    1c36:	8f 91       	pop	r24
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	0f 90       	pop	r0
    1c3e:	1f 90       	pop	r1
    1c40:	18 95       	reti

00001c42 <__vector_51>:

ISR(USART2_RX_vect)
{
    1c42:	1f 92       	push	r1
    1c44:	0f 92       	push	r0
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	0f 92       	push	r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	8f 93       	push	r24
	buffer2=UDR2;
    1c4e:	80 91 d6 00 	lds	r24, 0x00D6
    1c52:	80 93 17 03 	sts	0x0317, r24
	
		
}
    1c56:	8f 91       	pop	r24
    1c58:	0f 90       	pop	r0
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	0f 90       	pop	r0
    1c5e:	1f 90       	pop	r1
    1c60:	18 95       	reti

00001c62 <__vector_54>:
ISR(USART3_RX_vect)
{
    1c62:	1f 92       	push	r1
    1c64:	0f 92       	push	r0
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	8f 93       	push	r24
	buffer3=UDR3;
    1c6e:	80 91 36 01 	lds	r24, 0x0136
    1c72:	80 93 18 03 	sts	0x0318, r24
}
    1c76:	8f 91       	pop	r24
    1c78:	0f 90       	pop	r0
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	0f 90       	pop	r0
    1c7e:	1f 90       	pop	r1
    1c80:	18 95       	reti

00001c82 <__subsf3>:
    1c82:	50 58       	subi	r21, 0x80	; 128

00001c84 <__addsf3>:
    1c84:	bb 27       	eor	r27, r27
    1c86:	aa 27       	eor	r26, r26
    1c88:	0e d0       	rcall	.+28     	; 0x1ca6 <__addsf3x>
    1c8a:	4d c1       	rjmp	.+666    	; 0x1f26 <__fp_round>
    1c8c:	3e d1       	rcall	.+636    	; 0x1f0a <__fp_pscA>
    1c8e:	30 f0       	brcs	.+12     	; 0x1c9c <__addsf3+0x18>
    1c90:	43 d1       	rcall	.+646    	; 0x1f18 <__fp_pscB>
    1c92:	20 f0       	brcs	.+8      	; 0x1c9c <__addsf3+0x18>
    1c94:	31 f4       	brne	.+12     	; 0x1ca2 <__addsf3+0x1e>
    1c96:	9f 3f       	cpi	r25, 0xFF	; 255
    1c98:	11 f4       	brne	.+4      	; 0x1c9e <__addsf3+0x1a>
    1c9a:	1e f4       	brtc	.+6      	; 0x1ca2 <__addsf3+0x1e>
    1c9c:	33 c1       	rjmp	.+614    	; 0x1f04 <__fp_nan>
    1c9e:	0e f4       	brtc	.+2      	; 0x1ca2 <__addsf3+0x1e>
    1ca0:	e0 95       	com	r30
    1ca2:	e7 fb       	bst	r30, 7
    1ca4:	29 c1       	rjmp	.+594    	; 0x1ef8 <__fp_inf>

00001ca6 <__addsf3x>:
    1ca6:	e9 2f       	mov	r30, r25
    1ca8:	4f d1       	rcall	.+670    	; 0x1f48 <__fp_split3>
    1caa:	80 f3       	brcs	.-32     	; 0x1c8c <__addsf3+0x8>
    1cac:	ba 17       	cp	r27, r26
    1cae:	62 07       	cpc	r22, r18
    1cb0:	73 07       	cpc	r23, r19
    1cb2:	84 07       	cpc	r24, r20
    1cb4:	95 07       	cpc	r25, r21
    1cb6:	18 f0       	brcs	.+6      	; 0x1cbe <__addsf3x+0x18>
    1cb8:	71 f4       	brne	.+28     	; 0x1cd6 <__addsf3x+0x30>
    1cba:	9e f5       	brtc	.+102    	; 0x1d22 <__addsf3x+0x7c>
    1cbc:	67 c1       	rjmp	.+718    	; 0x1f8c <__fp_zero>
    1cbe:	0e f4       	brtc	.+2      	; 0x1cc2 <__addsf3x+0x1c>
    1cc0:	e0 95       	com	r30
    1cc2:	0b 2e       	mov	r0, r27
    1cc4:	ba 2f       	mov	r27, r26
    1cc6:	a0 2d       	mov	r26, r0
    1cc8:	0b 01       	movw	r0, r22
    1cca:	b9 01       	movw	r22, r18
    1ccc:	90 01       	movw	r18, r0
    1cce:	0c 01       	movw	r0, r24
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	a0 01       	movw	r20, r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	ff 27       	eor	r31, r31
    1cd8:	59 1b       	sub	r21, r25
    1cda:	99 f0       	breq	.+38     	; 0x1d02 <__addsf3x+0x5c>
    1cdc:	59 3f       	cpi	r21, 0xF9	; 249
    1cde:	50 f4       	brcc	.+20     	; 0x1cf4 <__addsf3x+0x4e>
    1ce0:	50 3e       	cpi	r21, 0xE0	; 224
    1ce2:	68 f1       	brcs	.+90     	; 0x1d3e <__addsf3x+0x98>
    1ce4:	1a 16       	cp	r1, r26
    1ce6:	f0 40       	sbci	r31, 0x00	; 0
    1ce8:	a2 2f       	mov	r26, r18
    1cea:	23 2f       	mov	r18, r19
    1cec:	34 2f       	mov	r19, r20
    1cee:	44 27       	eor	r20, r20
    1cf0:	58 5f       	subi	r21, 0xF8	; 248
    1cf2:	f3 cf       	rjmp	.-26     	; 0x1cda <__addsf3x+0x34>
    1cf4:	46 95       	lsr	r20
    1cf6:	37 95       	ror	r19
    1cf8:	27 95       	ror	r18
    1cfa:	a7 95       	ror	r26
    1cfc:	f0 40       	sbci	r31, 0x00	; 0
    1cfe:	53 95       	inc	r21
    1d00:	c9 f7       	brne	.-14     	; 0x1cf4 <__addsf3x+0x4e>
    1d02:	7e f4       	brtc	.+30     	; 0x1d22 <__addsf3x+0x7c>
    1d04:	1f 16       	cp	r1, r31
    1d06:	ba 0b       	sbc	r27, r26
    1d08:	62 0b       	sbc	r22, r18
    1d0a:	73 0b       	sbc	r23, r19
    1d0c:	84 0b       	sbc	r24, r20
    1d0e:	ba f0       	brmi	.+46     	; 0x1d3e <__addsf3x+0x98>
    1d10:	91 50       	subi	r25, 0x01	; 1
    1d12:	a1 f0       	breq	.+40     	; 0x1d3c <__addsf3x+0x96>
    1d14:	ff 0f       	add	r31, r31
    1d16:	bb 1f       	adc	r27, r27
    1d18:	66 1f       	adc	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	c2 f7       	brpl	.-16     	; 0x1d10 <__addsf3x+0x6a>
    1d20:	0e c0       	rjmp	.+28     	; 0x1d3e <__addsf3x+0x98>
    1d22:	ba 0f       	add	r27, r26
    1d24:	62 1f       	adc	r22, r18
    1d26:	73 1f       	adc	r23, r19
    1d28:	84 1f       	adc	r24, r20
    1d2a:	48 f4       	brcc	.+18     	; 0x1d3e <__addsf3x+0x98>
    1d2c:	87 95       	ror	r24
    1d2e:	77 95       	ror	r23
    1d30:	67 95       	ror	r22
    1d32:	b7 95       	ror	r27
    1d34:	f7 95       	ror	r31
    1d36:	9e 3f       	cpi	r25, 0xFE	; 254
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <__addsf3x+0x96>
    1d3a:	b3 cf       	rjmp	.-154    	; 0x1ca2 <__addsf3+0x1e>
    1d3c:	93 95       	inc	r25
    1d3e:	88 0f       	add	r24, r24
    1d40:	08 f0       	brcs	.+2      	; 0x1d44 <__addsf3x+0x9e>
    1d42:	99 27       	eor	r25, r25
    1d44:	ee 0f       	add	r30, r30
    1d46:	97 95       	ror	r25
    1d48:	87 95       	ror	r24
    1d4a:	08 95       	ret

00001d4c <__divsf3>:
    1d4c:	0c d0       	rcall	.+24     	; 0x1d66 <__divsf3x>
    1d4e:	eb c0       	rjmp	.+470    	; 0x1f26 <__fp_round>
    1d50:	e3 d0       	rcall	.+454    	; 0x1f18 <__fp_pscB>
    1d52:	40 f0       	brcs	.+16     	; 0x1d64 <__divsf3+0x18>
    1d54:	da d0       	rcall	.+436    	; 0x1f0a <__fp_pscA>
    1d56:	30 f0       	brcs	.+12     	; 0x1d64 <__divsf3+0x18>
    1d58:	21 f4       	brne	.+8      	; 0x1d62 <__divsf3+0x16>
    1d5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d5c:	19 f0       	breq	.+6      	; 0x1d64 <__divsf3+0x18>
    1d5e:	cc c0       	rjmp	.+408    	; 0x1ef8 <__fp_inf>
    1d60:	51 11       	cpse	r21, r1
    1d62:	15 c1       	rjmp	.+554    	; 0x1f8e <__fp_szero>
    1d64:	cf c0       	rjmp	.+414    	; 0x1f04 <__fp_nan>

00001d66 <__divsf3x>:
    1d66:	f0 d0       	rcall	.+480    	; 0x1f48 <__fp_split3>
    1d68:	98 f3       	brcs	.-26     	; 0x1d50 <__divsf3+0x4>

00001d6a <__divsf3_pse>:
    1d6a:	99 23       	and	r25, r25
    1d6c:	c9 f3       	breq	.-14     	; 0x1d60 <__divsf3+0x14>
    1d6e:	55 23       	and	r21, r21
    1d70:	b1 f3       	breq	.-20     	; 0x1d5e <__divsf3+0x12>
    1d72:	95 1b       	sub	r25, r21
    1d74:	55 0b       	sbc	r21, r21
    1d76:	bb 27       	eor	r27, r27
    1d78:	aa 27       	eor	r26, r26
    1d7a:	62 17       	cp	r22, r18
    1d7c:	73 07       	cpc	r23, r19
    1d7e:	84 07       	cpc	r24, r20
    1d80:	38 f0       	brcs	.+14     	; 0x1d90 <__divsf3_pse+0x26>
    1d82:	9f 5f       	subi	r25, 0xFF	; 255
    1d84:	5f 4f       	sbci	r21, 0xFF	; 255
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	44 1f       	adc	r20, r20
    1d8c:	aa 1f       	adc	r26, r26
    1d8e:	a9 f3       	breq	.-22     	; 0x1d7a <__divsf3_pse+0x10>
    1d90:	33 d0       	rcall	.+102    	; 0x1df8 <__divsf3_pse+0x8e>
    1d92:	0e 2e       	mov	r0, r30
    1d94:	3a f0       	brmi	.+14     	; 0x1da4 <__divsf3_pse+0x3a>
    1d96:	e0 e8       	ldi	r30, 0x80	; 128
    1d98:	30 d0       	rcall	.+96     	; 0x1dfa <__divsf3_pse+0x90>
    1d9a:	91 50       	subi	r25, 0x01	; 1
    1d9c:	50 40       	sbci	r21, 0x00	; 0
    1d9e:	e6 95       	lsr	r30
    1da0:	00 1c       	adc	r0, r0
    1da2:	ca f7       	brpl	.-14     	; 0x1d96 <__divsf3_pse+0x2c>
    1da4:	29 d0       	rcall	.+82     	; 0x1df8 <__divsf3_pse+0x8e>
    1da6:	fe 2f       	mov	r31, r30
    1da8:	27 d0       	rcall	.+78     	; 0x1df8 <__divsf3_pse+0x8e>
    1daa:	66 0f       	add	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	88 1f       	adc	r24, r24
    1db0:	bb 1f       	adc	r27, r27
    1db2:	26 17       	cp	r18, r22
    1db4:	37 07       	cpc	r19, r23
    1db6:	48 07       	cpc	r20, r24
    1db8:	ab 07       	cpc	r26, r27
    1dba:	b0 e8       	ldi	r27, 0x80	; 128
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <__divsf3_pse+0x56>
    1dbe:	bb 0b       	sbc	r27, r27
    1dc0:	80 2d       	mov	r24, r0
    1dc2:	bf 01       	movw	r22, r30
    1dc4:	ff 27       	eor	r31, r31
    1dc6:	93 58       	subi	r25, 0x83	; 131
    1dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dca:	2a f0       	brmi	.+10     	; 0x1dd6 <__divsf3_pse+0x6c>
    1dcc:	9e 3f       	cpi	r25, 0xFE	; 254
    1dce:	51 05       	cpc	r21, r1
    1dd0:	68 f0       	brcs	.+26     	; 0x1dec <__divsf3_pse+0x82>
    1dd2:	92 c0       	rjmp	.+292    	; 0x1ef8 <__fp_inf>
    1dd4:	dc c0       	rjmp	.+440    	; 0x1f8e <__fp_szero>
    1dd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd8:	ec f3       	brlt	.-6      	; 0x1dd4 <__divsf3_pse+0x6a>
    1dda:	98 3e       	cpi	r25, 0xE8	; 232
    1ddc:	dc f3       	brlt	.-10     	; 0x1dd4 <__divsf3_pse+0x6a>
    1dde:	86 95       	lsr	r24
    1de0:	77 95       	ror	r23
    1de2:	67 95       	ror	r22
    1de4:	b7 95       	ror	r27
    1de6:	f7 95       	ror	r31
    1de8:	9f 5f       	subi	r25, 0xFF	; 255
    1dea:	c9 f7       	brne	.-14     	; 0x1dde <__divsf3_pse+0x74>
    1dec:	88 0f       	add	r24, r24
    1dee:	91 1d       	adc	r25, r1
    1df0:	96 95       	lsr	r25
    1df2:	87 95       	ror	r24
    1df4:	97 f9       	bld	r25, 7
    1df6:	08 95       	ret
    1df8:	e1 e0       	ldi	r30, 0x01	; 1
    1dfa:	66 0f       	add	r22, r22
    1dfc:	77 1f       	adc	r23, r23
    1dfe:	88 1f       	adc	r24, r24
    1e00:	bb 1f       	adc	r27, r27
    1e02:	62 17       	cp	r22, r18
    1e04:	73 07       	cpc	r23, r19
    1e06:	84 07       	cpc	r24, r20
    1e08:	ba 07       	cpc	r27, r26
    1e0a:	20 f0       	brcs	.+8      	; 0x1e14 <__divsf3_pse+0xaa>
    1e0c:	62 1b       	sub	r22, r18
    1e0e:	73 0b       	sbc	r23, r19
    1e10:	84 0b       	sbc	r24, r20
    1e12:	ba 0b       	sbc	r27, r26
    1e14:	ee 1f       	adc	r30, r30
    1e16:	88 f7       	brcc	.-30     	; 0x1dfa <__divsf3_pse+0x90>
    1e18:	e0 95       	com	r30
    1e1a:	08 95       	ret

00001e1c <__fixsfsi>:
    1e1c:	04 d0       	rcall	.+8      	; 0x1e26 <__fixunssfsi>
    1e1e:	68 94       	set
    1e20:	b1 11       	cpse	r27, r1
    1e22:	b5 c0       	rjmp	.+362    	; 0x1f8e <__fp_szero>
    1e24:	08 95       	ret

00001e26 <__fixunssfsi>:
    1e26:	98 d0       	rcall	.+304    	; 0x1f58 <__fp_splitA>
    1e28:	88 f0       	brcs	.+34     	; 0x1e4c <__fixunssfsi+0x26>
    1e2a:	9f 57       	subi	r25, 0x7F	; 127
    1e2c:	90 f0       	brcs	.+36     	; 0x1e52 <__fixunssfsi+0x2c>
    1e2e:	b9 2f       	mov	r27, r25
    1e30:	99 27       	eor	r25, r25
    1e32:	b7 51       	subi	r27, 0x17	; 23
    1e34:	a0 f0       	brcs	.+40     	; 0x1e5e <__fixunssfsi+0x38>
    1e36:	d1 f0       	breq	.+52     	; 0x1e6c <__fixunssfsi+0x46>
    1e38:	66 0f       	add	r22, r22
    1e3a:	77 1f       	adc	r23, r23
    1e3c:	88 1f       	adc	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	1a f0       	brmi	.+6      	; 0x1e48 <__fixunssfsi+0x22>
    1e42:	ba 95       	dec	r27
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <__fixunssfsi+0x12>
    1e46:	12 c0       	rjmp	.+36     	; 0x1e6c <__fixunssfsi+0x46>
    1e48:	b1 30       	cpi	r27, 0x01	; 1
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <__fixunssfsi+0x46>
    1e4c:	9f d0       	rcall	.+318    	; 0x1f8c <__fp_zero>
    1e4e:	b1 e0       	ldi	r27, 0x01	; 1
    1e50:	08 95       	ret
    1e52:	9c c0       	rjmp	.+312    	; 0x1f8c <__fp_zero>
    1e54:	67 2f       	mov	r22, r23
    1e56:	78 2f       	mov	r23, r24
    1e58:	88 27       	eor	r24, r24
    1e5a:	b8 5f       	subi	r27, 0xF8	; 248
    1e5c:	39 f0       	breq	.+14     	; 0x1e6c <__fixunssfsi+0x46>
    1e5e:	b9 3f       	cpi	r27, 0xF9	; 249
    1e60:	cc f3       	brlt	.-14     	; 0x1e54 <__fixunssfsi+0x2e>
    1e62:	86 95       	lsr	r24
    1e64:	77 95       	ror	r23
    1e66:	67 95       	ror	r22
    1e68:	b3 95       	inc	r27
    1e6a:	d9 f7       	brne	.-10     	; 0x1e62 <__fixunssfsi+0x3c>
    1e6c:	3e f4       	brtc	.+14     	; 0x1e7c <__fixunssfsi+0x56>
    1e6e:	90 95       	com	r25
    1e70:	80 95       	com	r24
    1e72:	70 95       	com	r23
    1e74:	61 95       	neg	r22
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	08 95       	ret

00001e7e <__floatunsisf>:
    1e7e:	e8 94       	clt
    1e80:	09 c0       	rjmp	.+18     	; 0x1e94 <__floatsisf+0x12>

00001e82 <__floatsisf>:
    1e82:	97 fb       	bst	r25, 7
    1e84:	3e f4       	brtc	.+14     	; 0x1e94 <__floatsisf+0x12>
    1e86:	90 95       	com	r25
    1e88:	80 95       	com	r24
    1e8a:	70 95       	com	r23
    1e8c:	61 95       	neg	r22
    1e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e90:	8f 4f       	sbci	r24, 0xFF	; 255
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	99 23       	and	r25, r25
    1e96:	a9 f0       	breq	.+42     	; 0x1ec2 <__floatsisf+0x40>
    1e98:	f9 2f       	mov	r31, r25
    1e9a:	96 e9       	ldi	r25, 0x96	; 150
    1e9c:	bb 27       	eor	r27, r27
    1e9e:	93 95       	inc	r25
    1ea0:	f6 95       	lsr	r31
    1ea2:	87 95       	ror	r24
    1ea4:	77 95       	ror	r23
    1ea6:	67 95       	ror	r22
    1ea8:	b7 95       	ror	r27
    1eaa:	f1 11       	cpse	r31, r1
    1eac:	f8 cf       	rjmp	.-16     	; 0x1e9e <__floatsisf+0x1c>
    1eae:	fa f4       	brpl	.+62     	; 0x1eee <__floatsisf+0x6c>
    1eb0:	bb 0f       	add	r27, r27
    1eb2:	11 f4       	brne	.+4      	; 0x1eb8 <__floatsisf+0x36>
    1eb4:	60 ff       	sbrs	r22, 0
    1eb6:	1b c0       	rjmp	.+54     	; 0x1eee <__floatsisf+0x6c>
    1eb8:	6f 5f       	subi	r22, 0xFF	; 255
    1eba:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	16 c0       	rjmp	.+44     	; 0x1eee <__floatsisf+0x6c>
    1ec2:	88 23       	and	r24, r24
    1ec4:	11 f0       	breq	.+4      	; 0x1eca <__floatsisf+0x48>
    1ec6:	96 e9       	ldi	r25, 0x96	; 150
    1ec8:	11 c0       	rjmp	.+34     	; 0x1eec <__floatsisf+0x6a>
    1eca:	77 23       	and	r23, r23
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <__floatsisf+0x54>
    1ece:	9e e8       	ldi	r25, 0x8E	; 142
    1ed0:	87 2f       	mov	r24, r23
    1ed2:	76 2f       	mov	r23, r22
    1ed4:	05 c0       	rjmp	.+10     	; 0x1ee0 <__floatsisf+0x5e>
    1ed6:	66 23       	and	r22, r22
    1ed8:	71 f0       	breq	.+28     	; 0x1ef6 <__floatsisf+0x74>
    1eda:	96 e8       	ldi	r25, 0x86	; 134
    1edc:	86 2f       	mov	r24, r22
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	2a f0       	brmi	.+10     	; 0x1eee <__floatsisf+0x6c>
    1ee4:	9a 95       	dec	r25
    1ee6:	66 0f       	add	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	88 1f       	adc	r24, r24
    1eec:	da f7       	brpl	.-10     	; 0x1ee4 <__floatsisf+0x62>
    1eee:	88 0f       	add	r24, r24
    1ef0:	96 95       	lsr	r25
    1ef2:	87 95       	ror	r24
    1ef4:	97 f9       	bld	r25, 7
    1ef6:	08 95       	ret

00001ef8 <__fp_inf>:
    1ef8:	97 f9       	bld	r25, 7
    1efa:	9f 67       	ori	r25, 0x7F	; 127
    1efc:	80 e8       	ldi	r24, 0x80	; 128
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	08 95       	ret

00001f04 <__fp_nan>:
    1f04:	9f ef       	ldi	r25, 0xFF	; 255
    1f06:	80 ec       	ldi	r24, 0xC0	; 192
    1f08:	08 95       	ret

00001f0a <__fp_pscA>:
    1f0a:	00 24       	eor	r0, r0
    1f0c:	0a 94       	dec	r0
    1f0e:	16 16       	cp	r1, r22
    1f10:	17 06       	cpc	r1, r23
    1f12:	18 06       	cpc	r1, r24
    1f14:	09 06       	cpc	r0, r25
    1f16:	08 95       	ret

00001f18 <__fp_pscB>:
    1f18:	00 24       	eor	r0, r0
    1f1a:	0a 94       	dec	r0
    1f1c:	12 16       	cp	r1, r18
    1f1e:	13 06       	cpc	r1, r19
    1f20:	14 06       	cpc	r1, r20
    1f22:	05 06       	cpc	r0, r21
    1f24:	08 95       	ret

00001f26 <__fp_round>:
    1f26:	09 2e       	mov	r0, r25
    1f28:	03 94       	inc	r0
    1f2a:	00 0c       	add	r0, r0
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <__fp_round+0xc>
    1f2e:	88 23       	and	r24, r24
    1f30:	52 f0       	brmi	.+20     	; 0x1f46 <__fp_round+0x20>
    1f32:	bb 0f       	add	r27, r27
    1f34:	40 f4       	brcc	.+16     	; 0x1f46 <__fp_round+0x20>
    1f36:	bf 2b       	or	r27, r31
    1f38:	11 f4       	brne	.+4      	; 0x1f3e <__fp_round+0x18>
    1f3a:	60 ff       	sbrs	r22, 0
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <__fp_round+0x20>
    1f3e:	6f 5f       	subi	r22, 0xFF	; 255
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	8f 4f       	sbci	r24, 0xFF	; 255
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	08 95       	ret

00001f48 <__fp_split3>:
    1f48:	57 fd       	sbrc	r21, 7
    1f4a:	90 58       	subi	r25, 0x80	; 128
    1f4c:	44 0f       	add	r20, r20
    1f4e:	55 1f       	adc	r21, r21
    1f50:	59 f0       	breq	.+22     	; 0x1f68 <__fp_splitA+0x10>
    1f52:	5f 3f       	cpi	r21, 0xFF	; 255
    1f54:	71 f0       	breq	.+28     	; 0x1f72 <__fp_splitA+0x1a>
    1f56:	47 95       	ror	r20

00001f58 <__fp_splitA>:
    1f58:	88 0f       	add	r24, r24
    1f5a:	97 fb       	bst	r25, 7
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	61 f0       	breq	.+24     	; 0x1f78 <__fp_splitA+0x20>
    1f60:	9f 3f       	cpi	r25, 0xFF	; 255
    1f62:	79 f0       	breq	.+30     	; 0x1f82 <__fp_splitA+0x2a>
    1f64:	87 95       	ror	r24
    1f66:	08 95       	ret
    1f68:	12 16       	cp	r1, r18
    1f6a:	13 06       	cpc	r1, r19
    1f6c:	14 06       	cpc	r1, r20
    1f6e:	55 1f       	adc	r21, r21
    1f70:	f2 cf       	rjmp	.-28     	; 0x1f56 <__fp_split3+0xe>
    1f72:	46 95       	lsr	r20
    1f74:	f1 df       	rcall	.-30     	; 0x1f58 <__fp_splitA>
    1f76:	08 c0       	rjmp	.+16     	; 0x1f88 <__fp_splitA+0x30>
    1f78:	16 16       	cp	r1, r22
    1f7a:	17 06       	cpc	r1, r23
    1f7c:	18 06       	cpc	r1, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	f1 cf       	rjmp	.-30     	; 0x1f64 <__fp_splitA+0xc>
    1f82:	86 95       	lsr	r24
    1f84:	71 05       	cpc	r23, r1
    1f86:	61 05       	cpc	r22, r1
    1f88:	08 94       	sec
    1f8a:	08 95       	ret

00001f8c <__fp_zero>:
    1f8c:	e8 94       	clt

00001f8e <__fp_szero>:
    1f8e:	bb 27       	eor	r27, r27
    1f90:	66 27       	eor	r22, r22
    1f92:	77 27       	eor	r23, r23
    1f94:	cb 01       	movw	r24, r22
    1f96:	97 f9       	bld	r25, 7
    1f98:	08 95       	ret

00001f9a <__mulsf3>:
    1f9a:	0b d0       	rcall	.+22     	; 0x1fb2 <__mulsf3x>
    1f9c:	c4 cf       	rjmp	.-120    	; 0x1f26 <__fp_round>
    1f9e:	b5 df       	rcall	.-150    	; 0x1f0a <__fp_pscA>
    1fa0:	28 f0       	brcs	.+10     	; 0x1fac <__mulsf3+0x12>
    1fa2:	ba df       	rcall	.-140    	; 0x1f18 <__fp_pscB>
    1fa4:	18 f0       	brcs	.+6      	; 0x1fac <__mulsf3+0x12>
    1fa6:	95 23       	and	r25, r21
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <__mulsf3+0x12>
    1faa:	a6 cf       	rjmp	.-180    	; 0x1ef8 <__fp_inf>
    1fac:	ab cf       	rjmp	.-170    	; 0x1f04 <__fp_nan>
    1fae:	11 24       	eor	r1, r1
    1fb0:	ee cf       	rjmp	.-36     	; 0x1f8e <__fp_szero>

00001fb2 <__mulsf3x>:
    1fb2:	ca df       	rcall	.-108    	; 0x1f48 <__fp_split3>
    1fb4:	a0 f3       	brcs	.-24     	; 0x1f9e <__mulsf3+0x4>

00001fb6 <__mulsf3_pse>:
    1fb6:	95 9f       	mul	r25, r21
    1fb8:	d1 f3       	breq	.-12     	; 0x1fae <__mulsf3+0x14>
    1fba:	95 0f       	add	r25, r21
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	55 1f       	adc	r21, r21
    1fc0:	62 9f       	mul	r22, r18
    1fc2:	f0 01       	movw	r30, r0
    1fc4:	72 9f       	mul	r23, r18
    1fc6:	bb 27       	eor	r27, r27
    1fc8:	f0 0d       	add	r31, r0
    1fca:	b1 1d       	adc	r27, r1
    1fcc:	63 9f       	mul	r22, r19
    1fce:	aa 27       	eor	r26, r26
    1fd0:	f0 0d       	add	r31, r0
    1fd2:	b1 1d       	adc	r27, r1
    1fd4:	aa 1f       	adc	r26, r26
    1fd6:	64 9f       	mul	r22, r20
    1fd8:	66 27       	eor	r22, r22
    1fda:	b0 0d       	add	r27, r0
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	66 1f       	adc	r22, r22
    1fe0:	82 9f       	mul	r24, r18
    1fe2:	22 27       	eor	r18, r18
    1fe4:	b0 0d       	add	r27, r0
    1fe6:	a1 1d       	adc	r26, r1
    1fe8:	62 1f       	adc	r22, r18
    1fea:	73 9f       	mul	r23, r19
    1fec:	b0 0d       	add	r27, r0
    1fee:	a1 1d       	adc	r26, r1
    1ff0:	62 1f       	adc	r22, r18
    1ff2:	83 9f       	mul	r24, r19
    1ff4:	a0 0d       	add	r26, r0
    1ff6:	61 1d       	adc	r22, r1
    1ff8:	22 1f       	adc	r18, r18
    1ffa:	74 9f       	mul	r23, r20
    1ffc:	33 27       	eor	r19, r19
    1ffe:	a0 0d       	add	r26, r0
    2000:	61 1d       	adc	r22, r1
    2002:	23 1f       	adc	r18, r19
    2004:	84 9f       	mul	r24, r20
    2006:	60 0d       	add	r22, r0
    2008:	21 1d       	adc	r18, r1
    200a:	82 2f       	mov	r24, r18
    200c:	76 2f       	mov	r23, r22
    200e:	6a 2f       	mov	r22, r26
    2010:	11 24       	eor	r1, r1
    2012:	9f 57       	subi	r25, 0x7F	; 127
    2014:	50 40       	sbci	r21, 0x00	; 0
    2016:	8a f0       	brmi	.+34     	; 0x203a <__mulsf3_pse+0x84>
    2018:	e1 f0       	breq	.+56     	; 0x2052 <__mulsf3_pse+0x9c>
    201a:	88 23       	and	r24, r24
    201c:	4a f0       	brmi	.+18     	; 0x2030 <__mulsf3_pse+0x7a>
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	bb 1f       	adc	r27, r27
    2024:	66 1f       	adc	r22, r22
    2026:	77 1f       	adc	r23, r23
    2028:	88 1f       	adc	r24, r24
    202a:	91 50       	subi	r25, 0x01	; 1
    202c:	50 40       	sbci	r21, 0x00	; 0
    202e:	a9 f7       	brne	.-22     	; 0x201a <__mulsf3_pse+0x64>
    2030:	9e 3f       	cpi	r25, 0xFE	; 254
    2032:	51 05       	cpc	r21, r1
    2034:	70 f0       	brcs	.+28     	; 0x2052 <__mulsf3_pse+0x9c>
    2036:	60 cf       	rjmp	.-320    	; 0x1ef8 <__fp_inf>
    2038:	aa cf       	rjmp	.-172    	; 0x1f8e <__fp_szero>
    203a:	5f 3f       	cpi	r21, 0xFF	; 255
    203c:	ec f3       	brlt	.-6      	; 0x2038 <__mulsf3_pse+0x82>
    203e:	98 3e       	cpi	r25, 0xE8	; 232
    2040:	dc f3       	brlt	.-10     	; 0x2038 <__mulsf3_pse+0x82>
    2042:	86 95       	lsr	r24
    2044:	77 95       	ror	r23
    2046:	67 95       	ror	r22
    2048:	b7 95       	ror	r27
    204a:	f7 95       	ror	r31
    204c:	e7 95       	ror	r30
    204e:	9f 5f       	subi	r25, 0xFF	; 255
    2050:	c1 f7       	brne	.-16     	; 0x2042 <__mulsf3_pse+0x8c>
    2052:	fe 2b       	or	r31, r30
    2054:	88 0f       	add	r24, r24
    2056:	91 1d       	adc	r25, r1
    2058:	96 95       	lsr	r25
    205a:	87 95       	ror	r24
    205c:	97 f9       	bld	r25, 7
    205e:	08 95       	ret

00002060 <__tablejump2__>:
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	88 1f       	adc	r24, r24
    2066:	8b bf       	out	0x3b, r24	; 59
    2068:	07 90       	elpm	r0, Z+
    206a:	f6 91       	elpm	r31, Z
    206c:	e0 2d       	mov	r30, r0
    206e:	19 94       	eijmp

00002070 <__itoa_ncheck>:
    2070:	bb 27       	eor	r27, r27
    2072:	4a 30       	cpi	r20, 0x0A	; 10
    2074:	31 f4       	brne	.+12     	; 0x2082 <__itoa_ncheck+0x12>
    2076:	99 23       	and	r25, r25
    2078:	22 f4       	brpl	.+8      	; 0x2082 <__itoa_ncheck+0x12>
    207a:	bd e2       	ldi	r27, 0x2D	; 45
    207c:	90 95       	com	r25
    207e:	81 95       	neg	r24
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <__utoa_common>

00002084 <__utoa_ncheck>:
    2084:	bb 27       	eor	r27, r27

00002086 <__utoa_common>:
    2086:	fb 01       	movw	r30, r22
    2088:	55 27       	eor	r21, r21
    208a:	aa 27       	eor	r26, r26
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	aa 1f       	adc	r26, r26
    2092:	a4 17       	cp	r26, r20
    2094:	10 f0       	brcs	.+4      	; 0x209a <__utoa_common+0x14>
    2096:	a4 1b       	sub	r26, r20
    2098:	83 95       	inc	r24
    209a:	50 51       	subi	r21, 0x10	; 16
    209c:	b9 f7       	brne	.-18     	; 0x208c <__utoa_common+0x6>
    209e:	a0 5d       	subi	r26, 0xD0	; 208
    20a0:	aa 33       	cpi	r26, 0x3A	; 58
    20a2:	08 f0       	brcs	.+2      	; 0x20a6 <__utoa_common+0x20>
    20a4:	a9 5d       	subi	r26, 0xD9	; 217
    20a6:	a1 93       	st	Z+, r26
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	79 f7       	brne	.-34     	; 0x208a <__utoa_common+0x4>
    20ac:	b1 11       	cpse	r27, r1
    20ae:	b1 93       	st	Z+, r27
    20b0:	11 92       	st	Z+, r1
    20b2:	cb 01       	movw	r24, r22
    20b4:	00 c0       	rjmp	.+0      	; 0x20b6 <strrev>

000020b6 <strrev>:
    20b6:	dc 01       	movw	r26, r24
    20b8:	fc 01       	movw	r30, r24
    20ba:	67 2f       	mov	r22, r23
    20bc:	71 91       	ld	r23, Z+
    20be:	77 23       	and	r23, r23
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <strrev+0x4>
    20c2:	32 97       	sbiw	r30, 0x02	; 2
    20c4:	04 c0       	rjmp	.+8      	; 0x20ce <strrev+0x18>
    20c6:	7c 91       	ld	r23, X
    20c8:	6d 93       	st	X+, r22
    20ca:	70 83       	st	Z, r23
    20cc:	62 91       	ld	r22, -Z
    20ce:	ae 17       	cp	r26, r30
    20d0:	bf 07       	cpc	r27, r31
    20d2:	c8 f3       	brcs	.-14     	; 0x20c6 <strrev+0x10>
    20d4:	08 95       	ret

000020d6 <_exit>:
    20d6:	f8 94       	cli

000020d8 <__stop_program>:
    20d8:	ff cf       	rjmp	.-2      	; 0x20d8 <__stop_program>
