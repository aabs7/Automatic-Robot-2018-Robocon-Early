
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000ad0  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023e  00800206  00800206  00000b6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f94  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d31  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d90  00000000  00000000  00006c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fbc  00000000  00000000  000099ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cd9  00000000  00000000  0000a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036cd  00000000  00000000  0000c681  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  0000fd4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	ae c0       	rjmp	.+348    	; 0x16a <__vector_3>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	cf c0       	rjmp	.+414    	; 0x1b8 <__vector_6>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	28 c2       	rjmp	.+1104   	; 0x476 <__vector_9>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	73 c2       	rjmp	.+1254   	; 0x514 <__vector_11>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	07 c1       	rjmp	.+526    	; 0x24c <__vector_15>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d4 c0       	rjmp	.+424    	; 0x206 <__vector_23>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c3       	rjmp	.+1814   	; 0x77c <__vector_25>
  66:	00 00       	nop
  68:	b8 c3       	rjmp	.+1904   	; 0x7da <__vector_26>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	eb c3       	rjmp	.+2006   	; 0x868 <__vector_36>
  92:	00 00       	nop
  94:	18 c4       	rjmp	.+2096   	; 0x8c6 <__vector_37>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c4       	rjmp	.+2132   	; 0x922 <__vector_51>
  ce:	00 00       	nop
  d0:	38 c4       	rjmp	.+2160   	; 0x942 <__vector_52>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	7b c4       	rjmp	.+2294   	; 0x9d0 <__vector_54>
  da:	00 00       	nop
  dc:	a8 c4       	rjmp	.+2384   	; 0xa2e <__vector_55>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	3e 03       	fmul	r19, r22

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	e0 ed       	ldi	r30, 0xD0	; 208
  fe:	fa e0       	ldi	r31, 0x0A	; 10
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	a6 30       	cpi	r26, 0x06	; 6
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	24 e0       	ldi	r18, 0x04	; 4
 112:	a6 e0       	ldi	r26, 0x06	; 6
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a4 34       	cpi	r26, 0x44	; 68
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	c4 d4       	rcall	.+2440   	; 0xabc <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	54 d2       	rcall	.+1192   	; 0x5e8 <main>
 140:	c5 c4       	rjmp	.+2442   	; 0xacc <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <_ZN7encoder22Init_encoder_interruptEv>:
}
float encoder::getdistance()
	{
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
	return distance;
}
 144:	78 94       	sei
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	80 93 69 00 	sts	0x0069, r24
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	80 93 6a 00 	sts	0x006A, r24
 152:	8d b3       	in	r24, 0x1d	; 29
 154:	84 62       	ori	r24, 0x24	; 36
 156:	8d bb       	out	0x1d, r24	; 29
 158:	08 95       	ret

0000015a <_ZN7encoder10Init_timerEv>:
 15a:	78 94       	sei
 15c:	85 b5       	in	r24, 0x25	; 37
 15e:	85 60       	ori	r24, 0x05	; 5
 160:	85 bd       	out	0x25, r24	; 37
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 6e 00 	sts	0x006E, r24
 168:	08 95       	ret

0000016a <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	0b b6       	in	r0, 0x3b	; 59
 176:	0f 92       	push	r0
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
 180:	00 9b       	sbis	0x00, 0	; 0
 182:	08 c0       	rjmp	.+16     	; 0x194 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
 184:	ee e0       	ldi	r30, 0x0E	; 14
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	91 83       	std	Z+1, r25	; 0x01
 190:	80 83       	st	Z, r24
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
 194:	ee e0       	ldi	r30, 0x0E	; 14
 196:	f2 e0       	ldi	r31, 0x02	; 2
 198:	80 81       	ld	r24, Z
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	91 83       	std	Z+1, r25	; 0x01
 1a0:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0b be       	out	0x3b, r0	; 59
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	0b b6       	in	r0, 0x3b	; 59
 1c4:	0f 92       	push	r0
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
 1ce:	05 9b       	sbis	0x00, 5	; 0
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
 1d2:	e6 e0       	ldi	r30, 0x06	; 6
 1d4:	f2 e0       	ldi	r31, 0x02	; 2
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	91 83       	std	Z+1, r25	; 0x01
 1de:	80 83       	st	Z, r24
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
 1e2:	e6 e0       	ldi	r30, 0x06	; 6
 1e4:	f2 e0       	ldi	r31, 0x02	; 2
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0b be       	out	0x3b, r0	; 59
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 02 02 	sts	0x0202, r24
	PidUpdateFlagLinetrackerBack = true;
 218:	80 93 04 02 	sts	0x0204, r24
	PidUpdateFlagLinetrackerFront = true;
 21c:	80 93 03 02 	sts	0x0203, r24
 
	PidUpdateFlagDriveX = true;
 220:	80 93 01 02 	sts	0x0201, r24
	PidUpdateFlagDriveY = true;
 224:	80 93 00 02 	sts	0x0200, r24
	
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <_Z6millisv>:
			ltYBack.leftedgeleft = false;
			ltYBack.rightedgeleft = false;
		}
		///////////////////////////////////////////////////////
		
		if(movingyback){
 234:	2f b7       	in	r18, 0x3f	; 63
 236:	f8 94       	cli
 238:	60 91 4b 03 	lds	r22, 0x034B
 23c:	70 91 4c 03 	lds	r23, 0x034C
 240:	80 91 4d 03 	lds	r24, 0x034D
 244:	90 91 4e 03 	lds	r25, 0x034E
 248:	2f bf       	out	0x3f, r18	; 63
 24a:	08 95       	ret

0000024c <__vector_15>:
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	80 91 4b 03 	lds	r24, 0x034B
 262:	90 91 4c 03 	lds	r25, 0x034C
 266:	a0 91 4d 03 	lds	r26, 0x034D
 26a:	b0 91 4e 03 	lds	r27, 0x034E
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	a1 1d       	adc	r26, r1
 272:	b1 1d       	adc	r27, r1
 274:	80 93 4b 03 	sts	0x034B, r24
 278:	90 93 4c 03 	sts	0x034C, r25
 27c:	a0 93 4d 03 	sts	0x034D, r26
 280:	b0 93 4e 03 	sts	0x034E, r27
 284:	80 91 47 03 	lds	r24, 0x0347
 288:	90 91 48 03 	lds	r25, 0x0348
 28c:	a0 91 49 03 	lds	r26, 0x0349
 290:	b0 91 4a 03 	lds	r27, 0x034A
 294:	03 96       	adiw	r24, 0x03	; 3
 296:	a1 1d       	adc	r26, r1
 298:	b1 1d       	adc	r27, r1
 29a:	80 93 47 03 	sts	0x0347, r24
 29e:	90 93 48 03 	sts	0x0348, r25
 2a2:	a0 93 49 03 	sts	0x0349, r26
 2a6:	b0 93 4a 03 	sts	0x034A, r27
 2aa:	80 91 47 03 	lds	r24, 0x0347
 2ae:	90 91 48 03 	lds	r25, 0x0348
 2b2:	a0 91 49 03 	lds	r26, 0x0349
 2b6:	b0 91 4a 03 	lds	r27, 0x034A
 2ba:	8d 37       	cpi	r24, 0x7D	; 125
 2bc:	91 05       	cpc	r25, r1
 2be:	a1 05       	cpc	r26, r1
 2c0:	b1 05       	cpc	r27, r1
 2c2:	38 f1       	brcs	.+78     	; 0x312 <__vector_15+0xc6>
 2c4:	80 91 47 03 	lds	r24, 0x0347
 2c8:	90 91 48 03 	lds	r25, 0x0348
 2cc:	a0 91 49 03 	lds	r26, 0x0349
 2d0:	b0 91 4a 03 	lds	r27, 0x034A
 2d4:	8d 57       	subi	r24, 0x7D	; 125
 2d6:	91 09       	sbc	r25, r1
 2d8:	a1 09       	sbc	r26, r1
 2da:	b1 09       	sbc	r27, r1
 2dc:	80 93 47 03 	sts	0x0347, r24
 2e0:	90 93 48 03 	sts	0x0348, r25
 2e4:	a0 93 49 03 	sts	0x0349, r26
 2e8:	b0 93 4a 03 	sts	0x034A, r27
 2ec:	80 91 4b 03 	lds	r24, 0x034B
 2f0:	90 91 4c 03 	lds	r25, 0x034C
 2f4:	a0 91 4d 03 	lds	r26, 0x034D
 2f8:	b0 91 4e 03 	lds	r27, 0x034E
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	a1 1d       	adc	r26, r1
 300:	b1 1d       	adc	r27, r1
 302:	80 93 4b 03 	sts	0x034B, r24
 306:	90 93 4c 03 	sts	0x034C, r25
 30a:	a0 93 4d 03 	sts	0x034D, r26
 30e:	b0 93 4e 03 	sts	0x034E, r27
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <_Z10BrakeMotorv>:
 324:	e8 e0       	ldi	r30, 0x08	; 8
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	90 81       	ld	r25, Z
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	89 27       	eor	r24, r25
 32e:	80 83       	st	Z, r24
 330:	10 92 c9 02 	sts	0x02C9, r1
 334:	10 92 c8 02 	sts	0x02C8, r1
 338:	10 92 c7 02 	sts	0x02C7, r1
 33c:	10 92 c6 02 	sts	0x02C6, r1
 340:	08 95       	ret

00000342 <_Z13initializeAllv>:
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	e3 e6       	ldi	r30, 0x63	; 99
 354:	f2 e0       	ldi	r31, 0x02	; 2
 356:	88 e2       	ldi	r24, 0x28	; 40
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	92 8b       	std	Z+18, r25	; 0x12
 35c:	81 8b       	std	Z+17, r24	; 0x11
 35e:	14 8a       	std	Z+20, r1	; 0x14
 360:	13 8a       	std	Z+19, r1	; 0x13
 362:	c5 ea       	ldi	r28, 0xA5	; 165
 364:	d2 e0       	ldi	r29, 0x02	; 2
 366:	8d e2       	ldi	r24, 0x2D	; 45
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	9f 87       	std	Y+15, r25	; 0x0f
 36c:	8e 87       	std	Y+14, r24	; 0x0e
 36e:	a4 e8       	ldi	r26, 0x84	; 132
 370:	b2 e0       	ldi	r27, 0x02	; 2
 372:	1f 96       	adiw	r26, 0x0f	; 15
 374:	9c 93       	st	X, r25
 376:	8e 93       	st	-X, r24
 378:	1e 97       	sbiw	r26, 0x0e	; 14
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	60 eb       	ldi	r22, 0xB0	; 176
 380:	70 e4       	ldi	r23, 0x40	; 64
 382:	45 8b       	std	Z+21, r20	; 0x15
 384:	56 8b       	std	Z+22, r21	; 0x16
 386:	67 8b       	std	Z+23, r22	; 0x17
 388:	70 8f       	std	Z+24, r23	; 0x18
 38a:	11 8e       	std	Z+25, r1	; 0x19
 38c:	12 8e       	std	Z+26, r1	; 0x1a
 38e:	13 8e       	std	Z+27, r1	; 0x1b
 390:	14 8e       	std	Z+28, r1	; 0x1c
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	6a ef       	ldi	r22, 0xFA	; 250
 398:	73 e4       	ldi	r23, 0x43	; 67
 39a:	45 8f       	std	Z+29, r20	; 0x1d
 39c:	56 8f       	std	Z+30, r21	; 0x1e
 39e:	67 8f       	std	Z+31, r22	; 0x1f
 3a0:	70 a3       	std	Z+32, r23	; 0x20
 3a2:	0f 2e       	mov	r0, r31
 3a4:	f1 ee       	ldi	r31, 0xE1	; 225
 3a6:	cf 2e       	mov	r12, r31
 3a8:	fa e7       	ldi	r31, 0x7A	; 122
 3aa:	df 2e       	mov	r13, r31
 3ac:	f4 e1       	ldi	r31, 0x14	; 20
 3ae:	ef 2e       	mov	r14, r31
 3b0:	ff e3       	ldi	r31, 0x3F	; 63
 3b2:	ff 2e       	mov	r15, r31
 3b4:	f0 2d       	mov	r31, r0
 3b6:	cd 8a       	std	Y+21, r12	; 0x15
 3b8:	de 8a       	std	Y+22, r13	; 0x16
 3ba:	ef 8a       	std	Y+23, r14	; 0x17
 3bc:	f8 8e       	std	Y+24, r15	; 0x18
 3be:	0d ec       	ldi	r16, 0xCD	; 205
 3c0:	1c ec       	ldi	r17, 0xCC	; 204
 3c2:	2c e4       	ldi	r18, 0x4C	; 76
 3c4:	3d e3       	ldi	r19, 0x3D	; 61
 3c6:	09 8f       	std	Y+25, r16	; 0x19
 3c8:	1a 8f       	std	Y+26, r17	; 0x1a
 3ca:	2b 8f       	std	Y+27, r18	; 0x1b
 3cc:	3c 8f       	std	Y+28, r19	; 0x1c
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	69 eb       	ldi	r22, 0xB9	; 185
 3d4:	73 e4       	ldi	r23, 0x43	; 67
 3d6:	4d 8f       	std	Y+29, r20	; 0x1d
 3d8:	5e 8f       	std	Y+30, r21	; 0x1e
 3da:	6f 8f       	std	Y+31, r22	; 0x1f
 3dc:	78 a3       	std	Y+32, r23	; 0x20
 3de:	55 96       	adiw	r26, 0x15	; 21
 3e0:	cd 92       	st	X+, r12
 3e2:	dd 92       	st	X+, r13
 3e4:	ed 92       	st	X+, r14
 3e6:	fc 92       	st	X, r15
 3e8:	58 97       	sbiw	r26, 0x18	; 24
 3ea:	59 96       	adiw	r26, 0x19	; 25
 3ec:	0d 93       	st	X+, r16
 3ee:	1d 93       	st	X+, r17
 3f0:	2d 93       	st	X+, r18
 3f2:	3c 93       	st	X, r19
 3f4:	5c 97       	sbiw	r26, 0x1c	; 28
 3f6:	5d 96       	adiw	r26, 0x1d	; 29
 3f8:	4d 93       	st	X+, r20
 3fa:	5d 93       	st	X+, r21
 3fc:	6d 93       	st	X+, r22
 3fe:	7c 93       	st	X, r23
 400:	90 97       	sbiw	r26, 0x20	; 32
 402:	e2 e4       	ldi	r30, 0x42	; 66
 404:	f2 e0       	ldi	r31, 0x02	; 2
 406:	8a e9       	ldi	r24, 0x9A	; 154
 408:	99 e9       	ldi	r25, 0x99	; 153
 40a:	a9 e1       	ldi	r26, 0x19	; 25
 40c:	be e3       	ldi	r27, 0x3E	; 62
 40e:	85 8b       	std	Z+21, r24	; 0x15
 410:	96 8b       	std	Z+22, r25	; 0x16
 412:	a7 8b       	std	Z+23, r26	; 0x17
 414:	b0 8f       	std	Z+24, r27	; 0x18
 416:	11 8e       	std	Z+25, r1	; 0x19
 418:	12 8e       	std	Z+26, r1	; 0x1a
 41a:	13 8e       	std	Z+27, r1	; 0x1b
 41c:	14 8e       	std	Z+28, r1	; 0x1c
 41e:	46 e6       	ldi	r20, 0x66	; 102
 420:	56 e6       	ldi	r21, 0x66	; 102
 422:	66 e6       	ldi	r22, 0x66	; 102
 424:	7f e3       	ldi	r23, 0x3F	; 63
 426:	45 8f       	std	Z+29, r20	; 0x1d
 428:	56 8f       	std	Z+30, r21	; 0x1e
 42a:	67 8f       	std	Z+31, r22	; 0x1f
 42c:	70 a3       	std	Z+32, r23	; 0x20
 42e:	e1 e2       	ldi	r30, 0x21	; 33
 430:	f2 e0       	ldi	r31, 0x02	; 2
 432:	85 8b       	std	Z+21, r24	; 0x15
 434:	96 8b       	std	Z+22, r25	; 0x16
 436:	a7 8b       	std	Z+23, r26	; 0x17
 438:	b0 8f       	std	Z+24, r27	; 0x18
 43a:	11 8e       	std	Z+25, r1	; 0x19
 43c:	12 8e       	std	Z+26, r1	; 0x1a
 43e:	13 8e       	std	Z+27, r1	; 0x1b
 440:	14 8e       	std	Z+28, r1	; 0x1c
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	a0 e8       	ldi	r26, 0x80	; 128
 448:	bf e3       	ldi	r27, 0x3F	; 63
 44a:	85 8f       	std	Z+29, r24	; 0x1d
 44c:	96 8f       	std	Z+30, r25	; 0x1e
 44e:	a7 8f       	std	Z+31, r26	; 0x1f
 450:	b0 a3       	std	Z+32, r27	; 0x20
 452:	f0 de       	rcall	.-544    	; 0x234 <_Z6millisv>
 454:	60 93 ca 02 	sts	0x02CA, r22
 458:	70 93 cb 02 	sts	0x02CB, r23
 45c:	80 93 cc 02 	sts	0x02CC, r24
 460:	90 93 cd 02 	sts	0x02CD, r25
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	df 90       	pop	r13
 472:	cf 90       	pop	r12
 474:	08 95       	ret

00000476 <__vector_9>:
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	0b b6       	in	r0, 0x3b	; 59
 482:	0f 92       	push	r0
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
 49c:	80 91 1f 02 	lds	r24, 0x021F
 4a0:	81 11       	cpse	r24, r1
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__vector_9+0x38>
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 1f 02 	sts	0x021F, r24
 4aa:	3c df       	rcall	.-392    	; 0x324 <_Z10BrakeMotorv>
 4ac:	20 c0       	rjmp	.+64     	; 0x4ee <__vector_9+0x78>
 4ae:	80 91 1b 02 	lds	r24, 0x021B
 4b2:	81 11       	cpse	r24, r1
 4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <__vector_9+0x4e>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	80 93 1b 02 	sts	0x021B, r24
 4bc:	80 93 4f 03 	sts	0x034F, r24
 4c0:	31 df       	rcall	.-414    	; 0x324 <_Z10BrakeMotorv>
 4c2:	15 c0       	rjmp	.+42     	; 0x4ee <__vector_9+0x78>
 4c4:	80 91 16 02 	lds	r24, 0x0216
 4c8:	81 11       	cpse	r24, r1
 4ca:	11 c0       	rjmp	.+34     	; 0x4ee <__vector_9+0x78>
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 16 02 	sts	0x0216, r24
 4d2:	28 df       	rcall	.-432    	; 0x324 <_Z10BrakeMotorv>
 4d4:	eb e6       	ldi	r30, 0x6B	; 107
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	8f 7e       	andi	r24, 0xEF	; 239
 4dc:	80 83       	st	Z, r24
 4de:	10 92 0f 02 	sts	0x020F, r1
 4e2:	10 92 0e 02 	sts	0x020E, r1
 4e6:	10 92 07 02 	sts	0x0207, r1
 4ea:	10 92 06 02 	sts	0x0206, r1
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0b be       	out	0x3b, r0	; 59
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <__vector_11>:
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	0b b6       	in	r0, 0x3b	; 59
 520:	0f 92       	push	r0
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
 53a:	80 91 1e 02 	lds	r24, 0x021E
 53e:	81 11       	cpse	r24, r1
 540:	05 c0       	rjmp	.+10     	; 0x54c <__vector_11+0x38>
 542:	f0 de       	rcall	.-544    	; 0x324 <_Z10BrakeMotorv>
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 1e 02 	sts	0x021E, r24
 54a:	3b c0       	rjmp	.+118    	; 0x5c2 <__vector_11+0xae>
 54c:	80 91 1d 02 	lds	r24, 0x021D
 550:	81 11       	cpse	r24, r1
 552:	07 c0       	rjmp	.+14     	; 0x562 <__vector_11+0x4e>
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	80 93 20 02 	sts	0x0220, r24
 55a:	80 93 1d 02 	sts	0x021D, r24
 55e:	e2 de       	rcall	.-572    	; 0x324 <_Z10BrakeMotorv>
 560:	30 c0       	rjmp	.+96     	; 0x5c2 <__vector_11+0xae>
 562:	80 91 1c 02 	lds	r24, 0x021C
 566:	81 11       	cpse	r24, r1
 568:	05 c0       	rjmp	.+10     	; 0x574 <__vector_11+0x60>
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	80 93 1c 02 	sts	0x021C, r24
 570:	d9 de       	rcall	.-590    	; 0x324 <_Z10BrakeMotorv>
 572:	27 c0       	rjmp	.+78     	; 0x5c2 <__vector_11+0xae>
 574:	80 91 1a 02 	lds	r24, 0x021A
 578:	81 11       	cpse	r24, r1
 57a:	07 c0       	rjmp	.+14     	; 0x58a <__vector_11+0x76>
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 20 02 	sts	0x0220, r24
 582:	80 93 1a 02 	sts	0x021A, r24
 586:	ce de       	rcall	.-612    	; 0x324 <_Z10BrakeMotorv>
 588:	1c c0       	rjmp	.+56     	; 0x5c2 <__vector_11+0xae>
 58a:	80 91 19 02 	lds	r24, 0x0219
 58e:	81 11       	cpse	r24, r1
 590:	05 c0       	rjmp	.+10     	; 0x59c <__vector_11+0x88>
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	80 93 19 02 	sts	0x0219, r24
 598:	c5 de       	rcall	.-630    	; 0x324 <_Z10BrakeMotorv>
 59a:	13 c0       	rjmp	.+38     	; 0x5c2 <__vector_11+0xae>
 59c:	80 91 18 02 	lds	r24, 0x0218
 5a0:	81 11       	cpse	r24, r1
 5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <__vector_11+0x9e>
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	80 93 20 02 	sts	0x0220, r24
 5aa:	80 93 18 02 	sts	0x0218, r24
 5ae:	ba de       	rcall	.-652    	; 0x324 <_Z10BrakeMotorv>
 5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <__vector_11+0xae>
 5b2:	80 91 17 02 	lds	r24, 0x0217
 5b6:	81 11       	cpse	r24, r1
 5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <__vector_11+0xae>
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 17 02 	sts	0x0217, r24
 5c0:	b1 de       	rcall	.-670    	; 0x324 <_Z10BrakeMotorv>
 5c2:	ff 91       	pop	r31
 5c4:	ef 91       	pop	r30
 5c6:	bf 91       	pop	r27
 5c8:	af 91       	pop	r26
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	7f 91       	pop	r23
 5d0:	6f 91       	pop	r22
 5d2:	5f 91       	pop	r21
 5d4:	4f 91       	pop	r20
 5d6:	3f 91       	pop	r19
 5d8:	2f 91       	pop	r18
 5da:	0f 90       	pop	r0
 5dc:	0b be       	out	0x3b, r0	; 59
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <main>:


int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
 	INPUT(SHUTTLECOCKPIN);
 5e8:	ca e0       	ldi	r28, 0x0A	; 10
 5ea:	d1 e0       	ldi	r29, 0x01	; 1
 5ec:	88 81       	ld	r24, Y
 5ee:	8f 7e       	andi	r24, 0xEF	; 239
 5f0:	88 83       	st	Y, r24
 	INPUT(ZONEPIN);
 5f2:	88 81       	ld	r24, Y
 5f4:	8f 7b       	andi	r24, 0xBF	; 191
 5f6:	88 83       	st	Y, r24
  	SET(SHUTTLECOCKPIN);
 5f8:	eb e0       	ldi	r30, 0x0B	; 11
 5fa:	f1 e0       	ldi	r31, 0x01	; 1
 5fc:	80 81       	ld	r24, Z
 5fe:	80 61       	ori	r24, 0x10	; 16
 600:	80 83       	st	Z, r24
  	SET(ZONEPIN);
 602:	80 81       	ld	r24, Z
 604:	80 64       	ori	r24, 0x40	; 64
 606:	80 83       	st	Z, r24
 	///////PULL DOWN RACK PIN 
 	INPUT(RACKPIN);
 608:	85 98       	cbi	0x10, 5	; 16
 	CLEAR(RACKPIN);
 60a:	8d 98       	cbi	0x11, 5	; 17
 	INPUT(RIGHT_LIMIT_SW);
 60c:	81 98       	cbi	0x10, 1	; 16
 	INPUT(LEFT_LIMIT_SW);
 60e:	82 98       	cbi	0x10, 2	; 16
 	SET(RIGHT_LIMIT_SW);
 610:	89 9a       	sbi	0x11, 1	; 17
 	SET(LEFT_LIMIT_SW);
 612:	8a 9a       	sbi	0x11, 2	; 17
 	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
 	DDRK |= (1<<PK0);
 614:	07 e0       	ldi	r16, 0x07	; 7
 616:	11 e0       	ldi	r17, 0x01	; 1
 618:	f8 01       	movw	r30, r16
 61a:	80 81       	ld	r24, Z
 61c:	81 60       	ori	r24, 0x01	; 1
 61e:	80 83       	st	Z, r24
 	PORTK &= ~(1<<PK0); 
 620:	e8 e0       	ldi	r30, 0x08	; 8
 622:	f1 e0       	ldi	r31, 0x01	; 1
 624:	80 81       	ld	r24, Z
 626:	8e 7f       	andi	r24, 0xFE	; 254
 628:	80 83       	st	Z, r24
 	/// INITIALIZE ALL THE UART
 	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
 62a:	87 e6       	ldi	r24, 0x67	; 103
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	03 d1       	rcall	.+518    	; 0x836 <_Z10uart0_initj>
 	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
 630:	89 e1       	ldi	r24, 0x19	; 25
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	b4 d1       	rcall	.+872    	; 0x99e <_Z10uart2_initj>
 	uart3_init(UART_BAUD_SELECT(9600,F_CPU));
 636:	87 e6       	ldi	r24, 0x67	; 103
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	27 d2       	rcall	.+1102   	; 0xa8a <_Z10uart3_initj>
 	//INITIALIZE EVERYTHING ELSE
 	initializeAll();
 63c:	82 de       	rcall	.-764    	; 0x342 <_Z13initializeAllv>
 	sei();
 63e:	78 94       	sei
	DDRB |= (1<<PB7);
 640:	27 9a       	sbi	0x04, 7	; 4
	DDRK = 0XFF;
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	f8 01       	movw	r30, r16
 646:	80 83       	st	Z, r24
	DDRL = 0x00;
 648:	18 82       	st	Y, r1
	
	DDRF = 0X00;
 64a:	10 ba       	out	0x10, r1	; 16
	PORTF = 0xff;
 64c:	81 bb       	out	0x11, r24	; 17
	//while(READ(STARTPIN));
    while (1) 
    {
		
		
		PORTK = 0xff;
 64e:	e8 e0       	ldi	r30, 0x08	; 8
 650:	f1 e0       	ldi	r31, 0x01	; 1
 652:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 654:	2f ef       	ldi	r18, 0xFF	; 255
 656:	37 ea       	ldi	r19, 0xA7	; 167
 658:	91 e6       	ldi	r25, 0x61	; 97
 65a:	21 50       	subi	r18, 0x01	; 1
 65c:	30 40       	sbci	r19, 0x00	; 0
 65e:	90 40       	sbci	r25, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <main+0x72>
 662:	00 c0       	rjmp	.+0      	; 0x664 <main+0x7c>
 664:	00 00       	nop
//  			PORTB |= (1<<PB7);
 			_delay_ms(2000);
// 			PORTB = 0x00;
 			PORTK = 0X00;
 666:	10 82       	st	Z, r1
 668:	2f ef       	ldi	r18, 0xFF	; 255
 66a:	37 ea       	ldi	r19, 0xA7	; 167
 66c:	91 e6       	ldi	r25, 0x61	; 97
 66e:	21 50       	subi	r18, 0x01	; 1
 670:	30 40       	sbci	r19, 0x00	; 0
 672:	90 40       	sbci	r25, 0x00	; 0
 674:	e1 f7       	brne	.-8      	; 0x66e <main+0x86>
 676:	00 c0       	rjmp	.+0      	; 0x678 <main+0x90>
 678:	00 00       	nop
 67a:	eb cf       	rjmp	.-42     	; 0x652 <main+0x6a>

0000067c <_GLOBAL__sub_I_compassPID>:
#include "hmccompass.h"
#include "MPU6050.h"
#include "General-function.h"


static MPU6050 mpu;
 67c:	8e ec       	ldi	r24, 0xCE	; 206
 67e:	92 e0       	ldi	r25, 0x02	; 2
 680:	2f d0       	rcall	.+94     	; 0x6e0 <_ZN7MPU6050C1Ev>
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
 682:	e5 ea       	ldi	r30, 0xA5	; 165
 684:	f2 e0       	ldi	r31, 0x02	; 2
 686:	10 86       	std	Z+8, r1	; 0x08
 688:	11 86       	std	Z+9, r1	; 0x09
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 8b       	std	Z+16, r24	; 0x10
 68e:	e4 e8       	ldi	r30, 0x84	; 132
 690:	f2 e0       	ldi	r31, 0x02	; 2
 692:	10 86       	std	Z+8, r1	; 0x08
 694:	11 86       	std	Z+9, r1	; 0x09
 696:	80 8b       	std	Z+16, r24	; 0x10
 698:	e3 e6       	ldi	r30, 0x63	; 99
 69a:	f2 e0       	ldi	r31, 0x02	; 2
 69c:	10 86       	std	Z+8, r1	; 0x08
 69e:	11 86       	std	Z+9, r1	; 0x09
 6a0:	80 8b       	std	Z+16, r24	; 0x10
 6a2:	e2 e4       	ldi	r30, 0x42	; 66
 6a4:	f2 e0       	ldi	r31, 0x02	; 2
 6a6:	10 86       	std	Z+8, r1	; 0x08
 6a8:	11 86       	std	Z+9, r1	; 0x09
 6aa:	80 8b       	std	Z+16, r24	; 0x10
 6ac:	e1 e2       	ldi	r30, 0x21	; 33
 6ae:	f2 e0       	ldi	r31, 0x02	; 2
 6b0:	10 86       	std	Z+8, r1	; 0x08
 6b2:	11 86       	std	Z+9, r1	; 0x09
 6b4:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
 6b6:	10 92 0f 02 	sts	0x020F, r1
 6ba:	10 92 0e 02 	sts	0x020E, r1
			Init_encoder_interrupt();
 6be:	8e e0       	ldi	r24, 0x0E	; 14
 6c0:	92 e0       	ldi	r25, 0x02	; 2
 6c2:	40 dd       	rcall	.-1408   	; 0x144 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
 6c4:	8e e0       	ldi	r24, 0x0E	; 14
 6c6:	92 e0       	ldi	r25, 0x02	; 2
 6c8:	48 dd       	rcall	.-1392   	; 0x15a <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
 6ca:	10 92 07 02 	sts	0x0207, r1
 6ce:	10 92 06 02 	sts	0x0206, r1
			Init_encoder_interrupt();
 6d2:	86 e0       	ldi	r24, 0x06	; 6
 6d4:	92 e0       	ldi	r25, 0x02	; 2
 6d6:	36 dd       	rcall	.-1428   	; 0x144 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
 6d8:	86 e0       	ldi	r24, 0x06	; 6
 6da:	92 e0       	ldi	r25, 0x02	; 2
 6dc:	3e cd       	rjmp	.-1412   	; 0x15a <_ZN7encoder10Init_timerEv>
 6de:	08 95       	ret

000006e0 <_ZN7MPU6050C1Ev>:
#include "MPU6050.h"
#include "TWI.h"
#include "MPU6050_res_define.h"
#include <util/delay.h>

MPU6050::MPU6050(){
 6e0:	fc 01       	movw	r30, r24
	// Reset calibrate values
	dg.XAxis = 0;
 6e2:	14 ae       	std	Z+60, r1	; 0x3c
 6e4:	15 ae       	std	Z+61, r1	; 0x3d
 6e6:	16 ae       	std	Z+62, r1	; 0x3e
 6e8:	17 ae       	std	Z+63, r1	; 0x3f
	dg.YAxis = 0;
 6ea:	dc 01       	movw	r26, r24
 6ec:	a0 5c       	subi	r26, 0xC0	; 192
 6ee:	bf 4f       	sbci	r27, 0xFF	; 255
 6f0:	1d 92       	st	X+, r1
 6f2:	1d 92       	st	X+, r1
 6f4:	1d 92       	st	X+, r1
 6f6:	1c 92       	st	X, r1
 6f8:	13 97       	sbiw	r26, 0x03	; 3
	dg.ZAxis = 0;
 6fa:	14 96       	adiw	r26, 0x04	; 4
 6fc:	1d 92       	st	X+, r1
 6fe:	1d 92       	st	X+, r1
 700:	1d 92       	st	X+, r1
 702:	1c 92       	st	X, r1
 704:	13 97       	sbiw	r26, 0x03	; 3
	useCalibrate = false;
 706:	d4 96       	adiw	r26, 0x34	; 52
 708:	1c 92       	st	X, r1
	//reset calibration offset for accelero//
	offsetAccelero.XAxis = 0;
 70a:	d0 97       	sbiw	r26, 0x30	; 48
 70c:	1d 92       	st	X+, r1
 70e:	1d 92       	st	X+, r1
 710:	1d 92       	st	X+, r1
 712:	1c 92       	st	X, r1
 714:	13 97       	sbiw	r26, 0x03	; 3
	offsetAccelero.YAxis = 0;
 716:	14 96       	adiw	r26, 0x04	; 4
 718:	1d 92       	st	X+, r1
 71a:	1d 92       	st	X+, r1
 71c:	1d 92       	st	X+, r1
 71e:	1c 92       	st	X, r1
 720:	13 97       	sbiw	r26, 0x03	; 3
	offsetAccelero.ZAxis = 0;
 722:	14 96       	adiw	r26, 0x04	; 4
 724:	1d 92       	st	X+, r1
 726:	1d 92       	st	X+, r1
 728:	1d 92       	st	X+, r1
 72a:	1c 92       	st	X, r1
 72c:	13 97       	sbiw	r26, 0x03	; 3

	// Reset threshold values
	tg.XAxis = 0;
 72e:	10 aa       	std	Z+48, r1	; 0x30
 730:	11 aa       	std	Z+49, r1	; 0x31
 732:	12 aa       	std	Z+50, r1	; 0x32
 734:	13 aa       	std	Z+51, r1	; 0x33
	tg.YAxis = 0;
 736:	14 aa       	std	Z+52, r1	; 0x34
 738:	15 aa       	std	Z+53, r1	; 0x35
 73a:	16 aa       	std	Z+54, r1	; 0x36
 73c:	17 aa       	std	Z+55, r1	; 0x37
	tg.ZAxis = 0;
 73e:	10 ae       	std	Z+56, r1	; 0x38
 740:	11 ae       	std	Z+57, r1	; 0x39
 742:	12 ae       	std	Z+58, r1	; 0x3a
 744:	13 ae       	std	Z+59, r1	; 0x3b
	actualThreshold = 0;
 746:	94 96       	adiw	r26, 0x24	; 36
 748:	1d 92       	st	X+, r1
 74a:	1d 92       	st	X+, r1
 74c:	1d 92       	st	X+, r1
 74e:	1c 92       	st	X, r1
 750:	13 97       	sbiw	r26, 0x03	; 3
	//0.007633f for 250dps,0.015267 for 500dps, 0.030487f for 1000 dps , 0.060975f for 2000dps
	dpsPerDigit = .007633f;			//for 250DPS
 752:	18 97       	sbiw	r26, 0x08	; 8
 754:	4f e3       	ldi	r20, 0x3F	; 63
 756:	5e e1       	ldi	r21, 0x1E	; 30
 758:	6a ef       	ldi	r22, 0xFA	; 250
 75a:	7b e3       	ldi	r23, 0x3B	; 59
 75c:	4d 93       	st	X+, r20
 75e:	5d 93       	st	X+, r21
 760:	6d 93       	st	X+, r22
 762:	7c 93       	st	X, r23
 764:	13 97       	sbiw	r26, 0x03	; 3
	// 0.000061f for 2g, 0.000122f for 4g, 0.000244f for 8g , 0.0004882f for 16g
	rangePerDigit = .000061f;		//for 2G RANGE
 766:	e0 59       	subi	r30, 0x90	; 144
 768:	ff 4f       	sbci	r31, 0xFF	; 255
 76a:	80 e4       	ldi	r24, 0x40	; 64
 76c:	9a ed       	ldi	r25, 0xDA	; 218
 76e:	af e7       	ldi	r26, 0x7F	; 127
 770:	b8 e3       	ldi	r27, 0x38	; 56
 772:	80 83       	st	Z, r24
 774:	91 83       	std	Z+1, r25	; 0x01
 776:	a2 83       	std	Z+2, r26	; 0x02
 778:	b3 83       	std	Z+3, r27	; 0x03
 77a:	08 95       	ret

0000077c <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
 77c:	1f 92       	push	r1
 77e:	0f 92       	push	r0
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	0f 92       	push	r0
 784:	11 24       	eor	r1, r1
 786:	0b b6       	in	r0, 0x3b	; 59
 788:	0f 92       	push	r0
 78a:	2f 93       	push	r18
 78c:	8f 93       	push	r24
 78e:	9f 93       	push	r25
 790:	ef 93       	push	r30
 792:	ff 93       	push	r31
 794:	80 91 c0 00 	lds	r24, 0x00C0
 798:	20 91 c6 00 	lds	r18, 0x00C6
 79c:	88 71       	andi	r24, 0x18	; 24
 79e:	e0 91 00 04 	lds	r30, 0x0400
 7a2:	ef 5f       	subi	r30, 0xFF	; 255
 7a4:	ef 71       	andi	r30, 0x1F	; 31
 7a6:	90 91 ff 03 	lds	r25, 0x03FF
 7aa:	e9 17       	cp	r30, r25
 7ac:	39 f0       	breq	.+14     	; 0x7bc <__vector_25+0x40>
 7ae:	e0 93 00 04 	sts	0x0400, r30
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	ed 5f       	subi	r30, 0xFD	; 253
 7b6:	fb 4f       	sbci	r31, 0xFB	; 251
 7b8:	20 83       	st	Z, r18
 7ba:	01 c0       	rjmp	.+2      	; 0x7be <__vector_25+0x42>
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	80 93 fe 03 	sts	0x03FE, r24
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	9f 91       	pop	r25
 7c8:	8f 91       	pop	r24
 7ca:	2f 91       	pop	r18
 7cc:	0f 90       	pop	r0
 7ce:	0b be       	out	0x3b, r0	; 59
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <__vector_26>:
 7da:	1f 92       	push	r1
 7dc:	0f 92       	push	r0
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	0f 92       	push	r0
 7e2:	11 24       	eor	r1, r1
 7e4:	0b b6       	in	r0, 0x3b	; 59
 7e6:	0f 92       	push	r0
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	ef 93       	push	r30
 7ee:	ff 93       	push	r31
 7f0:	90 91 02 04 	lds	r25, 0x0402
 7f4:	80 91 01 04 	lds	r24, 0x0401
 7f8:	98 17       	cp	r25, r24
 7fa:	69 f0       	breq	.+26     	; 0x816 <__vector_26+0x3c>
 7fc:	e0 91 01 04 	lds	r30, 0x0401
 800:	ef 5f       	subi	r30, 0xFF	; 255
 802:	ef 71       	andi	r30, 0x1F	; 31
 804:	e0 93 01 04 	sts	0x0401, r30
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	ed 5d       	subi	r30, 0xDD	; 221
 80c:	fb 4f       	sbci	r31, 0xFB	; 251
 80e:	80 81       	ld	r24, Z
 810:	80 93 c6 00 	sts	0x00C6, r24
 814:	05 c0       	rjmp	.+10     	; 0x820 <__vector_26+0x46>
 816:	e1 ec       	ldi	r30, 0xC1	; 193
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	8f 7d       	andi	r24, 0xDF	; 223
 81e:	80 83       	st	Z, r24
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	0f 90       	pop	r0
 82a:	0b be       	out	0x3b, r0	; 59
 82c:	0f 90       	pop	r0
 82e:	0f be       	out	0x3f, r0	; 63
 830:	0f 90       	pop	r0
 832:	1f 90       	pop	r1
 834:	18 95       	reti

00000836 <_Z10uart0_initj>:
 836:	10 92 02 04 	sts	0x0402, r1
 83a:	10 92 01 04 	sts	0x0401, r1
 83e:	10 92 00 04 	sts	0x0400, r1
 842:	10 92 ff 03 	sts	0x03FF, r1
 846:	99 23       	and	r25, r25
 848:	24 f4       	brge	.+8      	; 0x852 <_Z10uart0_initj+0x1c>
 84a:	22 e0       	ldi	r18, 0x02	; 2
 84c:	20 93 c0 00 	sts	0x00C0, r18
 850:	9f 77       	andi	r25, 0x7F	; 127
 852:	90 93 c5 00 	sts	0x00C5, r25
 856:	80 93 c4 00 	sts	0x00C4, r24
 85a:	88 e9       	ldi	r24, 0x98	; 152
 85c:	80 93 c1 00 	sts	0x00C1, r24
 860:	86 e0       	ldi	r24, 0x06	; 6
 862:	80 93 c2 00 	sts	0x00C2, r24
 866:	08 95       	ret

00000868 <__vector_36>:
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	0b b6       	in	r0, 0x3b	; 59
 874:	0f 92       	push	r0
 876:	2f 93       	push	r18
 878:	8f 93       	push	r24
 87a:	9f 93       	push	r25
 87c:	ef 93       	push	r30
 87e:	ff 93       	push	r31
 880:	80 91 c8 00 	lds	r24, 0x00C8
 884:	20 91 ce 00 	lds	r18, 0x00CE
 888:	88 71       	andi	r24, 0x18	; 24
 88a:	e0 91 bb 03 	lds	r30, 0x03BB
 88e:	ef 5f       	subi	r30, 0xFF	; 255
 890:	ef 71       	andi	r30, 0x1F	; 31
 892:	90 91 ba 03 	lds	r25, 0x03BA
 896:	e9 17       	cp	r30, r25
 898:	39 f0       	breq	.+14     	; 0x8a8 <__vector_36+0x40>
 89a:	e0 93 bb 03 	sts	0x03BB, r30
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	e2 54       	subi	r30, 0x42	; 66
 8a2:	fc 4f       	sbci	r31, 0xFC	; 252
 8a4:	20 83       	st	Z, r18
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__vector_36+0x42>
 8a8:	82 e0       	ldi	r24, 0x02	; 2
 8aa:	80 93 b9 03 	sts	0x03B9, r24
 8ae:	ff 91       	pop	r31
 8b0:	ef 91       	pop	r30
 8b2:	9f 91       	pop	r25
 8b4:	8f 91       	pop	r24
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0b be       	out	0x3b, r0	; 59
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <__vector_37>:
 8c6:	1f 92       	push	r1
 8c8:	0f 92       	push	r0
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	0f 92       	push	r0
 8ce:	11 24       	eor	r1, r1
 8d0:	0b b6       	in	r0, 0x3b	; 59
 8d2:	0f 92       	push	r0
 8d4:	8f 93       	push	r24
 8d6:	9f 93       	push	r25
 8d8:	ef 93       	push	r30
 8da:	ff 93       	push	r31
 8dc:	90 91 bd 03 	lds	r25, 0x03BD
 8e0:	80 91 bc 03 	lds	r24, 0x03BC
 8e4:	98 17       	cp	r25, r24
 8e6:	69 f0       	breq	.+26     	; 0x902 <__vector_37+0x3c>
 8e8:	e0 91 bc 03 	lds	r30, 0x03BC
 8ec:	ef 5f       	subi	r30, 0xFF	; 255
 8ee:	ef 71       	andi	r30, 0x1F	; 31
 8f0:	e0 93 bc 03 	sts	0x03BC, r30
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	e2 52       	subi	r30, 0x22	; 34
 8f8:	fc 4f       	sbci	r31, 0xFC	; 252
 8fa:	80 81       	ld	r24, Z
 8fc:	80 93 ce 00 	sts	0x00CE, r24
 900:	05 c0       	rjmp	.+10     	; 0x90c <__vector_37+0x46>
 902:	e9 ec       	ldi	r30, 0xC9	; 201
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	80 81       	ld	r24, Z
 908:	8f 7d       	andi	r24, 0xDF	; 223
 90a:	80 83       	st	Z, r24
 90c:	ff 91       	pop	r31
 90e:	ef 91       	pop	r30
 910:	9f 91       	pop	r25
 912:	8f 91       	pop	r24
 914:	0f 90       	pop	r0
 916:	0b be       	out	0x3b, r0	; 59
 918:	0f 90       	pop	r0
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	0f 90       	pop	r0
 91e:	1f 90       	pop	r1
 920:	18 95       	reti

00000922 <__vector_51>:
 922:	1f 92       	push	r1
 924:	0f 92       	push	r0
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	0f 92       	push	r0
 92a:	11 24       	eor	r1, r1
 92c:	8f 93       	push	r24
 92e:	80 91 d6 00 	lds	r24, 0x00D6
 932:	80 93 43 04 	sts	0x0443, r24
 936:	8f 91       	pop	r24
 938:	0f 90       	pop	r0
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	0f 90       	pop	r0
 93e:	1f 90       	pop	r1
 940:	18 95       	reti

00000942 <__vector_52>:
 942:	1f 92       	push	r1
 944:	0f 92       	push	r0
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	0f 92       	push	r0
 94a:	11 24       	eor	r1, r1
 94c:	0b b6       	in	r0, 0x3b	; 59
 94e:	0f 92       	push	r0
 950:	8f 93       	push	r24
 952:	9f 93       	push	r25
 954:	ef 93       	push	r30
 956:	ff 93       	push	r31
 958:	90 91 98 03 	lds	r25, 0x0398
 95c:	80 91 97 03 	lds	r24, 0x0397
 960:	98 17       	cp	r25, r24
 962:	69 f0       	breq	.+26     	; 0x97e <__vector_52+0x3c>
 964:	e0 91 97 03 	lds	r30, 0x0397
 968:	ef 5f       	subi	r30, 0xFF	; 255
 96a:	ef 71       	andi	r30, 0x1F	; 31
 96c:	e0 93 97 03 	sts	0x0397, r30
 970:	f0 e0       	ldi	r31, 0x00	; 0
 972:	e7 56       	subi	r30, 0x67	; 103
 974:	fc 4f       	sbci	r31, 0xFC	; 252
 976:	80 81       	ld	r24, Z
 978:	80 93 d6 00 	sts	0x00D6, r24
 97c:	05 c0       	rjmp	.+10     	; 0x988 <__vector_52+0x46>
 97e:	e1 ed       	ldi	r30, 0xD1	; 209
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	8f 7d       	andi	r24, 0xDF	; 223
 986:	80 83       	st	Z, r24
 988:	ff 91       	pop	r31
 98a:	ef 91       	pop	r30
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	0f 90       	pop	r0
 992:	0b be       	out	0x3b, r0	; 59
 994:	0f 90       	pop	r0
 996:	0f be       	out	0x3f, r0	; 63
 998:	0f 90       	pop	r0
 99a:	1f 90       	pop	r1
 99c:	18 95       	reti

0000099e <_Z10uart2_initj>:
 99e:	10 92 98 03 	sts	0x0398, r1
 9a2:	10 92 97 03 	sts	0x0397, r1
 9a6:	10 92 96 03 	sts	0x0396, r1
 9aa:	10 92 95 03 	sts	0x0395, r1
 9ae:	99 23       	and	r25, r25
 9b0:	24 f4       	brge	.+8      	; 0x9ba <_Z10uart2_initj+0x1c>
 9b2:	22 e0       	ldi	r18, 0x02	; 2
 9b4:	20 93 d0 00 	sts	0x00D0, r18
 9b8:	9f 77       	andi	r25, 0x7F	; 127
 9ba:	90 93 d5 00 	sts	0x00D5, r25
 9be:	80 93 d4 00 	sts	0x00D4, r24
 9c2:	88 e9       	ldi	r24, 0x98	; 152
 9c4:	80 93 d1 00 	sts	0x00D1, r24
 9c8:	86 e0       	ldi	r24, 0x06	; 6
 9ca:	80 93 d2 00 	sts	0x00D2, r24
 9ce:	08 95       	ret

000009d0 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
 9d0:	1f 92       	push	r1
 9d2:	0f 92       	push	r0
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	0f 92       	push	r0
 9d8:	11 24       	eor	r1, r1
 9da:	0b b6       	in	r0, 0x3b	; 59
 9dc:	0f 92       	push	r0
 9de:	2f 93       	push	r18
 9e0:	8f 93       	push	r24
 9e2:	9f 93       	push	r25
 9e4:	ef 93       	push	r30
 9e6:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
 9e8:	80 91 30 01 	lds	r24, 0x0130
	data = UART3_DATA;
 9ec:	20 91 36 01 	lds	r18, 0x0136
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
 9f0:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
 9f2:	e0 91 52 03 	lds	r30, 0x0352
 9f6:	ef 5f       	subi	r30, 0xFF	; 255
 9f8:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
 9fa:	90 91 51 03 	lds	r25, 0x0351
 9fe:	e9 17       	cp	r30, r25
 a00:	39 f0       	breq	.+14     	; 0xa10 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
 a02:	e0 93 52 03 	sts	0x0352, r30
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	eb 5a       	subi	r30, 0xAB	; 171
 a0a:	fc 4f       	sbci	r31, 0xFC	; 252
 a0c:	20 83       	st	Z, r18
 a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 a10:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
 a12:	80 93 50 03 	sts	0x0350, r24
}
 a16:	ff 91       	pop	r31
 a18:	ef 91       	pop	r30
 a1a:	9f 91       	pop	r25
 a1c:	8f 91       	pop	r24
 a1e:	2f 91       	pop	r18
 a20:	0f 90       	pop	r0
 a22:	0b be       	out	0x3b, r0	; 59
 a24:	0f 90       	pop	r0
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	0f 90       	pop	r0
 a2a:	1f 90       	pop	r1
 a2c:	18 95       	reti

00000a2e <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
 a2e:	1f 92       	push	r1
 a30:	0f 92       	push	r0
 a32:	0f b6       	in	r0, 0x3f	; 63
 a34:	0f 92       	push	r0
 a36:	11 24       	eor	r1, r1
 a38:	0b b6       	in	r0, 0x3b	; 59
 a3a:	0f 92       	push	r0
 a3c:	8f 93       	push	r24
 a3e:	9f 93       	push	r25
 a40:	ef 93       	push	r30
 a42:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
 a44:	90 91 54 03 	lds	r25, 0x0354
 a48:	80 91 53 03 	lds	r24, 0x0353
 a4c:	98 17       	cp	r25, r24
 a4e:	69 f0       	breq	.+26     	; 0xa6a <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
 a50:	e0 91 53 03 	lds	r30, 0x0353
 a54:	ef 5f       	subi	r30, 0xFF	; 255
 a56:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
 a58:	e0 93 53 03 	sts	0x0353, r30
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	eb 58       	subi	r30, 0x8B	; 139
 a60:	fc 4f       	sbci	r31, 0xFC	; 252
 a62:	80 81       	ld	r24, Z
 a64:	80 93 36 01 	sts	0x0136, r24
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
 a6a:	e1 e3       	ldi	r30, 0x31	; 49
 a6c:	f1 e0       	ldi	r31, 0x01	; 1
 a6e:	80 81       	ld	r24, Z
 a70:	8f 7d       	andi	r24, 0xDF	; 223
 a72:	80 83       	st	Z, r24
	}
}
 a74:	ff 91       	pop	r31
 a76:	ef 91       	pop	r30
 a78:	9f 91       	pop	r25
 a7a:	8f 91       	pop	r24
 a7c:	0f 90       	pop	r0
 a7e:	0b be       	out	0x3b, r0	; 59
 a80:	0f 90       	pop	r0
 a82:	0f be       	out	0x3f, r0	; 63
 a84:	0f 90       	pop	r0
 a86:	1f 90       	pop	r1
 a88:	18 95       	reti

00000a8a <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
 a8a:	10 92 54 03 	sts	0x0354, r1
	UART3_TxTail = 0;
 a8e:	10 92 53 03 	sts	0x0353, r1
	UART3_RxHead = 0;
 a92:	10 92 52 03 	sts	0x0352, r1
	UART3_RxTail = 0;
 a96:	10 92 51 03 	sts	0x0351, r1


	/* Set baud rate */
	if (baudrate & 0x8000)
 a9a:	99 23       	and	r25, r25
 a9c:	24 f4       	brge	.+8      	; 0xaa6 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
 a9e:	26 e0       	ldi	r18, 0x06	; 6
 aa0:	20 93 30 01 	sts	0x0130, r18
		baudrate &= ~0x8000;
 aa4:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
 aa6:	90 93 35 01 	sts	0x0135, r25
	UBRR3L = (unsigned char)baudrate;
 aaa:	80 93 34 01 	sts	0x0134, r24

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
 aae:	88 e9       	ldi	r24, 0x98	; 152
 ab0:	80 93 31 01 	sts	0x0131, r24

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
 ab4:	86 e0       	ldi	r24, 0x06	; 6
 ab6:	80 93 32 01 	sts	0x0132, r24
 aba:	08 95       	ret

00000abc <__tablejump2__>:
 abc:	ee 0f       	add	r30, r30
 abe:	ff 1f       	adc	r31, r31
 ac0:	88 1f       	adc	r24, r24
 ac2:	8b bf       	out	0x3b, r24	; 59
 ac4:	07 90       	elpm	r0, Z+
 ac6:	f6 91       	elpm	r31, Z
 ac8:	e0 2d       	mov	r30, r0
 aca:	19 94       	eijmp

00000acc <_exit>:
 acc:	f8 94       	cli

00000ace <__stop_program>:
 ace:	ff cf       	rjmp	.-2      	; 0xace <__stop_program>
